======= README.md ======
# m1f - Make One File 🚀

**Because your AI assistant deserves the full story, not just fragments.**

## You know that moment when...

...you're trying to get Claude, ChatGPT, or Gemini to help with your codebase,
and you realize you'd need to upload 500+ files individually? Yeah, we've been
there.

Or when you're excited about Tailwind CSS 4, but your AI is stuck in 2024 and
keeps suggesting v3 syntax? Frustrating, right?

**That's why we built m1f.**

## The Big Idea 💡

m1f transforms your sprawling codebase into AI-ready context bundles. One
command, and suddenly your entire project – thousands of files, millions of
lines – becomes a single, perfectly formatted file that any AI can digest.

```bash
# Turn this nightmare...
src/
├── components/     (247 files)
├── utils/          (89 files)
├── services/       (156 files)
└── ... (and 2000 more)

# Into this dream:
m1f/
├── project_complete.txt    ← Your entire codebase
├── project_docs.txt        ← Just the docs
└── custom_bundles/         ← Whatever you need
```

## Get Started in 30 Seconds

Works on Linux, macOS, and Windows. Because we don't discriminate.

```bash
# 1. Clone it
git clone https://github.com/franz-agency/m1f.git
cd m1f

# 2. Install it
source ./scripts/install.sh    # Linux/macOS
.\scripts\install.ps1          # Windows (restart your terminal)

# 3. Use it
cd /your/amazing/project
m1f-init

# 💥 Boom! Your AI just became a project expert.
```

## Why This Changes Everything

### The Problem We All Face

Modern software isn't just code anymore. It's:

- 📁 Hundreds of source files across dozens of directories
- 📚 Documentation scattered everywhere
- ⚙️ Config files in every flavor (JSON, YAML, TOML, you name it)
- 🔧 Build scripts, test files, deployment configs
- 🎨 Assets, styles, templates

**You can't just "upload a project" to AI.** Until now.

### The m1f Solution

We didn't just build a file concatenator. We built an intelligent context
creator that:

#### 🧠 Thinks Like a Developer

- Respects your `.gitignore` (because `node_modules` shouldn't go to AI)
- Deduplicates files automatically (why send the same content twice?)
- Handles symlinks properly (no infinite loops here)
- Detects secrets before they leak (your AWS keys are safe)

#### 🚀 Works at Scale

- Async everything (because waiting is so 2010)
- Streaming processing (10GB repo? No problem)

#### 🔒 Security First

- Automatic secret scanning with
  [`detect-secrets`](https://github.com/Yelp/detect-secrets)
- No passwords, API keys, or tokens in your AI conversations
- Path traversal protection (hackers hate this one trick)

## Real Magic: Teaching AI New Tricks ✨

Here's where it gets really cool. Your AI has a knowledge cutoff, but your
projects don't wait. When Tailwind CSS 4 drops and Claude is still thinking v3,
here's what you do:

```bash
# 1. Grab the latest docs
git clone https://github.com/tailwindlabs/tailwindcss.com
cd tailwindcss.com

# 2. Create AI brain food
m1f-init
# Creates: m1f/tailwind_complete.txt and m1f/tailwind_docs.txt

# 3. Get fancy with topic bundles (optional but awesome)
m1f-claude --setup
# AI analyzes and creates:
# - m1f/tailwind_utilities.txt
# - m1f/tailwind_components.txt
# - m1f/tailwind_configuration.txt

# 4. Link to your project
cd ~/your-awesome-project
ln -s ~/tailwindcss.com/m1f/tailwind_docs.txt m1f/

# 5. Blow your AI's mind
# "Hey @m1f/tailwind_docs.txt, show me how to use the new v4 grid system"
# *AI proceeds to give you perfect v4 code*
```

## The Complete Toolkit 🛠️

### m1f

The core bundler. Smart, fast, and secure.

```bash
m1f -s ./src -o context.txt --preset code-review
```

### m1f-init

One command to rule them all. Analyzes your project and creates instant bundles.

```bash
m1f-init  # That's it. Seriously.
```

### m1f-claude

The ultimate meta tool: Controls Claude Code headlessly and automatically
includes m1f's complete documentation in every prompt. This means Claude knows
ALL m1f parameters and features without you explaining anything.

```bash
# Ask Claude to create custom bundles for you
m1f-claude "Create bundles for my React project, separate frontend and backend"

# Claude now operates m1f for you with full knowledge
m1f-claude "Bundle only TypeScript files modified in the last week"

# Advanced project setup with AI-organized topics
m1f-claude --setup  # Claude analyzes your project and creates topic bundles
```

Since m1f-claude feeds the complete m1f documentation to Claude automatically,
you can ask it to do anything m1f can do - it's like having an expert m1f user
as your assistant.

### m1f-s1f (Split One File)

When AI generates that perfect codebase and you need real files back.

```bash
m1f-s1f -i ai-generated-magic.txt -d ./actual-files/
```

### m1f-scrape

Because not all docs live in git repos.

```bash
m1f-scrape https://shiny-new-framework.dev -o ./docs/
```

### m1f-html2md

Turn that scraped HTML into beautiful Markdown.

```bash
m1f-html2md convert ./scraped-docs -o ./markdown/
```

### m1f-research

AI-powered research assistant that finds, scrapes, analyzes, and bundles the
best resources into comprehensive research bundles.

```bash
# Research any topic with AI guidance
m1f-research "the best MCPs for Claude Code AI 2025 and how they function"

# Custom configuration with specific analysis
m1f-research --config research.yml --template academic "machine learning transformers"
```

### m1f-token-counter

Know before you paste. Because context limits are real.

```bash
m1f-token-counter bundle.txt
# Output: 45,231 tokens (fits in Claude's 200k context!)
```

## Use Cases That'll Make You Smile 😊

### 1. Code Review Prep

```bash
# Get changed files from git and bundle them
git diff --name-only HEAD~10 | xargs m1f --input-files -o review.txt
# Or use a code review preset if you have one
m1f --preset presets/code-review.m1f-presets.yml
```

### 2. Documentation Deep Dive

```bash
m1f --docs-only -o project-knowledge.txt
# Pure documentation, no code noise
```

### 3. Architecture Overview

```bash
m1f --include "**/*.py" --include "**/README.md" \
    --max-file-size 50kb -o architecture.txt
# High-level view without implementation details
```

### 4. The "New Developer Onboarding" Special

```bash
m1f-init && m1f-claude --setup
# Generate organized bundles for different aspects of your project
# Share with new team members → instant project experts
```

## Smart Defaults Because We Get You

Out of the box, m1f:

- ✅ Ignores `node_modules/`, `vendor/`, `.git/`, and other noise
- ✅ Skips binary files (unless you really want them)
- ✅ Handles any text encoding (UTF-8, UTF-16, that weird Windows-1252 file
  from 2003)
- ✅ Respects `.gitignore` rules (that wasn't easy ;-)
- ✅ Warns about potential secrets
- ✅ Adds clear file separators

## Configuration for Power Users

After `m1f-init`, tweak `.m1f.config.yml` to your heart's content:

```yaml
bundles:
  frontend:
    description: "React components and styles"
    patterns:
      - "src/components/**/*.{jsx,tsx}"
      - "src/styles/**/*.css"
    exclude_patterns:
      - "**/*.test.js"
    output: "m1f/frontend-brain.txt"

  api:
    description: "Backend API logic"
    patterns:
      - "api/**/*.py"
      - "!api/**/test_*.py" # Exclude tests
    output: "m1f/api-brain.txt"

  architecture:
    description: "High-level project structure"
    docs_only: true
    max_file_size: 100kb
    output: "m1f/architecture-overview.txt"
```

## Beyond AI: Surprise Use Cases 🎁

### Universal File Normalizer

```bash
# Got files in 17 different encodings?
m1f --normalize-to utf-8 --output clean-project.txt
m1f-s1f -i clean-project.txt -d ./clean/
# Boom. Everything is UTF-8 now.
```

### Time Capsule Creator

```bash
m1f --add-timestamps -o "backup_$(date +%Y%m%d).txt"
# Perfect snapshot of your project at this moment
```

### The "Poor Developer's Docker"

```bash
# Bundle on machine A
m1f -o myproject.txt
# Transfer one file
scp myproject.txt user@machine-b:
# Extract on machine B
m1f-s1f -i myproject.txt -d ./project/
# Entire project structure preserved!
```

## Pro Tips from the Trenches 🏆

1. **Start with `m1f-init`** - It's smarter than you think
2. **Use presets** - We've included configs for WordPress, Django, React, and
   more
3. **Chain tools** - `m1f-scrape` → `m1f-html2md` → `m1f` = Documentation power
   combo. Or use `m1f-research` for AI-guided research and analysis
4. **Set up watches** - `./scripts/watch_and_bundle.sh` for auto-updates
5. **Check token counts** - Always know what you're pasting

## Join the Revolution

We're building the future of AI-assisted development. Want to help?

- 🐛 [Report bugs](https://github.com/franz-agency/m1f/issues)
- 💡 [Suggest features](https://github.com/franz-agency/m1f/discussions)
- 🔧 [Contribute code](https://github.com/franz-agency/m1f/pulls)
- ⭐ [Star us on GitHub](https://github.com/franz-agency/m1f) (it makes us
  happy)

## Requirements

- Python 3.10+ (because we use the cool new features)
- A desire to feed your AI more context
- That's it. Really.

## License

Apache 2.0 - Use it, love it, build amazing things with it.

---

**Built with ❤️ by [franz.agency](https://franz.agency) - Where no AI has coded
before™**

_P.S. If you're reading this, you're probably the kind of developer who reads
documentation. We like you already._

======= CLAUDE.md ======
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
complete m1f doc is in m1f/87_m1f_only_docs.txt

## Project Overview

m1f (Make One File) is a Python-based CLI tool suite for bundling codebases and documentation into AI-friendly context files. It's designed to help developers feed their entire codebase to LLMs like Claude, ChatGPT, and Gemini.

## Core Architecture

The project consists of multiple interconnected tools:

1. **m1f** (tools/m1f/) - Core bundler that creates mega-files from codebases and stores it in m1f/
   - Async I/O for performance
   - Smart file selection with glob patterns
   - Automatic secret detection using detect-secrets
   - Content deduplication via SHA256
   - Multiple output formats and separators

2. **s1f** (tools/s1f/) - Extracts files back from bundles
   - Preserves file metadata and paths
   - Handles various separator styles

3. **scrape_tool** (tools/scrape_tool/) - Web scraper with multiple backends
   - BeautifulSoup, Scrapy, and Playwright support
   - SSRF protection and robots.txt compliance

4. **html2md_tool** (tools/html2md_tool/) - HTML to Markdown converter
   - AI-powered selector optimization
   - Batch processing capabilities

## Essential Commands

### Development Setup
```bash
# Activate virtual environment
source .venv/bin/activate      # Linux/macOS
.venv\Scripts\activate         # Windows

# Install in editable mode
pip install -e .
```

### Testing
```bash
# Run all tests
pytest

# Run specific test suites
pytest tests/m1f/              # m1f tests only
pytest tests/s1f/              # s1f tests only
pytest tests/html2md/          # html2md tests only

# Run with useful options
pytest -vv                     # Verbose output
pytest -x                      # Stop on first failure
pytest -m "not slow"           # Skip slow tests
pytest --pdb                   # Debug on failure
```

### Code Formatting
```bash
# Format Python code (required before commits)
black tools/

# Check formatting without changes
black --check tools/

# Format Markdown files
npm run lint:md
```

### Development Workflow
```bash
# Run tools in development mode
python -m tools.m1f [args]
python -m tools.s1f [args]
python -m tools.html2md [args]
python -m tools.scrape [args]

# Update m1f's own bundles
m1f-update

# Watch for changes and auto-bundle
./scripts/watch_and_bundle.sh
```

## Key Architectural Patterns

### Configuration System
- YAML-based presets in `presets/` directory
- Preset groups for different use cases (code_review, docs_chat, debug_context)
- Per-file settings with extension-specific rules
- AI-optimized presets in `presets/ai-context.m1f-presets.yml`

### Async Architecture
- All file operations use aiofiles for concurrent I/O
- Batch processing with configurable concurrency
- Streaming architecture for handling large codebases

### Security Considerations
- detect-secrets integration for preventing secret exposure
- Path traversal protection in all file operations
- SSRF protection in web scraping
- robots.txt compliance for ethical scraping

### Testing Strategy
- Unit tests for core functionality
- Integration tests for tool interactions
- Security-specific tests for secret detection
- Encoding tests for various file formats
- Test server for HTML2MD testing

## Important Implementation Details

1. **File Processing Pipeline**:
   - Detection → Validation → Encoding → Deduplication → Bundling
   - Each stage is async and can be extended with custom processors

2. **Preset System**:
   - Presets are loaded from YAML files in `presets/`
   - Support for inheritance and composition
   - Can define file-specific rules and global settings

3. **Output Formats**:
   - Multiple separator styles (xml, markdown, plain)
   - Token counting integration for LLM context windows
   - Metadata preservation (paths, timestamps, encodings)

4. **Error Handling**:
   - Graceful degradation for encoding issues
   - Detailed error messages with file context
   - Non-blocking errors for better user experience

## Development Tips

- Always run tests before committing significant changes
- Use Black for Python formatting (enforced by git hooks)
- The project uses detect-secrets to prevent accidental secret commits
- When adding new features, follow the existing async patterns
- Presets are the primary configuration mechanism - avoid hardcoding
- The `m1f-update` command regenerates the project's own documentation bundles

## Output and Colorama Usage

### Important: Unified Output System
The project uses a **unified colorama-based output system**. All output should use the semantic helper functions from `tools/shared/colors.py`:

```python
from tools.shared.colors import info, error, warning, success, header

# DO NOT use print() directly - use these instead:
info("Processing files...")      # General information
success("Operation completed!")  # Success messages (green)
warning("Large file detected")   # Warnings (yellow)
error("Failed to read file")     # Errors (red, goes to stderr)
header("Starting Process")       # Section headers (blue/bold)
```

### Key Rules:
1. **NEVER use `print()` directly** for user-facing output
2. **Always import from `tools.shared.colors`** - don't create local color classes
3. **Use semantic functions** based on message type (info/success/warning/error)
4. **Exception**: Only use `print()` for:
   - Terminal control sequences (cursor movement, line clearing)
   - JSON output (`print(json.dumps(...))`)
   - Inside colorama helper functions themselves

### For Tests:
Test files should also use colorama helpers for consistent output:
```python
from tools.shared.colors import info, error, warning, success
# Use these instead of print() in test output
```

See `docs/99_development/unified_colorama_guide.md` for full details.

## Project Design Considerations

- Backward compatibility is not needed in this stage

======= requirements.txt ======
# Core dependencies
aiofiles==24.1.0
aiohttp==3.12.14
anyio==4.9.0
application_properties==0.9.0
beautifulsoup4==4.13.4
black==25.1.0
certifi==2025.6.15
chardet==5.2.0
charset-normalizer==3.4.2
click==8.2.1
colorama==0.4.6
Columnar==1.4.1
detect-secrets==1.5.0
html5lib==1.1
idna==3.10
iniconfig==2.1.0
markdownify==1.1.0
mypy_extensions==1.1.0
packaging==25.0
pathspec==0.12.1
platformdirs==4.3.8
pluggy==1.6.0
pydantic==2.11.7
pymarkdownlnt==0.9.30
pytest==8.4.1
pytest-asyncio==1.1.0a1
pytest-timeout==2.4.0
PyYAML==6.0.2
regex==2024.11.6
requests==2.32.4
tiktoken==0.9.0
tomli==2.2.1
toolz==1.0.0
typing_extensions==4.14.1
urllib3==2.5.0
wcwidth==0.2.13

# Claude Code SDK for m1f-claude
claude-code-sdk==0.0.14

# Web scraping dependencies
httpx==0.27.2
lxml==6.0.0
playwright==1.53.0
scrapy==2.13.3
selectolax==0.3.31

# Test server dependencies
Flask==3.1.1
flask-cors==6.0.1

# Additional dependencies (automatically installed)
aiohappyeyeballs==2.6.1
aiosignal==1.4.0
annotated-types==0.7.0
attrs==25.3.0
Automat==25.4.16
blinker==1.9.0
cffi==1.17.1
constantly==23.10.4
cryptography==45.0.5
cssselect==1.3.0
defusedxml==0.8.0rc2
filelock==3.18.0
frozenlist==1.7.0
greenlet==3.2.3
h11==0.16.0
httpcore==1.0.9
hyperlink==21.0.0
incremental==24.7.2
itemadapter==0.11.0
itemloaders==1.3.2
itsdangerous==2.2.0
Jinja2==3.1.6
jmespath==1.0.1
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
multidict==6.6.3
nest-asyncio==1.6.0
parsel==1.10.0
propcache==0.3.2
Protego==0.5.0
pyasn1==0.6.1
pyasn1_modules==0.4.2
pycparser==2.22
pydantic_core==2.33.2
PyDispatcher==2.0.7
pyee==13.0.0
Pygments==2.19.2
pyjson5==1.6.9
pyOpenSSL==25.1.0
queuelib==1.8.0
requests-file==2.1.0
service-identity==24.2.0
setuptools==80.9.0
six==1.17.0
sniffio==1.3.1
soupsieve==2.7
tldextract==5.3.0
truststore==0.10.1
Twisted==25.5.0
typing-inspection==0.4.1
w3lib==2.3.1
webencodings==0.5.1
Werkzeug==3.1.3
yarl==1.20.1
zope.interface==7.2

======= docs/README.md ======
# m1f Documentation

Welcome to the m1f project documentation. This directory contains comprehensive
guides, references, and examples for all tools in the m1f toolkit.

**Current Version: 3.7.0** | [Changelog](99_CHANGELOG.md)

## Table of Contents

### 📚 Core Tool Documentation

#### m1f (Make One File)

The main tool that combines multiple files into a single reference file with
content deduplication.

- [**Getting Started**](01_m1f/05_getting_started.md) - Installation and first
  steps with real examples
- [**m1f Overview**](01_m1f/00_m1f.md) - Complete guide with features, usage
  examples, and architecture
- [**Quick Reference**](01_m1f/01_quick_reference.md) - Common commands and
  patterns for quick lookup
- [**CLI Reference**](01_m1f/02_cli_reference.md) - Complete command-line
  parameter reference
- [**Troubleshooting Guide**](01_m1f/03_troubleshooting.md) - Common issues and
  their solutions
- [**Security Best Practices**](01_m1f/40_security_best_practices.md) - Security
  guidelines and protective measures

#### s1f (Split One File)

Extracts individual files from a combined file with preserved structure.

- [**s1f Documentation**](02_s1f/20_s1f.md) - Complete guide for file extraction
  tool

#### Web Tools

Professional web scraping and conversion tools.

- [**Webscraper**](04_scrape/40_webscraper.md) - Download websites for offline
  viewing and processing
- [**HTML to Markdown Converter**](03_html2md/30_html2md.md) - Comprehensive
  HTML to Markdown conversion guide
- [**HTML2MD Usage Guide**](03_html2md/31_html2md_guide.md) - Detailed usage
  examples and patterns
- [**HTML2MD Workflow Guide**](03_html2md/32_html2md_workflow_guide.md) -
  Advanced workflows and automation
- [**HTML2MD Test Suite**](03_html2md/33_html2md_test_suite.md) - Testing
  documentation and examples
- [**Scraper Backends**](04_scrape/41_html2md_scraper_backends.md) - Backend
  options for web scraping

#### Research Tool

AI-powered research tool for automatic information gathering and bundling.

- [**Research Tool Overview**](06_research/) - Comprehensive research tool
  documentation
- [**Research README**](06_research/README.md) - Quick start and feature
  overview
- [**Architecture**](06_research/architecture.md) - Technical architecture
  details
- [**API Reference**](06_research/api-reference.md) - Complete API documentation
- [**Examples**](06_research/examples.md) - Usage examples and recipes

#### Utility Tools

- [**Token Counter**](99_misc/98_token_counter.md) - Estimate token usage for
  LLM context planning

### 🎯 Advanced Features

#### Preset System

File-specific processing rules and configurations.

- [**Preset System Guide**](01_m1f/10_m1f_presets.md) - Complete preset system
  documentation
- [**Per-File Type Settings**](01_m1f/11_preset_per_file_settings.md) -
  Fine-grained file processing control
- [**Preset Reference**](01_m1f/12_preset_reference.md) - Complete reference
  with all settings and features

#### Auto-Bundle & Configuration

Automated project bundling for AI/LLM consumption.

- [**Auto Bundle Guide**](01_m1f/20_auto_bundle_guide.md) - Automatic bundling
  with configuration files
- [**Configuration Examples**](01_m1f/25_m1f_config_examples.md) - Real-world
  configuration examples
- [**Default Excludes Guide**](01_m1f/26_default_excludes_guide.md) -
  Understanding default exclusion patterns

#### AI Integration

Work efficiently with Claude and other LLMs.

- [**Claude + m1f Workflows**](01_m1f/30_claude_workflows.md) - Turn Claude into
  your personal m1f expert
- [**Claude Code Integration**](01_m1f/31_claude_code_integration.md) - Optional
  AI-powered tool automation

### 🔧 Development

- [**Development Workflow**](01_m1f/21_development_workflow.md) - Best practices
  for development with m1f
- [**Git Hooks Setup**](05_development/56_git_hooks_setup.md) - Automated
  bundling with git hooks
- [**Version 3.2 Features**](01_m1f/41_version_3_2_features.md) - Feature
  documentation and migration guide

### 📖 Additional Resources

- [**m1f Section Overview**](01_m1f/README.md) - Overview of m1f documentation
  section
- [**Development Section Overview**](05_development/README.md) - Overview of
  development documentation
- [**Full Changelog**](99_CHANGELOG.md) - Complete project history and version
  details

## Quick Start

### Installation

```bash
# Clone the repository
git clone https://github.com/Karrtii/m1f.git
cd m1f

# Install tools
./scripts/install.sh  # On Windows: ./scripts/install.ps1
```

### Basic Usage

```bash
# Combine files
m1f -s ./your_project -o ./combined.txt

# Extract files
m1f-s1f -i ./combined.txt -d ./extracted_files

# Check token count
m1f-token-counter ./combined.txt

# Download website
m1f-scrape https://example.com -o ./html

# Convert HTML to Markdown
m1f-html2md convert ./html ./markdown
```

### Using Auto-Bundle

```bash
# Create all configured bundles
m1f auto-bundle

# List available bundles
m1f auto-bundle --list

# Create specific bundle
m1f auto-bundle documentation
```

## Navigation Tips

- **New to m1f?** Start with the
  [Getting Started Guide](01_m1f/05_getting_started.md)
- **Setting up automation?** Check the
  [Auto Bundle Guide](01_m1f/20_auto_bundle_guide.md) and
  [Configuration Examples](01_m1f/25_m1f_config_examples.md)
- **Working with AI?** See [Claude Workflows](01_m1f/30_claude_workflows.md) for
  optimal LLM integration
- **Need help?** Visit the [Troubleshooting Guide](01_m1f/03_troubleshooting.md)

## Project Overview

m1f is a comprehensive toolkit designed to help you work more efficiently with
Large Language Models (LLMs) by managing context. Built with modern Python 3.10+
architecture, it features:

- **Async I/O** for high performance
- **Type hints** throughout the codebase
- **Modular design** for easy extension
- **Security-first** approach with built-in protections
- **Cross-platform** compatibility (Windows, macOS, Linux)

Whether you're bundling code for AI analysis, creating documentation packages,
or managing large codebases, m1f provides the tools you need to work
efficiently.

======= docs/99_CHANGELOG.md ======
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to
[Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [3.8.0] - 2025-07-24

### Added

- **m1f-research Tool**: New intelligent research content organization tool

  - Smart content analysis with configurable templates (academic, technical,
    summary)
  - Hierarchical output directory structure with automatic organization
  - Database-driven job persistence and management
  - Parallelized scraping with progress tracking
  - LLM provider abstraction (Claude, Gemini, CLI tools)
  - Advanced filtering and search capabilities
  - Comprehensive documentation and examples

- **Shared Utilities Module**: Centralized common functionality

  - Unified colorama output system across all tools
  - Externalized all prompts to markdown templates
  - Shared validation and helper functions
  - Consistent error handling patterns

- **Symlink Deduplication**: Intelligent handling of symbolic links
  - Internal symlinks excluded when deduplication enabled (default)
  - External symlinks always included with their content
  - All symlinks included when using `--allow-duplicate-files`
  - Comprehensive test coverage for all scenarios

### Changed

- **Output System Overhaul**: Complete migration to colorama helpers

  - Replaced all `print()` statements with semantic helpers (info, success,
    warning, error)
  - Consistent colored output across all tools
  - Improved user experience with visual feedback
  - Test files updated to use colorama helpers

- **Version Management**: Centralized version handling

  - All tools now import from `tools._version.py`
  - Single source of truth for version numbers
  - Simplified version bumping process

- **Claude Integration**: Enhanced headless operation
  - Fixed Claude CLI to use `-p` flag for headless mode
  - Improved timeout handling (increased to 120s)
  - Better error messages and debugging output

### Fixed

- **Test Warnings**: Resolved all AsyncMock and pytest warnings

  - Fixed AsyncMock usage with proper async functions
  - Renamed TestServer to HTML2MDTestServer to avoid pytest conflicts
  - Improved test reliability and performance

- **Import Errors**: Fixed module import issues across tools

  - Resolved circular imports in m1f-research
  - Fixed s1f module import errors
  - Corrected test file imports

- **Package Metadata**: Updated package.json
  - Fixed description to "Make One File - AI-ready codebase bundling toolkit"
  - Synchronized version numbers across all files

### Documentation

- **m1f-research**: Added comprehensive documentation

  - Job management guide
  - Template system reference
  - Integration examples
  - README for shared utilities

- **Colorama Guide**: Added unified output system documentation
  - Complete migration guide
  - Usage examples
  - Best practices

## [3.7.0] - 2025-07-21

### Added

- **Pre-commit Hook Enhancement**: Added Python (Black) and Markdown formatting
  to pre-commit hooks for better code quality enforcement
- **Script Help Parameters**: All scripts now support help parameter (`-h`,
  `--help`) for improved user experience
- **PowerShell Commands**: Added missing `m1f-init` and `m1f-claude` commands to
  PowerShell scripts and aliases
- **Documentation**: Added comprehensive Getting Started guide for easier
  onboarding

### Changed

- **README Overhaul**: Complete refresh with engaging, developer-friendly
  content
  - Clear problem statement and solution narrative
  - Enhanced m1f-claude explanation as headless Claude controller
  - Added personality while maintaining professional quality
  - Updated tagline: "Where no AI has coded before™"
  - Improved flow from problem → solution → examples → features
- **Project Structure**:
  - Moved `sync_version.py` to dev directory
  - Moved setup documentation to docs folder
  - Removed dev/ directory from version control
- **Installation Process**: Improved installation and uninstallation scripts
  with better error handling
- **Hooks System**: Completed migration to dual hook system for better
  flexibility
- **Presets Optimization**: Removed redundant defaults for better efficiency

### Fixed

- **Presets**: Removed incorrect `preserve_tags` usage with `strip_tags` to
  prevent configuration conflicts
- **m1f-claude**: Fixed attribute name for `--setup` argument
- **Examples**: Improved robustness of `scrape_claude_code_docs` script
- **Scripts**: Enhanced watcher ignore patterns and VS Code task integration
- **Hooks**:
  - Corrected installation instructions in git hooks installer
  - Removed unnecessary venv activation from m1f-update calls
- **Documentation**:
  - Fixed misleading examples and clarified feature availability
  - Fixed incorrect `--since` flag example (doesn't exist in m1f)
  - Simplified and corrected script paths in installation instructions

### Removed

- **Version Management**: Removed version management section from README
- **Version Bumper**: Removed version bumper from repository
- **Advanced Terminology**: Removed remaining "advanced" terminology from setup
- **Cleanup**: Removed leftover files and test artifacts

## [3.6.0] - 2025-07-19

### Changed

- **m1f-claude**: Renamed `--advanced-setup` parameter to `--setup` for
  simplicity
- **m1f**: Ensure cross-platform compatibility by using forward slashes in
  bundle paths
- **Project Organization**: Cleaned up project root directory
  - Moved `perfect_bundle_prompt.md` to `tools/m1f/prompts/`
  - Moved `wp-cli.example.yml` to `examples/` directory

### Fixed

- **Windows Compatibility**: Major improvements for Windows platform support
  - **m1f**: Fixed path separators to always use forward slashes in bundles for
    cross-platform compatibility
    - Bundles created on Windows can now be extracted on Unix systems and vice
      versa
    - Added comprehensive cross-platform path tests
  - **m1f-claude**: Improved Claude executable detection on Windows
  - **m1f-claude**: Enhanced subprocess handling and timeout behavior for
    Windows
  - **m1f**: Fixed npx execution method compatibility on Windows
  - **m1f-init**: Improved project type detection across platforms
  - **Dependencies**: Downgraded httpx to 0.27.2 for better Windows
    compatibility
  - **Tests**: Added cross-platform test suite with Windows-specific timeout
    handling
  - **Installation**: Fixed PowerShell installation scripts and path handling

## [3.5.0] - 2025-07-18

### Added

- **m1f-claude**: Add project description and priorities input functionality

### Fixed

- **m1f-init**: Correct project type detection to use file count for all
  languages
- **m1f**: Support npx execution method for m1f tool
- **m1f-init**: Preserve dots in project names for bundle generation

### Changed

- Updated package dependencies

## [3.4.2] - 2025-07-08

### Fixed

- **Version Conflict**: Resolved version conflict issues
- **httpx Compatibility**: Downgraded httpx from newer version to 0.27.2 for
  improved compatibility
- **Configuration Consistency**: Updated `source_directory` to
  `source_directories` in configuration for consistency
- **m1f-claude Subprocess Handling**: Improved subprocess handling and timeout
  behavior for Claude executable detection

### Changed

- **Dependencies Update**: Updated multiple dependencies to newer versions for
  improved compatibility and performance

### Removed

- Removed unnecessary documentation files

## [3.4.0] - 2025-07-04

### Added

- **m1f-init Enhancements**: Improved project initialization tool

  - Added `--no-symlink` parameter to skip creating symlink to m1f documentation
  - Added file tracking to show only actually created files in output
  - Improved output formatting with "Here is your file:" / "Here are your
    files:" section
  - Added proper spacing and bullet points for created files list
  - Now runs `m1f-update` when `.m1f.config.yml` already exists instead of
    creating default bundles

- **Multiple Source Directories**: m1f now supports multiple `-s` source
  directories

  - Use `-s dir1 -s dir2` to combine files from multiple directories
  - All source directories are processed and files are merged into single output
  - Useful for documentation bundles that need files from different locations

- **Include Patterns**: Added `--includes` parameter for pattern-based file
  filtering
  - Works with gitignore-style patterns (e.g., `*.py`, `src/**`, `!test.py`)
  - When combined with `--include-extensions`, files must match both criteria
  - Allows precise control over which files to include in bundles

### Changed

- **m1f-init Git Detection**: Improved Git repository detection messages

  - Simplified output for parent directory Git repositories (no longer shows
    paths)
  - Only shows messages for current directory Git repos or no Git repo at all
  - Better handling of subdirectories within larger Git projects

- **m1f-init Language Detection**: Enhanced programming language detection
  - Changed "Not detected" to "No programming languages detected" for clarity
  - Added file counting for all supported languages (Java, C#, Go, Rust, Ruby)
  - Only shows "Programming Languages:" line when languages are actually
    detected
  - Better label clarity with "Programming Languages:" instead of just
    "Languages:"

### Fixed

- **m1f-init .gitignore Handling**: Fixed .gitignore usage in subdirectories

  - Now only uses .gitignore from current directory, not parent directories
  - Prevents errors when running m1f-init in subdirectories without their own
    .gitignore
  - All m1f commands now check for .gitignore existence before using
    --exclude-paths-file

- **m1f-init Python Project Detection**: Fixed language detection prioritization

  - Now prioritizes by file count to correctly identify primary language
  - Python projects are now properly detected even with mixed language codebases

- **m1f-init Behavior with Existing Config**: Fixed to run m1f-update when
  config exists

  - No longer creates default bundles when `.m1f.config.yml` already exists
  - Automatically runs `m1f-update` to use existing configuration

- **m1f Directory Exclusion Performance**: Fixed severe performance issue with
  directory filtering

  - Directory exclusions from .gitignore now properly applied at directory
    traversal level
  - Reduced bundle creation time from 42+ seconds to ~1.2 seconds (35x
    improvement)
  - Fixed tmp/ directory exclusion that was scanning 362,419 unnecessary files

- **m1f Multiple Source Directories**: Fixed CLI to support multiple source
  directories

  - Changed from single source to List[Path] throughout codebase
  - Now properly processes all specified source directories with
    `-s dir1 -s dir2`
  - All files from multiple sources are combined into single output

- **m1f Include Patterns**: Fixed include pattern filtering

  - Include patterns now properly applied from config files
  - Fixed \_load_include_patterns() to run even without include_paths_file
  - Patterns correctly filter files when combined with extension filters

- **m1f Bundle Configuration**: Fixed output directory exclusion pattern

  - Changed `/m1f/**` to `m1f/m1f/**` to only exclude output directory
  - Previously excluded all directories named "m1f" anywhere in the project

- **m1f-html2md Streaming**: Fixed streaming output for Claude AI analysis

  - Fixed common_parent variable scope issue (used before definition)
  - Implemented proper streaming in run_claude_streaming method
  - Fixed ColoredFormatter modifying LogRecord objects (causing ANSI codes in
    logs)
  - Added elapsed time tracking for progress messages
  - Improved subprocess handling for reliable Claude CLI integration

- **m1f-html2md Config Loading**: Made configuration more robust
  - Config loader now handles unknown fields gracefully (with warnings)
  - Automatic conversion of string paths to Path objects
  - Better error handling for Claude-generated configurations

## [3.3.0] - 2025-07-03

### Documentation

- **README.md Enhancements**: Major improvements to project documentation
  - Added clear explanation of what m1f is (Make One File)
  - Added Tailwind CSS 4.0 example demonstrating real-world usage
  - Added concise tool suite overview with links to docs and m1f.dev
  - Added comprehensive feature list emphasizing dynamic/auto-updating
    capabilities
  - Added security note about detect-secrets with link to GitHub repository
  - Added "Beyond AI" section showing alternative uses (backups, bundling,
    encoding conversion)
  - Added bundle location and Claude reference syntax explanation
  - Improved overall structure with developer-friendly tone
  - **Claude Code Integration**: Enhanced documentation for Claude binary
    auto-detection
  - **Example Updates**: Improved clarity for Tailwind CSS and Claude Code usage
    examples
- **HTML2MD Documentation Updates**: Enhanced Claude AI integration
  documentation
  - Added `--analyze-files` parameter documentation
  - Documented project description prompt feature
  - Added subprocess handling improvements
  - Updated examples with new features

### Added

- **HTML2MD Claude AI Integration Enhancements**: Major improvements to
  AI-powered HTML analysis

  - **External Prompt System**: All prompts now loaded from external markdown
    files in `prompts/` directory
    - `select_files_from_project.md`: Strategic selection of 5 representative
      HTML files
    - `analyze_selected_files.md`: Task-based analysis workflow with individual
      file processing
    - `convert_html_to_md.md`: Enhanced HTML to Markdown conversion with quality
      standards
    - Improved maintainability and customization of AI prompts
  - **Task-Based Analysis Workflow**: Multi-phase analysis for better accuracy
    - Phase 1: Individual file analysis with detailed findings saved to separate
      files
    - Phase 2: Synthesis of all analyses to create optimal configuration
    - Deep structural analysis with content boundaries, navigation elements, and
      special content types
    - Creates temporary analysis files in m1f directory for transparency
  - **Write Tool Permission**: Claude now has write permissions for creating
    analysis files
    - Automatically creates individual analysis files (html_analysis_1.txt
      through html_analysis_5.txt)
    - Enables iterative analysis and refinement process
    - Includes cleanup functionality to remove temporary files after user
      confirmation
  - **Directory Access Improvements**: Enhanced Claude integration workflow
    - Uses `--add-dir` parameter instead of changing directories
    - Maintains clean working directory structure
    - Prevents directory traversal issues during analysis
  - **Improved Error Handling**: Better subprocess management and error
    reporting
    - Fixed indentation errors in subprocess.Popen calls
    - Applied black formatting for consistent code style
    - Enhanced logging and progress indicators
    - Changed all subprocess.Popen + communicate() to subprocess.run() for
      reliable Claude CLI integration
    - Added 5-minute timeout handling for subprocess operations
  - **User Experience Improvements**: Enhanced workflow and configuration
    - Added `--analyze-files` parameter to specify number of files to analyze
      (1-20, default: 5)
    - Project description prompt now includes tip about specifying important
      files
    - Output configuration saved as `html2md_extract_config.yaml` instead of
      generic name
    - Fixed file references to use m1f/ instead of @m1f directory
    - Added debug output for transparency during analysis process
    - Cleanup functionality removes temporary analysis files after confirmation
    - **Increased Claude timeouts**: Extended timeout from 5 to 30 minutes for
      large analyses
    - **Improved configuration templates**: Better organized YAML templates for
      extraction rules

- **WebScraper Content Deduplication**: Memory-efficient duplicate prevention
  system (enabled by default)

  - **Database-Backed Deduplication**: Optimized for large scraping sessions
    - Uses SQLite queries instead of loading all checksums into memory
    - Stores checksums in `content_checksums` table with first URL and timestamp
    - Scrapers use callback mechanism to check checksums via database
    - Significantly reduces memory usage for large scraping sessions
    - Maintains deduplication state across resume operations
  - **Content-Based Detection**: SHA-256 checksums of normalized plain text
    - Extracts plain text from HTML (removes all tags, scripts, styles)
    - Decodes HTML entities (&nbsp;, &lt;, etc.)
    - Normalizes whitespace (multiple spaces become single space)
    - Skips pages with identical text content
  - **Three-Layer Deduplication System**:
    1. Canonical URL checking (default: enabled) - Use `--ignore-canonical` to
       disable
    2. Content deduplication (default: enabled) - Use `--ignore-duplicates` to
       disable
    3. GET parameter normalization (default: disabled) - Use
       `--ignore-get-params` to enable
  - **Improved Logging**: Graceful handling of duplicate detection
    - No longer logs duplicates as "unexpected errors"
    - Clear informational messages when skipping duplicate content
    - Transparent reporting of deduplication effectiveness

- **WebScraper Subdirectory Restriction**: Automatic crawling restriction to
  specified paths

  - When URL contains a path (e.g., `https://example.com/docs`), only pages
    under that path are scraped
  - Prevents crawling outside the specified subdirectory (e.g., won't scrape
    `/products` when `/docs` is specified)
  - Works with all scraper backends (BeautifulSoup, HTTrack, Selectolax)
  - Useful for downloading specific documentation sections without the entire
    website
  - Example: `m1f-scrape https://api.example.com/v2/reference` only scrapes
    pages under `/v2/reference`

- **WebScraper Ignore GET Parameters**: New option to prevent duplicate content
  from URLs with different query strings

  - **--ignore-get-params Flag**: Strips GET parameters from URLs during
    scraping
    - Prevents duplicate downloads from URLs like `page.html?tab=linux` and
      `page.html?tab=windows`
    - Normalized URLs are used for visited tracking and file saving
    - Works with all scraper backends (BeautifulSoup, HTTrack, Selectolax)
    - HTTrack uses `-N0` flag to disable query string parsing
    - Useful for documentation sites that use GET parameters for UI state
  - **Example**:
    `m1f-scrape https://docs.example.com -o ./html --ignore-get-params`
    - Will treat `docs.html?version=1` and `docs.html?version=2` as the same
      page

- **WebScraper Canonical URL Checking**: Automatically skip duplicate pages
  based on canonical URLs
  - **Default Behavior**: Checks `<link rel="canonical">` tags on every page
    - Skips pages where canonical URL differs from current URL
    - Prevents downloading duplicate content (print versions, mobile versions,
      etc.)
    - Works with all scraper backends (BeautifulSoup, HTTrack, Selectolax)
    - Logs skipped pages with their canonical URLs for transparency
  - **--ignore-canonical Flag**: Ignore canonical tags when needed
    - Use when you want all page versions regardless of canonical tags
    - Example: `m1f-scrape https://example.com -o ./html --ignore-canonical`
  - **Use Cases**:
    - Documentation sites with multiple URL formats for same content
    - E-commerce sites with product URLs containing tracking parameters
    - News sites with print and mobile versions of articles

### Fixed

- **HTML2MD Claude Integration Issues**: Resolved multiple issues with Claude
  CLI integration
  - Fixed subprocess hanging when using `Popen` + `communicate()` with Claude
    CLI
  - Fixed incorrect m1f usage (now properly uses `--skip-output-file` for
    filelist generation)
  - Fixed file references from embedded content to proper @ syntax
  - Fixed indentation errors in subprocess calls
  - Fixed undefined variable errors (removed unused `html_contents`)
  - Fixed test failure for outdated CLI parameters
  - **Auto-detection of Claude binary**: m1f-html2md --claude now automatically
    detects claude binary location
    - Searches common installation paths including ~/.local/bin/claude
    - Falls back to system PATH if not found in common locations
    - Provides helpful error message if claude CLI is not installed
- **m1f Directory Structure**: Corrected nested directory configuration
  - Fixed .m1f.config.yml to use proper m1f/m1f/ structure
  - Removed accidental triple nesting (m1f/m1f/m1f/)
  - Created proper symlink from m1f/m1f.txt to m1f/m1f/87_m1f_only_docs.txt
- **WebScraper Logging**: Fixed duplicate content detection logging

  - Duplicates no longer logged as "unexpected errors"
  - Changed from exception-based to graceful skip-based handling

- **WebScraper Resume Functionality**: Interrupt and resume web scraping
  sessions
  - **SQLite Database Tracking**: Automatically tracks scraped URLs in
    `scrape_tracker.db`
    - Stores URL, status code, target filename, timestamp, and errors
    - Enables resuming interrupted scraping sessions
    - Database created in output directory for each scraping job
  - **Progress Display**: Real-time display of currently processed URLs
    - Shows "Processing: <URL> (page X)" for each page
    - Verbose mode displays detailed logging information
    - Resume shows "Resuming crawl - found X previously scraped URLs"
  - **Graceful Interruption**: Clean handling of Ctrl+C
    - Shows friendly message: "⚠️ Scraping interrupted by user"
    - Instructions to resume: "Run the same command again to resume where you
      left off"
    - No Python stack traces on interruption
  - **Smart Resume Strategy**: Analyzes previously scraped pages
    - Reads first 20 scraped pages to extract links
    - Populates URL queue with unvisited links from scraped pages
    - Shows "Found X URLs to visit after analyzing scraped pages"
  - **Enhanced CLI**: Better user experience - Added hint "Press Ctrl+C to
    interrupt and resume later" at startup - Logging configuration with `-v`
    flag for progress visibility - Fixed asyncio "Unclosed client session"
    warnings =======
- **m1f-html2md Claude AI Integration**: Intelligent HTML analysis and
  conversion using Claude

  - **Analyze Command Enhancement**: Added `--claude` flag for AI-powered
    analysis
    - Automatically finds all HTML files in directories (no need to specify
      individual files)
    - Uses Claude to intelligently select 5 representative files from scraped
      documentation
    - Analyzes HTML structure and suggests optimal CSS selectors for content
      extraction
    - Excludes navigation, headers, footers, sidebars, and advertisements
    - Runs `m1f-init` automatically in the analysis directory
    - Outputs YAML configuration with content and ignore selectors
  - **Convert Command Enhancement**: Added `--claude` flag for batch HTML to
    Markdown conversion
    - Converts all HTML files in a directory to clean Markdown using Claude AI
    - Supports model selection with `--model` parameter (opus or sonnet)
    - Configurable sleep delay between API calls with `--sleep` parameter
    - Maintains directory structure in output
    - Progress tracking with conversion summary
  - **Prompt Templates**: All prompts stored as markdown files in `prompts/`
    directory
    - `select_files_simple.md` - Selects representative HTML files
    - `analyze_html_simple.md` - Analyzes HTML and suggests CSS selectors
    - `convert_html_to_md.md` - Converts HTML to clean Markdown
  - **Security**: Path traversal protection using existing
    `validate_path_traversal` function
  - **Import Fix**: Fixed ModuleNotFoundError with try/except import pattern

- **--docs-only Parameter**: New command-line flag for documentation-only
  bundles

  - Filters to include only 62 documentation file extensions
  - Simplifies command: `m1f -s . -o docs.txt --docs-only`
  - Replaces verbose `--include-extensions` with 62 extensions
  - Available in presets via `docs_only: true` configuration
  - Overrides include-extensions when set

- **Documentation File Extensions**: Centralized definition in constants.py

  - Added DOCUMENTATION_EXTENSIONS constant with 62 file extensions
  - Added UTF8_PREFERRED_EXTENSIONS constant with 45 UTF-8 preferred formats
  - Includes man pages, markup formats, text files, and developer docs
  - Removed binary formats (.doc, .so) that were incorrectly included
  - Added is_documentation_file() utility function for consistent checks
  - Updated encoding handler to use centralized UTF-8 preference list
  - Documentation extensions now available system-wide for all tools
    > > > > > > > a5263cc2954dda4397238b4001d4bbae4cea973d

- **m1f-claude --init Improvements**: Enhanced project initialization process

  - **Choice-Based Setup**: Users can choose between quick and advanced
    initialization modes
    - Interactive prompt asks for setup preference (1 for quick, 2 for advanced)
    - Command-line parameters: `--quick-setup` and `--setup` for scripting
    - Quick setup: Creates bundles in 30 seconds without Claude
    - Advanced setup: Claude analyzes project and creates topic-specific bundles
  - **Project-Specific Bundle Naming**: All bundles include project directory
    name
    - Example: `m1f_complete.txt`, `m1f_docs.txt` for the m1f project
    - Auxiliary files also include project name: `m1f_complete_filelist.txt`,
      `m1f_complete_dirlist.txt`
    - Makes it easier to identify bundles when working with multiple projects
  - **Auxiliary File Generation**: Both bundles now generate filelist and
    dirlist files
    - Complete bundle creates: `{project}_complete_filelist.txt` and
      `{project}_complete_dirlist.txt`
    - Docs bundle creates: `{project}_docs_filelist.txt` and
      `{project}_docs_dirlist.txt`
    - Provides overview of included files and directory structure
  - **Streamlined Workflow**: Automatic bundle creation without Claude
    dependency
    - Automatically creates complete.txt bundle with all project files
    - Automatically creates docs.txt bundle with 62 documentation extensions
    - Uses --docs-only parameter for efficient documentation bundling
    - Claude Code only invoked for advanced topic-specific segmentation
    - Simplified workflow: git clone → m1f-link → m1f-claude --init → done!
  - **Verbose Mode**: Added `--verbose` flag to show prompts and command
    parameters
    - Displays complete Claude Code command with permissions

- **m1f-init Tool**: New cross-platform initialization tool
  - Replaces m1f-link functionality (m1f-link has been removed)
  - Integrates documentation linking into initialization process
  - Works on Windows, Linux, and macOS
  - Creates complete and docs bundles with project-specific names
  - Generates auxiliary files (filelist, dirlist) for all bundles
  - Creates basic .m1f.config.yml configuration
  - Shows platform-specific next steps
  - On Linux/macOS: Suggests `m1f-claude --setup` for topic bundles

### Changed

- **m1f-claude Refactoring**: Removed initialization from m1f-claude
  - Removed --init, --quick-setup parameters
  - Now only handles --setup for topic-specific bundles
  - Requires m1f-init to be run first (checks for prerequisites)
  - Focuses solely on Claude-assisted advanced configuration
  - Not available on Windows (Linux/macOS only)

### Removed

- **m1f-link Command**: Functionality integrated into m1f-init
  - Documentation linking now happens automatically during m1f-init
  - Simplifies workflow by combining two steps into one

### Enhanced

- **Auxiliary File Documentation**: Added comprehensive documentation

  - Documented filelist and dirlist generation in main m1f documentation
  - Added "Output Files" section explaining all generated files
  - Included examples of working with file lists for custom bundles
  - Updated Quick Start to show all files created by m1f-init
  - Added file list editing workflows to development documentation
    - Shows full prompt being sent for debugging
    - Helps troubleshoot initialization issues
  - **Project Analysis Files**: Create and preserve analysis artifacts in m1f/
    directory
    - Generates `project_analysis_filelist.txt` with all project files
    - Generates `project_analysis_dirlist.txt` with directory structure
    - Files are kept for reference (no cleanup)
    - Respects .gitignore patterns during analysis
    - Explicitly excludes m1f/ directory to prevent recursion
  - **Better Bundle Strategy**: Improved initialization prompts for
    project-specific configs
    - Explicit instruction to read @m1f/m1f.txt documentation first
    - Removed global file size limits from defaults
    - Added proper meta file exclusions (LICENSE*, CLAUDE.md, *.lock)
    - Clear rules against creating test bundles when no tests exist
    - Emphasis on logical segmentation
      (complete/docs/code/components/config/styles)
    - Clarified that dotfiles are excluded by default
    - Added vendor/ to example excludes for PHP projects
  - **Clearer Instructions**: Made prompts more explicit about modifying files
    - Emphasizes that basic config is just a starter needing enhancement
    - Requires 3-5 project-specific bundles minimum
    - Explicit instruction to use Edit/MultiEdit tools
    - Stronger language about actually modifying the config file

- **m1f-claude Enhancements**: Major improvements for intelligent m1f setup
  assistance
  - **Session Persistence**: Implemented proper conversation continuity using
    Claude CLI's `-r` flag
    - Each conversation maintains its own session ID
    - Multiple users can work in the same directory simultaneously
    - Session IDs are extracted from JSON responses and reused
  - **Streaming Output**: Real-time feedback with `--output-format stream-json`
    - Shows Claude's responses as they arrive
    - Displays tool usage in debug mode
    - Provides immediate visual feedback during processing
  - **Tool Permissions**: Added `--allowedTools` parameter with sensible
    defaults
    - Default tools: Read, Edit, MultiEdit, Write, Glob, Grep, Bash
    - Customizable via `--allowed-tools` command line argument
    - Enables file operations and project analysis
  - **Enhanced Prompt System**: Sophisticated prompt enhancement for m1f setup
    - Deep thinking task list approach for systematic m1f configuration
    - Detects when users want to set up m1f (various phrase patterns)
    - Provides 5-phase task list: Analysis, Documentation Study, Design,
      Implementation, Validation
    - Always references @m1f/m1f.txt documentation (5+ references per prompt)
    - Detects and prioritizes AI context files (CLAUDE.md, .cursorrules,
      .windsurfrules)
    - Project-aware recommendations based on detected frameworks
    - Line-specific documentation references for key sections
  - **Debug Mode**: Added `--debug` flag for detailed output
    - Shows session IDs, costs, and API usage
    - Displays tool invocations and responses
    - Helps troubleshoot issues and monitor usage
  - **Interactive Mode UX**: Improved visual feedback
    - "Claude is thinking..." indicator during processing
    - Tool usage notifications: `[🔧 Using tool: Read]`
    - Response completion indicator: `[✅ Response complete]`
    - Better prompt spacing with newlines before "You:"
    - Clear separation between responses and new prompts
    - Interaction counter: prompts to continue after every 10 exchanges
    - Ctrl-C signal handling for graceful cancellation
    - Tool output preview: shows abbreviated results from Claude's tool usage
    - Emphasis on Standard separator (not Markdown) for AI-optimized bundles
  - **Exit Command**: Added `/e` command support like Claude CLI
    - Works alongside 'quit', 'exit', and 'q' commands
    - Updated help text and keyboard interrupt messages
  - **Initialization Command**: Fixed `--init` command async/await issues
    - Resolved RuntimeError with cancel scope in different task
    - Added graceful handling of missing 'cost_usd' field in Claude SDK
      responses
    - Implemented proper anyio task group management for async operations
    - Enhanced error handling with debug logging for SDK issues
    - Fixed subprocess hanging by displaying prompts for manual use instead of
      programmatic execution

### Changed

- **m1f-claude --init Workflow**: Completely redesigned initialization process

  - Now automatically creates complete.txt and docs.txt bundles without Claude
  - Generates .m1f.config.yml with both bundles pre-configured
  - Uses new --docs-only parameter for documentation bundle creation
  - Claude Code only used for advanced topic-specific segmentation
  - Simplified workflow: git clone → m1f-link → m1f-claude --init → done!

- **Dependencies**: Updated claude-code-sdk to use flexible version constraint

  - Changed from `claude-code-sdk==0.0.10` to `claude-code-sdk>=0.0.10`
  - Ensures automatic updates to latest compatible versions
  - Maintains backward compatibility with current version

- **m1f-claude Architecture**: Switched from SDK to subprocess for better
  control
  - Uses Claude CLI directly with proper session management
  - More reliable than the SDK for interactive sessions
  - Better error handling and fallback mechanisms
  - Removed misleading "subprocess fallback" message (it's the primary method
    now)

### Fixed

- **m1f-claude --init Command**: Fixed Claude Code subprocess execution

  - Resolved parameter ordering issue with `--add-dir` flag
  - Changed from stdin-based prompt delivery to `-p` parameter method
  - Implemented fallback to display manual command when subprocess hangs
  - Now shows clear instructions for manual execution with proper parameters
  - Ensures Claude has directory access permissions for file operations

- **PowerShell Installation**: Fixed missing m1f_aliases.ps1 file

  - Created m1f_aliases.ps1 with all PowerShell functions and aliases
  - Added file existence check in setup_m1f_aliases.ps1 before sourcing
  - Fixed hardcoded path issue that caused PowerShell profile errors
  - Now uses correct relative paths based on actual m1f installation location
  - Added PowerShell profile path to warning message for easier debugging

- **m1f-claude Project Name Extraction**: Fixed regex patterns that were failing
  to extract project names
  - Replaced complex regex patterns with backreferences that were causing
    incorrect matches
  - Added simpler, more specific patterns for different name formats (quoted,
    unquoted, possessive)
  - Fixed issue where project names were always extracted as empty strings
  - Now correctly handles formats like "project called 'awesome-app'", "project
    named MyWebApp", "company's main project"

### Dependencies

- Added required dependencies for m1f-claude:
  - anyio==4.9.0 (async support)
  - claude-code-sdk==0.0.10 (Claude integration)

## [3.2.2] - 2025-07-06

### Changed

- **Documentation**: Updated all command examples to use installed bin commands
  - Replaced `python -m tools.m1f` with `m1f`
  - Replaced `python -m tools.s1f` with `m1f-s1f`
  - Replaced `python -m tools.scrape_tool` and `python -m tools.webscraper` with
    `m1f-scrape`
  - Replaced `python -m tools.html2md` and `python -m tools.html2md_tool` with
    `m1f-html2md`
  - Replaced `python tools/token_counter.py` with `m1f-token-counter`
  - Replaced `m1f auto-bundle` with `m1f-update` where appropriate
  - Updated all documentation, scripts, and examples for consistency

### Fixed

- **Scraper Config Files**: Fixed typo in YAML configs (mf1-html2md →
  m1f-scrape)
- **Documentation**: Improved command consistency across all user-facing
  documentation

## [3.2.1] - 2025-06-07

### Fixed

- **Wrapper Scripts**: Added PYTHONPATH to all wrapper scripts to ensure proper
  module imports
- **Pre-commit Hook**: Updated to use python3 and properly handle virtual
  environments
- **Bin Scripts**: All wrapper scripts now preserve current working directory

## [3.2.0] - 2025-06-06

### Added

- **Git Hooks Integration**: Automatic bundle generation on every commit

  - Pre-commit hook that runs `m1f auto-bundle` before each commit
  - Installation script with remote download support:
    `curl -sSL https://raw.githubusercontent.com/franzundfranz/m1f/main/scripts/install-git-hooks.sh | bash`
  - Auto-detection of m1f development repository vs. installed m1f
  - Automatic staging of generated bundles in `m1f/` directory
  - Comprehensive setup guide at `docs/05_development/56_git_hooks_setup.md`

- **Bundle Directory Migration**: Moved from `.m1f/` to `m1f/` for better AI
  tool compatibility

  - AI tools like Claude Code can now access bundled files directly
  - Generated bundles are included in version control by default
  - Automatic migration of configuration paths
  - Updated `m1f-link` command to create symlinks in `m1f/` directory
  - Added `m1f/README.md` explaining auto-generated files

- **Complete Preset Parameter Support**: ALL m1f parameters can now be
  configured via presets

  - Input/Output settings: source_directory, input_file, output_file,
    input_include_files
  - Output control: add_timestamp, filename_mtime_hash, force, minimal_output,
    skip_output_file
  - Archive settings: create_archive, archive_type
  - Runtime behavior: verbose, quiet
  - CLI arguments always take precedence over preset values
  - Enables simple commands like `m1f --preset production.yml`
  - Updated template-all-settings.m1f-presets.yml with all new parameters
  - Full documentation in docs/01_m1f/12_preset_reference.md

- **Auto-Bundle Subcommand**: Integrated auto-bundle functionality directly into
  m1f

  - New `auto-bundle` subcommand for creating multiple bundles from YAML config
  - Reads `.m1f.config.yml` from project root
  - Supports creating all bundles or specific bundles by name
  - `--list` option to show available bundles with descriptions
  - `--verbose` and `--quiet` options for output control
  - `m1f-update` command provides convenient access from anywhere
  - Full compatibility with existing `.m1f.config.yml` format
  - Supports all m1f options: presets, exclude/include files, conditional
    bundles
  - Updated `watch_and_bundle.sh` to use new auto-bundle functionality

- **Simplified Installation System**: Complete installer scripts for all
  platforms

  - New `install.sh` handles entire setup process (3 commands total!)
  - New `install.ps1` for Windows with full automation
  - Automatic Python 3.10+ version checking
  - Virtual environment creation and dependency installation
  - Initial bundle generation during setup
  - Smart shell detection for immediate PATH activation
  - `uninstall.sh` for clean removal

- **PATH-based Command System**: Replaced aliases with executable wrappers

  - Created `bin/` directory with standalone executable scripts
  - Each wrapper activates venv and runs appropriate tool
  - Works consistently across all shells and platforms
  - Optional symlink creation in ~/.local/bin

- **m1f-claude Command**: Smart prompt enhancement for Claude AI

  - New `m1f-claude` command that enhances prompts with m1f knowledge
  - Automatically injects m1f documentation context into prompts
  - Interactive mode for continued conversations
  - Project structure analysis for better suggestions
  - Contextual hints based on user intent (bundling, config, WordPress, AI
    context)
  - Integration with Claude Code CLI (if installed)
  - Comprehensive workflow guide at docs/01_m1f/30_claude_workflows.md

- **Enhanced Auto-Bundle Functionality**: Improved usability and flexibility

  - Config file search now traverses from current directory up to root
  - New `--group` parameter to create bundles by group (e.g.,
    `m1f auto-bundle --group documentation`)
  - Bundle grouping support in `.m1f.config.yml` with `group: "name"` field
  - Improved error messages when config file is not found
  - Enhanced `--list` output showing bundles organized by groups
  - Comprehensive documentation in `docs/01_m1f/20_auto_bundle_guide.md`
  - Examples for server-wide bundle management and automation

- **Join Paragraphs Feature**: Markdown optimization for LLMs

  - New `JOIN_PARAGRAPHS` processing action to compress markdown
  - Intelligently joins multi-line paragraphs while preserving structure
  - Preserves code blocks, tables, lists, and other markdown elements
  - Helps maximize content in the first 200 lines that LLMs read intensively
  - Available in presets for documentation bundles

- **S1F List Command**: Display archive contents without extraction

  - New `--list` flag to show files in m1f archives
  - Displays file information including size, encoding, and type
  - No longer shows SHA256 hashes for cleaner output
  - Useful for previewing archive contents before extraction

- **Configurable UTF-8 Preference**: Made UTF-8 encoding preference for text
  files configurable

  - Added `prefer_utf8_for_text_files` option to EncodingConfig (defaults to
    True)
  - New CLI flag `--no-prefer-utf8-for-text-files` to disable UTF-8 preference
  - Configurable via preset files through `prefer_utf8_for_text_files` setting
  - Affects only text files (.md, .markdown, .txt, .rst) when encoding detection
    is ambiguous

- **Configurable Content Deduplication**: Made content deduplication optional
  - Added `enable_content_deduplication` option to OutputConfig (defaults to
    True)
  - New CLI flag `--allow-duplicate-files` to include files with identical
    content
  - Configurable via preset files through `enable_content_deduplication` setting
  - Useful when you need to preserve all files regardless of duplicate content

### Fixed

- **Security**: Comprehensive path traversal protection across all tools

  - Added path validation to prevent directory traversal attacks
  - Block paths with `../` or `..\` patterns
  - Reject absolute paths in s1f extraction
  - Validate all user-provided file paths including symlink targets
  - Allow legitimate exceptions: home directory configs (~/.m1f/), output files

- **Markdown Format**: Fixed separator and content formatting issues

  - Content now properly starts on new line after code fence in markdown format
  - Added blank line between separator and content in parallel processing mode
  - Fixed S1F markdown parser to correctly handle language hint and newline
  - Fixed closing ``` for markdown format in parallel processing

- **S1F List Output**: Simplified file information display

  - Removed SHA256 hash display from list output
  - No longer shows "[Unknown]" for missing file sizes
  - Only displays file size when available

- **Standard Separator Format**: Removed checksum from display
  - Standard format now shows only file path without SHA256
  - Simplified output for better readability
  - Parser ignores separators inside code blocks to prevent false positives

### Changed

- **Parallel File Processing**: Enhanced performance for large projects

  - Added optional `--parallel` flag for concurrent file processing
  - Implemented asyncio-based batch handling with proper thread safety
  - Added locks for thread-safe checksum operations
  - Maintained file ordering in output despite parallel processing
  - Automatic fallback to sequential processing for single files

- **Auto-bundle config file** (`.m1f.config.yml`) updated with group
  categorization

  - Documentation bundles grouped under "documentation"
  - Source code bundles grouped under "source"
  - Complete project bundle in "complete" group

- **Command Naming Standardization**: All tools now use m1f- prefix

  - `s1f` → `m1f-s1f`
  - `html2md` → `m1f-html2md`
  - `webscraper` → `m1f-scrape`
  - `token-counter` → `m1f-token-counter`
  - Prevents naming conflicts with system commands

- **Module Execution**: Fixed import errors with proper module syntax

  - All scripts now use `python -m tools.m1f` format
  - Ensures reliable imports across different environments
  - Updated all documentation examples

- **WebScraper Rate Limiting**: Conservative defaults for Cloudflare protection

  - Changed default request delay from 0.5s to 15s
  - Reduced concurrent requests from 5 to 2
  - Added bandwidth limiting (100KB/s) and connection rate limits
  - Created cloudflare.yaml config with ultra-conservative 30s delays

- **Code Quality**: Comprehensive linting and formatting
  - Applied Black formatting to all Python code
  - Applied Prettier formatting to all Markdown files
  - Added/updated license headers across all source files
  - Removed deprecated test files and debug utilities

### Security

- **Path Traversal Protection**: Comprehensive validation across all tools

  - Prevents attackers from using paths like `../../../etc/passwd`
  - Validates resolved paths against project boundaries
  - Allows legitimate exceptions for configs and output files
  - Added extensive security tests

- **Scraper Security**: Enhanced security measures
  - Enforced robots.txt compliance with caching
  - Added URL validation to prevent SSRF attacks
  - Basic JavaScript validation to block dangerous scripts
  - Sanitized command arguments in HTTrack to prevent injection

### Improved

- **HTML2MD Enhancement**: Better file path handling

  - Improved source path logic for file inputs
  - Enhanced relative path resolution for edge cases
  - Consistent output path generation with fallback mechanisms
  - Removed hardcoded Anthropic-specific navigation selectors

- **Encoding Detection**: Enhanced fallback logic

  - Default to UTF-8 if chardet fails or returns empty
  - Prefer UTF-8 over Windows-1252 for markdown files
  - Expanded encoding map for better emoji support
  - Better handling of exotic encodings

- **Async I/O Support**: Performance optimizations

  - S1F now supports optional aiofiles for async file reading
  - Better handling of deprecated asyncio methods
  - Improved concurrent operation handling

- **Testing Infrastructure**: Comprehensive test improvements
  - Reorganized test structure for better clarity
  - Added path traversal security tests
  - Fixed all test failures (100% success rate)
  - Added pytest markers for test categorization
  - Improved test documentation

### Removed

- Obsolete scripts replaced by integrated functionality:
  - `scripts/auto_bundle.py` (now `m1f auto-bundle`)
  - `scripts/auto_bundle.sh` (now `m1f auto-bundle`)
  - `scripts/auto_bundle.ps1` (now `m1f auto-bundle`)
  - `scripts/update_m1f_files.sh` (now `m1f-update`)
  - `setup_m1f_aliases.sh` (replaced by bin/ directory)
  - Deprecated test files and debug utilities (~3000 lines removed)

## [3.1.0] - 2025-06-04

### Added - html2md

- **Custom Extractor System**: Site-specific content extraction
  - Pluggable extractor architecture for optimal HTML parsing
  - Support for function-based and class-based extractors
  - Extract, preprocess, and postprocess hooks
  - Dynamic loading of Python extractor files
  - Default extractor for basic navigation removal
- **Workflow Integration**: Organized .scrapes directory structure
  - Standard directory layout: html/, md/, extractors/
  - .scrapes directory added to .gitignore
  - Supports Claude-assisted extractor development
- **CLI Enhancement**: `--extractor` option for custom extraction logic
- **API Enhancement**: Extractor parameter in Html2mdConverter constructor

### Changed - html2md

- Removed all Anthropic-specific code from core modules
- Cleaned up api.py to remove hardcoded navigation selectors
- Improved modularity with separate extractor system

### Added - m1f

- **Multiple Exclude/Include Files Support**: Enhanced file filtering
  capabilities
  - `exclude_paths_file` and `include_paths_file` now accept multiple files
  - Files are merged in order, non-existent files are gracefully skipped
  - Include files work as whitelists - only matching files are processed
  - Full backward compatibility with single file syntax
  - CLI supports multiple files: `--exclude-paths-file file1 file2 file3`
  - YAML config supports both single file and list syntax

### Changed

- Enhanced file processor to handle pattern merging from multiple sources
- Updated CLI arguments to accept multiple files with `nargs="+"`
- Improved pattern matching for exact path excludes/includes

## [3.0.1] - 2025-06-04

### Fixed

- **Configuration Parsing**: Fixed YAML syntax error in .m1f.config.yml
  - Corrected array item syntax in include_files sections
  - Removed erroneous hyphens within square bracket array notation

## [3.0.0] - 2025-06-03

### Added

- **Python-based auto_bundle.py**: Cross-platform bundling implementation
  - Pure Python alternative to shell scripts
  - Improved include-extensions handling
  - Dynamic watcher ignores based on configuration
  - Global excludes support
  - Better error handling and logging
- **Enhanced Bundling Configuration**: Advanced m1f.config.yml structure
  - Config-based directory setup
  - Refined source rules for s1f-code and all bundles
  - Improved path handling for m1f/s1f separation
- **Depth-based Sorting**: Files and directories now sorted by depth for better
  organization
- **Improved Documentation**: Comprehensive updates to m1f documentation
  - Added CLI reference and troubleshooting guides
  - Enhanced preset system documentation
  - Clarified script invocation methods
  - Added quick reference guides
- **Testing Improvements**: Enhanced asyncio handling across test suites
  - Better pytest configuration for async tests
  - Preset configuration support in scrapers
  - Fixed import and linting issues
- **License Change**: Migrated from MIT to Apache 2.0 License
  - Added NOTICE file with proper attribution
  - Updated all license references throughout codebase

### Changed

- **Refactored Web Scraping Architecture**: Separated webscraper from HTML2MD
  - Cleaner separation of concerns
  - Better modularity for each tool
  - Improved maintainability
- **Build System Enhancements**: Overhauled build configuration
  - Optimized bundling for tool segregation
  - Added quiet flag to suppress unnecessary log file creation
  - Enhanced PowerShell support with auto_bundle.ps1
- **Documentation Structure**: Reorganized docs for better navigation
  - Renamed files for improved sorting
  - Moved changelog to dedicated location
  - Updated all references to new structure

### Fixed

- **Script Issues**: Multiple fixes for auto-bundling scripts
  - Corrected include-extensions parameter handling
  - Fixed config file parsing and argument handling
  - Resolved path resolution issues
- **Test Errors**: All test suite issues resolved
  - Fixed async test handling
  - Corrected import statements
  - Resolved linting issues (Black and Markdown)
- **Configuration Issues**: Fixed various config problems
  - Corrected output paths in m1f.config.yml
  - Fixed switch handling in scripts
  - Updated autobundler configurations

### Dependencies

- Updated aiohttp to 3.10.11 for security and performance improvements
- Added new packages to support enhanced functionality

---

### Original 3.0.0 Features (from earlier development)

- **Pluggable Web Scraper Backends**: HTML2MD now supports multiple scraper
  backends for different use cases
  - **Selectolax** (httpx + selectolax): Blazing fast HTML parsing with minimal
    resource usage
  - **Scrapy**: Industrial-strength web scraping framework with middleware
    support
  - **Playwright**: Browser automation for JavaScript-heavy sites and SPAs
  - Each scraper is optimized for specific scenarios:
    - Selectolax: Maximum performance for simple HTML (20+ concurrent requests)
    - Scrapy: Complex crawling with retry logic, caching, and auto-throttle
    - Playwright: Full JavaScript execution with multiple browser support
  - CLI option `--scraper` to select backend (beautifulsoup, httrack,
    selectolax, scrapy, playwright)
  - Backend-specific configuration files in `scrapers/configs/`
  - Graceful fallback when optional dependencies are not installed

### Changed

- **HTML2MD Version**: Bumped to 3.0.0 for major feature addition
- **Scraper Architecture**: Refactored to plugin-based system with abstract base
  class
- **Documentation**: Comprehensive updates for all scraper backends with
  examples
- **CLI**: Extended to support new scraper options and configuration
- **HTTrack Integration**: Replaced Python HTTrack module with native Linux
  httrack command
  - Now uses real HTTrack command-line tool for professional-grade website
    mirroring
  - Better performance, reliability, and standards compliance
  - Requires system installation: `sudo apt-get install httrack`
  - Enhanced command-line options mapping for HTTrack features

### Documentation

- Added Web Scraper Backends Guide (`docs/html2md_scraper_backends.md`)
- Updated HTML2MD documentation with new scraper examples
- Added configuration examples for each scraper backend

## [2.1.1] - 2025-05-25

### Changed

- Small documentation update
- Improved example consistency across documentation
- Updated file paths in test fixtures
- Cleaned up outdated references

## [2.1.0] - 2025-05-25

### Added

- **Preset System**: Flexible file-specific processing rules

  - Hierarchical preset loading: global (~/.m1f/) → user → project
  - Global settings: encoding, separator style, line endings, includes/excludes
  - Extension-specific processing: HTML minification, CSS compression, comment
    stripping
  - Built-in actions: minify, strip_tags, strip_comments, compress_whitespace,
    remove_empty_lines
  - Custom processors: truncate, redact_secrets, extract_functions
  - CLI options: `--preset`, `--preset-group`, `--disable-presets`
  - Example presets: WordPress, web projects, documentation
  - **Per-file-type overrides**: Different settings for different extensions
    - `security_check`: Enable/disable security scanning per file type
    - `max_file_size`: Different size limits for CSS, JS, PHP, etc.
    - `remove_scraped_metadata`: Clean HTML2MD files selectively
    - `include_dot_paths`, `include_binary_files`: File-type specific filtering
  - **Auto-bundling with presets**: New scripts and VS Code tasks
    - `scripts/auto_bundle_preset.sh` - Preset-based intelligent bundling
    - `tasks/auto_bundle.json` - 11 VS Code tasks for automated bundling
    - Focus areas: WordPress, web projects, documentation
    - Integration with preset system for file-specific processing
  - **Test suite**: Basic preset functionality tests
    - Global settings and file filtering tests
    - File-specific action processing tests
    - Integration verification

- **Auto-bundling System**: Automatic project organization for AI/LLM
  consumption
  - `scripts/auto_bundle.sh` - Basic bundling with predefined categories
  - `scripts/auto_bundle_v2.sh` - Advanced bundling with YAML configuration
  - `.m1f.config.yml` - Customizable bundle definitions and priorities
  - `scripts/watch_and_bundle.sh` - File watcher for automatic updates
  - Bundle types: docs, src, tests, complete, and custom focus areas
- **Claude Code Integration** (optional): AI-powered tool automation

  - `tools/claude_orchestrator.py` - Natural language command processing
  - Integration with Claude Code CLI for workflow automation
  - Project-specific `.claude/settings.json` configuration
  - Example workflows and documentation

- **HTML2MD Preprocessing System**: Configurable HTML cleaning
  - `tools/html2md/analyze_html.py` - Analyze HTML for preprocessing patterns
  - `tools/html2md/preprocessors.py` - Generic preprocessing framework
  - Removed hardcoded project-specific logic
  - Support for custom preprocessing configurations per project

### Changed

- HTML2MD now uses configurable preprocessing instead of hardcoded rules
- Updated documentation structure to include new features

### Fixed

- Preset `strip_tags` action now properly strips all HTML tags when no specific
  tags are specified
- Added missing `get_file_specific_settings` method to PresetManager class

### Documentation

- Added Preset System Guide (`docs/m1f_presets.md`)
- Added Auto Bundle Guide (`docs/AUTO_BUNDLE_GUIDE.md`)
- Added Claude Code Integration Guide (`docs/CLAUDE_CODE_INTEGRATION.md`)
- Added example workflows (`examples/claude_workflows.md`)
- Updated main documentation index with new features

## [2.0.1] - 2025-05-25

### Fixed

- All test suite failures now pass (100% success rate)
  - S1F: Fixed content normalization and timestamp tolerance issues
  - M1F: Fixed encoding test with proper binary file handling
  - HTML2MD: Fixed server tests and API implementation
  - Security: Fixed warning log format detection with ANSI codes
- Documentation formatting and consistency issues

### Changed

- Applied Black formatting to all Python code
- Applied Prettier formatting to all Markdown files
- Updated all documentation to consistently use module execution syntax

### Documentation

- Updated all docs to reflect v2.0.0 architecture changes
- Added architecture sections to all tool documentation
- Modernized API examples with async/await patterns
- Updated token limits for latest LLM models

## [2.0.0] - 2025-05-25

### 🚀 Major Architectural Overhaul

This is a major release featuring complete architectural modernization of the
m1f project, bringing it to Python 3.10+ standards with significant performance
improvements and new features.

### Added

- **HTML2MD Converter**: New tool for converting HTML to Markdown with HTTrack
  integration for website scraping
  - CSS selector-based content extraction
  - Configurable crawl depth and domain restrictions
  - Metadata preservation and frontmatter generation
  - Integration with m1f for bundle creation
- **Content Deduplication**: Automatic detection and removal of duplicate file
  content based on SHA256 checksums
- **Symlink Support**: Smart symlink handling with cycle detection
- **File Size Filtering**: New `--max-file-size` parameter with unit support (B,
  KB, MB, GB, TB)
- **Metadata Removal**: New `--remove-scraped-metadata` option for cleaning
  HTML2MD scraped content
- **Colorized Output**: Beautiful console output with progress indicators
- **Async I/O**: Concurrent file operations for better performance
- **Type Hints**: Comprehensive type annotations using Python 3.10+ features
- **Test Infrastructure**: pytest-timeout for reliable test execution

### Changed

- **Complete Architecture Rewrite**:
  - m1f transformed from monolithic script to modular package
  - s1f transformed from monolithic script to modular package
  - Clean architecture with dependency injection and SOLID principles
- **Python Requirements**: Now requires Python 3.10+ (previously 3.9+)
- **Enhanced Security**: Improved security scanning and validation
- **Better Error Handling**: Custom exception hierarchies with specific error
  types
- **Improved Logging**: Structured logging with configurable levels and colors

### Fixed

- All test suite failures (205 tests now passing)
- S1F content normalization and timestamp tolerance issues
- M1F encoding tests with proper binary file support
- HTML2MD frontmatter generation and CLI integration
- Security warning log format handling
- Path resolution issues in tests
- Memory efficiency for large file handling

### Security

- Removed dangerous placeholder directory creation
- Enhanced input validation
- Better path sanitization
- Improved handling of sensitive data detection

### Breaking Changes

- Internal APIs completely reorganized (CLI remains compatible)
- Module structure changed from single files to packages
- Python 3.10+ now required (was 3.9+)
- Some internal functions renamed or relocated

---

## [1.4.0] - 2025-05-19

### Added

- WordPress content export functionality (`wp_export_md.py`)
- Support for exporting WordPress posts, pages, and custom post types
- Conversion of WordPress HTML content to clean Markdown
- Preservation of WordPress metadata (author, date, categories, tags)
- Flexible filtering options for content export

### Changed

- Improved documentation structure
- Enhanced error handling in export tools

### Fixed

- Various minor bug fixes and improvements

---

## [1.3.0] - 2025-05-18

### Added

- `--max-file-size` parameter for filtering large files
- Size unit support (B, KB, MB, GB, TB)
- Recommended 50KB limit for text file merging

### Changed

- Improved file size handling and validation
- Better error messages for size-related issues

### Fixed

- File size calculation accuracy
- Edge cases in size parsing

---

## [1.2.0] - 2025-05-17

### Added

- Symlink handling with `--include-symlinks` and `--ignore-symlinks` options
- Cycle detection for symlinks to prevent infinite loops
- `--security-check` option with configurable levels (skip, warn, fail)
- Integration with detect-secrets for sensitive data detection

### Changed

- Improved file path resolution
- Better handling of special file types

### Fixed

- Symlink recursion issues
- Security scanning false positives

---

## [1.1.0] - 2025-05-16

### Added

- Content deduplication feature
- `--filename-mtime-hash` option for tracking file changes
- Better support for various text encodings
- Custom argument parser with improved error messages

### Changed

- Optimized file reading for better performance
- Improved separator style formatting
- Enhanced logging output

### Fixed

- Encoding detection issues
- Hash generation consistency
- Memory usage for large projects

---

## [1.0.0] - 2025-05-15

### Added

- Initial release of m1f (Make One File)
- s1f (Split One File) companion tool
- Basic file combination functionality
- Multiple separator styles (XML, Markdown, Plain)
- Gitignore support
- Archive creation (ZIP, TAR)
- Token counting for LLM context estimation

### Features

- Combine multiple files into single output
- Preserve file structure and metadata
- Configurable file filtering
- Multiple output formats
- Cross-platform compatibility

======= docs/SETUP.md ======
# m1f Setup Guide

## Prerequisites

You only need:

- **Python 3.10+** (check with `python --version` or `python3 --version`)
- **Git** (to clone the repository)

That's all! The installer handles everything else.

## Installation

### Linux/macOS

```bash
git clone https://github.com/franz-agency/m1f.git
cd m1f
source ./scripts/install.sh
```

**Important**: Use `source` (not just `./scripts/install.sh`) to activate
commands immediately.

### Windows

```powershell
git clone https://github.com/franz-agency/m1f.git
cd m1f
.\scripts\install.ps1
```

Then either:

- Restart PowerShell (recommended), or
- Reload profile: `. $PROFILE`

## What the Installer Does

The installation script automatically:

- ✅ Checks Python version (3.10+ required)
- ✅ Creates virtual environment
- ✅ Installs all dependencies
- ✅ Adds commands to your PATH
- ✅ Creates global command shortcuts
- ✅ Sets up symlinks

## Test Your Installation

```bash
m1f-help
m1f --help
```

## Available Commands

After installation, these commands are available globally:

- `m1f` - Main tool for combining files
- `m1f-s1f` - Split combined files back to original structure
- `m1f-html2md` - Convert HTML to Markdown
- `m1f-scrape` - Download websites for offline viewing
- `m1f-token-counter` - Count tokens in files
- `m1f-update` - Regenerate all m1f bundles
- `m1f-init` - Initialize m1f for your project (replaces m1f-link)
- `m1f-claude` - A wrapper for Claude AI and send infos about m1f. So claude now
  knows how to work with m1f
- `m1f-help` - Show help for all commands

## Uninstall

### Linux/macOS

```bash
cd /path/to/m1f
./scripts/uninstall.sh
```

### Windows

```powershell
cd C:\path\to\m1f
.\scripts\uninstall.ps1
```

---

## Manual Installation (Advanced)

If you prefer to install manually or the automatic installation fails:

### 1. Prerequisites

- Python 3.10 or higher
- Git
- pip

### 2. Clone and Setup Virtual Environment

```bash
git clone https://github.com/franz-agency/m1f.git
cd m1f

# Create virtual environment
python3 -m venv .venv

# Activate virtual environment
# Linux/macOS:
source .venv/bin/activate
# Windows PowerShell:
.\.venv\Scripts\Activate.ps1
# Windows cmd:
.venv\Scripts\activate.bat

# Install dependencies
pip install -r requirements.txt
```

### 3. Generate Initial Bundles

```bash
m1f-update
```

### 4. Add to PATH

#### Linux/macOS

Add to your shell configuration file (`~/.bashrc` or `~/.zshrc`):

```bash
export PATH="/path/to/m1f/bin:$PATH"  # m1f tools
```

Then reload:

```bash
source ~/.bashrc  # or ~/.zshrc
```

#### Windows

**Option A: PowerShell Functions**

The install script already configures PowerShell functions. To reload them:

```powershell
. $PROFILE
```

**Option B: Add to System PATH**

1. Create batch files in a directory (e.g., `C:\m1f\batch\`)
2. Add that directory to your system PATH:
   - Win + X → System → Advanced system settings
   - Environment Variables → Path → Edit → New
   - Add your batch directory path

Example batch file (`m1f.bat`):

```batch
@echo off
cd /d "C:\path\to\m1f"
call .venv\Scripts\activate.bat
m1f %*
```

Create similar batch files for:

- `m1f-s1f.bat` → `m1f-s1f %*`
- `m1f-html2md.bat` → `m1f-html2md %*`
- `m1f-scrape.bat` → `m1f-scrape %*`
- `m1f-token-counter.bat` → `m1f-token-counter %*`

## Using m1f in Other Projects

### Quick Setup for AI-Assisted Development

When starting a new project with m1f, use the `m1f-init` command for quick
setup:

```bash
cd /your/project
m1f-init
```

This command:

- Creates `m1f/m1f.txt` - a symlink to the complete m1f documentation
- Analyzes your project structure
- Generates initial bundles with auxiliary files:
  - `m1f/<project>_complete.txt` - Full project bundle
  - `m1f/<project>_complete_filelist.txt` - List of all included files
  - `m1f/<project>_complete_dirlist.txt` - List of all directories
  - `m1f/<project>_docs.txt` - Documentation bundle
  - `m1f/<project>_docs_filelist.txt` - List of documentation files
  - `m1f/<project>_docs_dirlist.txt` - Documentation directories
- Creates a basic `.m1f.config.yml`
- Shows platform-specific next steps

#### Working with Generated File Lists

The file lists created by `m1f-init` can be edited to customize future bundles:

```bash
# Edit the complete file list to remove unwanted files
vi m1f/<project>_complete_filelist.txt

# Use the edited list to create a custom bundle
m1f -i m1f/<project>_complete_filelist.txt -o m1f/custom_bundle.txt

# Create a bundle from specific directories (edit dirlist first)
m1f -s . -i m1f/selected_dirs.txt -o m1f/specific_areas.txt
```

For advanced setup with topic-specific bundles (Linux/macOS only):

```bash
m1f-claude --setup
```

#### Example AI Prompts:

```bash
# Ask Claude Code to create a configuration
"Please read @m1f/m1f.txt and create a .m1f.config.yml
for my Python web project"

# Get help with specific use cases
"Based on @m1f/m1f.txt, how do I exclude all test
files but include fixture data?"

# Troubleshoot issues
"I'm getting this error: [error message]. Can you check
@m1f/m1f.txt to help me fix it?"
```

The AI will understand:

- All m1f commands and parameters
- How to create `.m1f.config.yml` files
- Preset system and file processing options
- Best practices for different project types

## Troubleshooting

### Python Version Error

Install Python 3.10+ from [python.org](https://python.org)

### PowerShell Execution Policy (Windows)

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

### Command Not Found

- Linux/macOS: Make sure you've run `source ~/.bashrc` (or `~/.zshrc`)
- Windows: Restart PowerShell or Command Prompt

### Permission Errors

- Linux/macOS: Make sure scripts are executable: `chmod +x scripts/*.sh`
- Windows: Run PowerShell as Administrator if needed

## Next Steps

- Read the
  [M1F Development Workflow](docs/01_m1f/04_m1f_development_workflow.md)
- Check out example presets in `presets/`
- Run `m1f --help` to explore options

======= examples/README.md ======
# m1f Examples

## scrape_claude_code_docs.py

Creates a bundled documentation file from the Claude Code documentation website.

### What it does

1. **Scrapes** ~30 HTML pages from docs.anthropic.com/claude-code
2. **Analyzes** HTML structure using Claude AI
3. **Converts** HTML to clean Markdown
4. **Creates** documentation bundle using m1f-init

### Usage

```bash
python examples/scrape_claude_code_docs.py <target_directory>
```

Example:

```bash
python examples/scrape_claude_code_docs.py ~/claude-doc
```

### Timing

⏱️ **Total duration: ~15-20 minutes**

- Scraping: 7-8 minutes (30 pages with 15s delays)
- Claude analysis: 5-8 minutes
- Conversion & bundling: <2 minutes

### Capture output to file

To save the entire process log:

```bash
cd /path/to/m1f
script -c "python examples/scrape_claude_code_docs.py ~/claude-doc" ~/claude-code-doc-scrape.txt
```

### Ideal usage (with virtual environment)

The recommended way to run this script with full output capture:

```bash
# Create output directory
mkdir ~/claude-code-doc

# Run with virtual environment and capture output
script -c "source ./.venv/bin/activate && python examples/scrape_claude_code_docs.py ~/claude-code-doc" \
    ~/claude-code-doc/claude-code-doc-scrape.txt
```

### Output

The script creates a documentation bundle at:

```
<target_directory>/claude-code-markdown/m1f/claude-code-markdown_docs.txt
```

You can then:

- Create a symlink: `ln -s <bundle_path> ~/claude-code-docs.txt`
- Copy the file: `cp <bundle_path> <destination>`
- Use with Claude: `m1f-claude <bundle_path>`

### Requirements

- Python 3.10+
- m1f toolkit installed (`pip install m1f`)
- Internet connection

======= research-data/README.md ======
# Research Data Directory

This directory contains all data generated by the m1f-research tool, including:

- **Scraped web content** - Raw HTML and converted Markdown files from web
  scraping
- **Research bundles** - Organized collections of research results
- **Metadata** - JSON files with research metadata and statistics
- **Analysis results** - LLM-generated analysis and summaries

## Structure

```
research-data/
├── README.md                 # This file
└── [topic-YYYYMMDD-HHMMSS]/ # Research sessions
    ├── research-bundle.md    # Main research bundle
    ├── metadata.json         # Research metadata
    ├── search_results.json   # Found URLs
    └── scraped/              # Individual scraped content
        └── [domain]/         # Content organized by domain
```

## Usage

When you run `m1f-research`, the output is automatically saved here unless you
specify a different location with `--output`.

Example:

```bash
m1f-research "python async programming"
# Output saved to: ./research-data/python-async-programming-20240120-143022/
```

## Why This Directory?

- **Persistent Storage**: Research results are saved for future reference
- **Organization**: Each research session gets its own timestamped folder
- **Gitignore**: All contents (except this README) are excluded from version
  control
- **Clean Separation**: Keeps research data separate from source code

## Note

This directory is excluded from git (except this README) because:

- Research data can be large
- Content is user-specific
- Data can be regenerated
- May contain scraped content with various licenses

======= src/claude-code-doc.txt ======
========================================================================================
== FILE: amazon-bedrock/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 9.46 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 44f1baa7e81b33437dc4a56c316147586e2316aec7bd856b344da7aa69696dfc
========================================================================================
Claude Code on Amazon Bedrock - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Claude Code on Amazon Bedrock

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#prerequisites) Prerequisites

Before configuring Claude Code with Bedrock, ensure you have:


- An AWS account with Bedrock access enabled

- Access to desired Claude models (e.g., Claude Sonnet 4) in Bedrock

- AWS CLI installed and configured (optional - only needed if you don’t have another mechanism for getting credentials)

- Appropriate IAM permissions


## [​](#setup) Setup


### [​](#1-enable-model-access) 1. Enable model access

First, ensure you have access to the required Claude models in your AWS account:

1. Navigate to the [Amazon Bedrock console](https://console.aws.amazon.com/bedrock/)
2. Go to **Model access** in the left navigation
3. Request access to desired Claude models (e.g., Claude Sonnet 4)
4. Wait for approval (usually instant for most regions)


### [​](#2-configure-aws-credentials) 2. Configure AWS credentials

Claude Code uses the default AWS SDK credential chain. Set up your credentials using one of these methods:

**Option A: AWS CLI configuration**

````bash
aws configure
````

**Option B: Environment variables (access key)**

````bash
export AWS_ACCESS_KEY_ID=your-access-key-id
export AWS_SECRET_ACCESS_KEY=your-secret-access-key
export AWS_SESSION_TOKEN=your-session-token
````

**Option C: Environment variables (SSO profile)**

````bash
aws sso login --profile=<your-profile-name>
export AWS_PROFILE=your-profile-name
````

**Option D: Bedrock API keys**

````bash
export AWS_BEARER_TOKEN_BEDROCK=your-bedrock-api-key
````

Bedrock API keys provide a simpler authentication method without needing full AWS credentials. [Learn more about Bedrock API keys](https://aws.amazon.com/blogs/machine-learning/accelerate-ai-development-with-amazon-bedrock-api-keys/).


#### [​](#advanced-credential-configuration) Advanced credential configuration

Claude Code supports two configuration settings for dynamic AWS credential management:


##### `awsAuthRefresh`

This setting specifies a command for foreground authentication operations where output is visible to the user. It is typically used for SSO browser flows.

Example:

````json
{
"awsAuthRefresh": "aws sso login --profile myprofile"
}
````


##### `awsCredentialExport`

This setting specifies a command that outputs AWS credentials in JSON format to stdout. The output is not displayed to the user, but is used by Claude Code for subsequent Bedrock requests.

Required output format is JSON with the following properties:

````json
{
"Credentials": {
"AccessKeyId": "value",
"SecretAccessKey": "value",
"SessionToken": "value"
}
}
````

Example:

````json
{
"awsCredentialExport": "aws sts get-session-token --profile myprofile --output json"
}
````

These settings can be used to call scripts that invoke alternative identity systems.


### [​](#3-configure-claude-code) 3. Configure Claude Code

Set the following environment variables to enable Bedrock:

````bash

# Enable Bedrock integration
export CLAUDE_CODE_USE_BEDROCK=1
export AWS_REGION=us-east-1 # or your preferred region

# Optional: Override the region for the small/fast model (Haiku)
export ANTHROPIC_SMALL_FAST_MODEL_AWS_REGION=us-west-2
````

When enabling Bedrock for Claude Code, keep the following in mind:


- `AWS_REGION` is a required environment variable. Claude Code does not read from the `.aws` config file for this setting.

- When using Bedrock, the `/login` and `/logout` commands are disabled since authentication is handled through AWS credentials.

- You can use settings files for environment variables like `AWS_PROFILE` that you don’t want to leak to other processes. See [Settings](./en/docs/claude-code/settings/index.md) for more information.


### [​](#4-model-configuration) 4. Model configuration

Claude Code uses these default models for Bedrock:

| Model type | Default value |
| --- | --- |
| Primary model | `us.anthropic.claude-3-7-sonnet-20250219-v1:0` |
| Small/fast model | `us.anthropic.claude-3-5-haiku-20241022-v1:0` |

To customize models, use one of these methods:

````bash

# Using inference profile ID
export ANTHROPIC_MODEL='us.anthropic.claude-opus-4-20250514-v1:0'
export ANTHROPIC_SMALL_FAST_MODEL='us.anthropic.claude-3-5-haiku-20241022-v1:0'

# Using application inference profile ARN
export ANTHROPIC_MODEL='arn:aws:bedrock:us-east-2:your-account-id:application-inference-profile/your-model-id'

# Optional: Disable prompt caching if needed
export DISABLE_PROMPT_CACHING=1
````

[Prompt caching](./en/docs/build-with-claude/prompt-caching/index.md) may not be available in all regions


## [​](#iam-configuration) IAM configuration

Create an IAM policy with the required permissions for Claude Code:

````json
{
"Version": "2012-10-17",
"Statement": [
{
"Effect": "Allow",
"Action": [
"bedrock:InvokeModel",
"bedrock:InvokeModelWithResponseStream",
"bedrock:ListInferenceProfiles"
],
"Resource": [
"arn:aws:bedrock:*:*:inference-profile/*",
"arn:aws:bedrock:*:*:application-inference-profile/*"
]
}
]
}
````

For more restrictive permissions, you can limit the Resource to specific inference profile ARNs.

For details, see [Bedrock IAM documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/security-iam.html).

We recommend creating a dedicated AWS account for Claude Code to simplify cost tracking and access control.


## [​](#troubleshooting) Troubleshooting

If you encounter region issues:


- Check model availability: `aws bedrock list-inference-profiles --region your-region`

- Switch to a supported region: `export AWS_REGION=us-east-1`

- Consider using inference profiles for cross-region access

If you receive an error “on-demand throughput isn’t supported”:


- Specify the model as an [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html) ID


## [​](#additional-resources) Additional resources


- [Bedrock documentation](https://docs.aws.amazon.com/bedrock/)

- [Bedrock pricing](https://aws.amazon.com/bedrock/pricing/)

- [Bedrock inference profiles](https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html)

- [Claude Code on Amazon Bedrock: Quick Setup Guide](https://community.aws/content/2tXkZKrZzlrlu0KfH8gST5Dkppq/claude-code-on-amazon-bedrock-quick-setup-guide)

Was this page helpful?

YesNo

[Overview](./en/docs/claude-code/third-party-integrations/index.md)[Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

On this page


- [Prerequisites](#prerequisites)

- [Setup](#setup)

- [1. Enable model access](#1-enable-model-access)

- [2. Configure AWS credentials](#2-configure-aws-credentials)

- [Advanced credential configuration](#advanced-credential-configuration)

- [3. Configure Claude Code](#3-configure-claude-code)

- [4. Model configuration](#4-model-configuration)

- [IAM configuration](#iam-configuration)

- [Troubleshooting](#troubleshooting)

- [Additional resources](#additional-resources)

========================================================================================
== FILE: analytics/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 5.98 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 8f23ca3f7d655931ba9c6df2918502e78988c1e1edfcd1c51a19bba4d8c54d4d
========================================================================================
Analytics - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Analytics

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code provides an analytics dashboard that helps organizations understand developer usage patterns, track productivity metrics, and optimize their Claude Code adoption.

Analytics are currently available only for organizations using Claude Code with the Anthropic API through the Anthropic Console.


## [​](#access-analytics) Access analytics

Navigate to the analytics dashboard at [console.anthropic.com/claude\_code](https://console.anthropic.com/claude_code).


### [​](#required-roles) Required roles


- **Primary Owner**

- **Owner**

- **Billing**

- **Admin**

- **Developer**

Users with **User**, **Claude Code User** or **Membership Admin** roles cannot access analytics.


## [​](#available-metrics) Available metrics


### [​](#lines-of-code-accepted) Lines of code accepted

Total lines of code written by Claude Code that users have accepted in their sessions.


- Excludes rejected code suggestions

- Doesn’t track subsequent deletions


### [​](#suggestion-accept-rate) Suggestion accept rate

Percentage of times users accept code editing tool usage, including:


- Edit

- MultiEdit

- Write

- NotebookEdit


### [​](#activity) Activity

**users**: Number of active users in a given day (number on left Y-axis)

**sessions**: Number of active sessions in a given day (number on right Y-axis)


### [​](#spend) Spend

**users**: Number of active users in a given day (number on left Y-axis)

**spend**: Total dollars spent in a given day (number on right Y-axis)


### [​](#team-insights) Team insights

**Members**: All users who have authenticated to Claude Code


- API key users are displayed by **API key identifier**

- OAuth users are displayed by **email address**

**Avg daily spend:** Per-user average spend for the current month. For example, on July 10, this reflects the average daily spend over 10 days.

**Avg lines/day:** Per-user average of accepted code lines for the current month.


## [​](#using-analytics-effectively) Using analytics effectively


### [​](#monitor-adoption) Monitor adoption

Track team member status to identify:


- Active users who can share best practices

- Overall adoption trends across your organization


### [​](#measure-productivity) Measure productivity

Tool acceptance rates and code metrics help you:


- Understand developer satisfaction with Claude Code suggestions

- Track code generation effectiveness

- Identify opportunities for training or process improvements


## [​](#related-resources) Related resources


- [Monitoring usage with OpenTelemetry](./en/docs/claude-code/monitoring-usage/index.md) for custom metrics and alerting

- [Identity and access management](./en/docs/claude-code/iam/index.md) for role configuration

Was this page helpful?

YesNo

[Costs](./en/docs/claude-code/costs/index.md)[Settings](./en/docs/claude-code/settings/index.md)

On this page


- [Access analytics](#access-analytics)

- [Required roles](#required-roles)

- [Available metrics](#available-metrics)

- [Lines of code accepted](#lines-of-code-accepted)

- [Suggestion accept rate](#suggestion-accept-rate)

- [Activity](#activity)

- [Spend](#spend)

- [Team insights](#team-insights)

- [Using analytics effectively](#using-analytics-effectively)

- [Monitor adoption](#monitor-adoption)

- [Measure productivity](#measure-productivity)

- [Related resources](#related-resources)

========================================================================================
== FILE: cli-reference/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 7.02 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: b90cb899539d1549f952fd48bc225317653406c0bad895061de3ec6d76da613a
========================================================================================
CLI reference - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

CLI reference

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#cli-commands) CLI commands

| Command | Description | Example |
| --- | --- | --- |
| `claude` | Start interactive REPL | `claude` |
| `claude "query"` | Start REPL with initial prompt | `claude "explain this project"` |
| `claude -p "query"` | Query via SDK, then exit | `claude -p "explain this function"` |
| `cat file | claude -p "query"` | Process piped content | `cat logs.txt | claude -p "explain"` |
| `claude -c` | Continue most recent conversation | `claude -c` |
| `claude -c -p "query"` | Continue via SDK | `claude -c -p "Check for type errors"` |
| `claude -r "<session-id>" "query"` | Resume session by ID | `claude -r "abc123" "Finish this PR"` |
| `claude update` | Update to latest version | `claude update` |
| `claude mcp` | Configure Model Context Protocol (MCP) servers | See the [Claude Code MCP documentation](./en/docs/claude-code/mcp/index.md). |


## [​](#cli-flags) CLI flags

Customize Claude Code’s behavior with these command-line flags:

| Flag | Description | Example |
| --- | --- | --- |
| `--add-dir` | Add additional working directories for Claude to access (validates each path exists as a directory) | `claude --add-dir ../apps ../lib` |
| `--allowedTools` | A list of tools that should be allowed without prompting the user for permission, in addition to [settings.json files](./en/docs/claude-code/settings/index.md) | `"Bash(git log:*)" "Bash(git diff:*)" "Read"` |
| `--disallowedTools` | A list of tools that should be disallowed without prompting the user for permission, in addition to [settings.json files](./en/docs/claude-code/settings/index.md) | `"Bash(git log:*)" "Bash(git diff:*)" "Edit"` |
| `--print`, `-p` | Print response without interactive mode (see [SDK documentation](./en/docs/claude-code/sdk/index.md) for programmatic usage details) | `claude -p "query"` |
| `--output-format` | Specify output format for print mode (options: `text`, `json`, `stream-json`) | `claude -p "query" --output-format json` |
| `--input-format` | Specify input format for print mode (options: `text`, `stream-json`) | `claude -p --output-format json --input-format stream-json` |
| `--verbose` | Enable verbose logging, shows full turn-by-turn output (helpful for debugging in both print and interactive modes) | `claude --verbose` |
| `--max-turns` | Limit the number of agentic turns in non-interactive mode | `claude -p --max-turns 3 "query"` |
| `--model` | Sets the model for the current session with an alias for the latest model (`sonnet` or `opus`) or a model’s full name | `claude --model claude-sonnet-4-20250514` |
| `--permission-mode` | Begin in a specified [permission mode](iam#permission-modes) | `claude --permission-mode plan` |
| `--permission-prompt-tool` | Specify an MCP tool to handle permission prompts in non-interactive mode | `claude -p --permission-prompt-tool mcp_auth_tool "query"` |
| `--resume` | Resume a specific session by ID, or by choosing in interactive mode | `claude --resume abc123 "query"` |
| `--continue` | Load the most recent conversation in the current directory | `claude --continue` |
| `--dangerously-skip-permissions` | Skip permission prompts (use with caution) | `claude --dangerously-skip-permissions` |

The `--output-format json` flag is particularly useful for scripting and
automation, allowing you to parse Claude’s responses programmatically.

For detailed information about print mode (`-p`) including output formats,
streaming, verbose logging, and programmatic usage, see the
[SDK documentation](./en/docs/claude-code/sdk/index.md).


## [​](#see-also) See also


- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md) - Shortcuts, input modes, and interactive features

- [Slash commands](./en/docs/claude-code/slash-commands/index.md) - Interactive session commands

- [Quickstart guide](./en/docs/claude-code/quickstart/index.md) - Getting started with Claude Code

- [Common workflows](./en/docs/claude-code/common-workflows/index.md) - Advanced workflows and patterns

- [Settings](./en/docs/claude-code/settings/index.md) - Configuration options

- [SDK documentation](./en/docs/claude-code/sdk/index.md) - Programmatic usage and integrations

Was this page helpful?

YesNo

[Memory management](./en/docs/claude-code/memory/index.md)[Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

On this page


- [CLI commands](#cli-commands)

- [CLI flags](#cli-flags)

- [See also](#see-also)

========================================================================================
== FILE: common-workflows/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 22.45 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: d3443403b5f371ff83c4ab75b0e26994ea5c172379f792748191bb2894a7a1f4
========================================================================================
Common workflows - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Getting started

Common workflows

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Each task in this document includes clear instructions, example commands, and best practices to help you get the most from Claude Code.


## [​](#understand-new-codebases) Understand new codebases


### [​](#get-a-quick-codebase-overview) Get a quick codebase overview

Suppose you’ve just joined a new project and need to understand its structure quickly.

1

Navigate to the project root directory

````bash
cd /path/to/project
````

2

Start Claude Code

````bash
claude
````

3

Ask for a high-level overview

```
> give me an overview of this codebase 

```

4

Dive deeper into specific components

```
> explain the main architecture patterns used here 

```

```
> what are the key data models?

```

```
> how is authentication handled?

```

Tips:


- Start with broad questions, then narrow down to specific areas

- Ask about coding conventions and patterns used in the project

- Request a glossary of project-specific terms


### [​](#find-relevant-code) Find relevant code

Suppose you need to locate code related to a specific feature or functionality.

1

Ask Claude to find relevant files

```
> find the files that handle user authentication 

```

2

Get context on how components interact

```
> how do these authentication files work together? 

```

3

Understand the execution flow

```
> trace the login process from front-end to database 

```

Tips:


- Be specific about what you’re looking for

- Use domain language from the project

---


## [​](#fix-bugs-efficiently) Fix bugs efficiently

Suppose you’ve encountered an error message and need to find and fix its source.

1

Share the error with Claude

```
> I'm seeing an error when I run npm test 

```

2

Ask for fix recommendations

```
> suggest a few ways to fix the @ts-ignore in user.ts 

```

3

Apply the fix

```
> update user.ts to add the null check you suggested 

```

Tips:


- Tell Claude the command to reproduce the issue and get a stack trace

- Mention any steps to reproduce the error

- Let Claude know if the error is intermittent or consistent

---


## [​](#refactor-code) Refactor code

Suppose you need to update old code to use modern patterns and practices.

1

Identify legacy code for refactoring

```
> find deprecated API usage in our codebase 

```

2

Get refactoring recommendations

```
> suggest how to refactor utils.js to use modern JavaScript features 

```

3

Apply the changes safely

```
> refactor utils.js to use ES2024 features while maintaining the same behavior 

```

4

Verify the refactoring

```
> run tests for the refactored code 

```

Tips:


- Ask Claude to explain the benefits of the modern approach

- Request that changes maintain backward compatibility when needed

- Do refactoring in small, testable increments

---


## [​](#work-with-tests) Work with tests

Suppose you need to add tests for uncovered code.

1

Identify untested code

```
> find functions in NotificationsService.swift that are not covered by tests 

```

2

Generate test scaffolding

```
> add tests for the notification service 

```

3

Add meaningful test cases

```
> add test cases for edge conditions in the notification service 

```

4

Run and verify tests

```
> run the new tests and fix any failures 

```

Tips:


- Ask for tests that cover edge cases and error conditions

- Request both unit and integration tests when appropriate

- Have Claude explain the testing strategy

---


## [​](#create-pull-requests) Create pull requests

Suppose you need to create a well-documented pull request for your changes.

1

Summarize your changes

```
> summarize the changes I've made to the authentication module 

```

2

Generate a PR with Claude

```
> create a pr 

```

3

Review and refine

```
> enhance the PR description with more context about the security improvements 

```

4

Add testing details

```
> add information about how these changes were tested 

```

Tips:


- Ask Claude directly to make a PR for you

- Review Claude’s generated PR before submitting

- Ask Claude to highlight potential risks or considerations


## [​](#handle-documentation) Handle documentation

Suppose you need to add or update documentation for your code.

1

Identify undocumented code

```
> find functions without proper JSDoc comments in the auth module 

```

2

Generate documentation

```
> add JSDoc comments to the undocumented functions in auth.js 

```

3

Review and enhance

```
> improve the generated documentation with more context and examples 

```

4

Verify documentation

```
> check if the documentation follows our project standards 

```

Tips:


- Specify the documentation style you want (JSDoc, docstrings, etc.)

- Ask for examples in the documentation

- Request documentation for public APIs, interfaces, and complex logic

---


## [​](#work-with-images) Work with images

Suppose you need to work with images in your codebase, and you want Claude’s help analyzing image content.

1

Add an image to the conversation

You can use any of these methods:

1. Drag and drop an image into the Claude Code window
2. Copy an image and paste it into the CLI with ctrl+v (Do not use cmd+v)
3. Provide an image path to Claude. E.g., “Analyze this image: /path/to/your/image.png”

2

Ask Claude to analyze the image

```
> What does this image show?

```

```
> Describe the UI elements in this screenshot

```

```
> Are there any problematic elements in this diagram?

```

3

Use images for context

```
> Here's a screenshot of the error. What's causing it?

```

```
> This is our current database schema. How should we modify it for the new feature?

```

4

Get code suggestions from visual content

```
> Generate CSS to match this design mockup

```

```
> What HTML structure would recreate this component?

```

Tips:


- Use images when text descriptions would be unclear or cumbersome

- Include screenshots of errors, UI designs, or diagrams for better context

- You can work with multiple images in a conversation

- Image analysis works with diagrams, screenshots, mockups, and more

---


## [​](#reference-files-and-directories) Reference files and directories

Use @ to quickly include files or directories without waiting for Claude to read them.

1

Reference a single file

```
> Explain the logic in @src/utils/auth.js

```

This includes the full content of the file in the conversation.

2

Reference a directory

```
> What's the structure of @src/components?

```

This provides a directory listing with file information.

3

Reference MCP resources

```
> Show me the data from @github:repos/owner/repo/issues

```

This fetches data from connected MCP servers using the format @server:resource. See [MCP resources](./en/docs/claude-code/mcp#use-mcp-resources/index.md) for details.

Tips:


- File paths can be relative or absolute

- @ file references add CLAUDE.md in the file’s directory and parent directories to context

- Directory references show file listings, not contents

- You can reference multiple files in a single message (e.g., “@file1.js and @file2.js”)

---


## [​](#use-extended-thinking) Use extended thinking

Suppose you’re working on complex architectural decisions, challenging bugs, or planning multi-step implementations that require deep reasoning.

1

Provide context and ask Claude to think

```
> I need to implement a new authentication system using OAuth2 for our API. Think deeply about the best approach for implementing this in our codebase. 

```

Claude will gather relevant information from your codebase and
use extended thinking, which will be visible in the interface.

2

Refine the thinking with follow-up prompts

```
> think about potential security vulnerabilities in this approach 

```

```
> think harder about edge cases we should handle 

```

Tips to get the most value out of extended thinking:

Extended thinking is most valuable for complex tasks such as:


- Planning complex architectural changes

- Debugging intricate issues

- Creating implementation plans for new features

- Understanding complex codebases

- Evaluating tradeoffs between different approaches

The way you prompt for thinking results in varying levels of thinking depth:


- “think” triggers basic extended thinking

- intensifying phrases such as “think more”, “think a lot”, “think harder”, or “think longer” triggers deeper thinking

For more extended thinking prompting tips, see [Extended thinking tips](./en/docs/build-with-claude/prompt-engineering/extended-thinking-tips/index.md).

Claude will display its thinking process as italic gray text above the
response.

---


## [​](#resume-previous-conversations) Resume previous conversations

Suppose you’ve been working on a task with Claude Code and need to continue where you left off in a later session.

Claude Code provides two options for resuming previous conversations:


- `--continue` to automatically continue the most recent conversation

- `--resume` to display a conversation picker

1

Continue the most recent conversation

````bash
claude --continue
````

This immediately resumes your most recent conversation without any prompts.

2

Continue in non-interactive mode

````bash
claude --continue --print "Continue with my task"
````

Use `--print` with `--continue` to resume the most recent conversation in non-interactive mode, perfect for scripts or automation.

3

Show conversation picker

````bash
claude --resume
````

This displays an interactive conversation selector showing:


- Conversation start time

- Initial prompt or conversation summary

- Message count

Use arrow keys to navigate and press Enter to select a conversation.

Tips:


- Conversation history is stored locally on your machine

- Use `--continue` for quick access to your most recent conversation

- Use `--resume` when you need to select a specific past conversation

- When resuming, you’ll see the entire conversation history before continuing

- The resumed conversation starts with the same model and configuration as the original

How it works:

1. **Conversation Storage**: All conversations are automatically saved locally with their full message history
2. **Message Deserialization**: When resuming, the entire message history is restored to maintain context
3. **Tool State**: Tool usage and results from the previous conversation are preserved
4. **Context Restoration**: The conversation resumes with all previous context intact

Examples:

````bash

# Continue most recent conversation
claude --continue

# Continue most recent conversation with a specific prompt
claude --continue --print "Show me our progress"

# Show conversation picker
claude --resume

# Continue most recent conversation in non-interactive mode
claude --continue --print "Run the tests again"
````

---


## [​](#run-parallel-claude-code-sessions-with-git-worktrees) Run parallel Claude Code sessions with Git worktrees

Suppose you need to work on multiple tasks simultaneously with complete code isolation between Claude Code instances.

1

Understand Git worktrees

Git worktrees allow you to check out multiple branches from the same
repository into separate directories. Each worktree has its own working
directory with isolated files, while sharing the same Git history. Learn
more in the [official Git worktree
documentation](https://git-scm.com/docs/git-worktree).

2

Create a new worktree

````bash

# Create a new worktree with a new branch
git worktree add ../project-feature-a -b feature-a

# Or create a worktree with an existing branch
git worktree add ../project-bugfix bugfix-123
````

This creates a new directory with a separate working copy of your repository.

3

Run Claude Code in each worktree

````bash

# Navigate to your worktree
cd ../project-feature-a

# Run Claude Code in this isolated environment
claude
````

4

Run Claude in another worktree

````bash
cd ../project-bugfix
claude
````

5

Manage your worktrees

````bash

# List all worktrees
git worktree list

# Remove a worktree when done
git worktree remove ../project-feature-a
````

Tips:


- Each worktree has its own independent file state, making it perfect for parallel Claude Code sessions

- Changes made in one worktree won’t affect others, preventing Claude instances from interfering with each other

- All worktrees share the same Git history and remote connections

- For long-running tasks, you can have Claude working in one worktree while you continue development in another

- Use descriptive directory names to easily identify which task each worktree is for

- Remember to initialize your development environment in each new worktree according to your project’s setup. Depending on your stack, this might include:

  - JavaScript projects: Running dependency installation (`npm install`, `yarn`)

  - Python projects: Setting up virtual environments or installing with package managers

  - Other languages: Following your project’s standard setup process

---


## [​](#use-claude-as-a-unix-style-utility) Use Claude as a unix-style utility


### [​](#add-claude-to-your-verification-process) Add Claude to your verification process

Suppose you want to use Claude Code as a linter or code reviewer.

**Add Claude to your build script:**

````json
// package.json
{
...
"scripts": {
...
"lint:claude": "claude -p 'you are a linter. please look at the changes vs. main and report any issues related to typos. report the filename and line number on one line, and a description of the issue on the second line. do not return any other text.'"
}
}
````

Tips:


- Use Claude for automated code review in your CI/CD pipeline

- Customize the prompt to check for specific issues relevant to your project

- Consider creating multiple scripts for different types of verification


### [​](#pipe-in%2C-pipe-out) Pipe in, pipe out

Suppose you want to pipe data into Claude, and get back data in a structured format.

**Pipe data through Claude:**

````bash
cat build-error.txt | claude -p 'concisely explain the root cause of this build error' > output.txt
````

Tips:


- Use pipes to integrate Claude into existing shell scripts

- Combine with other Unix tools for powerful workflows

- Consider using —output-format for structured output


### [​](#control-output-format) Control output format

Suppose you need Claude’s output in a specific format, especially when integrating Claude Code into scripts or other tools.

1

Use text format (default)

````bash
cat data.txt | claude -p 'summarize this data' --output-format text > summary.txt
````

This outputs just Claude’s plain text response (default behavior).

2

Use JSON format

````bash
cat code.py | claude -p 'analyze this code for bugs' --output-format json > analysis.json
````

This outputs a JSON array of messages with metadata including cost and duration.

3

Use streaming JSON format

````bash
cat log.txt | claude -p 'parse this log file for errors' --output-format stream-json
````

This outputs a series of JSON objects in real-time as Claude processes the request. Each message is a valid JSON object, but the entire output is not valid JSON if concatenated.

Tips:


- Use `--output-format text` for simple integrations where you just need Claude’s response

- Use `--output-format json` when you need the full conversation log

- Use `--output-format stream-json` for real-time output of each conversation turn

---


## [​](#create-custom-slash-commands) Create custom slash commands

Claude Code supports custom slash commands that you can create to quickly execute specific prompts or tasks.

For more details, see the [Slash commands](./en/docs/claude-code/slash-commands/index.md) reference page.


### [​](#create-project-specific-commands) Create project-specific commands

Suppose you want to create reusable slash commands for your project that all team members can use.

1

Create a commands directory in your project

````bash
mkdir -p .claude/commands
````

2

Create a Markdown file for each command

````bash
echo "Analyze the performance of this code and suggest three specific optimizations:" > .claude/commands/optimize.md
````

3

Use your custom command in Claude Code

```
> /optimize 

```

Tips:


- Command names are derived from the filename (e.g., `optimize.md` becomes `/optimize`)

- You can organize commands in subdirectories (e.g., `.claude/commands/frontend/component.md` creates `/component` with “(project:frontend)” shown in the description)

- Project commands are available to everyone who clones the repository

- The Markdown file content becomes the prompt sent to Claude when the command is invoked


### [​](#add-command-arguments-with-%24arguments) Add command arguments with $ARGUMENTS

Suppose you want to create flexible slash commands that can accept additional input from users.

1

Create a command file with the $ARGUMENTS placeholder

````bash
echo "Find and fix issue #$ARGUMENTS. Follow these steps: 1.
Understand the issue described in the ticket 2. Locate the relevant code in
our codebase 3. Implement a solution that addresses the root cause 4. Add
appropriate tests 5. Prepare a concise PR description" >
.claude/commands/fix-issue.md
````

2

Use the command with an issue number

In your Claude session, use the command with arguments.

```
> /fix-issue 123 

```

This will replace $ARGUMENTS with “123” in the prompt.

Tips:


- The $ARGUMENTS placeholder is replaced with any text that follows the command

- You can position $ARGUMENTS anywhere in your command template

- Other useful applications: generating test cases for specific functions, creating documentation for components, reviewing code in particular files, or translating content to specified languages


### [​](#create-personal-slash-commands) Create personal slash commands

Suppose you want to create personal slash commands that work across all your projects.

1

Create a commands directory in your home folder

````bash
mkdir -p ~/.claude/commands
````

2

Create a Markdown file for each command

````bash
echo "Review this code for security vulnerabilities, focusing on:" >
~/.claude/commands/security-review.md
````

3

Use your personal custom command

```
> /security-review 

```

Tips:


- Personal commands show “(user)” in their description when listed with `/help`

- Personal commands are only available to you and not shared with your team

- Personal commands work across all your projects

- You can use these for consistent workflows across different codebases

---


## [​](#next-steps) Next steps

[## Claude Code reference implementation

Clone our development container reference implementation.](https://github.com/anthropics/claude-code/tree/main/.devcontainer)

Was this page helpful?

YesNo

[Quickstart](./en/docs/claude-code/quickstart/index.md)[Claude Code SDK](./en/docs/claude-code/sdk/index.md)

On this page


- [Understand new codebases](#understand-new-codebases)

- [Get a quick codebase overview](#get-a-quick-codebase-overview)

- [Find relevant code](#find-relevant-code)

- [Fix bugs efficiently](#fix-bugs-efficiently)

- [Refactor code](#refactor-code)

- [Work with tests](#work-with-tests)

- [Create pull requests](#create-pull-requests)

- [Handle documentation](#handle-documentation)

- [Work with images](#work-with-images)

- [Reference files and directories](#reference-files-and-directories)

- [Use extended thinking](#use-extended-thinking)

- [Resume previous conversations](#resume-previous-conversations)

- [Run parallel Claude Code sessions with Git worktrees](#run-parallel-claude-code-sessions-with-git-worktrees)

- [Use Claude as a unix-style utility](#use-claude-as-a-unix-style-utility)

- [Add Claude to your verification process](#add-claude-to-your-verification-process)

- [Pipe in, pipe out](#pipe-in%2C-pipe-out)

- [Control output format](#control-output-format)

- [Create custom slash commands](#create-custom-slash-commands)

- [Create project-specific commands](#create-project-specific-commands)

- [Add command arguments with $ARGUMENTS](#add-command-arguments-with-%24arguments)

- [Create personal slash commands](#create-personal-slash-commands)

- [Next steps](#next-steps)

========================================================================================
== FILE: corporate-proxy/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 5.54 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: cb33c71dc0fa73e8db72f58ca1841053876a4aa7a282e00b23ad3896b62bf013
========================================================================================
Corporate proxy configuration - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Corporate proxy configuration

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code supports standard HTTP/HTTPS proxy configurations through environment variables. This allows you to route all Claude Code traffic through your organization’s proxy servers for security, compliance, and monitoring purposes.


## [​](#basic-proxy-configuration) Basic proxy configuration


### [​](#environment-variables) Environment variables

Claude Code respects standard proxy environment variables:

````bash

# HTTPS proxy (recommended)
export HTTPS_PROXY=https://proxy.example.com:8080

# HTTP proxy (if HTTPS not available)
export HTTP_PROXY=http://proxy.example.com:8080
````

Claude Code currently does not support the `NO_PROXY` environment variable. All traffic will be routed through the configured proxy.

Claude Code does not support SOCKS proxies.


## [​](#authentication) Authentication


### [​](#basic-authentication) Basic authentication

If your proxy requires basic authentication, include credentials in the proxy URL:

````bash
export HTTPS_PROXY=http://username:password@proxy.example.com:8080
````

Avoid hardcoding passwords in scripts. Use environment variables or secure credential storage instead.

For proxies requiring advanced authentication (NTLM, Kerberos, etc.), consider using an LLM Gateway service that supports your authentication method.


### [​](#ssl-certificate-issues) SSL certificate issues

If your proxy uses custom SSL certificates, you may encounter certificate errors.

Ensure that you set the correct certificate bundle path:

````bash
export SSL_CERT_FILE=/path/to/certificate-bundle.crt
export NODE_EXTRA_CA_CERTS=/path/to/certificate-bundle.crt
````


## [​](#network-access-requirements) Network access requirements

Claude Code requires access to the following URLs:


- `api.anthropic.com` - Claude API endpoints

- `statsig.anthropic.com` - Telemetry and metrics

- `sentry.io` - Error reporting

Ensure these URLs are allowlisted in your proxy configuration and firewall rules. This is especially important when using Claude Code in containerized or restricted network environments.


## [​](#additional-resources) Additional resources


- [Claude Code settings](./en/docs/claude-code/settings/index.md)

- [Environment variables reference](./en/docs/claude-code/settings#environment-variables/index.md)

- [Troubleshooting guide](./en/docs/claude-code/troubleshooting/index.md)

Was this page helpful?

YesNo

[Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)[LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

On this page


- [Basic proxy configuration](#basic-proxy-configuration)

- [Environment variables](#environment-variables)

- [Authentication](#authentication)

- [Basic authentication](#basic-authentication)

- [SSL certificate issues](#ssl-certificate-issues)

- [Network access requirements](#network-access-requirements)

- [Additional resources](#additional-resources)

========================================================================================
== FILE: costs/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 6.57 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: d65ad6c132b61f4361bae2761d98d05c91bd116051a617bf6b74e6579003ff49
========================================================================================
Manage costs effectively - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Manage costs effectively

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code consumes tokens for each interaction. The average cost is $6 per developer per day, with daily costs remaining below $12 for 90% of users.

For team usage, Claude Code charges by API token consumption. On average, Claude Code costs ~$50-60/developer per month with Sonnet 4 though there is large variance depending on how many instances users are running and whether they’re using it in automation.


## [​](#track-your-costs) Track your costs


- Use `/cost` to see current session usage

- **Anthropic Console users**:

  - Check [historical usage](https://support.anthropic.com/en/articles/9534590-cost-and-usage-reporting-in-console) in the Anthropic Console (requires Admin or Billing role)

  - Set [workspace spend limits](https://support.anthropic.com/en/articles/9796807-creating-and-managing-workspaces) for the Claude Code workspace (requires Admin role)

- **Pro and Max plan users**: Usage is included in your subscription


## [​](#managing-costs-for-teams) Managing costs for teams

When using Anthropic API, you can limit the total Claude Code workspace spend. To configure, [follow these instructions](https://support.anthropic.com/en/articles/9796807-creating-and-managing-workspaces). Admins can view cost and usage reporting by [following these instructions](https://support.anthropic.com/en/articles/9534590-cost-and-usage-reporting-in-console).

On Bedrock and Vertex, Claude Code does not send metrics from your cloud. In order to get cost metrics, several large enterprises reported using [LiteLLM](./en/docs/claude-code/bedrock-vertex-proxies#litellm/index.md), which is an open-source tool that helps companies [track spend by key](https://docs.litellm.ai/docs/proxy/virtual_keys#tracking-spend). This project is unaffiliated with Anthropic and we have not audited its security.


## [​](#reduce-token-usage) Reduce token usage


- **Compact conversations:**


  - Claude uses auto-compact by default when context exceeds 95% capacity

  - Toggle auto-compact: Run `/config` and navigate to “Auto-compact enabled”

  - Use `/compact` manually when context gets large

  - Add custom instructions: `/compact Focus on code samples and API usage`

  - Customize compaction by adding to CLAUDE.md:

    ````markdown
    # Summary instructions
    When you are using compact, please focus on test output and code changes
    ````

- **Write specific queries:** Avoid vague requests that trigger unnecessary scanning

- **Break down complex tasks:** Split large tasks into focused interactions

- **Clear history between tasks:** Use `/clear` to reset context

Costs can vary significantly based on:


- Size of codebase being analyzed

- Complexity of queries

- Number of files being searched or modified

- Length of conversation history

- Frequency of compacting conversations

- Background processes (haiku generation, conversation summarization)


## [​](#background-token-usage) Background token usage

Claude Code uses tokens for some background functionality even when idle:


- **Haiku generation**: Small creative messages that appear while you type (approximately 1 cent per day)

- **Conversation summarization**: Background jobs that summarize previous conversations for the `claude --resume` feature

- **Command processing**: Some commands like `/cost` may generate requests to check status

These background processes consume a small amount of tokens (typically under $0.04 per session) even without active interaction.

For team deployments, we recommend starting with a small pilot group to
establish usage patterns before wider rollout.

Was this page helpful?

YesNo

[Monitoring](./en/docs/claude-code/monitoring-usage/index.md)[Analytics](./en/docs/claude-code/analytics/index.md)

On this page


- [Track your costs](#track-your-costs)

- [Managing costs for teams](#managing-costs-for-teams)

- [Reduce token usage](#reduce-token-usage)

- [Background token usage](#background-token-usage)

========================================================================================
== FILE: data-usage/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 8.37 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 0c50a27c2ad8ca4a8be913fee33d075f2dae3a73af184b24b14cb2456d70843a
========================================================================================
Data usage - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Resources

Data usage

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#data-policies) Data policies


### [​](#data-training-policy) Data training policy

By default, Anthropic does not train generative models using code or prompts that are sent to Claude Code.

We aim to be fully transparent about how we use your data. We may use feedback to improve our products and services, but we will not train generative models using your feedback from Claude Code.


### [​](#development-partner-program) Development Partner Program

If you explicitly opt in to methods to provide us with materials to train on, such as via the [Development Partner Program](https://support.anthropic.com/en/articles/11174108-about-the-development-partner-program), we may use those materials provided to train our models. An organization admin can expressly opt-in to the Development Partner Program for their organization. Note that this program is available only for Anthropic first-party API, and not for Bedrock or Vertex users.


### [​](#feedback-transcripts) Feedback transcripts

If you choose to send us feedback about Claude Code, such as transcripts of your usage, Anthropic may use that feedback to debug related issues and improve Claude Code’s functionality (e.g., to reduce the risk of similar bugs occurring in the future). We will not train generative models using this feedback. Given their potentially sensitive nature, we store user feedback transcripts for only 30 days.


### [​](#data-retention) Data retention

You can use an API key from a zero data retention organization. When doing so, Claude Code will not retain your chat transcripts on our servers. Users’ local Claude Code clients may store sessions locally for up to 30 days so that users can resume them. This behavior is configurable.


### [​](#privacy-safeguards) Privacy safeguards

We have implemented several safeguards to protect your data, including:


- Limited retention periods for sensitive information

- Restricted access to user session data

- Clear policies against using feedback for model training

For full details, please review our [Commercial Terms of Service](https://www.anthropic.com/legal/commercial-terms) and [Privacy Policy](https://www.anthropic.com/legal/privacy).


## [​](#data-flow-and-dependencies) Data flow and dependencies

Claude Code is installed from [NPM](https://www.npmjs.com/package/@anthropic-ai/claude-code). Claude Code runs locally. In order to interact with the LLM, Claude Code sends data over the network. This data includes all user prompts and model outputs. The data is encrypted in transit via TLS and is not encrypted at rest. Claude Code is compatible with most popular VPNs and LLM proxies.

Claude Code is built on Anthropic’s APIs. For details regarding our API’s security controls, including our API logging procedures, please refer to compliance artifacts offered in the [Anthropic Trust Center](https://trust.anthropic.com).


## [​](#telemetry-services) Telemetry services

Claude Code connects from users’ machines to the Statsig service to log operational metrics such as latency, reliability, and usage patterns. This logging does not include any code or file paths. Data is encrypted in transit using TLS and at rest using 256-bit AES encryption. Read more in the [Statsig security documentation](https://www.statsig.com/trust/security). To opt out of Statsig telemetry, set the `DISABLE_TELEMETRY` environment variable.

Claude Code connects from users’ machines to Sentry for operational error logging. The data is encrypted in transit using TLS and at rest using 256-bit AES encryption. Read more in the [Sentry security documentation](https://sentry.io/security/). To opt out of error logging, set the `DISABLE_ERROR_REPORTING` environment variable.

When users run the `/bug` command, a copy of their full conversation history including code is sent to Anthropic. The data is encrypted in transit and at rest. Optionally, a Github issue is created in our public repository. To opt out of bug reporting, set the `DISABLE_BUG_COMMAND` environment variable.


## [​](#default-behaviors-by-api-provider) Default behaviors by API provider

By default, we disable all non-essential traffic (including error reporting, telemetry, and bug reporting functionality) when using Bedrock or Vertex. You can also opt out of all of these at once by setting the `CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC` environment variable. Here are the full default behaviors:

| Service | Anthropic API | Vertex API | Bedrock API |
| --- | --- | --- | --- |
| **Statsig (Metrics)** | Default on. `DISABLE_TELEMETRY=1` to disable. | Default off. `CLAUDE_CODE_USE_VERTEX` must be 1. | Default off. `CLAUDE_CODE_USE_BEDROCK` must be 1. |
| **Sentry (Errors)** | Default on. `DISABLE_ERROR_REPORTING=1` to disable. | Default off. `CLAUDE_CODE_USE_VERTEX` must be 1. | Default off. `CLAUDE_CODE_USE_BEDROCK` must be 1. |
| **Anthropic API (`/bug` reports)** | Default on. `DISABLE_BUG_COMMAND=1` to disable. | Default off. `CLAUDE_CODE_USE_VERTEX` must be 1. | Default off. `CLAUDE_CODE_USE_BEDROCK` must be 1. |

All environment variables can be checked into `settings.json` ([read more](./en/docs/claude-code/settings/index.md)).

Was this page helpful?

YesNo

[Hooks reference](./en/docs/claude-code/hooks/index.md)[Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

On this page


- [Data policies](#data-policies)

- [Data training policy](#data-training-policy)

- [Development Partner Program](#development-partner-program)

- [Feedback transcripts](#feedback-transcripts)

- [Data retention](#data-retention)

- [Privacy safeguards](#privacy-safeguards)

- [Data flow and dependencies](#data-flow-and-dependencies)

- [Telemetry services](#telemetry-services)

- [Default behaviors by API provider](#default-behaviors-by-api-provider)

========================================================================================
== FILE: devcontainer/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 7.69 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 260ead0fc256d96c74e41cffccf5e3287daf8c118c70c1414cf2f51eef9f89bc
========================================================================================
Development containers - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Development containers

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

The preconfigured [devcontainer setup](https://code.visualstudio.com/docs/devcontainers/containers) works seamlessly with VS Code’s Remote - Containers extension and similar tools.

The container’s enhanced security measures (isolation and firewall rules) allow you to run `claude --dangerously-skip-permissions` to bypass permission prompts for unattended operation.
We’ve included a [reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer) that you can customize for your needs.

While the devcontainer provides substantial protections, no system is completely immune to all attacks.
When executed with `--dangerously-skip-permissions`, devcontainers do not prevent a malicious project from exfiltrating anything accessible in the devcontainer including Claude Code credentials.
We recommend only using devcontainers when developing with trusted repositories.
Always maintain good security practices and monitor Claude’s activities.


## [​](#key-features) Key features


- **Production-ready Node.js**: Built on Node.js 20 with essential development dependencies

- **Security by design**: Custom firewall restricting network access to only necessary services

- **Developer-friendly tools**: Includes git, ZSH with productivity enhancements, fzf, and more

- **Seamless VS Code integration**: Pre-configured extensions and optimized settings

- **Session persistence**: Preserves command history and configurations between container restarts

- **Works everywhere**: Compatible with macOS, Windows, and Linux development environments


## [​](#getting-started-in-4-steps) Getting started in 4 steps

1. Install VS Code and the Remote - Containers extension
2. Clone the [Claude Code reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer) repository
3. Open the repository in VS Code
4. When prompted, click “Reopen in Container” (or use Command Palette: Cmd+Shift+P → “Remote-Containers: Reopen in Container”)


## [​](#configuration-breakdown) Configuration breakdown

The devcontainer setup consists of three primary components:


- [**devcontainer.json**](https://github.com/anthropics/claude-code/blob/main/.devcontainer/devcontainer.json): Controls container settings, extensions, and volume mounts

- [**Dockerfile**](https://github.com/anthropics/claude-code/blob/main/.devcontainer/Dockerfile): Defines the container image and installed tools

- [**init-firewall.sh**](https://github.com/anthropics/claude-code/blob/main/.devcontainer/init-firewall.sh): Establishes network security rules


## [​](#security-features) Security features

The container implements a multi-layered security approach with its firewall configuration:


- **Precise access control**: Restricts outbound connections to whitelisted domains only (npm registry, GitHub, Anthropic API, etc.)

- **Allowed outbound connections**: The firewall permits outbound DNS and SSH connections

- **Default-deny policy**: Blocks all other external network access

- **Startup verification**: Validates firewall rules when the container initializes

- **Isolation**: Creates a secure development environment separated from your main system


## [​](#customization-options) Customization options

The devcontainer configuration is designed to be adaptable to your needs:


- Add or remove VS Code extensions based on your workflow

- Modify resource allocations for different hardware environments

- Adjust network access permissions

- Customize shell configurations and developer tooling


## [​](#example-use-cases) Example use cases


### [​](#secure-client-work) Secure client work

Use devcontainers to isolate different client projects, ensuring code and credentials never mix between environments.


### [​](#team-onboarding) Team onboarding

New team members can get a fully configured development environment in minutes, with all necessary tools and settings pre-installed.


### [​](#consistent-ci%2Fcd-environments) Consistent CI/CD environments

Mirror your devcontainer configuration in CI/CD pipelines to ensure development and production environments match.


## [​](#related-resources) Related resources


- [VS Code devcontainers documentation](https://code.visualstudio.com/docs/devcontainers/containers)

- [Claude Code security best practices](./en/docs/claude-code/security/index.md)

- [Corporate proxy configuration](./en/docs/claude-code/corporate-proxy/index.md)

Was this page helpful?

YesNo

[LLM gateway](./en/docs/claude-code/llm-gateway/index.md)[Advanced installation](./en/docs/claude-code/setup/index.md)

On this page


- [Key features](#key-features)

- [Getting started in 4 steps](#getting-started-in-4-steps)

- [Configuration breakdown](#configuration-breakdown)

- [Security features](#security-features)

- [Customization options](#customization-options)

- [Example use cases](#example-use-cases)

- [Secure client work](#secure-client-work)

- [Team onboarding](#team-onboarding)

- [Consistent CI/CD environments](#consistent-ci%2Fcd-environments)

- [Related resources](#related-resources)

========================================================================================
== FILE: github-actions/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 18.04 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 150fbeba93e134708e0421e499329330178e1f3e447af09ecd180ea6e6c2db0c
========================================================================================
Claude Code GitHub Actions - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Claude Code GitHub Actions

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code GitHub Actions brings AI-powered automation to your GitHub workflow. With a simple `@claude` mention in any PR or issue, Claude can analyze your code, create pull requests, implement features, and fix bugs - all while following your project’s standards.

Claude Code GitHub Actions is currently in beta. Features and functionality may evolve as we refine the experience.

Claude Code GitHub Actions is built on top of the [Claude Code SDK](./en/docs/claude-code/sdk/index.md), which enables programmatic integration of Claude Code into your applications. You can use the SDK to build custom automation workflows beyond GitHub Actions.


## [​](#why-use-claude-code-github-actions%3F) Why use Claude Code GitHub Actions?


- **Instant PR creation**: Describe what you need, and Claude creates a complete PR with all necessary changes

- **Automated code implementation**: Turn issues into working code with a single command

- **Follows your standards**: Claude respects your `CLAUDE.md` guidelines and existing code patterns

- **Simple setup**: Get started in minutes with our installer and API key

- **Secure by default**: Your code stays on Github’s runners


## [​](#what-can-claude-do%3F) What can Claude do?

Claude Code provides powerful GitHub Actions that transform how you work with code:


### [​](#claude-code-action) Claude Code Action

This GitHub Action allows you to run Claude Code within your GitHub Actions workflows. You can use this to build any custom workflow on top of Claude Code.

[View repository →](https://github.com/anthropics/claude-code-action)


### [​](#claude-code-action-base) Claude Code Action (Base)

The foundation for building custom GitHub workflows with Claude. This extensible framework gives you full access to Claude’s capabilities for creating tailored automation.

[View repository →](https://github.com/anthropics/claude-code-base-action)


## [​](#setup) Setup


## [​](#quick-setup) Quick setup

The easiest way to set up this action is through Claude Code in the terminal. Just open claude and run `/install-github-app`.

This command will guide you through setting up the GitHub app and required secrets.


- You must be a repository admin to install the GitHub app and add secrets

- This quickstart method is only available for direct Anthropic API users. If you’re using AWS Bedrock or Google Vertex AI, please see the [Using with AWS Bedrock & Google Vertex AI](./_sites/docs.anthropic.com/en/docs/claude-code/github-actions#using-with-aws-bedrock-%26-google-vertex-ai/index.md) section.


## [​](#manual-setup) Manual setup

If the `/install-github-app` command fails or you prefer manual setup, please follow these manual setup instructions:

1. **Install the Claude GitHub app** to your repository: <https://github.com/apps/claude>
2. **Add ANTHROPIC\_API\_KEY** to your repository secrets ([Learn how to use secrets in GitHub Actions](https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions))
3. **Copy the workflow file** from [examples/claude.yml](https://github.com/anthropics/claude-code-action/blob/main/examples/claude.yml) into your repository’s `.github/workflows/`

After completing either the quickstart or manual setup, test the action by tagging `@claude` in an issue or PR comment!


## [​](#example-use-cases) Example use cases

Claude Code GitHub Actions can help you with a variety of tasks. For complete working examples, see the [examples directory](https://github.com/anthropics/claude-code-action/tree/main/examples).


### [​](#turn-issues-into-prs) Turn issues into PRs

In an issue comment:

```
@claude implement this feature based on the issue description

```

Claude will analyze the issue, write the code, and create a PR for review.


### [​](#get-implementation-help) Get implementation help

In a PR comment:

```
@claude how should I implement user authentication for this endpoint?

```

Claude will analyze your code and provide specific implementation guidance.


### [​](#fix-bugs-quickly) Fix bugs quickly

In an issue:

````yaml
@claude fix the TypeError in the user dashboard component
````

Claude will locate the bug, implement a fix, and create a PR.


## [​](#best-practices) Best practices


### [​](#claude-md-configuration) CLAUDE.md configuration

Create a `CLAUDE.md` file in your repository root to define code style guidelines, review criteria, project-specific rules, and preferred patterns. This file guides Claude’s understanding of your project standards.


### [​](#security-considerations) Security considerations

Never commit API keys directly to your repository!

Always use GitHub Secrets for API keys:


- Add your API key as a repository secret named `ANTHROPIC_API_KEY`

- Reference it in workflows: `anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}`

- Limit action permissions to only what’s necessary

- Review Claude’s suggestions before merging

Always use GitHub Secrets (e.g., `${{ secrets.ANTHROPIC_API_KEY }}`) rather than hardcoding API keys directly in your workflow files.


### [​](#optimizing-performance) Optimizing performance

Use issue templates to provide context, keep your `CLAUDE.md` concise and focused, and configure appropriate timeouts for your workflows.


### [​](#ci-costs) CI costs

When using Claude Code GitHub Actions, be aware of the associated costs:

**GitHub Actions costs:**


- Claude Code runs on GitHub-hosted runners, which consume your GitHub Actions minutes

- See [GitHub’s billing documentation](https://docs.github.com/en/billing/managing-billing-for-your-products/managing-billing-for-github-actions/about-billing-for-github-actions) for detailed pricing and minute limits

**API costs:**


- Each Claude interaction consumes API tokens based on the length of prompts and responses

- Token usage varies by task complexity and codebase size

- See [Claude’s pricing page](https://www.anthropic.com/api) for current token rates

**Cost optimization tips:**


- Use specific `@claude` commands to reduce unnecessary API calls

- Configure appropriate `max_turns` limits to prevent excessive iterations

- Set reasonable `timeout_minutes` to avoid runaway workflows

- Consider using GitHub’s concurrency controls to limit parallel runs


## [​](#configuration-examples) Configuration examples

For ready-to-use workflow configurations for different use cases, including:


- Basic workflow setup for issue and PR comments

- Automated code reviews on pull requests

- Custom implementations for specific needs

Visit the [examples directory](https://github.com/anthropics/claude-code-action/tree/main/examples) in the Claude Code Action repository.

The examples repository includes complete, tested workflows that you can copy directly into your `.github/workflows/` directory.


## [​](#using-with-aws-bedrock-%26-google-vertex-ai) Using with AWS Bedrock & Google Vertex AI

For enterprise environments, you can use Claude Code GitHub Actions with your own cloud infrastructure. This approach gives you control over data residency and billing while maintaining the same functionality.


### [​](#prerequisites) Prerequisites

Before setting up Claude Code GitHub Actions with cloud providers, you need:


#### [​](#for-google-cloud-vertex-ai%3A) For Google Cloud Vertex AI:

1. A Google Cloud Project with Vertex AI enabled
2. Workload Identity Federation configured for GitHub Actions
3. A service account with the required permissions
4. A GitHub App (recommended) or use the default GITHUB\_TOKEN


#### [​](#for-aws-bedrock%3A) For AWS Bedrock:

1. An AWS account with Amazon Bedrock enabled
2. GitHub OIDC Identity Provider configured in AWS
3. An IAM role with Bedrock permissions
4. A GitHub App (recommended) or use the default GITHUB\_TOKEN

1

Create a custom GitHub App (Recommended for 3P Providers)

For best control and security when using 3P providers like Vertex AI or Bedrock, we recommend creating your own GitHub App:

1. Go to <https://github.com/settings/apps/new>
2. Fill in the basic information:

   - **GitHub App name**: Choose a unique name (e.g., “YourOrg Claude Assistant”)

   - **Homepage URL**: Your organization’s website or the repository URL
3. Configure the app settings:

   - **Webhooks**: Uncheck “Active” (not needed for this integration)
4. Set the required permissions:

   - **Repository permissions**:

     - Contents: Read & Write

     - Issues: Read & Write

     - Pull requests: Read & Write
5. Click “Create GitHub App”
6. After creation, click “Generate a private key” and save the downloaded `.pem` file
7. Note your App ID from the app settings page
8. Install the app to your repository:

   - From your app’s settings page, click “Install App” in the left sidebar

   - Select your account or organization

   - Choose “Only select repositories” and select the specific repository

   - Click “Install”
9. Add the private key as a secret to your repository:

   - Go to your repository’s Settings → Secrets and variables → Actions

   - Create a new secret named `APP_PRIVATE_KEY` with the contents of the `.pem` file
10. Add the App ID as a secret:


- Create a new secret named `APP_ID` with your GitHub App’s ID

This app will be used with the [actions/create-github-app-token](https://github.com/actions/create-github-app-token) action to generate authentication tokens in your workflows.

**Alternative for Anthropic API or if you don’t want to setup your own Github app**: Use the official Anthropic app:

1. Install from: <https://github.com/apps/claude>
2. No additional configuration needed for authentication

2

Configure cloud provider authentication

Choose your cloud provider and set up secure authentication:

AWS Bedrock

Google Vertex AI

3

Add Required Secrets

Add the following secrets to your repository (Settings → Secrets and variables → Actions):


#### [​](#for-anthropic-api-direct-%3A) For Anthropic API (Direct):

1. **For API Authentication**:


   - `ANTHROPIC_API_KEY`: Your Anthropic API key from [console.anthropic.com](https://console.anthropic.com)
2. **For GitHub App (if using your own app)**:


   - `APP_ID`: Your GitHub App’s ID

   - `APP_PRIVATE_KEY`: The private key (.pem) content


#### [​](#for-google-cloud-vertex-ai) For Google Cloud Vertex AI

1. **For GCP Authentication**:


   - `GCP_WORKLOAD_IDENTITY_PROVIDER`

   - `GCP_SERVICE_ACCOUNT`
2. **For GitHub App (if using your own app)**:


   - `APP_ID`: Your GitHub App’s ID

   - `APP_PRIVATE_KEY`: The private key (.pem) content


#### [​](#for-aws-bedrock) For AWS Bedrock

1. **For AWS Authentication**:


   - `AWS_ROLE_TO_ASSUME`
2. **For GitHub App (if using your own app)**:


   - `APP_ID`: Your GitHub App’s ID

   - `APP_PRIVATE_KEY`: The private key (.pem) content

4

Create workflow files

Create GitHub Actions workflow files that integrate with your cloud provider. The examples below show complete configurations for both AWS Bedrock and Google Vertex AI:

AWS Bedrock workflow

Google Vertex AI workflow


## [​](#troubleshooting) Troubleshooting


### [​](#claude-not-responding-to-%40claude-commands) Claude not responding to @claude commands

Verify the GitHub App is installed correctly, check that workflows are enabled, ensure API key is set in repository secrets, and confirm the comment contains `@claude` (not `/claude`).


### [​](#ci-not-running-on-claude%E2%80%99s-commits) CI not running on Claude’s commits

Ensure you’re using the GitHub App or custom app (not Actions user), check workflow triggers include the necessary events, and verify app permissions include CI triggers.


### [​](#authentication-errors) Authentication errors

Confirm API key is valid and has sufficient permissions. For Bedrock/Vertex, check credentials configuration and ensure secrets are named correctly in workflows.


## [​](#advanced-configuration) Advanced configuration


### [​](#action-parameters) Action parameters

The Claude Code Action supports these key parameters:

| Parameter | Description | Required |
| --- | --- | --- |
| `prompt` | The prompt to send to Claude | Yes\* |
| `prompt_file` | Path to file containing prompt | Yes\* |
| `anthropic_api_key` | Anthropic API key | Yes\*\* |
| `max_turns` | Maximum conversation turns | No |
| `timeout_minutes` | Execution timeout | No |

\*Either `prompt` or `prompt_file` required  
\*\*Required for direct Anthropic API, not for Bedrock/Vertex


### [​](#alternative-integration-methods) Alternative integration methods

While the `/install-github-app` command is the recommended approach, you can also:


- **Custom GitHub App**: For organizations needing branded usernames or custom authentication flows. Create your own GitHub App with required permissions (contents, issues, pull requests) and use the actions/create-github-app-token action to generate tokens in your workflows.

- **Manual GitHub Actions**: Direct workflow configuration for maximum flexibility

- **MCP Configuration**: Dynamic loading of Model Context Protocol servers

See the [Claude Code Action repository](https://github.com/anthropics/claude-code-action) for detailed documentation.


### [​](#customizing-claude%E2%80%99s-behavior) Customizing Claude’s behavior

You can configure Claude’s behavior in two ways:

1. **CLAUDE.md**: Define coding standards, review criteria, and project-specific rules in a `CLAUDE.md` file at the root of your repository. Claude will follow these guidelines when creating PRs and responding to requests. Check out our [Memory documentation](./en/docs/claude-code/memory/index.md) for more details.
2. **Custom prompts**: Use the `prompt` parameter in the workflow file to provide workflow-specific instructions. This allows you to customize Claude’s behavior for different workflows or tasks.

Claude will follow these guidelines when creating PRs and responding to requests.

Was this page helpful?

YesNo

[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)[Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

On this page


- [Why use Claude Code GitHub Actions?](#why-use-claude-code-github-actions%3F)

- [What can Claude do?](#what-can-claude-do%3F)

- [Claude Code Action](#claude-code-action)

- [Claude Code Action (Base)](#claude-code-action-base)

- [Setup](#setup)

- [Quick setup](#quick-setup)

- [Manual setup](#manual-setup)

- [Example use cases](#example-use-cases)

- [Turn issues into PRs](#turn-issues-into-prs)

- [Get implementation help](#get-implementation-help)

- [Fix bugs quickly](#fix-bugs-quickly)

- [Best practices](#best-practices)

- [CLAUDE.md configuration](#claude-md-configuration)

- [Security considerations](#security-considerations)

- [Optimizing performance](#optimizing-performance)

- [CI costs](#ci-costs)

- [Configuration examples](#configuration-examples)

- [Using with AWS Bedrock & Google Vertex AI](#using-with-aws-bedrock-%26-google-vertex-ai)

- [Prerequisites](#prerequisites)

- [For Google Cloud Vertex AI:](#for-google-cloud-vertex-ai%3A)

- [For AWS Bedrock:](#for-aws-bedrock%3A)

- [Troubleshooting](#troubleshooting)

- [Claude not responding to @claude commands](#claude-not-responding-to-%40claude-commands)

- [CI not running on Claude’s commits](#ci-not-running-on-claude%E2%80%99s-commits)

- [Authentication errors](#authentication-errors)

- [Advanced configuration](#advanced-configuration)

- [Action parameters](#action-parameters)

- [Alternative integration methods](#alternative-integration-methods)

- [Customizing Claude’s behavior](#customizing-claude%E2%80%99s-behavior)

========================================================================================
== FILE: google-vertex-ai/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 7.50 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 47fd045a1207e37f1f1f0912c87ebac2f870e00b45515cbc280397edd17b01a9
========================================================================================
Claude Code on Google Vertex AI - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Claude Code on Google Vertex AI

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#prerequisites) Prerequisites

Before configuring Claude Code with Vertex AI, ensure you have:


- A Google Cloud Platform (GCP) account with billing enabled

- A GCP project with Vertex AI API enabled

- Access to desired Claude models (e.g., Claude Sonnet 4)

- Google Cloud SDK (`gcloud`) installed and configured

- Quota allocated in desired GCP region

Vertex AI may not support the Claude Code default models on non-`us-east5` regions. Ensure you are using `us-east5` and have quota allocated, or switch to supported models.


## [​](#setup) Setup


### [​](#1-enable-vertex-ai-api) 1. Enable Vertex AI API

Enable the Vertex AI API in your GCP project:

````bash

# Set your project ID
gcloud config set project YOUR-PROJECT-ID

# Enable Vertex AI API
gcloud services enable aiplatform.googleapis.com
````


### [​](#2-request-model-access) 2. Request model access

Request access to Claude models in Vertex AI:

1. Navigate to the [Vertex AI Model Garden](https://console.cloud.google.com/vertex-ai/model-garden)
2. Search for “Claude” models
3. Request access to desired Claude models (e.g., Claude Sonnet 4)
4. Wait for approval (may take 24-48 hours)


### [​](#3-configure-gcp-credentials) 3. Configure GCP credentials

Claude Code uses standard Google Cloud authentication.

For more information, see [Google Cloud authentication documentation](https://cloud.google.com/docs/authentication).


### [​](#4-configure-claude-code) 4. Configure Claude Code

Set the following environment variables:

````bash

# Enable Vertex AI integration
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
export ANTHROPIC_VERTEX_PROJECT_ID=YOUR-PROJECT-ID

# Optional: Disable prompt caching if needed
export DISABLE_PROMPT_CACHING=1

# Optional: Override regions for specific models
export VERTEX_REGION_CLAUDE_3_5_HAIKU=us-central1
export VERTEX_REGION_CLAUDE_3_5_SONNET=us-east5
export VERTEX_REGION_CLAUDE_3_7_SONNET=us-east5
export VERTEX_REGION_CLAUDE_4_0_OPUS=europe-west4
export VERTEX_REGION_CLAUDE_4_0_SONNET=us-east5
````

[Prompt caching](./en/docs/build-with-claude/prompt-caching/index.md) is automatically supported when you specify the `cache_control` ephemeral flag. To disable it, set `DISABLE_PROMPT_CACHING=1`. For heightened rate limits, contact Google Cloud support.

When using Vertex AI, the `/login` and `/logout` commands are disabled since authentication is handled through Google Cloud credentials.


### [​](#5-model-configuration) 5. Model configuration

Claude Code uses these default models for Vertex AI:

| Model type | Default value |
| --- | --- |
| Primary model | `claude-sonnet-4@20250514` |
| Small/fast model | `claude-3-5-haiku@20241022` |

To customize models:

````bash
export ANTHROPIC_MODEL='claude-opus-4@20250514'
export ANTHROPIC_SMALL_FAST_MODEL='claude-3-5-haiku@20241022'
````


## [​](#iam-configuration) IAM configuration

Assign the required IAM permissions:

The `roles/aiplatform.user` role includes the required permissions:


- `aiplatform.endpoints.predict` - Required for model invocation

- `aiplatform.endpoints.computeTokens` - Required for token counting

For more restrictive permissions, create a custom role with only the permissions above.

For details, see [Vertex IAM documentation](https://cloud.google.com/vertex-ai/docs/general/access-control).

We recommend creating a dedicated GCP project for Claude Code to simplify cost tracking and access control.


## [​](#troubleshooting) Troubleshooting

If you encounter quota issues:


- Check current quotas or request quota increase through [Cloud Console](https://cloud.google.com/docs/quotas/view-manage)

If you encounter “model not found” 404 errors:


- Verify you have access to the specified region

- Confirm model is Enabled in [Model Garden](https://console.cloud.google.com/vertex-ai/model-garden)

If you encounter 429 errors:


- Ensure the primary model and small/fast model are supported in your selected region


## [​](#additional-resources) Additional resources


- [Vertex AI documentation](https://cloud.google.com/vertex-ai/docs)

- [Vertex AI pricing](https://cloud.google.com/vertex-ai/pricing)

- [Vertex AI quotas and limits](https://cloud.google.com/vertex-ai/docs/quotas)

Was this page helpful?

YesNo

[Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)[Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

On this page


- [Prerequisites](#prerequisites)

- [Setup](#setup)

- [1. Enable Vertex AI API](#1-enable-vertex-ai-api)

- [2. Request model access](#2-request-model-access)

- [3. Configure GCP credentials](#3-configure-gcp-credentials)

- [4. Configure Claude Code](#4-configure-claude-code)

- [5. Model configuration](#5-model-configuration)

- [IAM configuration](#iam-configuration)

- [Troubleshooting](#troubleshooting)

- [Additional resources](#additional-resources)

========================================================================================
== FILE: hooks/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 22.01 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 0bb51fc6538d082c7fbda6d0eb964fad03418a47e4cfbac16a76c0fbd98e97bb
========================================================================================
Hooks reference - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

Hooks reference

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

For a quickstart guide with examples, see [Get started with Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md).


## [​](#configuration) Configuration

Claude Code hooks are configured in your
[settings files](./en/docs/claude-code/settings/index.md):


- `~/.claude/settings.json` - User settings

- `.claude/settings.json` - Project settings

- `.claude/settings.local.json` - Local project settings (not committed)

- Enterprise managed policy settings


### [​](#structure) Structure

Hooks are organized by matchers, where each matcher can have multiple hooks:

````json
{
"hooks": {
"EventName": [
{
"matcher": "ToolPattern",
"hooks": [
{
"type": "command",
"command": "your-command-here"
}
]
}
]
}
}
````


- **matcher**: Pattern to match tool names, case-sensitive (only applicable for
  `PreToolUse` and `PostToolUse`)

  - Simple strings match exactly: `Write` matches only the Write tool

  - Supports regex: `Edit|Write` or `Notebook.*`

  - If omitted or empty string, hooks run for all matching events

- **hooks**: Array of commands to execute when the pattern matches

  - `type`: Currently only `"command"` is supported

  - `command`: The bash command to execute

  - `timeout`: (Optional) How long a command should run, in seconds, before
    canceling that specific command.

For events like `UserPromptSubmit`, `Notification`, `Stop`, and `SubagentStop` that don’t use matchers, you can omit the matcher field:

````json
{
"hooks": {
"UserPromptSubmit": [
{
"hooks": [
{
"type": "command",
"command": "/path/to/prompt-validator.py"
}
]
}
]
}
}
````

`"matcher": "*"` is invalid. Instead, omit “matcher” or use `"matcher": ""`.


## [​](#hook-events) Hook Events


### [​](#pretooluse) PreToolUse

Runs after Claude creates tool parameters and before processing the tool call.

**Common matchers:**


- `Task` - Agent tasks

- `Bash` - Shell commands

- `Glob` - File pattern matching

- `Grep` - Content search

- `Read` - File reading

- `Edit`, `MultiEdit` - File editing

- `Write` - File writing

- `WebFetch`, `WebSearch` - Web operations


### [​](#posttooluse) PostToolUse

Runs immediately after a tool completes successfully.

Recognizes the same matcher values as PreToolUse.


### [​](#notification) Notification

Runs when Claude Code sends notifications. Notifications are sent when:

1. Claude needs your permission to use a tool. Example: “Claude needs your permission to use Bash”
2. The prompt input has been idle for at least 60 seconds. “Claude is waiting for your input”


### [​](#userpromptsubmit) UserPromptSubmit

Runs when the user submits a prompt, before Claude processes it. This allows you to add additional context based on the prompt/conversation, validate prompts, or block certain types of prompts.


### [​](#stop) Stop

Runs when the main Claude Code agent has finished responding. Does not run if the stoppage occurred due to a user interrupt.


### [​](#subagentstop) SubagentStop

Runs when a Claude Code subagent (Task tool call) has finished responding.


### [​](#precompact) PreCompact

Runs before Claude Code is about to run a compact operation.

**Matchers:**


- `manual` - Invoked from `/compact`

- `auto` - Invoked from auto-compact (due to full context window)


## [​](#hook-input) Hook Input

Hooks receive JSON data via stdin containing session information and
event-specific data:

````typescript
{
// Common fields
session_id: string
transcript_path: string // Path to conversation JSON
cwd: string // The current working directory when the hook is invoked
// Event-specific fields
hook_event_name: string
...
}
````


### [​](#pretooluse-input) PreToolUse Input

The exact schema for `tool_input` depends on the tool.

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "PreToolUse",
"tool_name": "Write",
"tool_input": {
"file_path": "/path/to/file.txt",
"content": "file content"
}
}
````


### [​](#posttooluse-input) PostToolUse Input

The exact schema for `tool_input` and `tool_response` depends on the tool.

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "PostToolUse",
"tool_name": "Write",
"tool_input": {
"file_path": "/path/to/file.txt",
"content": "file content"
},
"tool_response": {
"filePath": "/path/to/file.txt",
"success": true
}
}
````


### [​](#notification-input) Notification Input

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "Notification",
"message": "Task completed successfully"
}
````


### [​](#userpromptsubmit-input) UserPromptSubmit Input

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "UserPromptSubmit",
"prompt": "Write a function to calculate the factorial of a number"
}
````


### [​](#stop-and-subagentstop-input) Stop and SubagentStop Input

`stop_hook_active` is true when Claude Code is already continuing as a result of
a stop hook. Check this value or process the transcript to prevent Claude Code
from running indefinitely.

````json
{
"session_id": "abc123",
"transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"hook_event_name": "Stop",
"stop_hook_active": true
}
````


### [​](#precompact-input) PreCompact Input

For `manual`, `custom_instructions` comes from what the user passes into
`/compact`. For `auto`, `custom_instructions` is empty.

````json
{
"session_id": "abc123",
"transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"hook_event_name": "PreCompact",
"trigger": "manual",
"custom_instructions": ""
}
````


## [​](#hook-output) Hook Output

There are two ways for hooks to return output back to Claude Code. The output
communicates whether to block and any feedback that should be shown to Claude
and the user.


### [​](#simple%3A-exit-code) Simple: Exit Code

Hooks communicate status through exit codes, stdout, and stderr:


- **Exit code 0**: Success. `stdout` is shown to the user in transcript mode
  (CTRL-R).

- **Exit code 2**: Blocking error. `stderr` is fed back to Claude to process
  automatically. See per-hook-event behavior below.

- **Other exit codes**: Non-blocking error. `stderr` is shown to the user and
  execution continues.

Reminder: Claude Code does not see stdout if the exit code is 0.


#### [​](#exit-code-2-behavior) Exit Code 2 Behavior

| Hook Event | Behavior |
| --- | --- |
| `PreToolUse` | Blocks the tool call, shows stderr to Claude |
| `PostToolUse` | Shows stderr to Claude (tool already ran) |
| `Notification` | N/A, shows stderr to user only |
| `UserPromptSubmit` | Blocks prompt processing, erases prompt, shows stderr to user only |
| `Stop` | Blocks stoppage, shows stderr to Claude |
| `SubagentStop` | Blocks stoppage, shows stderr to Claude subagent |
| `PreCompact` | N/A, shows stderr to user only |


### [​](#advanced%3A-json-output) Advanced: JSON Output

Hooks can return structured JSON in `stdout` for more sophisticated control:


#### [​](#common-json-fields) Common JSON Fields

All hook types can include these optional fields:

````json
{
"continue": true, // Whether Claude should continue after hook execution (default: true)
"stopReason": "string" // Message shown when continue is false
"suppressOutput": true, // Hide stdout from transcript mode (default: false)
}
````

If `continue` is false, Claude stops processing after the hooks run.


- For `PreToolUse`, this is different from `"decision": "block"`, which only
  blocks a specific tool call and provides automatic feedback to Claude.

- For `PostToolUse`, this is different from `"decision": "block"`, which
  provides automated feedback to Claude.

- For `UserPromptSubmit`, this prevents the prompt from being processed.

- For `Stop` and `SubagentStop`, this takes precedence over any
  `"decision": "block"` output.

- In all cases, `"continue" = false` takes precedence over any
  `"decision": "block"` output.

`stopReason` accompanies `continue` with a reason shown to the user, not shown
to Claude.


#### [​](#pretooluse-decision-control) `PreToolUse` Decision Control

`PreToolUse` hooks can control whether a tool call proceeds.


- “approve” bypasses the permission system. `reason` is shown to the user but
  not to Claude.

- “block” prevents the tool call from executing. `reason` is shown to Claude.

- `undefined` leads to the existing permission flow. `reason` is ignored.

````json
{
"decision": "approve" | "block" | undefined,
"reason": "Explanation for decision"
}
````


#### [​](#posttooluse-decision-control) `PostToolUse` Decision Control

`PostToolUse` hooks can control whether a tool call proceeds.


- “block” automatically prompts Claude with `reason`.

- `undefined` does nothing. `reason` is ignored.

````json
{
"decision": "block" | undefined,
"reason": "Explanation for decision"
}
````


#### [​](#userpromptsubmit-decision-control) `UserPromptSubmit` Decision Control

`UserPromptSubmit` hooks can control whether a user prompt is processed.


- `"block"` prevents the prompt from being processed. The submitted prompt is erased from context. `"reason"` is shown to the user but not added to context.

- `undefined` allows the prompt to proceed normally. `"reason"` is ignored.

````json
{
"decision": "block" | undefined,
"reason": "Explanation for decision"
}
````


#### [​](#stop%2Fsubagentstop-decision-control) `Stop`/`SubagentStop` Decision Control

`Stop` and `SubagentStop` hooks can control whether Claude must continue.


- “block” prevents Claude from stopping. You must populate `reason` for Claude
  to know how to proceed.

- `undefined` allows Claude to stop. `reason` is ignored.

````json
{
"decision": "block" | undefined,
"reason": "Must be provided when Claude is blocked from stopping"
}
````


#### [​](#json-output-example%3A-bash-command-editing) JSON Output Example: Bash Command Editing

````python
#!/usr/bin/env python3
import json
import re
import sys

# Define validation rules as a list of (regex pattern, message) tuples
VALIDATION_RULES = [
(
r"\bgrep\b(?!.*\|)",
"Use 'rg' (ripgrep) instead of 'grep' for better performance and features",
),
(
r"\bfind\s+\S+\s+-name\b",
"Use 'rg --files | rg pattern' or 'rg --files -g pattern' instead of 'find -name' for better performance",
),
]
def validate_command(command: str) -> list[str]:
issues = []
for pattern, message in VALIDATION_RULES:
if re.search(pattern, command):
issues.append(message)
return issues
try:
input_data = json.load(sys.stdin)
except json.JSONDecodeError as e:
print(f"Error: Invalid JSON input: {e}", file=sys.stderr)
sys.exit(1)
tool_name = input_data.get("tool_name", "")
tool_input = input_data.get("tool_input", {})
command = tool_input.get("command", "")
if tool_name != "Bash" or not command:
sys.exit(1)

# Validate the command
issues = validate_command(command)
if issues:
for message in issues:
print(f"• {message}", file=sys.stderr)

# Exit code 2 blocks tool call and shows stderr to Claude
sys.exit(2)
````


#### [​](#userpromptsubmit-example%3A-adding-context-and-validation) UserPromptSubmit Example: Adding Context and Validation

````python
#!/usr/bin/env python3
import json
import sys
import re
import datetime

# Load input from stdin
try:
input_data = json.load(sys.stdin)
except json.JSONDecodeError as e:
print(f"Error: Invalid JSON input: {e}", file=sys.stderr)
sys.exit(1)
prompt = input_data.get("prompt", "")

# Check for sensitive patterns
sensitive_patterns = [
(r"(?i)\b(password|secret|key|token)\s*[:=]", "Prompt contains potential secrets"),
]
for pattern, message in sensitive_patterns:
if re.search(pattern, prompt):

# Use JSON output to block with a specific reason
output = {
"decision": "block",
"reason": f"Security policy violation: {message}. Please rephrase your request without sensitive information."
}
print(json.dumps(output))
sys.exit(0)

# Add current time to context
context = f"Current time: {datetime.datetime.now()}"
print(context)

# Allow the prompt to proceed with the additional context
sys.exit(0)
````


## [​](#working-with-mcp-tools) Working with MCP Tools

Claude Code hooks work seamlessly with
[Model Context Protocol (MCP) tools](./en/docs/claude-code/mcp/index.md). When MCP servers
provide tools, they appear with a special naming pattern that you can match in
your hooks.


### [​](#mcp-tool-naming) MCP Tool Naming

MCP tools follow the pattern `mcp__<server>__<tool>`, for example:


- `mcp__memory__create_entities` - Memory server’s create entities tool

- `mcp__filesystem__read_file` - Filesystem server’s read file tool

- `mcp__github__search_repositories` - GitHub server’s search tool


### [​](#configuring-hooks-for-mcp-tools) Configuring Hooks for MCP Tools

You can target specific MCP tools or entire MCP servers:

````json
{
"hooks": {
"PreToolUse": [
{
"matcher": "mcp__memory__.*",
"hooks": [
{
"type": "command",
"command": "echo 'Memory operation initiated' >> ~/mcp-operations.log"
}
]
},
{
"matcher": "mcp__.*__write.*",
"hooks": [
{
"type": "command",
"command": "/home/user/scripts/validate-mcp-write.py"
}
]
}
]
}
}
````


## [​](#examples) Examples

For practical examples including code formatting, notifications, and file protection, see [More Examples](./en/docs/claude-code/hooks-guide#more-examples/index.md) in the get started guide.


## [​](#security-considerations) Security Considerations


### [​](#disclaimer) Disclaimer

**USE AT YOUR OWN RISK**: Claude Code hooks execute arbitrary shell commands on
your system automatically. By using hooks, you acknowledge that:


- You are solely responsible for the commands you configure

- Hooks can modify, delete, or access any files your user account can access

- Malicious or poorly written hooks can cause data loss or system damage

- Anthropic provides no warranty and assumes no liability for any damages
  resulting from hook usage

- You should thoroughly test hooks in a safe environment before production use

Always review and understand any hook commands before adding them to your
configuration.


### [​](#security-best-practices) Security Best Practices

Here are some key practices for writing more secure hooks:

1. **Validate and sanitize inputs** - Never trust input data blindly
2. **Always quote shell variables** - Use `"$VAR"` not `$VAR`
3. **Block path traversal** - Check for `..` in file paths
4. **Use absolute paths** - Specify full paths for scripts
5. **Skip sensitive files** - Avoid `.env`, `.git/`, keys, etc.


### [​](#configuration-safety) Configuration Safety

Direct edits to hooks in settings files don’t take effect immediately. Claude
Code:

1. Captures a snapshot of hooks at startup
2. Uses this snapshot throughout the session
3. Warns if hooks are modified externally
4. Requires review in `/hooks` menu for changes to apply

This prevents malicious hook modifications from affecting your current session.


## [​](#hook-execution-details) Hook Execution Details


- **Timeout**: 60-second execution limit by default, configurable per command.

  - A timeout for an individual command does not affect the other commands.

- **Parallelization**: All matching hooks run in parallel

- **Environment**: Runs in current directory with Claude Code’s environment

- **Input**: JSON via stdin

- **Output**:

  - PreToolUse/PostToolUse/Stop: Progress shown in transcript (Ctrl-R)

  - Notification: Logged to debug only (`--debug`)


## [​](#debugging) Debugging


### [​](#basic-troubleshooting) Basic Troubleshooting

If your hooks aren’t working:

1. **Check configuration** - Run `/hooks` to see if your hook is registered
2. **Verify syntax** - Ensure your JSON settings are valid
3. **Test commands** - Run hook commands manually first
4. **Check permissions** - Make sure scripts are executable
5. **Review logs** - Use `claude --debug` to see hook execution details

Common issues:


- **Quotes not escaped** - Use `\"` inside JSON strings

- **Wrong matcher** - Check tool names match exactly (case-sensitive)

- **Command not found** - Use full paths for scripts


### [​](#advanced-debugging) Advanced Debugging

For complex hook issues:

1. **Inspect hook execution** - Use `claude --debug` to see detailed hook execution
2. **Validate JSON schemas** - Test hook input/output with external tools
3. **Check environment variables** - Verify Claude Code’s environment is correct
4. **Test edge cases** - Try hooks with unusual file paths or inputs
5. **Monitor system resources** - Check for resource exhaustion during hook execution
6. **Use structured logging** - Implement logging in your hook scripts


### [​](#debug-output-example) Debug Output Example

Use `claude --debug` to see hook execution details:

```
[DEBUG] Executing hooks for PostToolUse:Write
[DEBUG] Getting matching hook commands for PostToolUse with query: Write
[DEBUG] Found 1 hook matchers in settings
[DEBUG] Matched 1 hooks for query "Write"
[DEBUG] Found 1 hook commands to execute
[DEBUG] Executing hook command: <Your command> with timeout 60000ms
[DEBUG] Hook command completed with status 0: <Your stdout>

```

Progress messages appear in transcript mode (Ctrl-R) showing:


- Which hook is running

- Command being executed

- Success/failure status

- Output or error messages

Was this page helpful?

YesNo

[Slash commands](./en/docs/claude-code/slash-commands/index.md)[Data usage](./en/docs/claude-code/data-usage/index.md)

On this page


- [Configuration](#configuration)

- [Structure](#structure)

- [Hook Events](#hook-events)

- [PreToolUse](#pretooluse)

- [PostToolUse](#posttooluse)

- [Notification](#notification)

- [UserPromptSubmit](#userpromptsubmit)

- [Stop](#stop)

- [SubagentStop](#subagentstop)

- [PreCompact](#precompact)

- [Hook Input](#hook-input)

- [PreToolUse Input](#pretooluse-input)

- [PostToolUse Input](#posttooluse-input)

- [Notification Input](#notification-input)

- [UserPromptSubmit Input](#userpromptsubmit-input)

- [Stop and SubagentStop Input](#stop-and-subagentstop-input)

- [PreCompact Input](#precompact-input)

- [Hook Output](#hook-output)

- [Simple: Exit Code](#simple%3A-exit-code)

- [Exit Code 2 Behavior](#exit-code-2-behavior)

- [Advanced: JSON Output](#advanced%3A-json-output)

- [Common JSON Fields](#common-json-fields)

- [PreToolUse Decision Control](#pretooluse-decision-control)

- [PostToolUse Decision Control](#posttooluse-decision-control)

- [UserPromptSubmit Decision Control](#userpromptsubmit-decision-control)

- [Stop/SubagentStop Decision Control](#stop%2Fsubagentstop-decision-control)

- [JSON Output Example: Bash Command Editing](#json-output-example%3A-bash-command-editing)

- [UserPromptSubmit Example: Adding Context and Validation](#userpromptsubmit-example%3A-adding-context-and-validation)

- [Working with MCP Tools](#working-with-mcp-tools)

- [MCP Tool Naming](#mcp-tool-naming)

- [Configuring Hooks for MCP Tools](#configuring-hooks-for-mcp-tools)

- [Examples](#examples)

- [Security Considerations](#security-considerations)

- [Disclaimer](#disclaimer)

- [Security Best Practices](#security-best-practices)

- [Configuration Safety](#configuration-safety)

- [Hook Execution Details](#hook-execution-details)

- [Debugging](#debugging)

- [Basic Troubleshooting](#basic-troubleshooting)

- [Advanced Debugging](#advanced-debugging)

- [Debug Output Example](#debug-output-example)

========================================================================================
== FILE: hooks-guide/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 9.38 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 7460282010bd28168e91eb7308027d60d566d999fb7ef5da75ce8245270b0b88
========================================================================================
Get started with Claude Code hooks - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Get started with Claude Code hooks

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code hooks are user-defined shell commands that execute at various points
in Claude Code’s lifecycle. Hooks provide deterministic control over Claude
Code’s behavior, ensuring certain actions always happen rather than relying on
the LLM to choose to run them.

For reference documentation on hooks, see [Hooks reference](./en/docs/claude-code/hooks/index.md).

Example use cases for hooks include:


- **Notifications**: Customize how you get notified when Claude Code is awaiting
  your input or permission to run something.

- **Automatic formatting**: Run `prettier` on .ts files, `gofmt` on .go files,
  etc. after every file edit.

- **Logging**: Track and count all executed commands for compliance or
  debugging.

- **Feedback**: Provide automated feedback when Claude Code produces code that
  does not follow your codebase conventions.

- **Custom permissions**: Block modifications to production files or sensitive
  directories.

By encoding these rules as hooks rather than prompting instructions, you turn
suggestions into app-level code that executes every time it is expected to run.

You must consider the security implication of hooks as you add them, because hooks run automatically during the agent loop with your current environment’s credentials.
For example, malicious hooks code can exfiltrate your data. Always review your hooks implementation before registering them.

For full security best practices, see [Security Considerations](./en/docs/claude-code/hooks#security-considerations/index.md) in the hooks reference documentation.


## [​](#hook-events-overview) Hook Events Overview

Claude Code provides several hook events that run at different points in the workflow:


- **PreToolUse**: Runs before tool calls (can block them)

- **PostToolUse**: Runs after tool calls complete

- **Notification**: Runs when Claude Code sends notifications

- **Stop**: Runs when Claude Code finishes responding

- **SubagentStop**: Runs when subagent tasks complete

Each event receives different data and can control Claude’s behavior in different ways.


## [​](#quickstart) Quickstart

In this quickstart, you’ll add a hook that logs the shell commands that Claude
Code runs.


### [​](#prerequisites) Prerequisites

Install `jq` for JSON processing in the command line.


### [​](#step-1%3A-open-hooks-configuration) Step 1: Open hooks configuration

Run the `/hooks` [slash command](./en/docs/claude-code/slash-commands/index.md) and select
the `PreToolUse` hook event.

`PreToolUse` hooks run before tool calls and can block them while providing
Claude feedback on what to do differently.


### [​](#step-2%3A-add-a-matcher) Step 2: Add a matcher

Select `+ Add new matcher…` to run your hook only on Bash tool calls.

Type `Bash` for the matcher.

Use an empty string `""` to match all tools. The `*` character is not a valid matcher on its own.


### [​](#step-3%3A-add-the-hook) Step 3: Add the hook

Select `+ Add new hook…` and enter this command:

````bash
jq -r '"\(.tool_input.command) - \(.tool_input.description // "No description")"' >> ~/.claude/bash-command-log.txt
````


### [​](#step-4%3A-save-your-configuration) Step 4: Save your configuration

For storage location, select `User settings` since you’re logging to your home
directory. This hook will then apply to all projects, not just your current
project.

Then press Esc until you return to the REPL. Your hook is now registered!


### [​](#step-5%3A-verify-your-hook) Step 5: Verify your hook

Run `/hooks` again or check `~/.claude/settings.json` to see your configuration:

````json
{
"hooks": {
"PreToolUse": [
{
"matcher": "Bash",
"hooks": [
{
"type": "command",
"command": "jq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt"
}
]
}
]
}
}
````


### [​](#step-6%3A-test-your-hook) Step 6: Test your hook

Ask Claude to run a simple command like `ls` and check your log file:

````bash
cat ~/.claude/bash-command-log.txt
````

You should see entries like:

```
ls - Lists files and directories

```


## [​](#more-examples) More Examples

For a complete example implementation, see the [bash command validator example](https://github.com/anthropics/claude-code/blob/main/examples/hooks/bash_command_validator_example.py) in our public codebase.


### [​](#code-formatting-hook) Code Formatting Hook

Automatically format TypeScript files after editing:

````json
{
"hooks": {
"PostToolUse": [
{
"matcher": "Edit|MultiEdit|Write",
"hooks": [
{
"type": "command",
"command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q '\\.ts$'; then npx prettier --write \"$file_path\"; fi; }"
}
]
}
]
}
}
````


### [​](#custom-notification-hook) Custom Notification Hook

Get desktop notifications when Claude needs input:

````json
{
"hooks": {
"Notification": [
{
"matcher": "",
"hooks": [
{
"type": "command",
"command": "notify-send 'Claude Code' 'Awaiting your input'"
}
]
}
]
}
}
````


### [​](#file-protection-hook) File Protection Hook

Block edits to sensitive files:

````json
{
"hooks": {
"PreToolUse": [
{
"matcher": "Edit|MultiEdit|Write",
"hooks": [
{
"type": "command",
"command": "python3 -c \"import json, sys; data=json.load(sys.stdin); path=data.get('tool_input',{}).get('file_path',''); sys.exit(2 if any(p in path for p in ['.env', 'package-lock.json', '.git/']) else 0)\""
}
]
}
]
}
}
````


## [​](#learn-more) Learn more


- For reference documentation on hooks, see [Hooks reference](./en/docs/claude-code/hooks/index.md).

- For comprehensive security best practices and safety guidelines, see [Security Considerations](./en/docs/claude-code/hooks#security-considerations/index.md) in the hooks reference documentation.

- For troubleshooting steps and debugging techniques, see [Debugging](./en/docs/claude-code/hooks#debugging/index.md) in the hooks reference documentation.

Was this page helpful?

YesNo

[Claude Code SDK](./en/docs/claude-code/sdk/index.md)[GitHub Actions](./en/docs/claude-code/github-actions/index.md)

On this page


- [Hook Events Overview](#hook-events-overview)

- [Quickstart](#quickstart)

- [Prerequisites](#prerequisites)

- [Step 1: Open hooks configuration](#step-1%3A-open-hooks-configuration)

- [Step 2: Add a matcher](#step-2%3A-add-a-matcher)

- [Step 3: Add the hook](#step-3%3A-add-the-hook)

- [Step 4: Save your configuration](#step-4%3A-save-your-configuration)

- [Step 5: Verify your hook](#step-5%3A-verify-your-hook)

- [Step 6: Test your hook](#step-6%3A-test-your-hook)

- [More Examples](#more-examples)

- [Code Formatting Hook](#code-formatting-hook)

- [Custom Notification Hook](#custom-notification-hook)

- [File Protection Hook](#file-protection-hook)

- [Learn more](#learn-more)

========================================================================================
== FILE: iam/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 12.15 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 774e2bc03660d0762392c873a973a1c252b397f415e49e1e15f3b984b62841ab
========================================================================================
Identity and Access Management - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Identity and Access Management

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#authentication-methods) Authentication methods

Setting up Claude Code requires access to Anthropic models. For teams, you can set up Claude Code access in one of three ways:


- Anthropic API via the Anthropic Console

- Amazon Bedrock

- Google Vertex AI


### [​](#anthropic-api-authentication) Anthropic API authentication

**To set up Claude Code access for your team via Anthropic API:**

1. Use your existing Anthropic Console account or create a new Anthropic Console account
2. You can add users through either method below:

   - Bulk invite users from within the Console (Console -> Settings -> Members -> Invite)

   - [Set up SSO](https://support.anthropic.com/en/articles/10280258-setting-up-single-sign-on-on-the-api-console)
3. When inviting users, they need one of the following roles:

   - “Claude Code” role means users can only create Claude Code API keys

   - “Developer” role means users can create any kind of API key
4. Each invited user needs to complete these steps:

   - Accept the Console invite

   - [Check system requirements](./en/docs/claude-code/setup#system-requirements/index.md)

   - [Install Claude Code](./en/docs/claude-code/setup#installation/index.md)

   - Login with Console account credentials


### [​](#cloud-provider-authentication) Cloud provider authentication

**To set up Claude Code access for your team via Bedrock or Vertex:**

1. Follow the [Bedrock docs](./en/docs/claude-code/amazon-bedrock/index.md) or [Vertex docs](./en/docs/claude-code/google-vertex-ai/index.md)
2. Distribute the environment variables and instructions for generating cloud credentials to your users. Read more about how to [manage configuration here](./en/docs/claude-code/settings/index.md).
3. Users can [install Claude Code](./en/docs/claude-code/setup#installation/index.md)


## [​](#access-control-and-permissions) Access control and permissions

We support fine-grained permissions so that you’re able to specify exactly what the agent is allowed to do (e.g. run tests, run linter) and what it is not allowed to do (e.g. update cloud infrastructure). These permission settings can be checked into version control and distributed to all developers in your organization, as well as customized by individual developers.


### [​](#permission-system) Permission system

Claude Code uses a tiered permission system to balance power and safety:

| Tool Type | Example | Approval Required | ”Yes, don’t ask again” Behavior |
| --- | --- | --- | --- |
| Read-only | File reads, LS, Grep | No | N/A |
| Bash Commands | Shell execution | Yes | Permanently per project directory and command |
| File Modification | Edit/write files | Yes | Until session end |


### [​](#configuring-permissions) Configuring permissions

You can view & manage Claude Code’s tool permissions with `/permissions`. This UI lists all permission rules and the settings.json file they are sourced from.


- **Allow** rules will allow Claude Code to use the specified tool without further manual approval.

- **Deny** rules will prevent Claude Code from using the specified tool. Deny rules take precedence over allow rules.

- **Additional directories** extend Claude’s file access to directories beyond the initial working directory.

- **Default mode** controls Claude’s permission behavior when encountering new requests.

Permission rules use the format: `Tool` or `Tool(optional-specifier)`

A rule that is just the tool name matches any use of that tool. For example, adding `Bash` to the list of allow rules would allow Claude Code to use the Bash tool without requiring user approval.


#### [​](#permission-modes) Permission modes

Claude Code supports several permission modes that can be set as the `defaultMode` in [settings files](./en/docs/claude-code/settings#settings-files/index.md):

| Mode | Description |
| --- | --- |
| `default` | Standard behavior - prompts for permission on first use of each tool |
| `acceptEdits` | Automatically accepts file edit permissions for the session |
| `plan` | Plan mode - Claude can analyze but not modify files or execute commands |
| `bypassPermissions` | Skips all permission prompts (requires safe environment - see warning below) |


#### [​](#working-directories) Working directories

By default, Claude has access to files in the directory where it was launched. You can extend this access:


- **During startup**: Use `--add-dir <path>` CLI argument

- **During session**: Use `/add-dir` slash command

- **Persistent configuration**: Add to `additionalDirectories` in [settings files](./en/docs/claude-code/settings#settings-files/index.md)

Files in additional directories follow the same permission rules as the original working directory - they become readable without prompts, and file editing permissions follow the current permission mode.


#### [​](#tool-specific-permission-rules) Tool-specific permission rules

Some tools support more fine-grained permission controls:

**Bash**


- `Bash(npm run build)` Matches the exact Bash command `npm run build`

- `Bash(npm run test:*)` Matches Bash commands starting with `npm run test`.

Claude Code is aware of shell operators (like `&&`) so a prefix match rule like `Bash(safe-cmd:*)` won’t give it permission to run the command `safe-cmd && other-cmd`

**Read & Edit**

`Edit` rules apply to all built-in tools that edit files. Claude will make a best-effort attempt to apply `Read` rules to all built-in tools that read files like Grep, Glob, and LS.

Read & Edit rules both follow the [gitignore](https://git-scm.com/docs/gitignore) specification. Patterns are resolved relative to the directory containing `.claude/settings.json`. To reference an absolute path, use `//`. For a path relative to your home directory, use `~/`.


- `Edit(docs/**)` Matches edits to files in the `docs` directory of your project

- `Read(~/.zshrc)` Matches reads to your `~/.zshrc` file

- `Edit(//tmp/scratch.txt)` Matches edits to `/tmp/scratch.txt`

**WebFetch**


- `WebFetch(domain:example.com)` Matches fetch requests to example.com

**MCP**


- `mcp__puppeteer` Matches any tool provided by the `puppeteer` server (name configured in Claude Code)

- `mcp__puppeteer__puppeteer_navigate` Matches the `puppeteer_navigate` tool provided by the `puppeteer` server


### [​](#additional-permission-control-with-hooks) Additional permission control with hooks

[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md) provide a way to register custom shell commands to perform permission evaluation at runtime. When Claude Code makes a tool call, PreToolUse hooks run before the permission system runs, and the hook output can determine whether to approve or deny the tool call in place of the permission system.


### [​](#enterprise-managed-policy-settings) Enterprise managed policy settings

For enterprise deployments of Claude Code, we support enterprise managed policy settings that take precedence over user and project settings. This allows system administrators to enforce security policies that users cannot override.

System administrators can deploy policies to:


- macOS: `/Library/Application Support/ClaudeCode/managed-settings.json`

- Linux and WSL: `/etc/claude-code/managed-settings.json`

- Windows: `C:\ProgramData\ClaudeCode\managed-settings.json`

These policy files follow the same format as regular [settings files](./en/docs/claude-code/settings#settings-files/index.md) but cannot be overridden by user or project settings. This ensures consistent security policies across your organization.


### [​](#settings-precedence) Settings precedence

When multiple settings sources exist, they are applied in the following order (highest to lowest precedence):

1. Enterprise policies
2. Command line arguments
3. Local project settings (`.claude/settings.local.json`)
4. Shared project settings (`.claude/settings.json`)
5. User settings (`~/.claude/settings.json`)

This hierarchy ensures that organizational policies are always enforced while still allowing flexibility at the project and user levels where appropriate.


## [​](#credential-management) Credential management

Claude Code supports authentication via Claude.ai credentials, Anthropic API credentials, Bedrock Auth, and Vertex Auth. On macOS, the API keys, OAuth tokens, and other credentials are stored on encrypted macOS Keychain. Alternately, the setting [apiKeyHelper](./en/docs/claude-code/settings#available-settings/index.md) can be set to a shell script which returns an API key. By default, this helper is called after 5 minutes or on HTTP 401 response; specifying environment variable `CLAUDE_CODE_API_KEY_HELPER_TTL_MS` defines a custom refresh interval.

Was this page helpful?

YesNo

[Advanced installation](./en/docs/claude-code/setup/index.md)[Security](./en/docs/claude-code/security/index.md)

On this page


- [Authentication methods](#authentication-methods)

- [Anthropic API authentication](#anthropic-api-authentication)

- [Cloud provider authentication](#cloud-provider-authentication)

- [Access control and permissions](#access-control-and-permissions)

- [Permission system](#permission-system)

- [Configuring permissions](#configuring-permissions)

- [Permission modes](#permission-modes)

- [Working directories](#working-directories)

- [Tool-specific permission rules](#tool-specific-permission-rules)

- [Additional permission control with hooks](#additional-permission-control-with-hooks)

- [Enterprise managed policy settings](#enterprise-managed-policy-settings)

- [Settings precedence](#settings-precedence)

- [Credential management](#credential-management)

========================================================================================
== FILE: ide-integrations/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 7.36 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: e7e335e25123efca5b3cbe8d13fca4c3e0eabadd602e56dbd770ccc3636ce48d
========================================================================================
Add Claude Code to your IDE - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Add Claude Code to your IDE

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code works great with any Integrated Development Environment (IDE) that has a terminal. Just run `claude`, and you’re ready to go.

In addition, Claude Code provides dedicated integrations for popular IDEs, which provide features like interactive diff viewing, selection context sharing, and more. These integrations currently exist for:


- **Visual Studio Code** (including popular forks like Cursor, Windsurf, and VSCodium)

- **JetBrains IDEs** (including IntelliJ, PyCharm, Android Studio, WebStorm, PhpStorm and GoLand)


## [​](#features) Features


- **Quick launch**: Use `Cmd+Esc` (Mac) or `Ctrl+Esc` (Windows/Linux) to open
  Claude Code directly from your editor, or click the Claude Code button in the
  UI

- **Diff viewing**: Code changes can be displayed directly in the IDE diff
  viewer instead of the terminal. You can configure this in `/config`

- **Selection context**: The current selection/tab in the IDE is automatically
  shared with Claude Code

- **File reference shortcuts**: Use `Cmd+Option+K` (Mac) or `Alt+Ctrl+K`
  (Linux/Windows) to insert file references (e.g., @File#L1-99)

- **Diagnostic sharing**: Diagnostic errors (lint, syntax, etc.) from the IDE
  are automatically shared with Claude as you work


## [​](#installation) Installation


- VS Code+

- JetBrains

To install Claude Code on VS Code and popular forks like Cursor, Windsurf, and VSCodium:

1. Open VS Code
2. Open the integrated terminal
3. Run `claude` - the extension will auto-install

To install Claude Code on VS Code and popular forks like Cursor, Windsurf, and VSCodium:

1. Open VS Code
2. Open the integrated terminal
3. Run `claude` - the extension will auto-install

To install Claude Code on JetBrains IDEs like IntelliJ, PyCharm, Android Studio, WebStorm, PhpStorm and GoLand, find and install the [Claude Code plugin](https://docs.anthropic.com/s/claude-code-jetbrains) from the marketplace and restart your IDE.

The plugin may also be auto-installed when you run `claude` in the integrated terminal. The IDE must be restarted completely to take effect.

**Remote Development Limitations**: When using JetBrains Remote Development, you must install the plugin in the remote host via `Settings > Plugin (Host)`.


## [​](#usage) Usage


### [​](#from-your-ide) From your IDE

Run `claude` from your IDE’s integrated terminal, and all features will be active.


### [​](#from-external-terminals) From external terminals

Use the `/ide` command in any external terminal to connect Claude Code to your IDE and activate all features.

If you want Claude to have access to the same files as your IDE, start Claude Code from the same directory as your IDE project root.


## [​](#configuration) Configuration

IDE integrations work with Claude Code’s configuration system:

1. Run `claude`
2. Enter the `/config` command
3. Adjust your preferences. Setting the diff tool to `auto` will enable automatic IDE detection


## [​](#troubleshooting) Troubleshooting


### [​](#vs-code-extension-not-installing) VS Code extension not installing


- Ensure you’re running Claude Code from VS Code’s integrated terminal

- Ensure that the CLI corresponding to your IDE is installed:

  - For VS Code: `code` command should be available

  - For Cursor: `cursor` command should be available

  - For Windsurf: `windsurf` command should be available

  - For VSCodium: `codium` command should be available

  - If not installed, use `Cmd+Shift+P` (Mac) or `Ctrl+Shift+P` (Windows/Linux)
    and search for “Shell Command: Install ‘code’ command in PATH” (or the
    equivalent for your IDE)

- Check that VS Code has permission to install extensions


### [​](#jetbrains-plugin-not-working) JetBrains plugin not working


- Ensure you’re running Claude Code from the project root directory

- Check that the JetBrains plugin is enabled in the IDE settings

- Completely restart the IDE. You may need to do this multiple times

- For JetBrains Remote Development, ensure that the Claude Code plugin is
  installed in the remote host and not locally on the client

For additional help, refer to our
[troubleshooting guide](./en/docs/claude-code/troubleshooting/index.md).

Was this page helpful?

YesNo

[Settings](./en/docs/claude-code/settings/index.md)[Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

On this page


- [Features](#features)

- [Installation](#installation)

- [Usage](#usage)

- [From your IDE](#from-your-ide)

- [From external terminals](#from-external-terminals)

- [Configuration](#configuration)

- [Troubleshooting](#troubleshooting)

- [VS Code extension not installing](#vs-code-extension-not-installing)

- [JetBrains plugin not working](#jetbrains-plugin-not-working)

========================================================================================
== FILE: interactive-mode/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 6.38 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 0f2b647a1457d316c72a28dcf1f42973004383dd82cab81adec4416863bf5421
========================================================================================
Interactive mode - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

Interactive mode

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#keyboard-shortcuts) Keyboard shortcuts


### [​](#general-controls) General controls

| Shortcut | Description | Context |
| --- | --- | --- |
| `Ctrl+C` | Cancel current input or generation | Standard interrupt |
| `Ctrl+D` | Exit Claude Code session | EOF signal |
| `Ctrl+L` | Clear terminal screen | Keeps conversation history |
| `Up/Down arrows` | Navigate command history | Recall previous inputs |
| `Esc` + `Esc` | Edit previous message | Double-escape to modify |


### [​](#multiline-input) Multiline input

| Method | Shortcut | Context |
| --- | --- | --- |
| Quick escape | `\` + `Enter` | Works in all terminals |
| macOS default | `Option+Enter` | Default on macOS |
| Terminal setup | `Shift+Enter` | After `/terminal-setup` |
| Paste mode | Paste directly | For code blocks, logs |


### [​](#quick-commands) Quick commands

| Shortcut | Description | Notes |
| --- | --- | --- |
| `#` at start | Memory shortcut - add to CLAUDE.md | Prompts for file selection |
| `/` at start | Slash command | See [slash commands](./en/docs/claude-code/slash-commands/index.md) |


## [​](#vim-mode) Vim mode

Enable vim-style editing with `/vim` command or configure permanently via `/config`.


### [​](#mode-switching) Mode switching

| Command | Action | From mode |
| --- | --- | --- |
| `Esc` | Enter NORMAL mode | INSERT |
| `i` | Insert before cursor | NORMAL |
| `I` | Insert at beginning of line | NORMAL |
| `a` | Insert after cursor | NORMAL |
| `A` | Insert at end of line | NORMAL |
| `o` | Open line below | NORMAL |
| `O` | Open line above | NORMAL |


### [​](#navigation-normal-mode) Navigation (NORMAL mode)

| Command | Action |
| --- | --- |
| `h`/`j`/`k`/`l` | Move left/down/up/right |
| `w` | Next word |
| `e` | End of word |
| `b` | Previous word |
| `0` | Beginning of line |
| `$` | End of line |
| `^` | First non-blank character |
| `gg` | Beginning of input |
| `G` | End of input |


### [​](#editing-normal-mode) Editing (NORMAL mode)

| Command | Action |
| --- | --- |
| `x` | Delete character |
| `dd` | Delete line |
| `D` | Delete to end of line |
| `dw`/`de`/`db` | Delete word/to end/back |
| `cc` | Change line |
| `C` | Change to end of line |
| `cw`/`ce`/`cb` | Change word/to end/back |
| `.` | Repeat last change |

Configure your preferred line break behavior in terminal settings. Run `/terminal-setup` to install Shift+Enter binding for iTerm2 and VS Code terminals.


## [​](#command-history) Command history

Claude Code maintains command history for the current session:


- History is stored per working directory

- Cleared with `/clear` command

- Use Up/Down arrows to navigate (see keyboard shortcuts above)

- **Ctrl+R**: Reverse search through history (if supported by terminal)

- **Note**: History expansion (`!`) is disabled by default


## [​](#see-also) See also


- [Slash commands](./en/docs/claude-code/slash-commands/index.md) - Interactive session commands

- [CLI reference](./en/docs/claude-code/cli-reference/index.md) - Command-line flags and options

- [Settings](./en/docs/claude-code/settings/index.md) - Configuration options

- [Memory management](./en/docs/claude-code/memory/index.md) - Managing CLAUDE.md files

Was this page helpful?

YesNo

[CLI reference](./en/docs/claude-code/cli-reference/index.md)[Slash commands](./en/docs/claude-code/slash-commands/index.md)

On this page


- [Keyboard shortcuts](#keyboard-shortcuts)

- [General controls](#general-controls)

- [Multiline input](#multiline-input)

- [Quick commands](#quick-commands)

- [Vim mode](#vim-mode)

- [Mode switching](#mode-switching)

- [Navigation (NORMAL mode)](#navigation-normal-mode)

- [Editing (NORMAL mode)](#editing-normal-mode)

- [Command history](#command-history)

- [See also](#see-also)

========================================================================================
== FILE: legal-and-compliance/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 4.69 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 80e956f79834093e36e8e76a0f3cd83a24cfd603750145ff412bcc9a8a2330aa
========================================================================================
Legal and compliance - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Resources

Legal and compliance

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#legal-agreements) Legal agreements


### [​](#license) License

Claude Code is provided under Anthropic’s [Commercial Terms of Service](https://www.anthropic.com/legal/commercial-terms).


### [​](#commercial-agreements) Commercial agreements

Whether you’re using Anthropic’s API directly (1P) or accessing it through AWS Bedrock or Google Vertex (3P), your existing commercial agreement will apply to Claude Code usage, unless we’ve mutually agreed otherwise.


## [​](#compliance) Compliance


### [​](#healthcare-compliance-baa) Healthcare compliance (BAA)

If a customer has a Business Associate Agreement (BAA) with us, and wants to use Claude Code, the BAA will automatically extend to cover Claude Code if the customer has executed a BAA and has Zero Data Retention (ZDR) activated. The BAA will be applicable to that customer’s API traffic flowing through Claude Code.


## [​](#security-and-trust) Security and trust


### [​](#trust-and-safety) Trust and safety

You can find more information in the [Anthropic Trust Center](https://trust.anthropic.com) and [Transparency Hub](https://www.anthropic.com/transparency).


### [​](#security-vulnerability-reporting) Security vulnerability reporting

Anthropic manages our security program through HackerOne. [Use this form to report vulnerabilities](https://hackerone.com/anthropic-vdp/reports/new?type=team&report_type=vulnerability).

---

© Anthropic PBC. All rights reserved. Use is subject to Anthropic’s [Commercial Terms of Service](https://www.anthropic.com/legal/commercial-terms).

Was this page helpful?

YesNo

[Data usage](./en/docs/claude-code/data-usage/index.md)

On this page


- [Legal agreements](#legal-agreements)

- [License](#license)

- [Commercial agreements](#commercial-agreements)

- [Compliance](#compliance)

- [Healthcare compliance (BAA)](#healthcare-compliance-baa)

- [Security and trust](#security-and-trust)

- [Trust and safety](#trust-and-safety)

- [Security vulnerability reporting](#security-vulnerability-reporting)

========================================================================================
== FILE: llm-gateway/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 8.53 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: a98c4e24d596a6d0afed25c36990103126dd22a185e646944bf138451c9bd110
========================================================================================
LLM gateway configuration - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

LLM gateway configuration

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

LLM gateways provide a centralized proxy layer between Claude Code and model providers, offering:


- **Centralized authentication** - Single point for API key management

- **Usage tracking** - Monitor usage across teams and projects

- **Cost controls** - Implement budgets and rate limits

- **Audit logging** - Track all model interactions for compliance

- **Model routing** - Switch between providers without code changes


## [​](#litellm-configuration) LiteLLM configuration

LiteLLM is a third-party proxy service. Anthropic doesn’t endorse, maintain, or audit LiteLLM’s security or functionality. This guide is provided for informational purposes and may become outdated. Use at your own discretion.


### [​](#prerequisites) Prerequisites


- Claude Code updated to the latest version

- LiteLLM Proxy Server deployed and accessible

- Access to Claude models through your chosen provider


### [​](#basic-litellm-setup) Basic LiteLLM setup

**Configure Claude Code**:


#### [​](#authentication-methods) Authentication methods


##### Static API key

Simplest method using a fixed API key:

````bash

# Set in environment
export ANTHROPIC_AUTH_TOKEN=sk-litellm-static-key

# Or in Claude Code settings
{
"env": {
"ANTHROPIC_AUTH_TOKEN": "sk-litellm-static-key"
}
}
````

This value will be sent as the `Authorization` and `Proxy-Authorization` headers, although `Authorization` may be overwritten (see Vertex “Client-specified credentials” below).


##### Dynamic API key with helper

For rotating keys or per-user authentication:

1. Create an API key helper script:

````bash
#!/bin/bash

# ~/bin/get-litellm-key.sh

# Example: Fetch key from vault
vault kv get -field=api_key secret/litellm/claude-code

# Example: Generate JWT token
jwt encode \
--secret="${JWT_SECRET}" \
--exp="+1h" \
'{"user":"'${USER}'","team":"engineering"}'
````

2. Configure Claude Code settings to use the helper:

````json
{
"apiKeyHelper": "~/bin/get-litellm-key.sh"
}
````

3. Set token refresh interval:

````bash

# Refresh every hour (3600000 ms)
export CLAUDE_CODE_API_KEY_HELPER_TTL_MS=3600000
````

This value will be sent as `Authorization`, `Proxy-Authorization`, and `X-Api-Key` headers, although `Authorization` may be overwritten (see [Google Vertex AI through LiteLLM](./_sites/docs.anthropic.com/en/docs/claude-code/llm-gateway#google-vertex-ai-through-litellm/index.md)). The `apiKeyHelper` has lower precedence than `ANTHROPIC_AUTH_TOKEN` or `ANTHROPIC_API_KEY`.


#### [​](#unified-endpoint-recommended) Unified endpoint (recommended)

Using LiteLLM’s [Anthropic format endpoint](https://docs.litellm.ai/docs/anthropic_unified):

````bash
export ANTHROPIC_BASE_URL=https://litellm-server:4000
````

**Benefits of the unified endpoint over pass-through endpoints:**


- Load balancing

- Fallbacks

- Consistent support for cost tracking and end-user tracking


#### [​](#provider-specific-pass-through-endpoints-alternative) Provider-specific pass-through endpoints (alternative)


##### Anthropic API through LiteLLM

Using [pass-through endpoint](https://docs.litellm.ai/docs/pass_through/anthropic_completion):

````bash
export ANTHROPIC_BASE_URL=https://litellm-server:4000/anthropic
````


##### Amazon Bedrock through LiteLLM

Using [pass-through endpoint](https://docs.litellm.ai/docs/pass_through/bedrock):

````bash
export ANTHROPIC_BEDROCK_BASE_URL=https://litellm-server:4000/bedrock
export CLAUDE_CODE_SKIP_BEDROCK_AUTH=1
export CLAUDE_CODE_USE_BEDROCK=1
````


##### Google Vertex AI through LiteLLM

Using [pass-through endpoint](https://docs.litellm.ai/docs/pass_through/vertex_ai):

**Recommended: Proxy-specified credentials**

````bash
export ANTHROPIC_VERTEX_BASE_URL=https://litellm-server:4000/vertex_ai/v1
export ANTHROPIC_VERTEX_PROJECT_ID=your-gcp-project-id
export CLAUDE_CODE_SKIP_VERTEX_AUTH=1
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
````

**Alternative: Client-specified credentials**

If you prefer to use local GCP credentials:

1. Authenticate with GCP locally:

````bash
gcloud auth application-default login
````

2. Set Claude Code environment:

````bash
export ANTHROPIC_VERTEX_BASE_URL=https://litellm-server:4000/vertex_ai/v1
export ANTHROPIC_VERTEX_PROJECT_ID=your-gcp-project-id
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
````

3. Update LiteLLM header configuration:

Ensure your LiteLLM config has `general_settings.litellm_key_header_name` set to `Proxy-Authorization`, since the pass-through GCP token will be located on the `Authorization` header.


### [​](#model-selection) Model selection

By default, the models will use those specified in [Model configuration](./en/docs/claude-code/bedrock-vertex-proxies#model-configuration/index.md).

If you have configured custom model names in LiteLLM, set the aforementioned environment variables to those custom names.

For more detailed information, refer to the [LiteLLM documentation](https://docs.litellm.ai/).


## [​](#additional-resources) Additional resources


- [LiteLLM documentation](https://docs.litellm.ai/)

- [Claude Code settings](./en/docs/claude-code/settings/index.md)

- [Corporate proxy setup](./en/docs/claude-code/corporate-proxy/index.md)

- [Third-party integrations overview](./en/docs/claude-code/third-party-integrations/index.md)

Was this page helpful?

YesNo

[Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)[Development containers](./en/docs/claude-code/devcontainer/index.md)

On this page


- [LiteLLM configuration](#litellm-configuration)

- [Prerequisites](#prerequisites)

- [Basic LiteLLM setup](#basic-litellm-setup)

- [Authentication methods](#authentication-methods)

- [Unified endpoint (recommended)](#unified-endpoint-recommended)

- [Provider-specific pass-through endpoints (alternative)](#provider-specific-pass-through-endpoints-alternative)

- [Model selection](#model-selection)

- [Additional resources](#additional-resources)

========================================================================================
== FILE: m1f/claude-code-markdown_docs.txt
== DATE: 2025-07-19 15:25:00 | SIZE: 332.15 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: 7f0c795e1428769ab21d02df1025bfe39ab180036d9c6ac01dada8c5a2037f1d
========================================================================================
======= amazon-bedrock/index.md ======
Claude Code on Amazon Bedrock - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Claude Code on Amazon Bedrock

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#prerequisites) Prerequisites

Before configuring Claude Code with Bedrock, ensure you have:


- An AWS account with Bedrock access enabled

- Access to desired Claude models (e.g., Claude Sonnet 4) in Bedrock

- AWS CLI installed and configured (optional - only needed if you don’t have another mechanism for getting credentials)

- Appropriate IAM permissions


## [​](#setup) Setup


### [​](#1-enable-model-access) 1. Enable model access

First, ensure you have access to the required Claude models in your AWS account:

1. Navigate to the [Amazon Bedrock console](https://console.aws.amazon.com/bedrock/)
2. Go to **Model access** in the left navigation
3. Request access to desired Claude models (e.g., Claude Sonnet 4)
4. Wait for approval (usually instant for most regions)


### [​](#2-configure-aws-credentials) 2. Configure AWS credentials

Claude Code uses the default AWS SDK credential chain. Set up your credentials using one of these methods:

**Option A: AWS CLI configuration**

````bash
aws configure
````

**Option B: Environment variables (access key)**

````bash
export AWS_ACCESS_KEY_ID=your-access-key-id
export AWS_SECRET_ACCESS_KEY=your-secret-access-key
export AWS_SESSION_TOKEN=your-session-token
````

**Option C: Environment variables (SSO profile)**

````bash
aws sso login --profile=<your-profile-name>
export AWS_PROFILE=your-profile-name
````

**Option D: Bedrock API keys**

````bash
export AWS_BEARER_TOKEN_BEDROCK=your-bedrock-api-key
````

Bedrock API keys provide a simpler authentication method without needing full AWS credentials. [Learn more about Bedrock API keys](https://aws.amazon.com/blogs/machine-learning/accelerate-ai-development-with-amazon-bedrock-api-keys/).


#### [​](#advanced-credential-configuration) Advanced credential configuration

Claude Code supports two configuration settings for dynamic AWS credential management:


##### `awsAuthRefresh`

This setting specifies a command for foreground authentication operations where output is visible to the user. It is typically used for SSO browser flows.

Example:

````json
{
"awsAuthRefresh": "aws sso login --profile myprofile"
}
````


##### `awsCredentialExport`

This setting specifies a command that outputs AWS credentials in JSON format to stdout. The output is not displayed to the user, but is used by Claude Code for subsequent Bedrock requests.

Required output format is JSON with the following properties:

````json
{
"Credentials": {
"AccessKeyId": "value",
"SecretAccessKey": "value",
"SessionToken": "value"
}
}
````

Example:

````json
{
"awsCredentialExport": "aws sts get-session-token --profile myprofile --output json"
}
````

These settings can be used to call scripts that invoke alternative identity systems.


### [​](#3-configure-claude-code) 3. Configure Claude Code

Set the following environment variables to enable Bedrock:

````bash

# Enable Bedrock integration
export CLAUDE_CODE_USE_BEDROCK=1
export AWS_REGION=us-east-1 # or your preferred region

# Optional: Override the region for the small/fast model (Haiku)
export ANTHROPIC_SMALL_FAST_MODEL_AWS_REGION=us-west-2
````

When enabling Bedrock for Claude Code, keep the following in mind:


- `AWS_REGION` is a required environment variable. Claude Code does not read from the `.aws` config file for this setting.

- When using Bedrock, the `/login` and `/logout` commands are disabled since authentication is handled through AWS credentials.

- You can use settings files for environment variables like `AWS_PROFILE` that you don’t want to leak to other processes. See [Settings](./en/docs/claude-code/settings/index.md) for more information.


### [​](#4-model-configuration) 4. Model configuration

Claude Code uses these default models for Bedrock:

| Model type | Default value |
| --- | --- |
| Primary model | `us.anthropic.claude-3-7-sonnet-20250219-v1:0` |
| Small/fast model | `us.anthropic.claude-3-5-haiku-20241022-v1:0` |

To customize models, use one of these methods:

````bash

# Using inference profile ID
export ANTHROPIC_MODEL='us.anthropic.claude-opus-4-20250514-v1:0'
export ANTHROPIC_SMALL_FAST_MODEL='us.anthropic.claude-3-5-haiku-20241022-v1:0'

# Using application inference profile ARN
export ANTHROPIC_MODEL='arn:aws:bedrock:us-east-2:your-account-id:application-inference-profile/your-model-id'

# Optional: Disable prompt caching if needed
export DISABLE_PROMPT_CACHING=1
````

[Prompt caching](./en/docs/build-with-claude/prompt-caching/index.md) may not be available in all regions


## [​](#iam-configuration) IAM configuration

Create an IAM policy with the required permissions for Claude Code:

````json
{
"Version": "2012-10-17",
"Statement": [
{
"Effect": "Allow",
"Action": [
"bedrock:InvokeModel",
"bedrock:InvokeModelWithResponseStream",
"bedrock:ListInferenceProfiles"
],
"Resource": [
"arn:aws:bedrock:*:*:inference-profile/*",
"arn:aws:bedrock:*:*:application-inference-profile/*"
]
}
]
}
````

For more restrictive permissions, you can limit the Resource to specific inference profile ARNs.

For details, see [Bedrock IAM documentation](https://docs.aws.amazon.com/bedrock/latest/userguide/security-iam.html).

We recommend creating a dedicated AWS account for Claude Code to simplify cost tracking and access control.


## [​](#troubleshooting) Troubleshooting

If you encounter region issues:


- Check model availability: `aws bedrock list-inference-profiles --region your-region`

- Switch to a supported region: `export AWS_REGION=us-east-1`

- Consider using inference profiles for cross-region access

If you receive an error “on-demand throughput isn’t supported”:


- Specify the model as an [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html) ID


## [​](#additional-resources) Additional resources


- [Bedrock documentation](https://docs.aws.amazon.com/bedrock/)

- [Bedrock pricing](https://aws.amazon.com/bedrock/pricing/)

- [Bedrock inference profiles](https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html)

- [Claude Code on Amazon Bedrock: Quick Setup Guide](https://community.aws/content/2tXkZKrZzlrlu0KfH8gST5Dkppq/claude-code-on-amazon-bedrock-quick-setup-guide)

Was this page helpful?

YesNo

[Overview](./en/docs/claude-code/third-party-integrations/index.md)[Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

On this page


- [Prerequisites](#prerequisites)

- [Setup](#setup)

- [1. Enable model access](#1-enable-model-access)

- [2. Configure AWS credentials](#2-configure-aws-credentials)

- [Advanced credential configuration](#advanced-credential-configuration)

- [3. Configure Claude Code](#3-configure-claude-code)

- [4. Model configuration](#4-model-configuration)

- [IAM configuration](#iam-configuration)

- [Troubleshooting](#troubleshooting)

- [Additional resources](#additional-resources)

======= analytics/index.md ======
Analytics - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Analytics

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code provides an analytics dashboard that helps organizations understand developer usage patterns, track productivity metrics, and optimize their Claude Code adoption.

Analytics are currently available only for organizations using Claude Code with the Anthropic API through the Anthropic Console.


## [​](#access-analytics) Access analytics

Navigate to the analytics dashboard at [console.anthropic.com/claude\_code](https://console.anthropic.com/claude_code).


### [​](#required-roles) Required roles


- **Primary Owner**

- **Owner**

- **Billing**

- **Admin**

- **Developer**

Users with **User**, **Claude Code User** or **Membership Admin** roles cannot access analytics.


## [​](#available-metrics) Available metrics


### [​](#lines-of-code-accepted) Lines of code accepted

Total lines of code written by Claude Code that users have accepted in their sessions.


- Excludes rejected code suggestions

- Doesn’t track subsequent deletions


### [​](#suggestion-accept-rate) Suggestion accept rate

Percentage of times users accept code editing tool usage, including:


- Edit

- MultiEdit

- Write

- NotebookEdit


### [​](#activity) Activity

**users**: Number of active users in a given day (number on left Y-axis)

**sessions**: Number of active sessions in a given day (number on right Y-axis)


### [​](#spend) Spend

**users**: Number of active users in a given day (number on left Y-axis)

**spend**: Total dollars spent in a given day (number on right Y-axis)


### [​](#team-insights) Team insights

**Members**: All users who have authenticated to Claude Code


- API key users are displayed by **API key identifier**

- OAuth users are displayed by **email address**

**Avg daily spend:** Per-user average spend for the current month. For example, on July 10, this reflects the average daily spend over 10 days.

**Avg lines/day:** Per-user average of accepted code lines for the current month.


## [​](#using-analytics-effectively) Using analytics effectively


### [​](#monitor-adoption) Monitor adoption

Track team member status to identify:


- Active users who can share best practices

- Overall adoption trends across your organization


### [​](#measure-productivity) Measure productivity

Tool acceptance rates and code metrics help you:


- Understand developer satisfaction with Claude Code suggestions

- Track code generation effectiveness

- Identify opportunities for training or process improvements


## [​](#related-resources) Related resources


- [Monitoring usage with OpenTelemetry](./en/docs/claude-code/monitoring-usage/index.md) for custom metrics and alerting

- [Identity and access management](./en/docs/claude-code/iam/index.md) for role configuration

Was this page helpful?

YesNo

[Costs](./en/docs/claude-code/costs/index.md)[Settings](./en/docs/claude-code/settings/index.md)

On this page


- [Access analytics](#access-analytics)

- [Required roles](#required-roles)

- [Available metrics](#available-metrics)

- [Lines of code accepted](#lines-of-code-accepted)

- [Suggestion accept rate](#suggestion-accept-rate)

- [Activity](#activity)

- [Spend](#spend)

- [Team insights](#team-insights)

- [Using analytics effectively](#using-analytics-effectively)

- [Monitor adoption](#monitor-adoption)

- [Measure productivity](#measure-productivity)

- [Related resources](#related-resources)

======= cli-reference/index.md ======
CLI reference - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

CLI reference

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#cli-commands) CLI commands

| Command | Description | Example |
| --- | --- | --- |
| `claude` | Start interactive REPL | `claude` |
| `claude "query"` | Start REPL with initial prompt | `claude "explain this project"` |
| `claude -p "query"` | Query via SDK, then exit | `claude -p "explain this function"` |
| `cat file | claude -p "query"` | Process piped content | `cat logs.txt | claude -p "explain"` |
| `claude -c` | Continue most recent conversation | `claude -c` |
| `claude -c -p "query"` | Continue via SDK | `claude -c -p "Check for type errors"` |
| `claude -r "<session-id>" "query"` | Resume session by ID | `claude -r "abc123" "Finish this PR"` |
| `claude update` | Update to latest version | `claude update` |
| `claude mcp` | Configure Model Context Protocol (MCP) servers | See the [Claude Code MCP documentation](./en/docs/claude-code/mcp/index.md). |


## [​](#cli-flags) CLI flags

Customize Claude Code’s behavior with these command-line flags:

| Flag | Description | Example |
| --- | --- | --- |
| `--add-dir` | Add additional working directories for Claude to access (validates each path exists as a directory) | `claude --add-dir ../apps ../lib` |
| `--allowedTools` | A list of tools that should be allowed without prompting the user for permission, in addition to [settings.json files](./en/docs/claude-code/settings/index.md) | `"Bash(git log:*)" "Bash(git diff:*)" "Read"` |
| `--disallowedTools` | A list of tools that should be disallowed without prompting the user for permission, in addition to [settings.json files](./en/docs/claude-code/settings/index.md) | `"Bash(git log:*)" "Bash(git diff:*)" "Edit"` |
| `--print`, `-p` | Print response without interactive mode (see [SDK documentation](./en/docs/claude-code/sdk/index.md) for programmatic usage details) | `claude -p "query"` |
| `--output-format` | Specify output format for print mode (options: `text`, `json`, `stream-json`) | `claude -p "query" --output-format json` |
| `--input-format` | Specify input format for print mode (options: `text`, `stream-json`) | `claude -p --output-format json --input-format stream-json` |
| `--verbose` | Enable verbose logging, shows full turn-by-turn output (helpful for debugging in both print and interactive modes) | `claude --verbose` |
| `--max-turns` | Limit the number of agentic turns in non-interactive mode | `claude -p --max-turns 3 "query"` |
| `--model` | Sets the model for the current session with an alias for the latest model (`sonnet` or `opus`) or a model’s full name | `claude --model claude-sonnet-4-20250514` |
| `--permission-mode` | Begin in a specified [permission mode](iam#permission-modes) | `claude --permission-mode plan` |
| `--permission-prompt-tool` | Specify an MCP tool to handle permission prompts in non-interactive mode | `claude -p --permission-prompt-tool mcp_auth_tool "query"` |
| `--resume` | Resume a specific session by ID, or by choosing in interactive mode | `claude --resume abc123 "query"` |
| `--continue` | Load the most recent conversation in the current directory | `claude --continue` |
| `--dangerously-skip-permissions` | Skip permission prompts (use with caution) | `claude --dangerously-skip-permissions` |

The `--output-format json` flag is particularly useful for scripting and
automation, allowing you to parse Claude’s responses programmatically.

For detailed information about print mode (`-p`) including output formats,
streaming, verbose logging, and programmatic usage, see the
[SDK documentation](./en/docs/claude-code/sdk/index.md).


## [​](#see-also) See also


- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md) - Shortcuts, input modes, and interactive features

- [Slash commands](./en/docs/claude-code/slash-commands/index.md) - Interactive session commands

- [Quickstart guide](./en/docs/claude-code/quickstart/index.md) - Getting started with Claude Code

- [Common workflows](./en/docs/claude-code/common-workflows/index.md) - Advanced workflows and patterns

- [Settings](./en/docs/claude-code/settings/index.md) - Configuration options

- [SDK documentation](./en/docs/claude-code/sdk/index.md) - Programmatic usage and integrations

Was this page helpful?

YesNo

[Memory management](./en/docs/claude-code/memory/index.md)[Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

On this page


- [CLI commands](#cli-commands)

- [CLI flags](#cli-flags)

- [See also](#see-also)

======= common-workflows/index.md ======
Common workflows - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Getting started

Common workflows

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Each task in this document includes clear instructions, example commands, and best practices to help you get the most from Claude Code.


## [​](#understand-new-codebases) Understand new codebases


### [​](#get-a-quick-codebase-overview) Get a quick codebase overview

Suppose you’ve just joined a new project and need to understand its structure quickly.

1

Navigate to the project root directory

````bash
cd /path/to/project
````

2

Start Claude Code

````bash
claude
````

3

Ask for a high-level overview

```
> give me an overview of this codebase 

```

4

Dive deeper into specific components

```
> explain the main architecture patterns used here 

```

```
> what are the key data models?

```

```
> how is authentication handled?

```

Tips:


- Start with broad questions, then narrow down to specific areas

- Ask about coding conventions and patterns used in the project

- Request a glossary of project-specific terms


### [​](#find-relevant-code) Find relevant code

Suppose you need to locate code related to a specific feature or functionality.

1

Ask Claude to find relevant files

```
> find the files that handle user authentication 

```

2

Get context on how components interact

```
> how do these authentication files work together? 

```

3

Understand the execution flow

```
> trace the login process from front-end to database 

```

Tips:


- Be specific about what you’re looking for

- Use domain language from the project

---


## [​](#fix-bugs-efficiently) Fix bugs efficiently

Suppose you’ve encountered an error message and need to find and fix its source.

1

Share the error with Claude

```
> I'm seeing an error when I run npm test 

```

2

Ask for fix recommendations

```
> suggest a few ways to fix the @ts-ignore in user.ts 

```

3

Apply the fix

```
> update user.ts to add the null check you suggested 

```

Tips:


- Tell Claude the command to reproduce the issue and get a stack trace

- Mention any steps to reproduce the error

- Let Claude know if the error is intermittent or consistent

---


## [​](#refactor-code) Refactor code

Suppose you need to update old code to use modern patterns and practices.

1

Identify legacy code for refactoring

```
> find deprecated API usage in our codebase 

```

2

Get refactoring recommendations

```
> suggest how to refactor utils.js to use modern JavaScript features 

```

3

Apply the changes safely

```
> refactor utils.js to use ES2024 features while maintaining the same behavior 

```

4

Verify the refactoring

```
> run tests for the refactored code 

```

Tips:


- Ask Claude to explain the benefits of the modern approach

- Request that changes maintain backward compatibility when needed

- Do refactoring in small, testable increments

---


## [​](#work-with-tests) Work with tests

Suppose you need to add tests for uncovered code.

1

Identify untested code

```
> find functions in NotificationsService.swift that are not covered by tests 

```

2

Generate test scaffolding

```
> add tests for the notification service 

```

3

Add meaningful test cases

```
> add test cases for edge conditions in the notification service 

```

4

Run and verify tests

```
> run the new tests and fix any failures 

```

Tips:


- Ask for tests that cover edge cases and error conditions

- Request both unit and integration tests when appropriate

- Have Claude explain the testing strategy

---


## [​](#create-pull-requests) Create pull requests

Suppose you need to create a well-documented pull request for your changes.

1

Summarize your changes

```
> summarize the changes I've made to the authentication module 

```

2

Generate a PR with Claude

```
> create a pr 

```

3

Review and refine

```
> enhance the PR description with more context about the security improvements 

```

4

Add testing details

```
> add information about how these changes were tested 

```

Tips:


- Ask Claude directly to make a PR for you

- Review Claude’s generated PR before submitting

- Ask Claude to highlight potential risks or considerations


## [​](#handle-documentation) Handle documentation

Suppose you need to add or update documentation for your code.

1

Identify undocumented code

```
> find functions without proper JSDoc comments in the auth module 

```

2

Generate documentation

```
> add JSDoc comments to the undocumented functions in auth.js 

```

3

Review and enhance

```
> improve the generated documentation with more context and examples 

```

4

Verify documentation

```
> check if the documentation follows our project standards 

```

Tips:


- Specify the documentation style you want (JSDoc, docstrings, etc.)

- Ask for examples in the documentation

- Request documentation for public APIs, interfaces, and complex logic

---


## [​](#work-with-images) Work with images

Suppose you need to work with images in your codebase, and you want Claude’s help analyzing image content.

1

Add an image to the conversation

You can use any of these methods:

1. Drag and drop an image into the Claude Code window
2. Copy an image and paste it into the CLI with ctrl+v (Do not use cmd+v)
3. Provide an image path to Claude. E.g., “Analyze this image: /path/to/your/image.png”

2

Ask Claude to analyze the image

```
> What does this image show?

```

```
> Describe the UI elements in this screenshot

```

```
> Are there any problematic elements in this diagram?

```

3

Use images for context

```
> Here's a screenshot of the error. What's causing it?

```

```
> This is our current database schema. How should we modify it for the new feature?

```

4

Get code suggestions from visual content

```
> Generate CSS to match this design mockup

```

```
> What HTML structure would recreate this component?

```

Tips:


- Use images when text descriptions would be unclear or cumbersome

- Include screenshots of errors, UI designs, or diagrams for better context

- You can work with multiple images in a conversation

- Image analysis works with diagrams, screenshots, mockups, and more

---


## [​](#reference-files-and-directories) Reference files and directories

Use @ to quickly include files or directories without waiting for Claude to read them.

1

Reference a single file

```
> Explain the logic in @src/utils/auth.js

```

This includes the full content of the file in the conversation.

2

Reference a directory

```
> What's the structure of @src/components?

```

This provides a directory listing with file information.

3

Reference MCP resources

```
> Show me the data from @github:repos/owner/repo/issues

```

This fetches data from connected MCP servers using the format @server:resource. See [MCP resources](./en/docs/claude-code/mcp#use-mcp-resources/index.md) for details.

Tips:


- File paths can be relative or absolute

- @ file references add CLAUDE.md in the file’s directory and parent directories to context

- Directory references show file listings, not contents

- You can reference multiple files in a single message (e.g., “@file1.js and @file2.js”)

---


## [​](#use-extended-thinking) Use extended thinking

Suppose you’re working on complex architectural decisions, challenging bugs, or planning multi-step implementations that require deep reasoning.

1

Provide context and ask Claude to think

```
> I need to implement a new authentication system using OAuth2 for our API. Think deeply about the best approach for implementing this in our codebase. 

```

Claude will gather relevant information from your codebase and
use extended thinking, which will be visible in the interface.

2

Refine the thinking with follow-up prompts

```
> think about potential security vulnerabilities in this approach 

```

```
> think harder about edge cases we should handle 

```

Tips to get the most value out of extended thinking:

Extended thinking is most valuable for complex tasks such as:


- Planning complex architectural changes

- Debugging intricate issues

- Creating implementation plans for new features

- Understanding complex codebases

- Evaluating tradeoffs between different approaches

The way you prompt for thinking results in varying levels of thinking depth:


- “think” triggers basic extended thinking

- intensifying phrases such as “think more”, “think a lot”, “think harder”, or “think longer” triggers deeper thinking

For more extended thinking prompting tips, see [Extended thinking tips](./en/docs/build-with-claude/prompt-engineering/extended-thinking-tips/index.md).

Claude will display its thinking process as italic gray text above the
response.

---


## [​](#resume-previous-conversations) Resume previous conversations

Suppose you’ve been working on a task with Claude Code and need to continue where you left off in a later session.

Claude Code provides two options for resuming previous conversations:


- `--continue` to automatically continue the most recent conversation

- `--resume` to display a conversation picker

1

Continue the most recent conversation

````bash
claude --continue
````

This immediately resumes your most recent conversation without any prompts.

2

Continue in non-interactive mode

````bash
claude --continue --print "Continue with my task"
````

Use `--print` with `--continue` to resume the most recent conversation in non-interactive mode, perfect for scripts or automation.

3

Show conversation picker

````bash
claude --resume
````

This displays an interactive conversation selector showing:


- Conversation start time

- Initial prompt or conversation summary

- Message count

Use arrow keys to navigate and press Enter to select a conversation.

Tips:


- Conversation history is stored locally on your machine

- Use `--continue` for quick access to your most recent conversation

- Use `--resume` when you need to select a specific past conversation

- When resuming, you’ll see the entire conversation history before continuing

- The resumed conversation starts with the same model and configuration as the original

How it works:

1. **Conversation Storage**: All conversations are automatically saved locally with their full message history
2. **Message Deserialization**: When resuming, the entire message history is restored to maintain context
3. **Tool State**: Tool usage and results from the previous conversation are preserved
4. **Context Restoration**: The conversation resumes with all previous context intact

Examples:

````bash

# Continue most recent conversation
claude --continue

# Continue most recent conversation with a specific prompt
claude --continue --print "Show me our progress"

# Show conversation picker
claude --resume

# Continue most recent conversation in non-interactive mode
claude --continue --print "Run the tests again"
````

---


## [​](#run-parallel-claude-code-sessions-with-git-worktrees) Run parallel Claude Code sessions with Git worktrees

Suppose you need to work on multiple tasks simultaneously with complete code isolation between Claude Code instances.

1

Understand Git worktrees

Git worktrees allow you to check out multiple branches from the same
repository into separate directories. Each worktree has its own working
directory with isolated files, while sharing the same Git history. Learn
more in the [official Git worktree
documentation](https://git-scm.com/docs/git-worktree).

2

Create a new worktree

````bash

# Create a new worktree with a new branch
git worktree add ../project-feature-a -b feature-a

# Or create a worktree with an existing branch
git worktree add ../project-bugfix bugfix-123
````

This creates a new directory with a separate working copy of your repository.

3

Run Claude Code in each worktree

````bash

# Navigate to your worktree
cd ../project-feature-a

# Run Claude Code in this isolated environment
claude
````

4

Run Claude in another worktree

````bash
cd ../project-bugfix
claude
````

5

Manage your worktrees

````bash

# List all worktrees
git worktree list

# Remove a worktree when done
git worktree remove ../project-feature-a
````

Tips:


- Each worktree has its own independent file state, making it perfect for parallel Claude Code sessions

- Changes made in one worktree won’t affect others, preventing Claude instances from interfering with each other

- All worktrees share the same Git history and remote connections

- For long-running tasks, you can have Claude working in one worktree while you continue development in another

- Use descriptive directory names to easily identify which task each worktree is for

- Remember to initialize your development environment in each new worktree according to your project’s setup. Depending on your stack, this might include:

  - JavaScript projects: Running dependency installation (`npm install`, `yarn`)

  - Python projects: Setting up virtual environments or installing with package managers

  - Other languages: Following your project’s standard setup process

---


## [​](#use-claude-as-a-unix-style-utility) Use Claude as a unix-style utility


### [​](#add-claude-to-your-verification-process) Add Claude to your verification process

Suppose you want to use Claude Code as a linter or code reviewer.

**Add Claude to your build script:**

````json
// package.json
{
...
"scripts": {
...
"lint:claude": "claude -p 'you are a linter. please look at the changes vs. main and report any issues related to typos. report the filename and line number on one line, and a description of the issue on the second line. do not return any other text.'"
}
}
````

Tips:


- Use Claude for automated code review in your CI/CD pipeline

- Customize the prompt to check for specific issues relevant to your project

- Consider creating multiple scripts for different types of verification


### [​](#pipe-in%2C-pipe-out) Pipe in, pipe out

Suppose you want to pipe data into Claude, and get back data in a structured format.

**Pipe data through Claude:**

````bash
cat build-error.txt | claude -p 'concisely explain the root cause of this build error' > output.txt
````

Tips:


- Use pipes to integrate Claude into existing shell scripts

- Combine with other Unix tools for powerful workflows

- Consider using —output-format for structured output


### [​](#control-output-format) Control output format

Suppose you need Claude’s output in a specific format, especially when integrating Claude Code into scripts or other tools.

1

Use text format (default)

````bash
cat data.txt | claude -p 'summarize this data' --output-format text > summary.txt
````

This outputs just Claude’s plain text response (default behavior).

2

Use JSON format

````bash
cat code.py | claude -p 'analyze this code for bugs' --output-format json > analysis.json
````

This outputs a JSON array of messages with metadata including cost and duration.

3

Use streaming JSON format

````bash
cat log.txt | claude -p 'parse this log file for errors' --output-format stream-json
````

This outputs a series of JSON objects in real-time as Claude processes the request. Each message is a valid JSON object, but the entire output is not valid JSON if concatenated.

Tips:


- Use `--output-format text` for simple integrations where you just need Claude’s response

- Use `--output-format json` when you need the full conversation log

- Use `--output-format stream-json` for real-time output of each conversation turn

---


## [​](#create-custom-slash-commands) Create custom slash commands

Claude Code supports custom slash commands that you can create to quickly execute specific prompts or tasks.

For more details, see the [Slash commands](./en/docs/claude-code/slash-commands/index.md) reference page.


### [​](#create-project-specific-commands) Create project-specific commands

Suppose you want to create reusable slash commands for your project that all team members can use.

1

Create a commands directory in your project

````bash
mkdir -p .claude/commands
````

2

Create a Markdown file for each command

````bash
echo "Analyze the performance of this code and suggest three specific optimizations:" > .claude/commands/optimize.md
````

3

Use your custom command in Claude Code

```
> /optimize 

```

Tips:


- Command names are derived from the filename (e.g., `optimize.md` becomes `/optimize`)

- You can organize commands in subdirectories (e.g., `.claude/commands/frontend/component.md` creates `/component` with “(project:frontend)” shown in the description)

- Project commands are available to everyone who clones the repository

- The Markdown file content becomes the prompt sent to Claude when the command is invoked


### [​](#add-command-arguments-with-%24arguments) Add command arguments with $ARGUMENTS

Suppose you want to create flexible slash commands that can accept additional input from users.

1

Create a command file with the $ARGUMENTS placeholder

````bash
echo "Find and fix issue #$ARGUMENTS. Follow these steps: 1.
Understand the issue described in the ticket 2. Locate the relevant code in
our codebase 3. Implement a solution that addresses the root cause 4. Add
appropriate tests 5. Prepare a concise PR description" >
.claude/commands/fix-issue.md
````

2

Use the command with an issue number

In your Claude session, use the command with arguments.

```
> /fix-issue 123 

```

This will replace $ARGUMENTS with “123” in the prompt.

Tips:


- The $ARGUMENTS placeholder is replaced with any text that follows the command

- You can position $ARGUMENTS anywhere in your command template

- Other useful applications: generating test cases for specific functions, creating documentation for components, reviewing code in particular files, or translating content to specified languages


### [​](#create-personal-slash-commands) Create personal slash commands

Suppose you want to create personal slash commands that work across all your projects.

1

Create a commands directory in your home folder

````bash
mkdir -p ~/.claude/commands
````

2

Create a Markdown file for each command

````bash
echo "Review this code for security vulnerabilities, focusing on:" >
~/.claude/commands/security-review.md
````

3

Use your personal custom command

```
> /security-review 

```

Tips:


- Personal commands show “(user)” in their description when listed with `/help`

- Personal commands are only available to you and not shared with your team

- Personal commands work across all your projects

- You can use these for consistent workflows across different codebases

---


## [​](#next-steps) Next steps

[## Claude Code reference implementation

Clone our development container reference implementation.](https://github.com/anthropics/claude-code/tree/main/.devcontainer)

Was this page helpful?

YesNo

[Quickstart](./en/docs/claude-code/quickstart/index.md)[Claude Code SDK](./en/docs/claude-code/sdk/index.md)

On this page


- [Understand new codebases](#understand-new-codebases)

- [Get a quick codebase overview](#get-a-quick-codebase-overview)

- [Find relevant code](#find-relevant-code)

- [Fix bugs efficiently](#fix-bugs-efficiently)

- [Refactor code](#refactor-code)

- [Work with tests](#work-with-tests)

- [Create pull requests](#create-pull-requests)

- [Handle documentation](#handle-documentation)

- [Work with images](#work-with-images)

- [Reference files and directories](#reference-files-and-directories)

- [Use extended thinking](#use-extended-thinking)

- [Resume previous conversations](#resume-previous-conversations)

- [Run parallel Claude Code sessions with Git worktrees](#run-parallel-claude-code-sessions-with-git-worktrees)

- [Use Claude as a unix-style utility](#use-claude-as-a-unix-style-utility)

- [Add Claude to your verification process](#add-claude-to-your-verification-process)

- [Pipe in, pipe out](#pipe-in%2C-pipe-out)

- [Control output format](#control-output-format)

- [Create custom slash commands](#create-custom-slash-commands)

- [Create project-specific commands](#create-project-specific-commands)

- [Add command arguments with $ARGUMENTS](#add-command-arguments-with-%24arguments)

- [Create personal slash commands](#create-personal-slash-commands)

- [Next steps](#next-steps)

======= corporate-proxy/index.md ======
Corporate proxy configuration - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Corporate proxy configuration

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code supports standard HTTP/HTTPS proxy configurations through environment variables. This allows you to route all Claude Code traffic through your organization’s proxy servers for security, compliance, and monitoring purposes.


## [​](#basic-proxy-configuration) Basic proxy configuration


### [​](#environment-variables) Environment variables

Claude Code respects standard proxy environment variables:

````bash

# HTTPS proxy (recommended)
export HTTPS_PROXY=https://proxy.example.com:8080

# HTTP proxy (if HTTPS not available)
export HTTP_PROXY=http://proxy.example.com:8080
````

Claude Code currently does not support the `NO_PROXY` environment variable. All traffic will be routed through the configured proxy.

Claude Code does not support SOCKS proxies.


## [​](#authentication) Authentication


### [​](#basic-authentication) Basic authentication

If your proxy requires basic authentication, include credentials in the proxy URL:

````bash
export HTTPS_PROXY=http://username:password@proxy.example.com:8080
````

Avoid hardcoding passwords in scripts. Use environment variables or secure credential storage instead.

For proxies requiring advanced authentication (NTLM, Kerberos, etc.), consider using an LLM Gateway service that supports your authentication method.


### [​](#ssl-certificate-issues) SSL certificate issues

If your proxy uses custom SSL certificates, you may encounter certificate errors.

Ensure that you set the correct certificate bundle path:

````bash
export SSL_CERT_FILE=/path/to/certificate-bundle.crt
export NODE_EXTRA_CA_CERTS=/path/to/certificate-bundle.crt
````


## [​](#network-access-requirements) Network access requirements

Claude Code requires access to the following URLs:


- `api.anthropic.com` - Claude API endpoints

- `statsig.anthropic.com` - Telemetry and metrics

- `sentry.io` - Error reporting

Ensure these URLs are allowlisted in your proxy configuration and firewall rules. This is especially important when using Claude Code in containerized or restricted network environments.


## [​](#additional-resources) Additional resources


- [Claude Code settings](./en/docs/claude-code/settings/index.md)

- [Environment variables reference](./en/docs/claude-code/settings#environment-variables/index.md)

- [Troubleshooting guide](./en/docs/claude-code/troubleshooting/index.md)

Was this page helpful?

YesNo

[Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)[LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

On this page


- [Basic proxy configuration](#basic-proxy-configuration)

- [Environment variables](#environment-variables)

- [Authentication](#authentication)

- [Basic authentication](#basic-authentication)

- [SSL certificate issues](#ssl-certificate-issues)

- [Network access requirements](#network-access-requirements)

- [Additional resources](#additional-resources)

======= costs/index.md ======
Manage costs effectively - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Manage costs effectively

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code consumes tokens for each interaction. The average cost is $6 per developer per day, with daily costs remaining below $12 for 90% of users.

For team usage, Claude Code charges by API token consumption. On average, Claude Code costs ~$50-60/developer per month with Sonnet 4 though there is large variance depending on how many instances users are running and whether they’re using it in automation.


## [​](#track-your-costs) Track your costs


- Use `/cost` to see current session usage

- **Anthropic Console users**:

  - Check [historical usage](https://support.anthropic.com/en/articles/9534590-cost-and-usage-reporting-in-console) in the Anthropic Console (requires Admin or Billing role)

  - Set [workspace spend limits](https://support.anthropic.com/en/articles/9796807-creating-and-managing-workspaces) for the Claude Code workspace (requires Admin role)

- **Pro and Max plan users**: Usage is included in your subscription


## [​](#managing-costs-for-teams) Managing costs for teams

When using Anthropic API, you can limit the total Claude Code workspace spend. To configure, [follow these instructions](https://support.anthropic.com/en/articles/9796807-creating-and-managing-workspaces). Admins can view cost and usage reporting by [following these instructions](https://support.anthropic.com/en/articles/9534590-cost-and-usage-reporting-in-console).

On Bedrock and Vertex, Claude Code does not send metrics from your cloud. In order to get cost metrics, several large enterprises reported using [LiteLLM](./en/docs/claude-code/bedrock-vertex-proxies#litellm/index.md), which is an open-source tool that helps companies [track spend by key](https://docs.litellm.ai/docs/proxy/virtual_keys#tracking-spend). This project is unaffiliated with Anthropic and we have not audited its security.


## [​](#reduce-token-usage) Reduce token usage


- **Compact conversations:**


  - Claude uses auto-compact by default when context exceeds 95% capacity

  - Toggle auto-compact: Run `/config` and navigate to “Auto-compact enabled”

  - Use `/compact` manually when context gets large

  - Add custom instructions: `/compact Focus on code samples and API usage`

  - Customize compaction by adding to CLAUDE.md:

    ````markdown
    # Summary instructions
    When you are using compact, please focus on test output and code changes
    ````

- **Write specific queries:** Avoid vague requests that trigger unnecessary scanning

- **Break down complex tasks:** Split large tasks into focused interactions

- **Clear history between tasks:** Use `/clear` to reset context

Costs can vary significantly based on:


- Size of codebase being analyzed

- Complexity of queries

- Number of files being searched or modified

- Length of conversation history

- Frequency of compacting conversations

- Background processes (haiku generation, conversation summarization)


## [​](#background-token-usage) Background token usage

Claude Code uses tokens for some background functionality even when idle:


- **Haiku generation**: Small creative messages that appear while you type (approximately 1 cent per day)

- **Conversation summarization**: Background jobs that summarize previous conversations for the `claude --resume` feature

- **Command processing**: Some commands like `/cost` may generate requests to check status

These background processes consume a small amount of tokens (typically under $0.04 per session) even without active interaction.

For team deployments, we recommend starting with a small pilot group to
establish usage patterns before wider rollout.

Was this page helpful?

YesNo

[Monitoring](./en/docs/claude-code/monitoring-usage/index.md)[Analytics](./en/docs/claude-code/analytics/index.md)

On this page


- [Track your costs](#track-your-costs)

- [Managing costs for teams](#managing-costs-for-teams)

- [Reduce token usage](#reduce-token-usage)

- [Background token usage](#background-token-usage)

======= data-usage/index.md ======
Data usage - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Resources

Data usage

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#data-policies) Data policies


### [​](#data-training-policy) Data training policy

By default, Anthropic does not train generative models using code or prompts that are sent to Claude Code.

We aim to be fully transparent about how we use your data. We may use feedback to improve our products and services, but we will not train generative models using your feedback from Claude Code.


### [​](#development-partner-program) Development Partner Program

If you explicitly opt in to methods to provide us with materials to train on, such as via the [Development Partner Program](https://support.anthropic.com/en/articles/11174108-about-the-development-partner-program), we may use those materials provided to train our models. An organization admin can expressly opt-in to the Development Partner Program for their organization. Note that this program is available only for Anthropic first-party API, and not for Bedrock or Vertex users.


### [​](#feedback-transcripts) Feedback transcripts

If you choose to send us feedback about Claude Code, such as transcripts of your usage, Anthropic may use that feedback to debug related issues and improve Claude Code’s functionality (e.g., to reduce the risk of similar bugs occurring in the future). We will not train generative models using this feedback. Given their potentially sensitive nature, we store user feedback transcripts for only 30 days.


### [​](#data-retention) Data retention

You can use an API key from a zero data retention organization. When doing so, Claude Code will not retain your chat transcripts on our servers. Users’ local Claude Code clients may store sessions locally for up to 30 days so that users can resume them. This behavior is configurable.


### [​](#privacy-safeguards) Privacy safeguards

We have implemented several safeguards to protect your data, including:


- Limited retention periods for sensitive information

- Restricted access to user session data

- Clear policies against using feedback for model training

For full details, please review our [Commercial Terms of Service](https://www.anthropic.com/legal/commercial-terms) and [Privacy Policy](https://www.anthropic.com/legal/privacy).


## [​](#data-flow-and-dependencies) Data flow and dependencies

Claude Code is installed from [NPM](https://www.npmjs.com/package/@anthropic-ai/claude-code). Claude Code runs locally. In order to interact with the LLM, Claude Code sends data over the network. This data includes all user prompts and model outputs. The data is encrypted in transit via TLS and is not encrypted at rest. Claude Code is compatible with most popular VPNs and LLM proxies.

Claude Code is built on Anthropic’s APIs. For details regarding our API’s security controls, including our API logging procedures, please refer to compliance artifacts offered in the [Anthropic Trust Center](https://trust.anthropic.com).


## [​](#telemetry-services) Telemetry services

Claude Code connects from users’ machines to the Statsig service to log operational metrics such as latency, reliability, and usage patterns. This logging does not include any code or file paths. Data is encrypted in transit using TLS and at rest using 256-bit AES encryption. Read more in the [Statsig security documentation](https://www.statsig.com/trust/security). To opt out of Statsig telemetry, set the `DISABLE_TELEMETRY` environment variable.

Claude Code connects from users’ machines to Sentry for operational error logging. The data is encrypted in transit using TLS and at rest using 256-bit AES encryption. Read more in the [Sentry security documentation](https://sentry.io/security/). To opt out of error logging, set the `DISABLE_ERROR_REPORTING` environment variable.

When users run the `/bug` command, a copy of their full conversation history including code is sent to Anthropic. The data is encrypted in transit and at rest. Optionally, a Github issue is created in our public repository. To opt out of bug reporting, set the `DISABLE_BUG_COMMAND` environment variable.


## [​](#default-behaviors-by-api-provider) Default behaviors by API provider

By default, we disable all non-essential traffic (including error reporting, telemetry, and bug reporting functionality) when using Bedrock or Vertex. You can also opt out of all of these at once by setting the `CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC` environment variable. Here are the full default behaviors:

| Service | Anthropic API | Vertex API | Bedrock API |
| --- | --- | --- | --- |
| **Statsig (Metrics)** | Default on. `DISABLE_TELEMETRY=1` to disable. | Default off. `CLAUDE_CODE_USE_VERTEX` must be 1. | Default off. `CLAUDE_CODE_USE_BEDROCK` must be 1. |
| **Sentry (Errors)** | Default on. `DISABLE_ERROR_REPORTING=1` to disable. | Default off. `CLAUDE_CODE_USE_VERTEX` must be 1. | Default off. `CLAUDE_CODE_USE_BEDROCK` must be 1. |
| **Anthropic API (`/bug` reports)** | Default on. `DISABLE_BUG_COMMAND=1` to disable. | Default off. `CLAUDE_CODE_USE_VERTEX` must be 1. | Default off. `CLAUDE_CODE_USE_BEDROCK` must be 1. |

All environment variables can be checked into `settings.json` ([read more](./en/docs/claude-code/settings/index.md)).

Was this page helpful?

YesNo

[Hooks reference](./en/docs/claude-code/hooks/index.md)[Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

On this page


- [Data policies](#data-policies)

- [Data training policy](#data-training-policy)

- [Development Partner Program](#development-partner-program)

- [Feedback transcripts](#feedback-transcripts)

- [Data retention](#data-retention)

- [Privacy safeguards](#privacy-safeguards)

- [Data flow and dependencies](#data-flow-and-dependencies)

- [Telemetry services](#telemetry-services)

- [Default behaviors by API provider](#default-behaviors-by-api-provider)

======= devcontainer/index.md ======
Development containers - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Development containers

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

The preconfigured [devcontainer setup](https://code.visualstudio.com/docs/devcontainers/containers) works seamlessly with VS Code’s Remote - Containers extension and similar tools.

The container’s enhanced security measures (isolation and firewall rules) allow you to run `claude --dangerously-skip-permissions` to bypass permission prompts for unattended operation.
We’ve included a [reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer) that you can customize for your needs.

While the devcontainer provides substantial protections, no system is completely immune to all attacks.
When executed with `--dangerously-skip-permissions`, devcontainers do not prevent a malicious project from exfiltrating anything accessible in the devcontainer including Claude Code credentials.
We recommend only using devcontainers when developing with trusted repositories.
Always maintain good security practices and monitor Claude’s activities.


## [​](#key-features) Key features


- **Production-ready Node.js**: Built on Node.js 20 with essential development dependencies

- **Security by design**: Custom firewall restricting network access to only necessary services

- **Developer-friendly tools**: Includes git, ZSH with productivity enhancements, fzf, and more

- **Seamless VS Code integration**: Pre-configured extensions and optimized settings

- **Session persistence**: Preserves command history and configurations between container restarts

- **Works everywhere**: Compatible with macOS, Windows, and Linux development environments


## [​](#getting-started-in-4-steps) Getting started in 4 steps

1. Install VS Code and the Remote - Containers extension
2. Clone the [Claude Code reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer) repository
3. Open the repository in VS Code
4. When prompted, click “Reopen in Container” (or use Command Palette: Cmd+Shift+P → “Remote-Containers: Reopen in Container”)


## [​](#configuration-breakdown) Configuration breakdown

The devcontainer setup consists of three primary components:


- [**devcontainer.json**](https://github.com/anthropics/claude-code/blob/main/.devcontainer/devcontainer.json): Controls container settings, extensions, and volume mounts

- [**Dockerfile**](https://github.com/anthropics/claude-code/blob/main/.devcontainer/Dockerfile): Defines the container image and installed tools

- [**init-firewall.sh**](https://github.com/anthropics/claude-code/blob/main/.devcontainer/init-firewall.sh): Establishes network security rules


## [​](#security-features) Security features

The container implements a multi-layered security approach with its firewall configuration:


- **Precise access control**: Restricts outbound connections to whitelisted domains only (npm registry, GitHub, Anthropic API, etc.)

- **Allowed outbound connections**: The firewall permits outbound DNS and SSH connections

- **Default-deny policy**: Blocks all other external network access

- **Startup verification**: Validates firewall rules when the container initializes

- **Isolation**: Creates a secure development environment separated from your main system


## [​](#customization-options) Customization options

The devcontainer configuration is designed to be adaptable to your needs:


- Add or remove VS Code extensions based on your workflow

- Modify resource allocations for different hardware environments

- Adjust network access permissions

- Customize shell configurations and developer tooling


## [​](#example-use-cases) Example use cases


### [​](#secure-client-work) Secure client work

Use devcontainers to isolate different client projects, ensuring code and credentials never mix between environments.


### [​](#team-onboarding) Team onboarding

New team members can get a fully configured development environment in minutes, with all necessary tools and settings pre-installed.


### [​](#consistent-ci%2Fcd-environments) Consistent CI/CD environments

Mirror your devcontainer configuration in CI/CD pipelines to ensure development and production environments match.


## [​](#related-resources) Related resources


- [VS Code devcontainers documentation](https://code.visualstudio.com/docs/devcontainers/containers)

- [Claude Code security best practices](./en/docs/claude-code/security/index.md)

- [Corporate proxy configuration](./en/docs/claude-code/corporate-proxy/index.md)

Was this page helpful?

YesNo

[LLM gateway](./en/docs/claude-code/llm-gateway/index.md)[Advanced installation](./en/docs/claude-code/setup/index.md)

On this page


- [Key features](#key-features)

- [Getting started in 4 steps](#getting-started-in-4-steps)

- [Configuration breakdown](#configuration-breakdown)

- [Security features](#security-features)

- [Customization options](#customization-options)

- [Example use cases](#example-use-cases)

- [Secure client work](#secure-client-work)

- [Team onboarding](#team-onboarding)

- [Consistent CI/CD environments](#consistent-ci%2Fcd-environments)

- [Related resources](#related-resources)

======= github-actions/index.md ======
Claude Code GitHub Actions - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Claude Code GitHub Actions

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code GitHub Actions brings AI-powered automation to your GitHub workflow. With a simple `@claude` mention in any PR or issue, Claude can analyze your code, create pull requests, implement features, and fix bugs - all while following your project’s standards.

Claude Code GitHub Actions is currently in beta. Features and functionality may evolve as we refine the experience.

Claude Code GitHub Actions is built on top of the [Claude Code SDK](./en/docs/claude-code/sdk/index.md), which enables programmatic integration of Claude Code into your applications. You can use the SDK to build custom automation workflows beyond GitHub Actions.


## [​](#why-use-claude-code-github-actions%3F) Why use Claude Code GitHub Actions?


- **Instant PR creation**: Describe what you need, and Claude creates a complete PR with all necessary changes

- **Automated code implementation**: Turn issues into working code with a single command

- **Follows your standards**: Claude respects your `CLAUDE.md` guidelines and existing code patterns

- **Simple setup**: Get started in minutes with our installer and API key

- **Secure by default**: Your code stays on Github’s runners


## [​](#what-can-claude-do%3F) What can Claude do?

Claude Code provides powerful GitHub Actions that transform how you work with code:


### [​](#claude-code-action) Claude Code Action

This GitHub Action allows you to run Claude Code within your GitHub Actions workflows. You can use this to build any custom workflow on top of Claude Code.

[View repository →](https://github.com/anthropics/claude-code-action)


### [​](#claude-code-action-base) Claude Code Action (Base)

The foundation for building custom GitHub workflows with Claude. This extensible framework gives you full access to Claude’s capabilities for creating tailored automation.

[View repository →](https://github.com/anthropics/claude-code-base-action)


## [​](#setup) Setup


## [​](#quick-setup) Quick setup

The easiest way to set up this action is through Claude Code in the terminal. Just open claude and run `/install-github-app`.

This command will guide you through setting up the GitHub app and required secrets.


- You must be a repository admin to install the GitHub app and add secrets

- This quickstart method is only available for direct Anthropic API users. If you’re using AWS Bedrock or Google Vertex AI, please see the [Using with AWS Bedrock & Google Vertex AI](./_sites/docs.anthropic.com/en/docs/claude-code/github-actions#using-with-aws-bedrock-%26-google-vertex-ai/index.md) section.


## [​](#manual-setup) Manual setup

If the `/install-github-app` command fails or you prefer manual setup, please follow these manual setup instructions:

1. **Install the Claude GitHub app** to your repository: <https://github.com/apps/claude>
2. **Add ANTHROPIC\_API\_KEY** to your repository secrets ([Learn how to use secrets in GitHub Actions](https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions))
3. **Copy the workflow file** from [examples/claude.yml](https://github.com/anthropics/claude-code-action/blob/main/examples/claude.yml) into your repository’s `.github/workflows/`

After completing either the quickstart or manual setup, test the action by tagging `@claude` in an issue or PR comment!


## [​](#example-use-cases) Example use cases

Claude Code GitHub Actions can help you with a variety of tasks. For complete working examples, see the [examples directory](https://github.com/anthropics/claude-code-action/tree/main/examples).


### [​](#turn-issues-into-prs) Turn issues into PRs

In an issue comment:

```
@claude implement this feature based on the issue description

```

Claude will analyze the issue, write the code, and create a PR for review.


### [​](#get-implementation-help) Get implementation help

In a PR comment:

```
@claude how should I implement user authentication for this endpoint?

```

Claude will analyze your code and provide specific implementation guidance.


### [​](#fix-bugs-quickly) Fix bugs quickly

In an issue:

````yaml
@claude fix the TypeError in the user dashboard component
````

Claude will locate the bug, implement a fix, and create a PR.


## [​](#best-practices) Best practices


### [​](#claude-md-configuration) CLAUDE.md configuration

Create a `CLAUDE.md` file in your repository root to define code style guidelines, review criteria, project-specific rules, and preferred patterns. This file guides Claude’s understanding of your project standards.


### [​](#security-considerations) Security considerations

Never commit API keys directly to your repository!

Always use GitHub Secrets for API keys:


- Add your API key as a repository secret named `ANTHROPIC_API_KEY`

- Reference it in workflows: `anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}`

- Limit action permissions to only what’s necessary

- Review Claude’s suggestions before merging

Always use GitHub Secrets (e.g., `${{ secrets.ANTHROPIC_API_KEY }}`) rather than hardcoding API keys directly in your workflow files.


### [​](#optimizing-performance) Optimizing performance

Use issue templates to provide context, keep your `CLAUDE.md` concise and focused, and configure appropriate timeouts for your workflows.


### [​](#ci-costs) CI costs

When using Claude Code GitHub Actions, be aware of the associated costs:

**GitHub Actions costs:**


- Claude Code runs on GitHub-hosted runners, which consume your GitHub Actions minutes

- See [GitHub’s billing documentation](https://docs.github.com/en/billing/managing-billing-for-your-products/managing-billing-for-github-actions/about-billing-for-github-actions) for detailed pricing and minute limits

**API costs:**


- Each Claude interaction consumes API tokens based on the length of prompts and responses

- Token usage varies by task complexity and codebase size

- See [Claude’s pricing page](https://www.anthropic.com/api) for current token rates

**Cost optimization tips:**


- Use specific `@claude` commands to reduce unnecessary API calls

- Configure appropriate `max_turns` limits to prevent excessive iterations

- Set reasonable `timeout_minutes` to avoid runaway workflows

- Consider using GitHub’s concurrency controls to limit parallel runs


## [​](#configuration-examples) Configuration examples

For ready-to-use workflow configurations for different use cases, including:


- Basic workflow setup for issue and PR comments

- Automated code reviews on pull requests

- Custom implementations for specific needs

Visit the [examples directory](https://github.com/anthropics/claude-code-action/tree/main/examples) in the Claude Code Action repository.

The examples repository includes complete, tested workflows that you can copy directly into your `.github/workflows/` directory.


## [​](#using-with-aws-bedrock-%26-google-vertex-ai) Using with AWS Bedrock & Google Vertex AI

For enterprise environments, you can use Claude Code GitHub Actions with your own cloud infrastructure. This approach gives you control over data residency and billing while maintaining the same functionality.


### [​](#prerequisites) Prerequisites

Before setting up Claude Code GitHub Actions with cloud providers, you need:


#### [​](#for-google-cloud-vertex-ai%3A) For Google Cloud Vertex AI:

1. A Google Cloud Project with Vertex AI enabled
2. Workload Identity Federation configured for GitHub Actions
3. A service account with the required permissions
4. A GitHub App (recommended) or use the default GITHUB\_TOKEN


#### [​](#for-aws-bedrock%3A) For AWS Bedrock:

1. An AWS account with Amazon Bedrock enabled
2. GitHub OIDC Identity Provider configured in AWS
3. An IAM role with Bedrock permissions
4. A GitHub App (recommended) or use the default GITHUB\_TOKEN

1

Create a custom GitHub App (Recommended for 3P Providers)

For best control and security when using 3P providers like Vertex AI or Bedrock, we recommend creating your own GitHub App:

1. Go to <https://github.com/settings/apps/new>
2. Fill in the basic information:

   - **GitHub App name**: Choose a unique name (e.g., “YourOrg Claude Assistant”)

   - **Homepage URL**: Your organization’s website or the repository URL
3. Configure the app settings:

   - **Webhooks**: Uncheck “Active” (not needed for this integration)
4. Set the required permissions:

   - **Repository permissions**:

     - Contents: Read & Write

     - Issues: Read & Write

     - Pull requests: Read & Write
5. Click “Create GitHub App”
6. After creation, click “Generate a private key” and save the downloaded `.pem` file
7. Note your App ID from the app settings page
8. Install the app to your repository:

   - From your app’s settings page, click “Install App” in the left sidebar

   - Select your account or organization

   - Choose “Only select repositories” and select the specific repository

   - Click “Install”
9. Add the private key as a secret to your repository:

   - Go to your repository’s Settings → Secrets and variables → Actions

   - Create a new secret named `APP_PRIVATE_KEY` with the contents of the `.pem` file
10. Add the App ID as a secret:


- Create a new secret named `APP_ID` with your GitHub App’s ID

This app will be used with the [actions/create-github-app-token](https://github.com/actions/create-github-app-token) action to generate authentication tokens in your workflows.

**Alternative for Anthropic API or if you don’t want to setup your own Github app**: Use the official Anthropic app:

1. Install from: <https://github.com/apps/claude>
2. No additional configuration needed for authentication

2

Configure cloud provider authentication

Choose your cloud provider and set up secure authentication:

AWS Bedrock

Google Vertex AI

3

Add Required Secrets

Add the following secrets to your repository (Settings → Secrets and variables → Actions):


#### [​](#for-anthropic-api-direct-%3A) For Anthropic API (Direct):

1. **For API Authentication**:


   - `ANTHROPIC_API_KEY`: Your Anthropic API key from [console.anthropic.com](https://console.anthropic.com)
2. **For GitHub App (if using your own app)**:


   - `APP_ID`: Your GitHub App’s ID

   - `APP_PRIVATE_KEY`: The private key (.pem) content


#### [​](#for-google-cloud-vertex-ai) For Google Cloud Vertex AI

1. **For GCP Authentication**:


   - `GCP_WORKLOAD_IDENTITY_PROVIDER`

   - `GCP_SERVICE_ACCOUNT`
2. **For GitHub App (if using your own app)**:


   - `APP_ID`: Your GitHub App’s ID

   - `APP_PRIVATE_KEY`: The private key (.pem) content


#### [​](#for-aws-bedrock) For AWS Bedrock

1. **For AWS Authentication**:


   - `AWS_ROLE_TO_ASSUME`
2. **For GitHub App (if using your own app)**:


   - `APP_ID`: Your GitHub App’s ID

   - `APP_PRIVATE_KEY`: The private key (.pem) content

4

Create workflow files

Create GitHub Actions workflow files that integrate with your cloud provider. The examples below show complete configurations for both AWS Bedrock and Google Vertex AI:

AWS Bedrock workflow

Google Vertex AI workflow


## [​](#troubleshooting) Troubleshooting


### [​](#claude-not-responding-to-%40claude-commands) Claude not responding to @claude commands

Verify the GitHub App is installed correctly, check that workflows are enabled, ensure API key is set in repository secrets, and confirm the comment contains `@claude` (not `/claude`).


### [​](#ci-not-running-on-claude%E2%80%99s-commits) CI not running on Claude’s commits

Ensure you’re using the GitHub App or custom app (not Actions user), check workflow triggers include the necessary events, and verify app permissions include CI triggers.


### [​](#authentication-errors) Authentication errors

Confirm API key is valid and has sufficient permissions. For Bedrock/Vertex, check credentials configuration and ensure secrets are named correctly in workflows.


## [​](#advanced-configuration) Advanced configuration


### [​](#action-parameters) Action parameters

The Claude Code Action supports these key parameters:

| Parameter | Description | Required |
| --- | --- | --- |
| `prompt` | The prompt to send to Claude | Yes\* |
| `prompt_file` | Path to file containing prompt | Yes\* |
| `anthropic_api_key` | Anthropic API key | Yes\*\* |
| `max_turns` | Maximum conversation turns | No |
| `timeout_minutes` | Execution timeout | No |

\*Either `prompt` or `prompt_file` required  
\*\*Required for direct Anthropic API, not for Bedrock/Vertex


### [​](#alternative-integration-methods) Alternative integration methods

While the `/install-github-app` command is the recommended approach, you can also:


- **Custom GitHub App**: For organizations needing branded usernames or custom authentication flows. Create your own GitHub App with required permissions (contents, issues, pull requests) and use the actions/create-github-app-token action to generate tokens in your workflows.

- **Manual GitHub Actions**: Direct workflow configuration for maximum flexibility

- **MCP Configuration**: Dynamic loading of Model Context Protocol servers

See the [Claude Code Action repository](https://github.com/anthropics/claude-code-action) for detailed documentation.


### [​](#customizing-claude%E2%80%99s-behavior) Customizing Claude’s behavior

You can configure Claude’s behavior in two ways:

1. **CLAUDE.md**: Define coding standards, review criteria, and project-specific rules in a `CLAUDE.md` file at the root of your repository. Claude will follow these guidelines when creating PRs and responding to requests. Check out our [Memory documentation](./en/docs/claude-code/memory/index.md) for more details.
2. **Custom prompts**: Use the `prompt` parameter in the workflow file to provide workflow-specific instructions. This allows you to customize Claude’s behavior for different workflows or tasks.

Claude will follow these guidelines when creating PRs and responding to requests.

Was this page helpful?

YesNo

[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)[Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

On this page


- [Why use Claude Code GitHub Actions?](#why-use-claude-code-github-actions%3F)

- [What can Claude do?](#what-can-claude-do%3F)

- [Claude Code Action](#claude-code-action)

- [Claude Code Action (Base)](#claude-code-action-base)

- [Setup](#setup)

- [Quick setup](#quick-setup)

- [Manual setup](#manual-setup)

- [Example use cases](#example-use-cases)

- [Turn issues into PRs](#turn-issues-into-prs)

- [Get implementation help](#get-implementation-help)

- [Fix bugs quickly](#fix-bugs-quickly)

- [Best practices](#best-practices)

- [CLAUDE.md configuration](#claude-md-configuration)

- [Security considerations](#security-considerations)

- [Optimizing performance](#optimizing-performance)

- [CI costs](#ci-costs)

- [Configuration examples](#configuration-examples)

- [Using with AWS Bedrock & Google Vertex AI](#using-with-aws-bedrock-%26-google-vertex-ai)

- [Prerequisites](#prerequisites)

- [For Google Cloud Vertex AI:](#for-google-cloud-vertex-ai%3A)

- [For AWS Bedrock:](#for-aws-bedrock%3A)

- [Troubleshooting](#troubleshooting)

- [Claude not responding to @claude commands](#claude-not-responding-to-%40claude-commands)

- [CI not running on Claude’s commits](#ci-not-running-on-claude%E2%80%99s-commits)

- [Authentication errors](#authentication-errors)

- [Advanced configuration](#advanced-configuration)

- [Action parameters](#action-parameters)

- [Alternative integration methods](#alternative-integration-methods)

- [Customizing Claude’s behavior](#customizing-claude%E2%80%99s-behavior)

======= google-vertex-ai/index.md ======
Claude Code on Google Vertex AI - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Claude Code on Google Vertex AI

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#prerequisites) Prerequisites

Before configuring Claude Code with Vertex AI, ensure you have:


- A Google Cloud Platform (GCP) account with billing enabled

- A GCP project with Vertex AI API enabled

- Access to desired Claude models (e.g., Claude Sonnet 4)

- Google Cloud SDK (`gcloud`) installed and configured

- Quota allocated in desired GCP region

Vertex AI may not support the Claude Code default models on non-`us-east5` regions. Ensure you are using `us-east5` and have quota allocated, or switch to supported models.


## [​](#setup) Setup


### [​](#1-enable-vertex-ai-api) 1. Enable Vertex AI API

Enable the Vertex AI API in your GCP project:

````bash

# Set your project ID
gcloud config set project YOUR-PROJECT-ID

# Enable Vertex AI API
gcloud services enable aiplatform.googleapis.com
````


### [​](#2-request-model-access) 2. Request model access

Request access to Claude models in Vertex AI:

1. Navigate to the [Vertex AI Model Garden](https://console.cloud.google.com/vertex-ai/model-garden)
2. Search for “Claude” models
3. Request access to desired Claude models (e.g., Claude Sonnet 4)
4. Wait for approval (may take 24-48 hours)


### [​](#3-configure-gcp-credentials) 3. Configure GCP credentials

Claude Code uses standard Google Cloud authentication.

For more information, see [Google Cloud authentication documentation](https://cloud.google.com/docs/authentication).


### [​](#4-configure-claude-code) 4. Configure Claude Code

Set the following environment variables:

````bash

# Enable Vertex AI integration
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
export ANTHROPIC_VERTEX_PROJECT_ID=YOUR-PROJECT-ID

# Optional: Disable prompt caching if needed
export DISABLE_PROMPT_CACHING=1

# Optional: Override regions for specific models
export VERTEX_REGION_CLAUDE_3_5_HAIKU=us-central1
export VERTEX_REGION_CLAUDE_3_5_SONNET=us-east5
export VERTEX_REGION_CLAUDE_3_7_SONNET=us-east5
export VERTEX_REGION_CLAUDE_4_0_OPUS=europe-west4
export VERTEX_REGION_CLAUDE_4_0_SONNET=us-east5
````

[Prompt caching](./en/docs/build-with-claude/prompt-caching/index.md) is automatically supported when you specify the `cache_control` ephemeral flag. To disable it, set `DISABLE_PROMPT_CACHING=1`. For heightened rate limits, contact Google Cloud support.

When using Vertex AI, the `/login` and `/logout` commands are disabled since authentication is handled through Google Cloud credentials.


### [​](#5-model-configuration) 5. Model configuration

Claude Code uses these default models for Vertex AI:

| Model type | Default value |
| --- | --- |
| Primary model | `claude-sonnet-4@20250514` |
| Small/fast model | `claude-3-5-haiku@20241022` |

To customize models:

````bash
export ANTHROPIC_MODEL='claude-opus-4@20250514'
export ANTHROPIC_SMALL_FAST_MODEL='claude-3-5-haiku@20241022'
````


## [​](#iam-configuration) IAM configuration

Assign the required IAM permissions:

The `roles/aiplatform.user` role includes the required permissions:


- `aiplatform.endpoints.predict` - Required for model invocation

- `aiplatform.endpoints.computeTokens` - Required for token counting

For more restrictive permissions, create a custom role with only the permissions above.

For details, see [Vertex IAM documentation](https://cloud.google.com/vertex-ai/docs/general/access-control).

We recommend creating a dedicated GCP project for Claude Code to simplify cost tracking and access control.


## [​](#troubleshooting) Troubleshooting

If you encounter quota issues:


- Check current quotas or request quota increase through [Cloud Console](https://cloud.google.com/docs/quotas/view-manage)

If you encounter “model not found” 404 errors:


- Verify you have access to the specified region

- Confirm model is Enabled in [Model Garden](https://console.cloud.google.com/vertex-ai/model-garden)

If you encounter 429 errors:


- Ensure the primary model and small/fast model are supported in your selected region


## [​](#additional-resources) Additional resources


- [Vertex AI documentation](https://cloud.google.com/vertex-ai/docs)

- [Vertex AI pricing](https://cloud.google.com/vertex-ai/pricing)

- [Vertex AI quotas and limits](https://cloud.google.com/vertex-ai/docs/quotas)

Was this page helpful?

YesNo

[Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)[Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

On this page


- [Prerequisites](#prerequisites)

- [Setup](#setup)

- [1. Enable Vertex AI API](#1-enable-vertex-ai-api)

- [2. Request model access](#2-request-model-access)

- [3. Configure GCP credentials](#3-configure-gcp-credentials)

- [4. Configure Claude Code](#4-configure-claude-code)

- [5. Model configuration](#5-model-configuration)

- [IAM configuration](#iam-configuration)

- [Troubleshooting](#troubleshooting)

- [Additional resources](#additional-resources)

======= hooks/index.md ======
Hooks reference - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

Hooks reference

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

For a quickstart guide with examples, see [Get started with Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md).


## [​](#configuration) Configuration

Claude Code hooks are configured in your
[settings files](./en/docs/claude-code/settings/index.md):


- `~/.claude/settings.json` - User settings

- `.claude/settings.json` - Project settings

- `.claude/settings.local.json` - Local project settings (not committed)

- Enterprise managed policy settings


### [​](#structure) Structure

Hooks are organized by matchers, where each matcher can have multiple hooks:

````json
{
"hooks": {
"EventName": [
{
"matcher": "ToolPattern",
"hooks": [
{
"type": "command",
"command": "your-command-here"
}
]
}
]
}
}
````


- **matcher**: Pattern to match tool names, case-sensitive (only applicable for
  `PreToolUse` and `PostToolUse`)

  - Simple strings match exactly: `Write` matches only the Write tool

  - Supports regex: `Edit|Write` or `Notebook.*`

  - If omitted or empty string, hooks run for all matching events

- **hooks**: Array of commands to execute when the pattern matches

  - `type`: Currently only `"command"` is supported

  - `command`: The bash command to execute

  - `timeout`: (Optional) How long a command should run, in seconds, before
    canceling that specific command.

For events like `UserPromptSubmit`, `Notification`, `Stop`, and `SubagentStop` that don’t use matchers, you can omit the matcher field:

````json
{
"hooks": {
"UserPromptSubmit": [
{
"hooks": [
{
"type": "command",
"command": "/path/to/prompt-validator.py"
}
]
}
]
}
}
````

`"matcher": "*"` is invalid. Instead, omit “matcher” or use `"matcher": ""`.


## [​](#hook-events) Hook Events


### [​](#pretooluse) PreToolUse

Runs after Claude creates tool parameters and before processing the tool call.

**Common matchers:**


- `Task` - Agent tasks

- `Bash` - Shell commands

- `Glob` - File pattern matching

- `Grep` - Content search

- `Read` - File reading

- `Edit`, `MultiEdit` - File editing

- `Write` - File writing

- `WebFetch`, `WebSearch` - Web operations


### [​](#posttooluse) PostToolUse

Runs immediately after a tool completes successfully.

Recognizes the same matcher values as PreToolUse.


### [​](#notification) Notification

Runs when Claude Code sends notifications. Notifications are sent when:

1. Claude needs your permission to use a tool. Example: “Claude needs your permission to use Bash”
2. The prompt input has been idle for at least 60 seconds. “Claude is waiting for your input”


### [​](#userpromptsubmit) UserPromptSubmit

Runs when the user submits a prompt, before Claude processes it. This allows you to add additional context based on the prompt/conversation, validate prompts, or block certain types of prompts.


### [​](#stop) Stop

Runs when the main Claude Code agent has finished responding. Does not run if the stoppage occurred due to a user interrupt.


### [​](#subagentstop) SubagentStop

Runs when a Claude Code subagent (Task tool call) has finished responding.


### [​](#precompact) PreCompact

Runs before Claude Code is about to run a compact operation.

**Matchers:**


- `manual` - Invoked from `/compact`

- `auto` - Invoked from auto-compact (due to full context window)


## [​](#hook-input) Hook Input

Hooks receive JSON data via stdin containing session information and
event-specific data:

````typescript
{
// Common fields
session_id: string
transcript_path: string // Path to conversation JSON
cwd: string // The current working directory when the hook is invoked
// Event-specific fields
hook_event_name: string
...
}
````


### [​](#pretooluse-input) PreToolUse Input

The exact schema for `tool_input` depends on the tool.

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "PreToolUse",
"tool_name": "Write",
"tool_input": {
"file_path": "/path/to/file.txt",
"content": "file content"
}
}
````


### [​](#posttooluse-input) PostToolUse Input

The exact schema for `tool_input` and `tool_response` depends on the tool.

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "PostToolUse",
"tool_name": "Write",
"tool_input": {
"file_path": "/path/to/file.txt",
"content": "file content"
},
"tool_response": {
"filePath": "/path/to/file.txt",
"success": true
}
}
````


### [​](#notification-input) Notification Input

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "Notification",
"message": "Task completed successfully"
}
````


### [​](#userpromptsubmit-input) UserPromptSubmit Input

````json
{
"session_id": "abc123",
"transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"cwd": "/Users/...",
"hook_event_name": "UserPromptSubmit",
"prompt": "Write a function to calculate the factorial of a number"
}
````


### [​](#stop-and-subagentstop-input) Stop and SubagentStop Input

`stop_hook_active` is true when Claude Code is already continuing as a result of
a stop hook. Check this value or process the transcript to prevent Claude Code
from running indefinitely.

````json
{
"session_id": "abc123",
"transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"hook_event_name": "Stop",
"stop_hook_active": true
}
````


### [​](#precompact-input) PreCompact Input

For `manual`, `custom_instructions` comes from what the user passes into
`/compact`. For `auto`, `custom_instructions` is empty.

````json
{
"session_id": "abc123",
"transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
"hook_event_name": "PreCompact",
"trigger": "manual",
"custom_instructions": ""
}
````


## [​](#hook-output) Hook Output

There are two ways for hooks to return output back to Claude Code. The output
communicates whether to block and any feedback that should be shown to Claude
and the user.


### [​](#simple%3A-exit-code) Simple: Exit Code

Hooks communicate status through exit codes, stdout, and stderr:


- **Exit code 0**: Success. `stdout` is shown to the user in transcript mode
  (CTRL-R).

- **Exit code 2**: Blocking error. `stderr` is fed back to Claude to process
  automatically. See per-hook-event behavior below.

- **Other exit codes**: Non-blocking error. `stderr` is shown to the user and
  execution continues.

Reminder: Claude Code does not see stdout if the exit code is 0.


#### [​](#exit-code-2-behavior) Exit Code 2 Behavior

| Hook Event | Behavior |
| --- | --- |
| `PreToolUse` | Blocks the tool call, shows stderr to Claude |
| `PostToolUse` | Shows stderr to Claude (tool already ran) |
| `Notification` | N/A, shows stderr to user only |
| `UserPromptSubmit` | Blocks prompt processing, erases prompt, shows stderr to user only |
| `Stop` | Blocks stoppage, shows stderr to Claude |
| `SubagentStop` | Blocks stoppage, shows stderr to Claude subagent |
| `PreCompact` | N/A, shows stderr to user only |


### [​](#advanced%3A-json-output) Advanced: JSON Output

Hooks can return structured JSON in `stdout` for more sophisticated control:


#### [​](#common-json-fields) Common JSON Fields

All hook types can include these optional fields:

````json
{
"continue": true, // Whether Claude should continue after hook execution (default: true)
"stopReason": "string" // Message shown when continue is false
"suppressOutput": true, // Hide stdout from transcript mode (default: false)
}
````

If `continue` is false, Claude stops processing after the hooks run.


- For `PreToolUse`, this is different from `"decision": "block"`, which only
  blocks a specific tool call and provides automatic feedback to Claude.

- For `PostToolUse`, this is different from `"decision": "block"`, which
  provides automated feedback to Claude.

- For `UserPromptSubmit`, this prevents the prompt from being processed.

- For `Stop` and `SubagentStop`, this takes precedence over any
  `"decision": "block"` output.

- In all cases, `"continue" = false` takes precedence over any
  `"decision": "block"` output.

`stopReason` accompanies `continue` with a reason shown to the user, not shown
to Claude.


#### [​](#pretooluse-decision-control) `PreToolUse` Decision Control

`PreToolUse` hooks can control whether a tool call proceeds.


- “approve” bypasses the permission system. `reason` is shown to the user but
  not to Claude.

- “block” prevents the tool call from executing. `reason` is shown to Claude.

- `undefined` leads to the existing permission flow. `reason` is ignored.

````json
{
"decision": "approve" | "block" | undefined,
"reason": "Explanation for decision"
}
````


#### [​](#posttooluse-decision-control) `PostToolUse` Decision Control

`PostToolUse` hooks can control whether a tool call proceeds.


- “block” automatically prompts Claude with `reason`.

- `undefined` does nothing. `reason` is ignored.

````json
{
"decision": "block" | undefined,
"reason": "Explanation for decision"
}
````


#### [​](#userpromptsubmit-decision-control) `UserPromptSubmit` Decision Control

`UserPromptSubmit` hooks can control whether a user prompt is processed.


- `"block"` prevents the prompt from being processed. The submitted prompt is erased from context. `"reason"` is shown to the user but not added to context.

- `undefined` allows the prompt to proceed normally. `"reason"` is ignored.

````json
{
"decision": "block" | undefined,
"reason": "Explanation for decision"
}
````


#### [​](#stop%2Fsubagentstop-decision-control) `Stop`/`SubagentStop` Decision Control

`Stop` and `SubagentStop` hooks can control whether Claude must continue.


- “block” prevents Claude from stopping. You must populate `reason` for Claude
  to know how to proceed.

- `undefined` allows Claude to stop. `reason` is ignored.

````json
{
"decision": "block" | undefined,
"reason": "Must be provided when Claude is blocked from stopping"
}
````


#### [​](#json-output-example%3A-bash-command-editing) JSON Output Example: Bash Command Editing

````python
#!/usr/bin/env python3
import json
import re
import sys

# Define validation rules as a list of (regex pattern, message) tuples
VALIDATION_RULES = [
(
r"\bgrep\b(?!.*\|)",
"Use 'rg' (ripgrep) instead of 'grep' for better performance and features",
),
(
r"\bfind\s+\S+\s+-name\b",
"Use 'rg --files | rg pattern' or 'rg --files -g pattern' instead of 'find -name' for better performance",
),
]
def validate_command(command: str) -> list[str]:
issues = []
for pattern, message in VALIDATION_RULES:
if re.search(pattern, command):
issues.append(message)
return issues
try:
input_data = json.load(sys.stdin)
except json.JSONDecodeError as e:
print(f"Error: Invalid JSON input: {e}", file=sys.stderr)
sys.exit(1)
tool_name = input_data.get("tool_name", "")
tool_input = input_data.get("tool_input", {})
command = tool_input.get("command", "")
if tool_name != "Bash" or not command:
sys.exit(1)

# Validate the command
issues = validate_command(command)
if issues:
for message in issues:
print(f"• {message}", file=sys.stderr)

# Exit code 2 blocks tool call and shows stderr to Claude
sys.exit(2)
````


#### [​](#userpromptsubmit-example%3A-adding-context-and-validation) UserPromptSubmit Example: Adding Context and Validation

````python
#!/usr/bin/env python3
import json
import sys
import re
import datetime

# Load input from stdin
try:
input_data = json.load(sys.stdin)
except json.JSONDecodeError as e:
print(f"Error: Invalid JSON input: {e}", file=sys.stderr)
sys.exit(1)
prompt = input_data.get("prompt", "")

# Check for sensitive patterns
sensitive_patterns = [
(r"(?i)\b(password|secret|key|token)\s*[:=]", "Prompt contains potential secrets"),
]
for pattern, message in sensitive_patterns:
if re.search(pattern, prompt):

# Use JSON output to block with a specific reason
output = {
"decision": "block",
"reason": f"Security policy violation: {message}. Please rephrase your request without sensitive information."
}
print(json.dumps(output))
sys.exit(0)

# Add current time to context
context = f"Current time: {datetime.datetime.now()}"
print(context)

# Allow the prompt to proceed with the additional context
sys.exit(0)
````


## [​](#working-with-mcp-tools) Working with MCP Tools

Claude Code hooks work seamlessly with
[Model Context Protocol (MCP) tools](./en/docs/claude-code/mcp/index.md). When MCP servers
provide tools, they appear with a special naming pattern that you can match in
your hooks.


### [​](#mcp-tool-naming) MCP Tool Naming

MCP tools follow the pattern `mcp__<server>__<tool>`, for example:


- `mcp__memory__create_entities` - Memory server’s create entities tool

- `mcp__filesystem__read_file` - Filesystem server’s read file tool

- `mcp__github__search_repositories` - GitHub server’s search tool


### [​](#configuring-hooks-for-mcp-tools) Configuring Hooks for MCP Tools

You can target specific MCP tools or entire MCP servers:

````json
{
"hooks": {
"PreToolUse": [
{
"matcher": "mcp__memory__.*",
"hooks": [
{
"type": "command",
"command": "echo 'Memory operation initiated' >> ~/mcp-operations.log"
}
]
},
{
"matcher": "mcp__.*__write.*",
"hooks": [
{
"type": "command",
"command": "/home/user/scripts/validate-mcp-write.py"
}
]
}
]
}
}
````


## [​](#examples) Examples

For practical examples including code formatting, notifications, and file protection, see [More Examples](./en/docs/claude-code/hooks-guide#more-examples/index.md) in the get started guide.


## [​](#security-considerations) Security Considerations


### [​](#disclaimer) Disclaimer

**USE AT YOUR OWN RISK**: Claude Code hooks execute arbitrary shell commands on
your system automatically. By using hooks, you acknowledge that:


- You are solely responsible for the commands you configure

- Hooks can modify, delete, or access any files your user account can access

- Malicious or poorly written hooks can cause data loss or system damage

- Anthropic provides no warranty and assumes no liability for any damages
  resulting from hook usage

- You should thoroughly test hooks in a safe environment before production use

Always review and understand any hook commands before adding them to your
configuration.


### [​](#security-best-practices) Security Best Practices

Here are some key practices for writing more secure hooks:

1. **Validate and sanitize inputs** - Never trust input data blindly
2. **Always quote shell variables** - Use `"$VAR"` not `$VAR`
3. **Block path traversal** - Check for `..` in file paths
4. **Use absolute paths** - Specify full paths for scripts
5. **Skip sensitive files** - Avoid `.env`, `.git/`, keys, etc.


### [​](#configuration-safety) Configuration Safety

Direct edits to hooks in settings files don’t take effect immediately. Claude
Code:

1. Captures a snapshot of hooks at startup
2. Uses this snapshot throughout the session
3. Warns if hooks are modified externally
4. Requires review in `/hooks` menu for changes to apply

This prevents malicious hook modifications from affecting your current session.


## [​](#hook-execution-details) Hook Execution Details


- **Timeout**: 60-second execution limit by default, configurable per command.

  - A timeout for an individual command does not affect the other commands.

- **Parallelization**: All matching hooks run in parallel

- **Environment**: Runs in current directory with Claude Code’s environment

- **Input**: JSON via stdin

- **Output**:

  - PreToolUse/PostToolUse/Stop: Progress shown in transcript (Ctrl-R)

  - Notification: Logged to debug only (`--debug`)


## [​](#debugging) Debugging


### [​](#basic-troubleshooting) Basic Troubleshooting

If your hooks aren’t working:

1. **Check configuration** - Run `/hooks` to see if your hook is registered
2. **Verify syntax** - Ensure your JSON settings are valid
3. **Test commands** - Run hook commands manually first
4. **Check permissions** - Make sure scripts are executable
5. **Review logs** - Use `claude --debug` to see hook execution details

Common issues:


- **Quotes not escaped** - Use `\"` inside JSON strings

- **Wrong matcher** - Check tool names match exactly (case-sensitive)

- **Command not found** - Use full paths for scripts


### [​](#advanced-debugging) Advanced Debugging

For complex hook issues:

1. **Inspect hook execution** - Use `claude --debug` to see detailed hook execution
2. **Validate JSON schemas** - Test hook input/output with external tools
3. **Check environment variables** - Verify Claude Code’s environment is correct
4. **Test edge cases** - Try hooks with unusual file paths or inputs
5. **Monitor system resources** - Check for resource exhaustion during hook execution
6. **Use structured logging** - Implement logging in your hook scripts


### [​](#debug-output-example) Debug Output Example

Use `claude --debug` to see hook execution details:

```
[DEBUG] Executing hooks for PostToolUse:Write
[DEBUG] Getting matching hook commands for PostToolUse with query: Write
[DEBUG] Found 1 hook matchers in settings
[DEBUG] Matched 1 hooks for query "Write"
[DEBUG] Found 1 hook commands to execute
[DEBUG] Executing hook command: <Your command> with timeout 60000ms
[DEBUG] Hook command completed with status 0: <Your stdout>

```

Progress messages appear in transcript mode (Ctrl-R) showing:


- Which hook is running

- Command being executed

- Success/failure status

- Output or error messages

Was this page helpful?

YesNo

[Slash commands](./en/docs/claude-code/slash-commands/index.md)[Data usage](./en/docs/claude-code/data-usage/index.md)

On this page


- [Configuration](#configuration)

- [Structure](#structure)

- [Hook Events](#hook-events)

- [PreToolUse](#pretooluse)

- [PostToolUse](#posttooluse)

- [Notification](#notification)

- [UserPromptSubmit](#userpromptsubmit)

- [Stop](#stop)

- [SubagentStop](#subagentstop)

- [PreCompact](#precompact)

- [Hook Input](#hook-input)

- [PreToolUse Input](#pretooluse-input)

- [PostToolUse Input](#posttooluse-input)

- [Notification Input](#notification-input)

- [UserPromptSubmit Input](#userpromptsubmit-input)

- [Stop and SubagentStop Input](#stop-and-subagentstop-input)

- [PreCompact Input](#precompact-input)

- [Hook Output](#hook-output)

- [Simple: Exit Code](#simple%3A-exit-code)

- [Exit Code 2 Behavior](#exit-code-2-behavior)

- [Advanced: JSON Output](#advanced%3A-json-output)

- [Common JSON Fields](#common-json-fields)

- [PreToolUse Decision Control](#pretooluse-decision-control)

- [PostToolUse Decision Control](#posttooluse-decision-control)

- [UserPromptSubmit Decision Control](#userpromptsubmit-decision-control)

- [Stop/SubagentStop Decision Control](#stop%2Fsubagentstop-decision-control)

- [JSON Output Example: Bash Command Editing](#json-output-example%3A-bash-command-editing)

- [UserPromptSubmit Example: Adding Context and Validation](#userpromptsubmit-example%3A-adding-context-and-validation)

- [Working with MCP Tools](#working-with-mcp-tools)

- [MCP Tool Naming](#mcp-tool-naming)

- [Configuring Hooks for MCP Tools](#configuring-hooks-for-mcp-tools)

- [Examples](#examples)

- [Security Considerations](#security-considerations)

- [Disclaimer](#disclaimer)

- [Security Best Practices](#security-best-practices)

- [Configuration Safety](#configuration-safety)

- [Hook Execution Details](#hook-execution-details)

- [Debugging](#debugging)

- [Basic Troubleshooting](#basic-troubleshooting)

- [Advanced Debugging](#advanced-debugging)

- [Debug Output Example](#debug-output-example)

======= hooks-guide/index.md ======
Get started with Claude Code hooks - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Get started with Claude Code hooks

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code hooks are user-defined shell commands that execute at various points
in Claude Code’s lifecycle. Hooks provide deterministic control over Claude
Code’s behavior, ensuring certain actions always happen rather than relying on
the LLM to choose to run them.

For reference documentation on hooks, see [Hooks reference](./en/docs/claude-code/hooks/index.md).

Example use cases for hooks include:


- **Notifications**: Customize how you get notified when Claude Code is awaiting
  your input or permission to run something.

- **Automatic formatting**: Run `prettier` on .ts files, `gofmt` on .go files,
  etc. after every file edit.

- **Logging**: Track and count all executed commands for compliance or
  debugging.

- **Feedback**: Provide automated feedback when Claude Code produces code that
  does not follow your codebase conventions.

- **Custom permissions**: Block modifications to production files or sensitive
  directories.

By encoding these rules as hooks rather than prompting instructions, you turn
suggestions into app-level code that executes every time it is expected to run.

You must consider the security implication of hooks as you add them, because hooks run automatically during the agent loop with your current environment’s credentials.
For example, malicious hooks code can exfiltrate your data. Always review your hooks implementation before registering them.

For full security best practices, see [Security Considerations](./en/docs/claude-code/hooks#security-considerations/index.md) in the hooks reference documentation.


## [​](#hook-events-overview) Hook Events Overview

Claude Code provides several hook events that run at different points in the workflow:


- **PreToolUse**: Runs before tool calls (can block them)

- **PostToolUse**: Runs after tool calls complete

- **Notification**: Runs when Claude Code sends notifications

- **Stop**: Runs when Claude Code finishes responding

- **SubagentStop**: Runs when subagent tasks complete

Each event receives different data and can control Claude’s behavior in different ways.


## [​](#quickstart) Quickstart

In this quickstart, you’ll add a hook that logs the shell commands that Claude
Code runs.


### [​](#prerequisites) Prerequisites

Install `jq` for JSON processing in the command line.


### [​](#step-1%3A-open-hooks-configuration) Step 1: Open hooks configuration

Run the `/hooks` [slash command](./en/docs/claude-code/slash-commands/index.md) and select
the `PreToolUse` hook event.

`PreToolUse` hooks run before tool calls and can block them while providing
Claude feedback on what to do differently.


### [​](#step-2%3A-add-a-matcher) Step 2: Add a matcher

Select `+ Add new matcher…` to run your hook only on Bash tool calls.

Type `Bash` for the matcher.

Use an empty string `""` to match all tools. The `*` character is not a valid matcher on its own.


### [​](#step-3%3A-add-the-hook) Step 3: Add the hook

Select `+ Add new hook…` and enter this command:

````bash
jq -r '"\(.tool_input.command) - \(.tool_input.description // "No description")"' >> ~/.claude/bash-command-log.txt
````


### [​](#step-4%3A-save-your-configuration) Step 4: Save your configuration

For storage location, select `User settings` since you’re logging to your home
directory. This hook will then apply to all projects, not just your current
project.

Then press Esc until you return to the REPL. Your hook is now registered!


### [​](#step-5%3A-verify-your-hook) Step 5: Verify your hook

Run `/hooks` again or check `~/.claude/settings.json` to see your configuration:

````json
{
"hooks": {
"PreToolUse": [
{
"matcher": "Bash",
"hooks": [
{
"type": "command",
"command": "jq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt"
}
]
}
]
}
}
````


### [​](#step-6%3A-test-your-hook) Step 6: Test your hook

Ask Claude to run a simple command like `ls` and check your log file:

````bash
cat ~/.claude/bash-command-log.txt
````

You should see entries like:

```
ls - Lists files and directories

```


## [​](#more-examples) More Examples

For a complete example implementation, see the [bash command validator example](https://github.com/anthropics/claude-code/blob/main/examples/hooks/bash_command_validator_example.py) in our public codebase.


### [​](#code-formatting-hook) Code Formatting Hook

Automatically format TypeScript files after editing:

````json
{
"hooks": {
"PostToolUse": [
{
"matcher": "Edit|MultiEdit|Write",
"hooks": [
{
"type": "command",
"command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q '\\.ts$'; then npx prettier --write \"$file_path\"; fi; }"
}
]
}
]
}
}
````


### [​](#custom-notification-hook) Custom Notification Hook

Get desktop notifications when Claude needs input:

````json
{
"hooks": {
"Notification": [
{
"matcher": "",
"hooks": [
{
"type": "command",
"command": "notify-send 'Claude Code' 'Awaiting your input'"
}
]
}
]
}
}
````


### [​](#file-protection-hook) File Protection Hook

Block edits to sensitive files:

````json
{
"hooks": {
"PreToolUse": [
{
"matcher": "Edit|MultiEdit|Write",
"hooks": [
{
"type": "command",
"command": "python3 -c \"import json, sys; data=json.load(sys.stdin); path=data.get('tool_input',{}).get('file_path',''); sys.exit(2 if any(p in path for p in ['.env', 'package-lock.json', '.git/']) else 0)\""
}
]
}
]
}
}
````


## [​](#learn-more) Learn more


- For reference documentation on hooks, see [Hooks reference](./en/docs/claude-code/hooks/index.md).

- For comprehensive security best practices and safety guidelines, see [Security Considerations](./en/docs/claude-code/hooks#security-considerations/index.md) in the hooks reference documentation.

- For troubleshooting steps and debugging techniques, see [Debugging](./en/docs/claude-code/hooks#debugging/index.md) in the hooks reference documentation.

Was this page helpful?

YesNo

[Claude Code SDK](./en/docs/claude-code/sdk/index.md)[GitHub Actions](./en/docs/claude-code/github-actions/index.md)

On this page


- [Hook Events Overview](#hook-events-overview)

- [Quickstart](#quickstart)

- [Prerequisites](#prerequisites)

- [Step 1: Open hooks configuration](#step-1%3A-open-hooks-configuration)

- [Step 2: Add a matcher](#step-2%3A-add-a-matcher)

- [Step 3: Add the hook](#step-3%3A-add-the-hook)

- [Step 4: Save your configuration](#step-4%3A-save-your-configuration)

- [Step 5: Verify your hook](#step-5%3A-verify-your-hook)

- [Step 6: Test your hook](#step-6%3A-test-your-hook)

- [More Examples](#more-examples)

- [Code Formatting Hook](#code-formatting-hook)

- [Custom Notification Hook](#custom-notification-hook)

- [File Protection Hook](#file-protection-hook)

- [Learn more](#learn-more)

======= iam/index.md ======
Identity and Access Management - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Identity and Access Management

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#authentication-methods) Authentication methods

Setting up Claude Code requires access to Anthropic models. For teams, you can set up Claude Code access in one of three ways:


- Anthropic API via the Anthropic Console

- Amazon Bedrock

- Google Vertex AI


### [​](#anthropic-api-authentication) Anthropic API authentication

**To set up Claude Code access for your team via Anthropic API:**

1. Use your existing Anthropic Console account or create a new Anthropic Console account
2. You can add users through either method below:

   - Bulk invite users from within the Console (Console -> Settings -> Members -> Invite)

   - [Set up SSO](https://support.anthropic.com/en/articles/10280258-setting-up-single-sign-on-on-the-api-console)
3. When inviting users, they need one of the following roles:

   - “Claude Code” role means users can only create Claude Code API keys

   - “Developer” role means users can create any kind of API key
4. Each invited user needs to complete these steps:

   - Accept the Console invite

   - [Check system requirements](./en/docs/claude-code/setup#system-requirements/index.md)

   - [Install Claude Code](./en/docs/claude-code/setup#installation/index.md)

   - Login with Console account credentials


### [​](#cloud-provider-authentication) Cloud provider authentication

**To set up Claude Code access for your team via Bedrock or Vertex:**

1. Follow the [Bedrock docs](./en/docs/claude-code/amazon-bedrock/index.md) or [Vertex docs](./en/docs/claude-code/google-vertex-ai/index.md)
2. Distribute the environment variables and instructions for generating cloud credentials to your users. Read more about how to [manage configuration here](./en/docs/claude-code/settings/index.md).
3. Users can [install Claude Code](./en/docs/claude-code/setup#installation/index.md)


## [​](#access-control-and-permissions) Access control and permissions

We support fine-grained permissions so that you’re able to specify exactly what the agent is allowed to do (e.g. run tests, run linter) and what it is not allowed to do (e.g. update cloud infrastructure). These permission settings can be checked into version control and distributed to all developers in your organization, as well as customized by individual developers.


### [​](#permission-system) Permission system

Claude Code uses a tiered permission system to balance power and safety:

| Tool Type | Example | Approval Required | ”Yes, don’t ask again” Behavior |
| --- | --- | --- | --- |
| Read-only | File reads, LS, Grep | No | N/A |
| Bash Commands | Shell execution | Yes | Permanently per project directory and command |
| File Modification | Edit/write files | Yes | Until session end |


### [​](#configuring-permissions) Configuring permissions

You can view & manage Claude Code’s tool permissions with `/permissions`. This UI lists all permission rules and the settings.json file they are sourced from.


- **Allow** rules will allow Claude Code to use the specified tool without further manual approval.

- **Deny** rules will prevent Claude Code from using the specified tool. Deny rules take precedence over allow rules.

- **Additional directories** extend Claude’s file access to directories beyond the initial working directory.

- **Default mode** controls Claude’s permission behavior when encountering new requests.

Permission rules use the format: `Tool` or `Tool(optional-specifier)`

A rule that is just the tool name matches any use of that tool. For example, adding `Bash` to the list of allow rules would allow Claude Code to use the Bash tool without requiring user approval.


#### [​](#permission-modes) Permission modes

Claude Code supports several permission modes that can be set as the `defaultMode` in [settings files](./en/docs/claude-code/settings#settings-files/index.md):

| Mode | Description |
| --- | --- |
| `default` | Standard behavior - prompts for permission on first use of each tool |
| `acceptEdits` | Automatically accepts file edit permissions for the session |
| `plan` | Plan mode - Claude can analyze but not modify files or execute commands |
| `bypassPermissions` | Skips all permission prompts (requires safe environment - see warning below) |


#### [​](#working-directories) Working directories

By default, Claude has access to files in the directory where it was launched. You can extend this access:


- **During startup**: Use `--add-dir <path>` CLI argument

- **During session**: Use `/add-dir` slash command

- **Persistent configuration**: Add to `additionalDirectories` in [settings files](./en/docs/claude-code/settings#settings-files/index.md)

Files in additional directories follow the same permission rules as the original working directory - they become readable without prompts, and file editing permissions follow the current permission mode.


#### [​](#tool-specific-permission-rules) Tool-specific permission rules

Some tools support more fine-grained permission controls:

**Bash**


- `Bash(npm run build)` Matches the exact Bash command `npm run build`

- `Bash(npm run test:*)` Matches Bash commands starting with `npm run test`.

Claude Code is aware of shell operators (like `&&`) so a prefix match rule like `Bash(safe-cmd:*)` won’t give it permission to run the command `safe-cmd && other-cmd`

**Read & Edit**

`Edit` rules apply to all built-in tools that edit files. Claude will make a best-effort attempt to apply `Read` rules to all built-in tools that read files like Grep, Glob, and LS.

Read & Edit rules both follow the [gitignore](https://git-scm.com/docs/gitignore) specification. Patterns are resolved relative to the directory containing `.claude/settings.json`. To reference an absolute path, use `//`. For a path relative to your home directory, use `~/`.


- `Edit(docs/**)` Matches edits to files in the `docs` directory of your project

- `Read(~/.zshrc)` Matches reads to your `~/.zshrc` file

- `Edit(//tmp/scratch.txt)` Matches edits to `/tmp/scratch.txt`

**WebFetch**


- `WebFetch(domain:example.com)` Matches fetch requests to example.com

**MCP**


- `mcp__puppeteer` Matches any tool provided by the `puppeteer` server (name configured in Claude Code)

- `mcp__puppeteer__puppeteer_navigate` Matches the `puppeteer_navigate` tool provided by the `puppeteer` server


### [​](#additional-permission-control-with-hooks) Additional permission control with hooks

[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md) provide a way to register custom shell commands to perform permission evaluation at runtime. When Claude Code makes a tool call, PreToolUse hooks run before the permission system runs, and the hook output can determine whether to approve or deny the tool call in place of the permission system.


### [​](#enterprise-managed-policy-settings) Enterprise managed policy settings

For enterprise deployments of Claude Code, we support enterprise managed policy settings that take precedence over user and project settings. This allows system administrators to enforce security policies that users cannot override.

System administrators can deploy policies to:


- macOS: `/Library/Application Support/ClaudeCode/managed-settings.json`

- Linux and WSL: `/etc/claude-code/managed-settings.json`

- Windows: `C:\ProgramData\ClaudeCode\managed-settings.json`

These policy files follow the same format as regular [settings files](./en/docs/claude-code/settings#settings-files/index.md) but cannot be overridden by user or project settings. This ensures consistent security policies across your organization.


### [​](#settings-precedence) Settings precedence

When multiple settings sources exist, they are applied in the following order (highest to lowest precedence):

1. Enterprise policies
2. Command line arguments
3. Local project settings (`.claude/settings.local.json`)
4. Shared project settings (`.claude/settings.json`)
5. User settings (`~/.claude/settings.json`)

This hierarchy ensures that organizational policies are always enforced while still allowing flexibility at the project and user levels where appropriate.


## [​](#credential-management) Credential management

Claude Code supports authentication via Claude.ai credentials, Anthropic API credentials, Bedrock Auth, and Vertex Auth. On macOS, the API keys, OAuth tokens, and other credentials are stored on encrypted macOS Keychain. Alternately, the setting [apiKeyHelper](./en/docs/claude-code/settings#available-settings/index.md) can be set to a shell script which returns an API key. By default, this helper is called after 5 minutes or on HTTP 401 response; specifying environment variable `CLAUDE_CODE_API_KEY_HELPER_TTL_MS` defines a custom refresh interval.

Was this page helpful?

YesNo

[Advanced installation](./en/docs/claude-code/setup/index.md)[Security](./en/docs/claude-code/security/index.md)

On this page


- [Authentication methods](#authentication-methods)

- [Anthropic API authentication](#anthropic-api-authentication)

- [Cloud provider authentication](#cloud-provider-authentication)

- [Access control and permissions](#access-control-and-permissions)

- [Permission system](#permission-system)

- [Configuring permissions](#configuring-permissions)

- [Permission modes](#permission-modes)

- [Working directories](#working-directories)

- [Tool-specific permission rules](#tool-specific-permission-rules)

- [Additional permission control with hooks](#additional-permission-control-with-hooks)

- [Enterprise managed policy settings](#enterprise-managed-policy-settings)

- [Settings precedence](#settings-precedence)

- [Credential management](#credential-management)

======= ide-integrations/index.md ======
Add Claude Code to your IDE - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Add Claude Code to your IDE

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code works great with any Integrated Development Environment (IDE) that has a terminal. Just run `claude`, and you’re ready to go.

In addition, Claude Code provides dedicated integrations for popular IDEs, which provide features like interactive diff viewing, selection context sharing, and more. These integrations currently exist for:


- **Visual Studio Code** (including popular forks like Cursor, Windsurf, and VSCodium)

- **JetBrains IDEs** (including IntelliJ, PyCharm, Android Studio, WebStorm, PhpStorm and GoLand)


## [​](#features) Features


- **Quick launch**: Use `Cmd+Esc` (Mac) or `Ctrl+Esc` (Windows/Linux) to open
  Claude Code directly from your editor, or click the Claude Code button in the
  UI

- **Diff viewing**: Code changes can be displayed directly in the IDE diff
  viewer instead of the terminal. You can configure this in `/config`

- **Selection context**: The current selection/tab in the IDE is automatically
  shared with Claude Code

- **File reference shortcuts**: Use `Cmd+Option+K` (Mac) or `Alt+Ctrl+K`
  (Linux/Windows) to insert file references (e.g., @File#L1-99)

- **Diagnostic sharing**: Diagnostic errors (lint, syntax, etc.) from the IDE
  are automatically shared with Claude as you work


## [​](#installation) Installation


- VS Code+

- JetBrains

To install Claude Code on VS Code and popular forks like Cursor, Windsurf, and VSCodium:

1. Open VS Code
2. Open the integrated terminal
3. Run `claude` - the extension will auto-install

To install Claude Code on VS Code and popular forks like Cursor, Windsurf, and VSCodium:

1. Open VS Code
2. Open the integrated terminal
3. Run `claude` - the extension will auto-install

To install Claude Code on JetBrains IDEs like IntelliJ, PyCharm, Android Studio, WebStorm, PhpStorm and GoLand, find and install the [Claude Code plugin](https://docs.anthropic.com/s/claude-code-jetbrains) from the marketplace and restart your IDE.

The plugin may also be auto-installed when you run `claude` in the integrated terminal. The IDE must be restarted completely to take effect.

**Remote Development Limitations**: When using JetBrains Remote Development, you must install the plugin in the remote host via `Settings > Plugin (Host)`.


## [​](#usage) Usage


### [​](#from-your-ide) From your IDE

Run `claude` from your IDE’s integrated terminal, and all features will be active.


### [​](#from-external-terminals) From external terminals

Use the `/ide` command in any external terminal to connect Claude Code to your IDE and activate all features.

If you want Claude to have access to the same files as your IDE, start Claude Code from the same directory as your IDE project root.


## [​](#configuration) Configuration

IDE integrations work with Claude Code’s configuration system:

1. Run `claude`
2. Enter the `/config` command
3. Adjust your preferences. Setting the diff tool to `auto` will enable automatic IDE detection


## [​](#troubleshooting) Troubleshooting


### [​](#vs-code-extension-not-installing) VS Code extension not installing


- Ensure you’re running Claude Code from VS Code’s integrated terminal

- Ensure that the CLI corresponding to your IDE is installed:

  - For VS Code: `code` command should be available

  - For Cursor: `cursor` command should be available

  - For Windsurf: `windsurf` command should be available

  - For VSCodium: `codium` command should be available

  - If not installed, use `Cmd+Shift+P` (Mac) or `Ctrl+Shift+P` (Windows/Linux)
    and search for “Shell Command: Install ‘code’ command in PATH” (or the
    equivalent for your IDE)

- Check that VS Code has permission to install extensions


### [​](#jetbrains-plugin-not-working) JetBrains plugin not working


- Ensure you’re running Claude Code from the project root directory

- Check that the JetBrains plugin is enabled in the IDE settings

- Completely restart the IDE. You may need to do this multiple times

- For JetBrains Remote Development, ensure that the Claude Code plugin is
  installed in the remote host and not locally on the client

For additional help, refer to our
[troubleshooting guide](./en/docs/claude-code/troubleshooting/index.md).

Was this page helpful?

YesNo

[Settings](./en/docs/claude-code/settings/index.md)[Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

On this page


- [Features](#features)

- [Installation](#installation)

- [Usage](#usage)

- [From your IDE](#from-your-ide)

- [From external terminals](#from-external-terminals)

- [Configuration](#configuration)

- [Troubleshooting](#troubleshooting)

- [VS Code extension not installing](#vs-code-extension-not-installing)

- [JetBrains plugin not working](#jetbrains-plugin-not-working)

======= interactive-mode/index.md ======
Interactive mode - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

Interactive mode

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#keyboard-shortcuts) Keyboard shortcuts


### [​](#general-controls) General controls

| Shortcut | Description | Context |
| --- | --- | --- |
| `Ctrl+C` | Cancel current input or generation | Standard interrupt |
| `Ctrl+D` | Exit Claude Code session | EOF signal |
| `Ctrl+L` | Clear terminal screen | Keeps conversation history |
| `Up/Down arrows` | Navigate command history | Recall previous inputs |
| `Esc` + `Esc` | Edit previous message | Double-escape to modify |


### [​](#multiline-input) Multiline input

| Method | Shortcut | Context |
| --- | --- | --- |
| Quick escape | `\` + `Enter` | Works in all terminals |
| macOS default | `Option+Enter` | Default on macOS |
| Terminal setup | `Shift+Enter` | After `/terminal-setup` |
| Paste mode | Paste directly | For code blocks, logs |


### [​](#quick-commands) Quick commands

| Shortcut | Description | Notes |
| --- | --- | --- |
| `#` at start | Memory shortcut - add to CLAUDE.md | Prompts for file selection |
| `/` at start | Slash command | See [slash commands](./en/docs/claude-code/slash-commands/index.md) |


## [​](#vim-mode) Vim mode

Enable vim-style editing with `/vim` command or configure permanently via `/config`.


### [​](#mode-switching) Mode switching

| Command | Action | From mode |
| --- | --- | --- |
| `Esc` | Enter NORMAL mode | INSERT |
| `i` | Insert before cursor | NORMAL |
| `I` | Insert at beginning of line | NORMAL |
| `a` | Insert after cursor | NORMAL |
| `A` | Insert at end of line | NORMAL |
| `o` | Open line below | NORMAL |
| `O` | Open line above | NORMAL |


### [​](#navigation-normal-mode) Navigation (NORMAL mode)

| Command | Action |
| --- | --- |
| `h`/`j`/`k`/`l` | Move left/down/up/right |
| `w` | Next word |
| `e` | End of word |
| `b` | Previous word |
| `0` | Beginning of line |
| `$` | End of line |
| `^` | First non-blank character |
| `gg` | Beginning of input |
| `G` | End of input |


### [​](#editing-normal-mode) Editing (NORMAL mode)

| Command | Action |
| --- | --- |
| `x` | Delete character |
| `dd` | Delete line |
| `D` | Delete to end of line |
| `dw`/`de`/`db` | Delete word/to end/back |
| `cc` | Change line |
| `C` | Change to end of line |
| `cw`/`ce`/`cb` | Change word/to end/back |
| `.` | Repeat last change |

Configure your preferred line break behavior in terminal settings. Run `/terminal-setup` to install Shift+Enter binding for iTerm2 and VS Code terminals.


## [​](#command-history) Command history

Claude Code maintains command history for the current session:


- History is stored per working directory

- Cleared with `/clear` command

- Use Up/Down arrows to navigate (see keyboard shortcuts above)

- **Ctrl+R**: Reverse search through history (if supported by terminal)

- **Note**: History expansion (`!`) is disabled by default


## [​](#see-also) See also


- [Slash commands](./en/docs/claude-code/slash-commands/index.md) - Interactive session commands

- [CLI reference](./en/docs/claude-code/cli-reference/index.md) - Command-line flags and options

- [Settings](./en/docs/claude-code/settings/index.md) - Configuration options

- [Memory management](./en/docs/claude-code/memory/index.md) - Managing CLAUDE.md files

Was this page helpful?

YesNo

[CLI reference](./en/docs/claude-code/cli-reference/index.md)[Slash commands](./en/docs/claude-code/slash-commands/index.md)

On this page


- [Keyboard shortcuts](#keyboard-shortcuts)

- [General controls](#general-controls)

- [Multiline input](#multiline-input)

- [Quick commands](#quick-commands)

- [Vim mode](#vim-mode)

- [Mode switching](#mode-switching)

- [Navigation (NORMAL mode)](#navigation-normal-mode)

- [Editing (NORMAL mode)](#editing-normal-mode)

- [Command history](#command-history)

- [See also](#see-also)

======= legal-and-compliance/index.md ======
Legal and compliance - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Resources

Legal and compliance

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#legal-agreements) Legal agreements


### [​](#license) License

Claude Code is provided under Anthropic’s [Commercial Terms of Service](https://www.anthropic.com/legal/commercial-terms).


### [​](#commercial-agreements) Commercial agreements

Whether you’re using Anthropic’s API directly (1P) or accessing it through AWS Bedrock or Google Vertex (3P), your existing commercial agreement will apply to Claude Code usage, unless we’ve mutually agreed otherwise.


## [​](#compliance) Compliance


### [​](#healthcare-compliance-baa) Healthcare compliance (BAA)

If a customer has a Business Associate Agreement (BAA) with us, and wants to use Claude Code, the BAA will automatically extend to cover Claude Code if the customer has executed a BAA and has Zero Data Retention (ZDR) activated. The BAA will be applicable to that customer’s API traffic flowing through Claude Code.


## [​](#security-and-trust) Security and trust


### [​](#trust-and-safety) Trust and safety

You can find more information in the [Anthropic Trust Center](https://trust.anthropic.com) and [Transparency Hub](https://www.anthropic.com/transparency).


### [​](#security-vulnerability-reporting) Security vulnerability reporting

Anthropic manages our security program through HackerOne. [Use this form to report vulnerabilities](https://hackerone.com/anthropic-vdp/reports/new?type=team&report_type=vulnerability).

---

© Anthropic PBC. All rights reserved. Use is subject to Anthropic’s [Commercial Terms of Service](https://www.anthropic.com/legal/commercial-terms).

Was this page helpful?

YesNo

[Data usage](./en/docs/claude-code/data-usage/index.md)

On this page


- [Legal agreements](#legal-agreements)

- [License](#license)

- [Commercial agreements](#commercial-agreements)

- [Compliance](#compliance)

- [Healthcare compliance (BAA)](#healthcare-compliance-baa)

- [Security and trust](#security-and-trust)

- [Trust and safety](#trust-and-safety)

- [Security vulnerability reporting](#security-vulnerability-reporting)

======= llm-gateway/index.md ======
LLM gateway configuration - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

LLM gateway configuration

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

LLM gateways provide a centralized proxy layer between Claude Code and model providers, offering:


- **Centralized authentication** - Single point for API key management

- **Usage tracking** - Monitor usage across teams and projects

- **Cost controls** - Implement budgets and rate limits

- **Audit logging** - Track all model interactions for compliance

- **Model routing** - Switch between providers without code changes


## [​](#litellm-configuration) LiteLLM configuration

LiteLLM is a third-party proxy service. Anthropic doesn’t endorse, maintain, or audit LiteLLM’s security or functionality. This guide is provided for informational purposes and may become outdated. Use at your own discretion.


### [​](#prerequisites) Prerequisites


- Claude Code updated to the latest version

- LiteLLM Proxy Server deployed and accessible

- Access to Claude models through your chosen provider


### [​](#basic-litellm-setup) Basic LiteLLM setup

**Configure Claude Code**:


#### [​](#authentication-methods) Authentication methods


##### Static API key

Simplest method using a fixed API key:

````bash

# Set in environment
export ANTHROPIC_AUTH_TOKEN=sk-litellm-static-key

# Or in Claude Code settings
{
"env": {
"ANTHROPIC_AUTH_TOKEN": "sk-litellm-static-key"
}
}
````

This value will be sent as the `Authorization` and `Proxy-Authorization` headers, although `Authorization` may be overwritten (see Vertex “Client-specified credentials” below).


##### Dynamic API key with helper

For rotating keys or per-user authentication:

1. Create an API key helper script:

````bash
#!/bin/bash

# ~/bin/get-litellm-key.sh

# Example: Fetch key from vault
vault kv get -field=api_key secret/litellm/claude-code

# Example: Generate JWT token
jwt encode \
--secret="${JWT_SECRET}" \
--exp="+1h" \
'{"user":"'${USER}'","team":"engineering"}'
````

2. Configure Claude Code settings to use the helper:

````json
{
"apiKeyHelper": "~/bin/get-litellm-key.sh"
}
````

3. Set token refresh interval:

````bash

# Refresh every hour (3600000 ms)
export CLAUDE_CODE_API_KEY_HELPER_TTL_MS=3600000
````

This value will be sent as `Authorization`, `Proxy-Authorization`, and `X-Api-Key` headers, although `Authorization` may be overwritten (see [Google Vertex AI through LiteLLM](./_sites/docs.anthropic.com/en/docs/claude-code/llm-gateway#google-vertex-ai-through-litellm/index.md)). The `apiKeyHelper` has lower precedence than `ANTHROPIC_AUTH_TOKEN` or `ANTHROPIC_API_KEY`.


#### [​](#unified-endpoint-recommended) Unified endpoint (recommended)

Using LiteLLM’s [Anthropic format endpoint](https://docs.litellm.ai/docs/anthropic_unified):

````bash
export ANTHROPIC_BASE_URL=https://litellm-server:4000
````

**Benefits of the unified endpoint over pass-through endpoints:**


- Load balancing

- Fallbacks

- Consistent support for cost tracking and end-user tracking


#### [​](#provider-specific-pass-through-endpoints-alternative) Provider-specific pass-through endpoints (alternative)


##### Anthropic API through LiteLLM

Using [pass-through endpoint](https://docs.litellm.ai/docs/pass_through/anthropic_completion):

````bash
export ANTHROPIC_BASE_URL=https://litellm-server:4000/anthropic
````


##### Amazon Bedrock through LiteLLM

Using [pass-through endpoint](https://docs.litellm.ai/docs/pass_through/bedrock):

````bash
export ANTHROPIC_BEDROCK_BASE_URL=https://litellm-server:4000/bedrock
export CLAUDE_CODE_SKIP_BEDROCK_AUTH=1
export CLAUDE_CODE_USE_BEDROCK=1
````


##### Google Vertex AI through LiteLLM

Using [pass-through endpoint](https://docs.litellm.ai/docs/pass_through/vertex_ai):

**Recommended: Proxy-specified credentials**

````bash
export ANTHROPIC_VERTEX_BASE_URL=https://litellm-server:4000/vertex_ai/v1
export ANTHROPIC_VERTEX_PROJECT_ID=your-gcp-project-id
export CLAUDE_CODE_SKIP_VERTEX_AUTH=1
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
````

**Alternative: Client-specified credentials**

If you prefer to use local GCP credentials:

1. Authenticate with GCP locally:

````bash
gcloud auth application-default login
````

2. Set Claude Code environment:

````bash
export ANTHROPIC_VERTEX_BASE_URL=https://litellm-server:4000/vertex_ai/v1
export ANTHROPIC_VERTEX_PROJECT_ID=your-gcp-project-id
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
````

3. Update LiteLLM header configuration:

Ensure your LiteLLM config has `general_settings.litellm_key_header_name` set to `Proxy-Authorization`, since the pass-through GCP token will be located on the `Authorization` header.


### [​](#model-selection) Model selection

By default, the models will use those specified in [Model configuration](./en/docs/claude-code/bedrock-vertex-proxies#model-configuration/index.md).

If you have configured custom model names in LiteLLM, set the aforementioned environment variables to those custom names.

For more detailed information, refer to the [LiteLLM documentation](https://docs.litellm.ai/).


## [​](#additional-resources) Additional resources


- [LiteLLM documentation](https://docs.litellm.ai/)

- [Claude Code settings](./en/docs/claude-code/settings/index.md)

- [Corporate proxy setup](./en/docs/claude-code/corporate-proxy/index.md)

- [Third-party integrations overview](./en/docs/claude-code/third-party-integrations/index.md)

Was this page helpful?

YesNo

[Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)[Development containers](./en/docs/claude-code/devcontainer/index.md)

On this page


- [LiteLLM configuration](#litellm-configuration)

- [Prerequisites](#prerequisites)

- [Basic LiteLLM setup](#basic-litellm-setup)

- [Authentication methods](#authentication-methods)

- [Unified endpoint (recommended)](#unified-endpoint-recommended)

- [Provider-specific pass-through endpoints (alternative)](#provider-specific-pass-through-endpoints-alternative)

- [Model selection](#model-selection)

- [Additional resources](#additional-resources)

======= mcp/index.md ======
Model Context Protocol (MCP) - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Model Context Protocol (MCP)

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Model Context Protocol (MCP) is an open protocol that enables LLMs to access external tools and data sources. For more details about MCP, see the [MCP documentation](https://modelcontextprotocol.io/introduction).

Use third party MCP servers at your own risk. Make sure you trust the MCP
servers, and be especially careful when using MCP servers that talk to the
internet, as these can expose you to prompt injection risk.


## [​](#configure-mcp-servers) Configure MCP servers

1

Add an MCP stdio Server

````bash

# Basic syntax
claude mcp add <name> <command> [args...]

# Example: Adding a local server
claude mcp add my-server -e API_KEY=123 -- /path/to/server arg1 arg2

# This creates: command="/path/to/server", args=["arg1", "arg2"]
````

2

Add an MCP SSE Server

````bash

# Basic syntax
claude mcp add --transport sse <name> <url>

# Example: Adding an SSE server
claude mcp add --transport sse sse-server https://example.com/sse-endpoint

# Example: Adding an SSE server with custom headers
claude mcp add --transport sse api-server https://api.example.com/mcp --header "X-API-Key: your-key"
````

3

Add an MCP HTTP Server

````bash

# Basic syntax
claude mcp add --transport http <name> <url>

# Example: Adding a streamable HTTP server
claude mcp add --transport http http-server https://example.com/mcp

# Example: Adding an HTTP server with authentication header
claude mcp add --transport http secure-server https://api.example.com/mcp --header "Authorization: Bearer your-token"
````

4

Manage your MCP servers

````bash

# List all configured servers
claude mcp list

# Get details for a specific server
claude mcp get my-server

# Remove a server
claude mcp remove my-server
````

Tips:


- Use the `-s` or `--scope` flag to specify where the configuration is stored:

  - `local` (default): Available only to you in the current project (was called `project` in older versions)

  - `project`: Shared with everyone in the project via `.mcp.json` file

  - `user`: Available to you across all projects (was called `global` in older versions)

- Set environment variables with `-e` or `--env` flags (e.g., `-e KEY=value`)

- Configure MCP server startup timeout using the MCP\_TIMEOUT environment variable (e.g., `MCP_TIMEOUT=10000 claude` sets a 10-second timeout)

- Check MCP server status any time using the `/mcp` command within Claude Code

- MCP follows a client-server architecture where Claude Code (the client) can connect to multiple specialized servers

- Claude Code supports SSE (Server-Sent Events) and streamable HTTP servers for real-time communication

- Use `/mcp` to authenticate with remote servers that require OAuth 2.0 authentication

**Windows Users**: On native Windows (not WSL), local MCP servers that use `npx` require the `cmd /c` wrapper to ensure proper execution.

````bash

# This creates command="cmd" which Windows can execute
claude mcp add my-server -- cmd /c npx -y @some/package
````

Without the `cmd /c` wrapper, you’ll encounter “Connection closed” errors because Windows cannot directly execute `npx`.


## [​](#understanding-mcp-server-scopes) Understanding MCP server scopes

MCP servers can be configured at three different scope levels, each serving distinct purposes for managing server accessibility and sharing. Understanding these scopes helps you determine the best way to configure servers for your specific needs.


### [​](#scope-hierarchy-and-precedence) Scope hierarchy and precedence

MCP server configurations follow a clear precedence hierarchy. When servers with the same name exist at multiple scopes, the system resolves conflicts by prioritizing local-scoped servers first, followed by project-scoped servers, and finally user-scoped servers. This design ensures that personal configurations can override shared ones when needed.


### [​](#local-scope) Local scope

Local-scoped servers represent the default configuration level and are stored in your project-specific user settings. These servers remain private to you and are only accessible when working within the current project directory. This scope is ideal for personal development servers, experimental configurations, or servers containing sensitive credentials that shouldn’t be shared.

````bash

# Add a local-scoped server (default)
claude mcp add my-private-server /path/to/server

# Explicitly specify local scope
claude mcp add my-private-server -s local /path/to/server
````


### [​](#project-scope) Project scope

Project-scoped servers enable team collaboration by storing configurations in a `.mcp.json` file at your project’s root directory. This file is designed to be checked into version control, ensuring all team members have access to the same MCP tools and services. When you add a project-scoped server, Claude Code automatically creates or updates this file with the appropriate configuration structure.

````bash

# Add a project-scoped server
claude mcp add shared-server -s project /path/to/server
````

The resulting `.mcp.json` file follows a standardized format:

````json
{
"mcpServers": {
"shared-server": {
"command": "/path/to/server",
"args": [],
"env": {}
}
}
}
````

For security reasons, Claude Code prompts for approval before using project-scoped servers from `.mcp.json` files. If you need to reset these approval choices, use the `claude mcp reset-project-choices` command.


### [​](#user-scope) User scope

User-scoped servers provide cross-project accessibility, making them available across all projects on your machine while remaining private to your user account. This scope works well for personal utility servers, development tools, or services you frequently use across different projects.

````bash

# Add a user server
claude mcp add my-user-server -s user /path/to/server
````


### [​](#choosing-the-right-scope) Choosing the right scope

Select your scope based on:


- **Local scope**: Personal servers, experimental configurations, or sensitive credentials specific to one project

- **Project scope**: Team-shared servers, project-specific tools, or services required for collaboration

- **User scope**: Personal utilities needed across multiple projects, development tools, or frequently-used services


### [​](#environment-variable-expansion-in-mcp-json) Environment variable expansion in `.mcp.json`

Claude Code supports environment variable expansion in `.mcp.json` files, allowing teams to share configurations while maintaining flexibility for machine-specific paths and sensitive values like API keys.

**Supported syntax:**


- `${VAR}` - Expands to the value of environment variable `VAR`

- `${VAR:-default}` - Expands to `VAR` if set, otherwise uses `default`

**Expansion locations:**
Environment variables can be expanded in:


- `command` - The server executable path

- `args` - Command-line arguments

- `env` - Environment variables passed to the server

- `url` - For SSE/HTTP server types

- `headers` - For SSE/HTTP server authentication

**Example with variable expansion:**

````json
{
"mcpServers": {
"api-server": {
"type": "sse",
"url": "${API_BASE_URL:-https://api.example.com}/mcp",
"headers": {
"Authorization": "Bearer ${API_KEY}"
}
}
}
}
````

If a required environment variable is not set and has no default value, Claude Code will fail to parse the config.


## [​](#authenticate-with-remote-mcp-servers) Authenticate with remote MCP servers

Many remote MCP servers require authentication. Claude Code supports OAuth 2.0 authentication flow for secure connection to these servers.

1

Add a remote server requiring authentication

````bash

# Add an SSE or HTTP server that requires OAuth
claude mcp add --transport sse github-server https://api.github.com/mcp
````

2

Authenticate using the /mcp command

Within Claude Code, use the `/mcp` command to manage authentication:

```
> /mcp

```

This opens an interactive menu where you can:


- View connection status for all servers

- Authenticate with servers requiring OAuth

- Clear existing authentication

- View server capabilities

3

Complete the OAuth flow

When you select “Authenticate” for a server:

1. Your browser opens automatically to the OAuth provider
2. Complete the authentication in your browser
3. Claude Code receives and securely stores the access token
4. The server connection becomes active

Tips:


- Authentication tokens are stored securely and refreshed automatically

- Use “Clear authentication” in the `/mcp` menu to revoke access

- If your browser doesn’t open automatically, copy the provided URL

- OAuth authentication works with both SSE and HTTP transports


## [​](#connect-to-a-postgres-mcp-server) Connect to a Postgres MCP server

Suppose you want to give Claude read-only access to a PostgreSQL database for querying and schema inspection.

1

Add the Postgres MCP server

````bash
claude mcp add postgres-server /path/to/postgres-mcp-server --connection-string "postgresql://user:pass@localhost:5432/mydb"
````

2

Query your database with Claude

```
> describe the schema of our users table

```

```
> what are the most recent orders in the system?

```

```
> show me the relationship between customers and invoices

```

Tips:


- The Postgres MCP server provides read-only access for safety

- Claude can help you explore database structure and run analytical queries

- You can use this to quickly understand database schemas in unfamiliar projects

- Make sure your connection string uses appropriate credentials with minimum required permissions


## [​](#add-mcp-servers-from-json-configuration) Add MCP servers from JSON configuration

Suppose you have a JSON configuration for a single MCP server that you want to add to Claude Code.

1

Add an MCP server from JSON

````bash

# Basic syntax
claude mcp add-json <name> '<json>'

# Example: Adding a stdio server with JSON configuration
claude mcp add-json weather-api '{"type":"stdio","command":"/path/to/weather-cli","args":["--api-key","abc123"],"env":{"CACHE_DIR":"/tmp"}}'
````

2

Verify the server was added

````bash
claude mcp get weather-api
````

Tips:


- Make sure the JSON is properly escaped in your shell

- The JSON must conform to the MCP server configuration schema

- You can use `-s global` to add the server to your global configuration instead of the project-specific one


## [​](#import-mcp-servers-from-claude-desktop) Import MCP servers from Claude Desktop

Suppose you have already configured MCP servers in Claude Desktop and want to use the same servers in Claude Code without manually reconfiguring them.

1

Import servers from Claude Desktop

````bash

# Basic syntax
claude mcp add-from-claude-desktop
````

2

Select which servers to import

After running the command, you’ll see an interactive dialog that allows you to select which servers you want to import.

3

Verify the servers were imported

````bash
claude mcp list
````

Tips:


- This feature only works on macOS and Windows Subsystem for Linux (WSL)

- It reads the Claude Desktop configuration file from its standard location on those platforms

- Use the `-s global` flag to add servers to your global configuration

- Imported servers will have the same names as in Claude Desktop

- If servers with the same names already exist, they will get a numerical suffix (e.g., `server_1`)


## [​](#use-claude-code-as-an-mcp-server) Use Claude Code as an MCP server

Suppose you want to use Claude Code itself as an MCP server that other applications can connect to, providing them with Claude’s tools and capabilities.

1

Start Claude as an MCP server

````bash

# Basic syntax
claude mcp serve
````

2

Connect from another application

You can connect to Claude Code MCP server from any MCP client, such as Claude Desktop. If you’re using Claude Desktop, you can add the Claude Code MCP server using this configuration:

````json
{
"command": "claude",
"args": ["mcp", "serve"],
"env": {}
}
````

Tips:


- The server provides access to Claude’s tools like View, Edit, LS, etc.

- In Claude Desktop, try asking Claude to read files in a directory, make edits, and more.

- Note that this MCP server is simply exposing Claude Code’s tools to your MCP client, so your own client is responsible for implementing user confirmation for individual tool calls.


## [​](#use-mcp-resources) Use MCP resources

MCP servers can expose resources that you can reference using @ mentions, similar to how you reference files.


### [​](#reference-mcp-resources) Reference MCP resources

1

List available resources

Type `@` in your prompt to see available resources from all connected MCP servers. Resources appear alongside files in the autocomplete menu.

2

Reference a specific resource

Use the format `@server:protocol://resource/path` to reference a resource:

```
> Can you analyze @github:issue://123 and suggest a fix?

```

```
> Please review the API documentation at @docs:file://api/authentication

```

3

Multiple resource references

You can reference multiple resources in a single prompt:

```
> Compare @postgres:schema://users with @docs:file://database/user-model

```

Tips:


- Resources are automatically fetched and included as attachments when referenced

- Resource paths are fuzzy-searchable in the @ mention autocomplete

- Claude Code automatically provides tools to list and read MCP resources when servers support them

- Resources can contain any type of content that the MCP server provides (text, JSON, structured data, etc.)


## [​](#use-mcp-prompts-as-slash-commands) Use MCP prompts as slash commands

MCP servers can expose prompts that become available as slash commands in Claude Code.


### [​](#execute-mcp-prompts) Execute MCP prompts

1

Discover available prompts

Type `/` to see all available commands, including those from MCP servers. MCP prompts appear with the format `/mcp__servername__promptname`.

2

Execute a prompt without arguments

```
> /mcp__github__list_prs

```

3

Execute a prompt with arguments

Many prompts accept arguments. Pass them space-separated after the command:

```
> /mcp__github__pr_review 456

```

```
> /mcp__jira__create_issue "Bug in login flow" high

```

Tips:


- MCP prompts are dynamically discovered from connected servers

- Arguments are parsed based on the prompt’s defined parameters

- Prompt results are injected directly into the conversation

- Server and prompt names are normalized (spaces become underscores)

Was this page helpful?

YesNo

[GitHub Actions](./en/docs/claude-code/github-actions/index.md)[Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)

On this page


- [Configure MCP servers](#configure-mcp-servers)

- [Understanding MCP server scopes](#understanding-mcp-server-scopes)

- [Scope hierarchy and precedence](#scope-hierarchy-and-precedence)

- [Local scope](#local-scope)

- [Project scope](#project-scope)

- [User scope](#user-scope)

- [Choosing the right scope](#choosing-the-right-scope)

- [Environment variable expansion in .mcp.json](#environment-variable-expansion-in-mcp-json)

- [Authenticate with remote MCP servers](#authenticate-with-remote-mcp-servers)

- [Connect to a Postgres MCP server](#connect-to-a-postgres-mcp-server)

- [Add MCP servers from JSON configuration](#add-mcp-servers-from-json-configuration)

- [Import MCP servers from Claude Desktop](#import-mcp-servers-from-claude-desktop)

- [Use Claude Code as an MCP server](#use-claude-code-as-an-mcp-server)

- [Use MCP resources](#use-mcp-resources)

- [Reference MCP resources](#reference-mcp-resources)

- [Use MCP prompts as slash commands](#use-mcp-prompts-as-slash-commands)

- [Execute MCP prompts](#execute-mcp-prompts)

======= memory/index.md ======
Manage Claude's memory - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Manage Claude's memory

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code can remember your preferences across sessions, like style guidelines and common commands in your workflow.


## [​](#determine-memory-type) Determine memory type

Claude Code offers three memory locations, each serving a different purpose:

| Memory Type | Location | Purpose | Use Case Examples |
| --- | --- | --- | --- |
| **Project memory** | `./CLAUDE.md` | Team-shared instructions for the project | Project architecture, coding standards, common workflows |
| **User memory** | `~/.claude/CLAUDE.md` | Personal preferences for all projects | Code styling preferences, personal tooling shortcuts |
| **Project memory (local)** | `./CLAUDE.local.md` | Personal project-specific preferences | *(Deprecated, see below)* Your sandbox URLs, preferred test data |

All memory files are automatically loaded into Claude Code’s context when launched.


## [​](#claude-md-imports) CLAUDE.md imports

CLAUDE.md files can import additional files using `@path/to/import` syntax. The following example imports 3 files:

```
See @README for project overview and @package.json for available npm commands for this project.


# Additional Instructions

- git workflow @docs/git-instructions.md

```

Both relative and absolute paths are allowed. In particular, importing files in user’s home dir is a convenient way for your team members to provide individual instructions that are not checked into the repository. Previously CLAUDE.local.md served a similar purpose, but is now deprecated in favor of imports since they work better across multiple git worktrees.

```

# Individual Preferences

- @~/.claude/my-project-instructions.md

```

To avoid potential collisions, imports are not evaluated inside markdown code spans and code blocks.

```
This code span will not be treated as an import: `@anthropic-ai/claude-code`

```

Imported files can recursively import additional files, with a max-depth of 5 hops. You can see what memory files are loaded by running `/memory` command.


## [​](#how-claude-looks-up-memories) How Claude looks up memories

Claude Code reads memories recursively: starting in the cwd, Claude Code recurses up to (but not including) the root directory */* and reads any CLAUDE.md or CLAUDE.local.md files it finds. This is especially convenient when working in large repositories where you run Claude Code in *foo/bar/*, and have memories in both *foo/CLAUDE.md* and *foo/bar/CLAUDE.md*.

Claude will also discover CLAUDE.md nested in subtrees under your current working directory. Instead of loading them at launch, they are only included when Claude reads files in those subtrees.


## [​](#quickly-add-memories-with-the-%23-shortcut) Quickly add memories with the `#` shortcut

The fastest way to add a memory is to start your input with the `#` character:

```

# Always use descriptive variable names

```

You’ll be prompted to select which memory file to store this in.


## [​](#directly-edit-memories-with-%2Fmemory) Directly edit memories with `/memory`

Use the `/memory` slash command during a session to open any memory file in your system editor for more extensive additions or organization.


## [​](#set-up-project-memory) Set up project memory

Suppose you want to set up a CLAUDE.md file to store important project information, conventions, and frequently used commands.

Bootstrap a CLAUDE.md for your codebase with the following command:

```
> /init 

```

Tips:


- Include frequently used commands (build, test, lint) to avoid repeated searches

- Document code style preferences and naming conventions

- Add important architectural patterns specific to your project

- CLAUDE.md memories can be used for both instructions shared with your team and for your individual preferences.


## [​](#memory-best-practices) Memory best practices


- **Be specific**: “Use 2-space indentation” is better than “Format code properly”.

- **Use structure to organize**: Format each individual memory as a bullet point and group related memories under descriptive markdown headings.

- **Review periodically**: Update memories as your project evolves to ensure Claude is always using the most up to date information and context.

Was this page helpful?

YesNo

[Terminal configuration](./en/docs/claude-code/terminal-config/index.md)[CLI reference](./en/docs/claude-code/cli-reference/index.md)

On this page


- [Determine memory type](#determine-memory-type)

- [CLAUDE.md imports](#claude-md-imports)

- [How Claude looks up memories](#how-claude-looks-up-memories)

- [Quickly add memories with the # shortcut](#quickly-add-memories-with-the-%23-shortcut)

- [Directly edit memories with /memory](#directly-edit-memories-with-%2Fmemory)

- [Set up project memory](#set-up-project-memory)

- [Memory best practices](#memory-best-practices)

======= monitoring-usage/index.md ======
Monitoring - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Monitoring

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code supports OpenTelemetry (OTel) metrics and events for monitoring and observability.

All metrics are time series data exported via OpenTelemetry’s standard metrics protocol, and events are exported via OpenTelemetry’s logs/events protocol. It is the user’s responsibility to ensure their metrics and logs backends are properly configured and that the aggregation granularity meets their monitoring requirements.

OpenTelemetry support is currently in beta and details are subject to change.


## [​](#quick-start) Quick Start

Configure OpenTelemetry using environment variables:

````bash

# 1. Enable telemetry
export CLAUDE_CODE_ENABLE_TELEMETRY=1

# 2. Choose exporters (both are optional - configure only what you need)
export OTEL_METRICS_EXPORTER=otlp # Options: otlp, prometheus, console
export OTEL_LOGS_EXPORTER=otlp # Options: otlp, console

# 3. Configure OTLP endpoint (for OTLP exporter)
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# 4. Set authentication (if required)
export OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer your-token"

# 5. For debugging: reduce export intervals
export OTEL_METRIC_EXPORT_INTERVAL=10000 # 10 seconds (default: 60000ms)
export OTEL_LOGS_EXPORT_INTERVAL=5000 # 5 seconds (default: 5000ms)

# 6. Run Claude Code
claude
````

The default export intervals are 60 seconds for metrics and 5 seconds for logs. During setup, you may want to use shorter intervals for debugging purposes. Remember to reset these for production use.

For full configuration options, see the [OpenTelemetry specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#configuration-options).


## [​](#administrator-configuration) Administrator Configuration

Administrators can configure OpenTelemetry settings for all users through the managed settings file. This allows for centralized control of telemetry settings across an organization. See the [settings precedence](./en/docs/claude-code/settings#settings-precedence/index.md) for more information about how settings are applied.

The managed settings file is located at:


- macOS: `/Library/Application Support/ClaudeCode/managed-settings.json`

- Linux and WSL: `/etc/claude-code/managed-settings.json`

- Windows: `C:\ProgramData\ClaudeCode\managed-settings.json`

Example managed settings configuration:

````json
{
"env": {
"CLAUDE_CODE_ENABLE_TELEMETRY": "1",
"OTEL_METRICS_EXPORTER": "otlp",
"OTEL_LOGS_EXPORTER": "otlp",
"OTEL_EXPORTER_OTLP_PROTOCOL": "grpc",
"OTEL_EXPORTER_OTLP_ENDPOINT": "http://collector.company.com:4317",
"OTEL_EXPORTER_OTLP_HEADERS": "Authorization=Bearer company-token"
}
}
````

Managed settings can be distributed via MDM (Mobile Device Management) or other device management solutions. Environment variables defined in the managed settings file have high precedence and cannot be overridden by users.


## [​](#configuration-details) Configuration Details


### [​](#common-configuration-variables) Common Configuration Variables

| Environment Variable | Description | Example Values |
| --- | --- | --- |
| `CLAUDE_CODE_ENABLE_TELEMETRY` | Enables telemetry collection (required) | `1` |
| `OTEL_METRICS_EXPORTER` | Metrics exporter type(s) (comma-separated) | `console`, `otlp`, `prometheus` |
| `OTEL_LOGS_EXPORTER` | Logs/events exporter type(s) (comma-separated) | `console`, `otlp` |
| `OTEL_EXPORTER_OTLP_PROTOCOL` | Protocol for OTLP exporter (all signals) | `grpc`, `http/json`, `http/protobuf` |
| `OTEL_EXPORTER_OTLP_ENDPOINT` | OTLP collector endpoint (all signals) | `http://localhost:4317` |
| `OTEL_EXPORTER_OTLP_METRICS_PROTOCOL` | Protocol for metrics (overrides general) | `grpc`, `http/json`, `http/protobuf` |
| `OTEL_EXPORTER_OTLP_METRICS_ENDPOINT` | OTLP metrics endpoint (overrides general) | `http://localhost:4318/v1/metrics` |
| `OTEL_EXPORTER_OTLP_LOGS_PROTOCOL` | Protocol for logs (overrides general) | `grpc`, `http/json`, `http/protobuf` |
| `OTEL_EXPORTER_OTLP_LOGS_ENDPOINT` | OTLP logs endpoint (overrides general) | `http://localhost:4318/v1/logs` |
| `OTEL_EXPORTER_OTLP_HEADERS` | Authentication headers for OTLP | `Authorization=Bearer token` |
| `OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY` | Client key for mTLS authentication | Path to client key file |
| `OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE` | Client certificate for mTLS authentication | Path to client cert file |
| `OTEL_METRIC_EXPORT_INTERVAL` | Export interval in milliseconds (default: 60000) | `5000`, `60000` |
| `OTEL_LOGS_EXPORT_INTERVAL` | Logs export interval in milliseconds (default: 5000) | `1000`, `10000` |
| `OTEL_LOG_USER_PROMPTS` | Enable logging of user prompt content (default: disabled) | `1` to enable |


### [​](#metrics-cardinality-control) Metrics Cardinality Control

The following environment variables control which attributes are included in metrics to manage cardinality:

| Environment Variable | Description | Default Value | Example to Disable |
| --- | --- | --- | --- |
| `OTEL_METRICS_INCLUDE_SESSION_ID` | Include session.id attribute in metrics | `true` | `false` |
| `OTEL_METRICS_INCLUDE_VERSION` | Include app.version attribute in metrics | `false` | `true` |
| `OTEL_METRICS_INCLUDE_ACCOUNT_UUID` | Include user.account\_uuid attribute in metrics | `true` | `false` |

These variables help control the cardinality of metrics, which affects storage requirements and query performance in your metrics backend. Lower cardinality generally means better performance and lower storage costs but less granular data for analysis.


### [​](#dynamic-headers) Dynamic Headers

For enterprise environments that require dynamic authentication, you can configure a script to generate headers dynamically:


#### [​](#settings-configuration) Settings Configuration

Add to your `.claude/settings.json`:

````json
{
"otelHeadersHelper": "/bin/generate_opentelemetry_headers.sh"
}
````


#### [​](#script-requirements) Script Requirements

The script must output valid JSON with string key-value pairs representing HTTP headers:

````bash
#!/bin/bash

# Example: Multiple headers
echo "{\"Authorization\": \"Bearer $(get-token.sh)\", \"X-API-Key\": \"$(get-api-key.sh)\"}"
````


#### [​](#important-limitations) Important Limitations

**Headers are fetched only at startup, not during runtime.** This is due to OpenTelemetry exporter architecture limitations.

For scenarios requiring frequent token refresh, use an OpenTelemetry Collector as a proxy that can refresh its own headers.


### [​](#multi-team-organization-support) Multi-Team Organization Support

Organizations with multiple teams or departments can add custom attributes to distinguish between different groups using the `OTEL_RESOURCE_ATTRIBUTES` environment variable:

````bash

# Add custom attributes for team identification
export OTEL_RESOURCE_ATTRIBUTES="department=engineering,team.id=platform,cost_center=eng-123"
````

These custom attributes will be included in all metrics and events, allowing you to:


- Filter metrics by team or department

- Track costs per cost center

- Create team-specific dashboards

- Set up alerts for specific teams


### [​](#example-configurations) Example Configurations

````bash

# Console debugging (1-second intervals)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console
export OTEL_METRIC_EXPORT_INTERVAL=1000

# OTLP/gRPC
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Prometheus
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=prometheus

# Multiple exporters
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console,otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=http/json

# Different endpoints/backends for metrics and logs
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_LOGS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf
export OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://metrics.company.com:4318
export OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://logs.company.com:4317

# Metrics only (no events/logs)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Events/logs only (no metrics)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_LOGS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
````


## [​](#available-metrics-and-events) Available Metrics and Events


### [​](#standard-attributes) Standard Attributes

All metrics and events share these standard attributes:

| Attribute | Description | Controlled By |
| --- | --- | --- |
| `session.id` | Unique session identifier | `OTEL_METRICS_INCLUDE_SESSION_ID` (default: true) |
| `app.version` | Current Claude Code version | `OTEL_METRICS_INCLUDE_VERSION` (default: false) |
| `organization.id` | Organization UUID (when authenticated) | Always included when available |
| `user.account_uuid` | Account UUID (when authenticated) | `OTEL_METRICS_INCLUDE_ACCOUNT_UUID` (default: true) |
| `terminal.type` | Terminal type (e.g., `iTerm.app`, `vscode`, `cursor`, `tmux`) | Always included when detected |


### [​](#metrics) Metrics

Claude Code exports the following metrics:

| Metric Name | Description | Unit |
| --- | --- | --- |
| `claude_code.session.count` | Count of CLI sessions started | count |
| `claude_code.lines_of_code.count` | Count of lines of code modified | count |
| `claude_code.pull_request.count` | Number of pull requests created | count |
| `claude_code.commit.count` | Number of git commits created | count |
| `claude_code.cost.usage` | Cost of the Claude Code session | USD |
| `claude_code.token.usage` | Number of tokens used | tokens |
| `claude_code.code_edit_tool.decision` | Count of code editing tool permission decisions | count |
| `claude_code.active_time.total` | Total active time in seconds | s |


### [​](#metric-details) Metric Details


#### [​](#session-counter) Session Counter

Incremented at the start of each session.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


#### [​](#lines-of-code-counter) Lines of Code Counter

Incremented when code is added or removed.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `type`: (`"added"`, `"removed"`)


#### [​](#pull-request-counter) Pull Request Counter

Incremented when creating pull requests via Claude Code.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


#### [​](#commit-counter) Commit Counter

Incremented when creating git commits via Claude Code.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


#### [​](#cost-counter) Cost Counter

Incremented after each API request.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `model`: Model identifier (e.g., “claude-3-5-sonnet-20241022”)


#### [​](#token-counter) Token Counter

Incremented after each API request.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `type`: (`"input"`, `"output"`, `"cacheRead"`, `"cacheCreation"`)

- `model`: Model identifier (e.g., “claude-3-5-sonnet-20241022”)


#### [​](#code-edit-tool-decision-counter) Code Edit Tool Decision Counter

Incremented when user accepts or rejects Edit, MultiEdit, Write, or NotebookEdit tool usage.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `tool`: Tool name (`"Edit"`, `"MultiEdit"`, `"Write"`, `"NotebookEdit"`)

- `decision`: User decision (`"accept"`, `"reject"`)

- `language`: Programming language of the edited file (e.g., `"TypeScript"`, `"Python"`, `"JavaScript"`, `"Markdown"`). Returns `"unknown"` for unrecognized file extensions.


#### [​](#active-time-counter) Active Time Counter

Tracks actual time spent actively using Claude Code (not idle time). This metric is incremented during user interactions such as typing prompts or receiving responses.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


### [​](#events) Events

Claude Code exports the following events via OpenTelemetry logs/events (when `OTEL_LOGS_EXPORTER` is configured):


#### [​](#user-prompt-event) User Prompt Event

Logged when a user submits a prompt.

**Event Name**: `claude_code.user_prompt`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"user_prompt"`

- `event.timestamp`: ISO 8601 timestamp

- `prompt_length`: Length of the prompt

- `prompt`: Prompt content (redacted by default, enable with `OTEL_LOG_USER_PROMPTS=1`)


#### [​](#tool-result-event) Tool Result Event

Logged when a tool completes execution.

**Event Name**: `claude_code.tool_result`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"tool_result"`

- `event.timestamp`: ISO 8601 timestamp

- `tool_name`: Name of the tool

- `success`: `"true"` or `"false"`

- `duration_ms`: Execution time in milliseconds

- `error`: Error message (if failed)

- `decision`: Either `"accept"` or `"reject"`

- `source`: Decision source - `"config"`, `"user_permanent"`, `"user_temporary"`, `"user_abort"`, or `"user_reject"`

- `tool_parameters`: JSON string containing tool-specific parameters (when available)

  - For Bash tool: includes `bash_command`, `full_command`, `timeout`, `description`, `sandbox`


#### [​](#api-request-event) API Request Event

Logged for each API request to Claude.

**Event Name**: `claude_code.api_request`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"api_request"`

- `event.timestamp`: ISO 8601 timestamp

- `model`: Model used (e.g., “claude-3-5-sonnet-20241022”)

- `cost_usd`: Estimated cost in USD

- `duration_ms`: Request duration in milliseconds

- `input_tokens`: Number of input tokens

- `output_tokens`: Number of output tokens

- `cache_read_tokens`: Number of tokens read from cache

- `cache_creation_tokens`: Number of tokens used for cache creation


#### [​](#api-error-event) API Error Event

Logged when an API request to Claude fails.

**Event Name**: `claude_code.api_error`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"api_error"`

- `event.timestamp`: ISO 8601 timestamp

- `model`: Model used (e.g., “claude-3-5-sonnet-20241022”)

- `error`: Error message

- `status_code`: HTTP status code (if applicable)

- `duration_ms`: Request duration in milliseconds

- `attempt`: Attempt number (for retried requests)


#### [​](#tool-decision-event) Tool Decision Event

Logged when a tool permission decision is made (accept/reject).

**Event Name**: `claude_code.tool_decision`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"tool_decision"`

- `event.timestamp`: ISO 8601 timestamp

- `tool_name`: Name of the tool (e.g., “Read”, “Edit”, “MultiEdit”, “Write”, “NotebookEdit”, etc.)

- `decision`: Either `"accept"` or `"reject"`

- `source`: Decision source - `"config"`, `"user_permanent"`, `"user_temporary"`, `"user_abort"`, or `"user_reject"`


## [​](#interpreting-metrics-and-events-data) Interpreting Metrics and Events Data

The metrics exported by Claude Code provide valuable insights into usage patterns and productivity. Here are some common visualizations and analyses you can create:


### [​](#usage-monitoring) Usage Monitoring

| Metric | Analysis Opportunity |
| --- | --- |
| `claude_code.token.usage` | Break down by `type` (input/output), user, team, or model |
| `claude_code.session.count` | Track adoption and engagement over time |
| `claude_code.lines_of_code.count` | Measure productivity by tracking code additions/removals |
| `claude_code.commit.count` & `claude_code.pull_request.count` | Understand impact on development workflows |


### [​](#cost-monitoring) Cost Monitoring

The `claude_code.cost.usage` metric helps with:


- Tracking usage trends across teams or individuals

- Identifying high-usage sessions for optimization

Cost metrics are approximations. For official billing data, refer to your API provider (Anthropic Console, AWS Bedrock, or Google Cloud Vertex).


### [​](#alerting-and-segmentation) Alerting and Segmentation

Common alerts to consider:


- Cost spikes

- Unusual token consumption

- High session volume from specific users

All metrics can be segmented by `user.account_uuid`, `organization.id`, `session.id`, `model`, and `app.version`.


### [​](#event-analysis) Event Analysis

The event data provides detailed insights into Claude Code interactions:

**Tool Usage Patterns**: Analyze tool result events to identify:


- Most frequently used tools

- Tool success rates

- Average tool execution times

- Error patterns by tool type

**Performance Monitoring**: Track API request durations and tool execution times to identify performance bottlenecks.


## [​](#backend-considerations) Backend Considerations

Your choice of metrics and logs backends will determine the types of analyses you can perform:


### [​](#for-metrics%3A) For Metrics:


- **Time series databases (e.g., Prometheus)**: Rate calculations, aggregated metrics

- **Columnar stores (e.g., ClickHouse)**: Complex queries, unique user analysis

- **Full-featured observability platforms (e.g., Honeycomb, Datadog)**: Advanced querying, visualization, alerting


### [​](#for-events%2Flogs%3A) For Events/Logs:


- **Log aggregation systems (e.g., Elasticsearch, Loki)**: Full-text search, log analysis

- **Columnar stores (e.g., ClickHouse)**: Structured event analysis

- **Full-featured observability platforms (e.g., Honeycomb, Datadog)**: Correlation between metrics and events

For organizations requiring Daily/Weekly/Monthly Active User (DAU/WAU/MAU) metrics, consider backends that support efficient unique value queries.


## [​](#service-information) Service Information

All metrics and events are exported with the following resource attributes:


- `service.name`: `claude-code`

- `service.version`: Current Claude Code version

- `os.type`: Operating system type (e.g., `linux`, `darwin`, `windows`)

- `os.version`: Operating system version string

- `host.arch`: Host architecture (e.g., `amd64`, `arm64`)

- `wsl.version`: WSL version number (only present when running on Windows Subsystem for Linux)

- Meter Name: `com.anthropic.claude_code`


## [​](#security%2Fprivacy-considerations) Security/Privacy Considerations


- Telemetry is opt-in and requires explicit configuration

- Sensitive information like API keys or file contents are never included in metrics or events

- User prompt content is redacted by default - only prompt length is recorded. To enable user prompt logging, set `OTEL_LOG_USER_PROMPTS=1`

Was this page helpful?

YesNo

[Security](./en/docs/claude-code/security/index.md)[Costs](./en/docs/claude-code/costs/index.md)

On this page


- [Quick Start](#quick-start)

- [Administrator Configuration](#administrator-configuration)

- [Configuration Details](#configuration-details)

- [Common Configuration Variables](#common-configuration-variables)

- [Metrics Cardinality Control](#metrics-cardinality-control)

- [Dynamic Headers](#dynamic-headers)

- [Settings Configuration](#settings-configuration)

- [Script Requirements](#script-requirements)

- [Important Limitations](#important-limitations)

- [Multi-Team Organization Support](#multi-team-organization-support)

- [Example Configurations](#example-configurations)

- [Available Metrics and Events](#available-metrics-and-events)

- [Standard Attributes](#standard-attributes)

- [Metrics](#metrics)

- [Metric Details](#metric-details)

- [Session Counter](#session-counter)

- [Lines of Code Counter](#lines-of-code-counter)

- [Pull Request Counter](#pull-request-counter)

- [Commit Counter](#commit-counter)

- [Cost Counter](#cost-counter)

- [Token Counter](#token-counter)

- [Code Edit Tool Decision Counter](#code-edit-tool-decision-counter)

- [Active Time Counter](#active-time-counter)

- [Events](#events)

- [User Prompt Event](#user-prompt-event)

- [Tool Result Event](#tool-result-event)

- [API Request Event](#api-request-event)

- [API Error Event](#api-error-event)

- [Tool Decision Event](#tool-decision-event)

- [Interpreting Metrics and Events Data](#interpreting-metrics-and-events-data)

- [Usage Monitoring](#usage-monitoring)

- [Cost Monitoring](#cost-monitoring)

- [Alerting and Segmentation](#alerting-and-segmentation)

- [Event Analysis](#event-analysis)

- [Backend Considerations](#backend-considerations)

- [For Metrics:](#for-metrics%3A)

- [For Events/Logs:](#for-events%2Flogs%3A)

- [Service Information](#service-information)

- [Security/Privacy Considerations](#security%2Fprivacy-considerations)

======= overview/index.md ======
Claude Code overview - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Getting started

Claude Code overview

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#get-started-in-30-seconds) Get started in 30 seconds

Prerequisites: [Node.js 18 or newer](https://nodejs.org/en/download/)

````bash

# Install Claude Code
npm install -g @anthropic-ai/claude-code

# Navigate to your project
cd your-awesome-project

# Start coding with Claude
claude
````

That’s it! You’re ready to start coding with Claude. [Continue with Quickstart (5 mins) →](./en/docs/claude-code/quickstart/index.md)

(Got specific setup needs or hit issues? See [advanced setup](./en/docs/claude-code/setup/index.md) or [troubleshooting](./en/docs/claude-code/troubleshooting/index.md).)


## [​](#what-claude-code-does-for-you) What Claude Code does for you


- **Build features from descriptions**: Tell Claude what you want to build in plain English. It will make a plan, write the code, and ensure it works.

- **Debug and fix issues**: Describe a bug or paste an error message. Claude Code will analyze your codebase, identify the problem, and implement a fix.

- **Navigate any codebase**: Ask anything about your team’s codebase, and get a thoughtful answer back. Claude Code maintains awareness of your entire project structure, can find up-to-date information from the web, and with [MCP](./en/docs/claude-code/mcp/index.md) can pull from external datasources like Google Drive, Figma, and Slack.

- **Automate tedious tasks**: Fix fiddly lint issues, resolve merge conflicts, and write release notes. Do all this in a single command from your developer machines, or automatically in CI.


## [​](#why-developers-love-claude-code) Why developers love Claude Code


- **Works in your terminal**: Not another chat window. Not another IDE. Claude Code meets you where you already work, with the tools you already love.

- **Takes action**: Claude Code can directly edit files, run commands, and create commits. Need more? [MCP](./en/docs/claude-code/mcp/index.md) lets Claude read your design docs in Google Drive, update your tickets in Jira, or use *your* custom developer tooling.

- **Unix philosophy**: Claude Code is composable and scriptable. `tail -f app.log | claude -p "Slack me if you see any anomalies appear in this log stream"` *works*. Your CI can run `claude -p "If there are new text strings, translate them into French and raise a PR for @lang-fr-team to review"`.

- **Enterprise-ready**: Use Anthropic’s API, or host on AWS or GCP. Enterprise-grade [security](./en/docs/claude-code/security/index.md), [privacy](./en/docs/claude-code/data-usage/index.md), and [compliance](https://trust.anthropic.com/) is built-in.


## [​](#next-steps) Next steps

[## Quickstart

See Claude Code in action with practical examples](./en/docs/claude-code/quickstart/index.md)[## Common workflows

Step-by-step guides for common workflows](./en/docs/claude-code/common-workflows/index.md)[## Troubleshooting

Solutions for common issues with Claude Code](./en/docs/claude-code/troubleshooting/index.md)[## IDE setup

Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)


## [​](#additional-resources) Additional resources

[## Host on AWS or GCP

Configure Claude Code with Amazon Bedrock or Google Vertex AI](./en/docs/claude-code/third-party-integrations/index.md)[## Settings

Customize Claude Code for your workflow](./en/docs/claude-code/settings/index.md)[## Commands

Learn about CLI commands and controls](./en/docs/claude-code/cli-reference/index.md)[## Reference implementation

Clone our development container reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer)[## Security

Discover Claude Code’s safeguards and best practices for safe usage](./en/docs/claude-code/security/index.md)[## Privacy and data usage

Understand how Claude Code handles your data](./en/docs/claude-code/data-usage/index.md)

Was this page helpful?

YesNo

[Quickstart](./en/docs/claude-code/quickstart/index.md)

On this page


- [Get started in 30 seconds](#get-started-in-30-seconds)

- [What Claude Code does for you](#what-claude-code-does-for-you)

- [Why developers love Claude Code](#why-developers-love-claude-code)

- [Next steps](#next-steps)

- [Additional resources](#additional-resources)

======= quickstart/index.md ======
Quickstart - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Getting started

Quickstart

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

This quickstart guide will have you using AI-powered coding assistance in just a few minutes. By the end, you’ll understand how to use Claude Code for common development tasks.


## [​](#before-you-begin) Before you begin

Make sure you have:


- A terminal or command prompt open

- [Node.js 18 or newer installed](https://nodejs.org/en/download/)

- A code project to work with


## [​](#step-1%3A-install-claude-code) Step 1: Install Claude Code

To install Claude Code, run the following command:

````sh
npm install -g @anthropic-ai/claude-code
````


## [​](#step-2%3A-start-your-first-session) Step 2: Start your first session

Open your terminal in any project directory and start Claude Code:

````bash
cd /path/to/your/project
claude
````

You’ll see the Claude Code prompt inside a new interactive session:

```
✻ Welcome to Claude Code!

...

> Try "create a util logging.py that..." 

```


## [​](#step-3%3A-ask-your-first-question) Step 3: Ask your first question

Let’s start with understanding your codebase. Try one of these commands:

```
> what does this project do?

```

Claude will analyze your files and provide a summary. You can also ask more specific questions:

```
> what technologies does this project use?

```

```
> where is the main entry point?

```

```
> explain the folder structure

```

Claude Code reads your files as needed - you don’t have to manually add context.


## [​](#step-4%3A-make-your-first-code-change) Step 4: Make your first code change

Now let’s make Claude Code do some actual coding. Try a simple task:

```
> add a hello world function to the main file

```

Claude Code will:

1. Find the appropriate file
2. Show you the proposed changes
3. Ask for your approval
4. Make the edit

Claude Code always asks for permission before modifying files. You can approve individual changes or enable “Accept all” mode for a session.


## [​](#step-5%3A-use-git-with-claude-code) Step 5: Use Git with Claude Code

Claude Code makes Git operations conversational:

```
> what files have I changed?

```

```
> commit my changes with a descriptive message

```

You can also prompt for more complex Git operations:

```
> create a new branch called feature/quickstart

```

```
> show me the last 5 commits

```

```
> help me resolve merge conflicts

```


## [​](#step-6%3A-fix-a-bug-or-add-a-feature) Step 6: Fix a bug or add a feature

Claude is proficient at debugging and feature implementation.

Describe what you want in natural language:

```
> add input validation to the user registration form

```

Or fix existing issues:

```
> there's a bug where users can submit empty forms - fix it

```

Claude Code will:


- Locate the relevant code

- Understand the context

- Implement a solution

- Run tests if available


## [​](#step-7%3A-test-out-other-common-workflows) Step 7: Test out other common workflows

There are a number of ways to work with Claude:

**Refactor code**

```
> refactor the authentication module to use async/await instead of callbacks

```

**Write tests**

```
> write unit tests for the calculator functions

```

**Update documentation**

```
> update the README with installation instructions

```

**Code review**

```
> review my changes and suggest improvements

```

**Remember**: Claude Code is your AI pair programmer. Talk to it like you would a helpful colleague - describe what you want to achieve, and it will help you get there.


## [​](#essential-commands) Essential commands

Here are the most important commands for daily use:

| Command | What it does | Example |
| --- | --- | --- |
| `claude` | Start interactive mode | `claude` |
| `claude "task"` | Run a one-time task | `claude "fix the build error"` |
| `claude -p "query"` | Run one-off query, then exit | `claude -p "explain this function"` |
| `claude -c` | Continue most recent conversation | `claude -c` |
| `claude -r` | Resume a previous conversation | `claude -r` |
| `claude commit` | Create a Git commit | `claude commit` |
| `/clear` | Clear conversation history | `> /clear` |
| `/help` | Show available commands | `> /help` |
| `exit` or Ctrl+C | Exit Claude Code | `> exit` |

See the [CLI reference](./en/docs/claude-code/cli-reference/index.md) for a complete list of commands.


## [​](#pro-tips-for-beginners) Pro tips for beginners

Be specific with your requests

Use step-by-step instructions

Let Claude explore first

Save time with shortcuts


## [​](#what%E2%80%99s-next%3F) What’s next?

Now that you’ve learned the basics, explore more advanced features:

[## Common workflows

Step-by-step guides for common tasks](./en/docs/claude-code/common-workflows/index.md)[## CLI reference

Master all commands and options](./en/docs/claude-code/cli-reference/index.md)[## Configuration

Customize Claude Code for your workflow](./en/docs/claude-code/settings/index.md)


## [​](#getting-help) Getting help


- **In Claude Code**: Type `/help` or ask “how do I…”

- **Documentation**: You’re here! Browse other guides

- **Community**: Join our [Discord](https://www.anthropic.com/discord) for tips and support

Was this page helpful?

YesNo

[Overview](./en/docs/claude-code/overview/index.md)[Common workflows](./en/docs/claude-code/common-workflows/index.md)

On this page


- [Before you begin](#before-you-begin)

- [Step 1: Install Claude Code](#step-1%3A-install-claude-code)

- [Step 2: Start your first session](#step-2%3A-start-your-first-session)

- [Step 3: Ask your first question](#step-3%3A-ask-your-first-question)

- [Step 4: Make your first code change](#step-4%3A-make-your-first-code-change)

- [Step 5: Use Git with Claude Code](#step-5%3A-use-git-with-claude-code)

- [Step 6: Fix a bug or add a feature](#step-6%3A-fix-a-bug-or-add-a-feature)

- [Step 7: Test out other common workflows](#step-7%3A-test-out-other-common-workflows)

- [Essential commands](#essential-commands)

- [Pro tips for beginners](#pro-tips-for-beginners)

- [What’s next?](#what%E2%80%99s-next%3F)

- [Getting help](#getting-help)

======= sdk/index.md ======
Claude Code SDK - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Claude Code SDK

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

The Claude Code SDK enables running Claude Code as a subprocess, providing a way to build AI-powered coding assistants and tools that leverage Claude’s capabilities.

The SDK is available for command line, TypeScript, and Python usage.


## [​](#authentication) Authentication

The Claude Code SDK supports multiple authentication methods:


### [​](#anthropic-api-key) Anthropic API key

To use the Claude Code SDK directly with Anthropic’s API, we recommend creating a dedicated API key:

1. Create an Anthropic API key in the [Anthropic Console](https://console.anthropic.com/)
2. Then, set the `ANTHROPIC_API_KEY` environment variable. We recommend storing this key securely (e.g., using a Github [secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions))


### [​](#third-party-api-credentials) Third-Party API credentials

The SDK also supports third-party API providers:


- **Amazon Bedrock**: Set `CLAUDE_CODE_USE_BEDROCK=1` environment variable and configure AWS credentials

- **Google Vertex AI**: Set `CLAUDE_CODE_USE_VERTEX=1` environment variable and configure Google Cloud credentials

For detailed configuration instructions for third-party providers, see the [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md) and [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md) documentation.


## [​](#basic-sdk-usage) Basic SDK usage

The Claude Code SDK allows you to use Claude Code in non-interactive mode from your applications.


### [​](#command-line) Command line

Here are a few basic examples for the command line SDK:

````bash

# Run a single prompt and exit (print mode)
$ claude -p "Write a function to calculate Fibonacci numbers"

# Using a pipe to provide stdin
$ echo "Explain this code" | claude -p

# Output in JSON format with metadata
$ claude -p "Generate a hello world function" --output-format json

# Stream JSON output as it arrives
$ claude -p "Build a React component" --output-format stream-json
````


### [​](#typescript) TypeScript

The TypeScript SDK is included in the main [`@anthropic-ai/claude-code`](https://www.npmjs.com/package/@anthropic-ai/claude-code) package on NPM:

````ts
import { query, type SDKMessage } from "@anthropic-ai/claude-code";
const messages: SDKMessage[] = [];
for await (const message of query({
prompt: "Write a haiku about foo.py",
abortController: new AbortController(),
options: {
maxTurns: 3,
},
})) {
messages.push(message);
}
console.log(messages);
````

The TypeScript SDK accepts all arguments supported by the command line SDK, as well as:

| Argument | Description | Default |
| --- | --- | --- |
| `abortController` | Abort controller | `new AbortController()` |
| `cwd` | Current working directory | `process.cwd()` |
| `executable` | Which JavaScript runtime to use | `node` when running with Node.js, `bun` when running with Bun |
| `executableArgs` | Arguments to pass to the executable | `[]` |
| `pathToClaudeCodeExecutable` | Path to the Claude Code executable | Executable that ships with `@anthropic-ai/claude-code` |


### [​](#python) Python

The Python SDK is available as [`claude-code-sdk`](https://github.com/anthropics/claude-code-sdk-python) on PyPI:

````bash
pip install claude-code-sdk
````

**Prerequisites:**


- Python 3.10+

- Node.js

- Claude Code CLI: `npm install -g @anthropic-ai/claude-code`

Basic usage:

````python
import anyio
from claude_code_sdk import query, ClaudeCodeOptions, Message
async def main():
messages: list[Message] = []
async for message in query(
prompt="Write a haiku about foo.py",
options=ClaudeCodeOptions(max_turns=3)
):
messages.append(message)
print(messages)
anyio.run(main)
````

The Python SDK accepts all arguments supported by the command line SDK through the `ClaudeCodeOptions` class:

````python
from claude_code_sdk import query, ClaudeCodeOptions
from pathlib import Path
options = ClaudeCodeOptions(
max_turns=3,
system_prompt="You are a helpful assistant",
cwd=Path("/path/to/project"), # Can be string or Path
allowed_tools=["Read", "Write", "Bash"],
permission_mode="acceptEdits"
)
async for message in query(prompt="Hello", options=options):
print(message)
````


## [​](#advanced-usage) Advanced usage

The documentation below uses the command line SDK as an example, but can also be used with the TypeScript and Python SDKs.


### [​](#multi-turn-conversations) Multi-turn conversations

For multi-turn conversations, you can resume conversations or continue from the most recent session:

````bash

# Continue the most recent conversation
$ claude --continue

# Continue and provide a new prompt
$ claude --continue "Now refactor this for better performance"

# Resume a specific conversation by session ID
$ claude --resume 550e8400-e29b-41d4-a716-446655440000

# Resume in print mode (non-interactive)
$ claude -p --resume 550e8400-e29b-41d4-a716-446655440000 "Update the tests"

# Continue in print mode (non-interactive)
$ claude -p --continue "Add error handling"
````


### [​](#custom-system-prompts) Custom system prompts

You can provide custom system prompts to guide Claude’s behavior:

````bash

# Override system prompt (only works with --print)
$ claude -p "Build a REST API" --system-prompt "You are a senior backend engineer. Focus on security, performance, and maintainability."

# System prompt with specific requirements
$ claude -p "Create a database schema" --system-prompt "You are a database architect. Use PostgreSQL best practices and include proper indexing."
````

You can also append instructions to the default system prompt:

````bash

# Append system prompt (only works with --print)
$ claude -p "Build a REST API" --append-system-prompt "After writing code, be sure to code review yourself."
````


### [​](#mcp-configuration) MCP Configuration

The Model Context Protocol (MCP) allows you to extend Claude Code with additional tools and resources from external servers. Using the `--mcp-config` flag, you can load MCP servers that provide specialized capabilities like database access, API integrations, or custom tooling.

Create a JSON configuration file with your MCP servers:

````json
{
"mcpServers": {
"filesystem": {
"command": "npx",
"args": [
"-y",
"@modelcontextprotocol/server-filesystem",
"/path/to/allowed/files"
]
},
"github": {
"command": "npx",
"args": ["-y", "@modelcontextprotocol/server-github"],
"env": {
"GITHUB_TOKEN": "your-github-token"
}
}
}
}
````

Then use it with Claude Code:

````bash

# Load MCP servers from configuration
$ claude -p "List all files in the project" --mcp-config mcp-servers.json

# Important: MCP tools must be explicitly allowed using --allowedTools

# MCP tools follow the format: mcp__$serverName__$toolName
$ claude -p "Search for TODO comments" \
--mcp-config mcp-servers.json \
--allowedTools "mcp__filesystem__read_file,mcp__filesystem__list_directory"

# Use an MCP tool for handling permission prompts in non-interactive mode
$ claude -p "Deploy the application" \
--mcp-config mcp-servers.json \
--allowedTools "mcp__permissions__approve" \
--permission-prompt-tool mcp__permissions__approve
````

When using MCP tools, you must explicitly allow them using the `--allowedTools` flag. MCP tool names follow the pattern `mcp__<serverName>__<toolName>` where:


- `serverName` is the key from your MCP configuration file

- `toolName` is the specific tool provided by that server

This security measure ensures that MCP tools are only used when explicitly permitted.

If you specify just the server name (i.e., `mcp__<serverName>`), all tools from that server will be allowed.

Glob patterns (e.g., `mcp__go*`) are not supported.


### [​](#custom-permission-prompt-tool) Custom permission prompt tool

Optionally, use `--permission-prompt-tool` to pass in an MCP tool that we will use to check whether or not the user grants the model permissions to invoke a given tool. When the model invokes a tool the following happens:

1. We first check permission settings: all [settings.json files](./en/docs/claude-code/settings/index.md), as well as `--allowedTools` and `--disallowedTools` passed into the SDK; if one of these allows or denies the tool call, we proceed with the tool call
2. Otherwise, we invoke the MCP tool you provided in `--permission-prompt-tool`

The `--permission-prompt-tool` MCP tool is passed the tool name and input, and must return a JSON-stringified payload with the result. The payload must be one of:

````ts
// tool call is allowed
{
"behavior": "allow",
"updatedInput": {...}, // updated input, or just return back the original input
}
// tool call is denied
{
"behavior": "deny",
"message": "..." // human-readable string explaining why the permission was denied
}
````

For example, a TypeScript MCP permission prompt tool implementation might look like this:

````ts
const server = new McpServer({
name: "Test permission prompt MCP Server",
version: "0.0.1",
});
server.tool(
"approval_prompt",
'Simulate a permission check - approve if the input contains "allow", otherwise deny',
{
tool_name: z.string().describe("The name of the tool requesting permission"),
input: z.object({}).passthrough().describe("The input for the tool"),
tool_use_id: z.string().optional().describe("The unique tool use request ID"),
},
async ({ tool_name, input }) => {
return {
content: [
{
type: "text",
text: JSON.stringify(
JSON.stringify(input).includes("allow")
? {
behavior: "allow",
updatedInput: input,
}
: {
behavior: "deny",
message: "Permission denied by test approval_prompt tool",
}
),
},
],
};
}
);
````

To use this tool, add your MCP server (eg. with `--mcp-config`), then invoke the SDK like so:

````sh
claude -p "..." \
--permission-prompt-tool mcp__test-server__approval_prompt \
--mcp-config my-config.json
````

Usage notes:


- Use `updatedInput` to tell the model that the permission prompt mutated its input; otherwise, set `updatedInput` to the original input, as in the example above. For example, if the tool shows a file edit diff to the user and lets them edit the diff manually, the permission prompt tool should return that updated edit.

- The payload must be JSON-stringified


## [​](#available-cli-options) Available CLI options

The SDK leverages all the CLI options available in Claude Code. Here are the key ones for SDK usage:

| Flag | Description | Example |
| --- | --- | --- |
| `--print`, `-p` | Run in non-interactive mode | `claude -p "query"` |
| `--output-format` | Specify output format (`text`, `json`, `stream-json`) | `claude -p --output-format json` |
| `--resume`, `-r` | Resume a conversation by session ID | `claude --resume abc123` |
| `--continue`, `-c` | Continue the most recent conversation | `claude --continue` |
| `--verbose` | Enable verbose logging | `claude --verbose` |
| `--max-turns` | Limit agentic turns in non-interactive mode | `claude --max-turns 3` |
| `--system-prompt` | Override system prompt (only with `--print`) | `claude --system-prompt "Custom instruction"` |
| `--append-system-prompt` | Append to system prompt (only with `--print`) | `claude --append-system-prompt "Custom instruction"` |
| `--allowedTools` | Space-separated list of allowed tools, or    string of comma-separated list of allowed tools | `claude --allowedTools mcp__slack mcp__filesystem`  `claude --allowedTools "Bash(npm install),mcp__filesystem"` |
| `--disallowedTools` | Space-separated list of denied tools, or    string of comma-separated list of denied tools | `claude --disallowedTools mcp__splunk mcp__github`  `claude --disallowedTools "Bash(git commit),mcp__github"` |
| `--mcp-config` | Load MCP servers from a JSON file | `claude --mcp-config servers.json` |
| `--permission-prompt-tool` | MCP tool for handling permission prompts (only with `--print`) | `claude --permission-prompt-tool mcp__auth__prompt` |

For a complete list of CLI options and features, see the [CLI reference](./en/docs/claude-code/cli-reference/index.md) documentation.


## [​](#output-formats) Output formats

The SDK supports multiple output formats:


### [​](#text-output-default) Text output (default)

Returns just the response text:

````bash
$ claude -p "Explain file src/components/Header.tsx"

# Output: This is a React component showing...
````


### [​](#json-output) JSON output

Returns structured data including metadata:

````bash
$ claude -p "How does the data layer work?" --output-format json
````

Response format:

````json
{
"type": "result",
"subtype": "success",
"total_cost_usd": 0.003,
"is_error": false,
"duration_ms": 1234,
"duration_api_ms": 800,
"num_turns": 6,
"result": "The response text here...",
"session_id": "abc123"
}
````


### [​](#streaming-json-output) Streaming JSON output

Streams each message as it is received:

````bash
$ claude -p "Build an application" --output-format stream-json
````

Each conversation begins with an initial `init` system message, followed by a list of user and assistant messages, followed by a final `result` system message with stats. Each message is emitted as a separate JSON object.


## [​](#message-schema) Message schema

Messages returned from the JSON API are strictly typed according to the following schema:

````ts
type SDKMessage =
// An assistant message
| {
type: "assistant";
message: Message; // from Anthropic SDK
session_id: string;
}
// A user message
| {
type: "user";
message: MessageParam; // from Anthropic SDK
session_id: string;
}
// Emitted as the last message
| {
type: "result";
subtype: "success";
duration_ms: float;
duration_api_ms: float;
is_error: boolean;
num_turns: int;
result: string;
session_id: string;
total_cost_usd: float;
}
// Emitted as the last message, when we've reached the maximum number of turns
| {
type: "result";
subtype: "error_max_turns" | "error_during_execution";
duration_ms: float;
duration_api_ms: float;
is_error: boolean;
num_turns: int;
session_id: string;
total_cost_usd: float;
}
// Emitted as the first message at the start of a conversation
| {
type: "system";
subtype: "init";
apiKeySource: string;
cwd: string;
session_id: string;
tools: string[];
mcp_servers: {
name: string;
status: string;
}[];
model: string;
permissionMode: "default" | "acceptEdits" | "bypassPermissions" | "plan";
};
````

We will soon publish these types in a JSONSchema-compatible format. We use semantic versioning for the main Claude Code package to communicate breaking changes to this format.

`Message` and `MessageParam` types are available in Anthropic SDKs. For example, see the Anthropic [TypeScript](https://github.com/anthropics/anthropic-sdk-typescript) and [Python](https://github.com/anthropics/anthropic-sdk-python/) SDKs.


## [​](#input-formats) Input formats

The SDK supports multiple input formats:


### [​](#text-input-default) Text input (default)

Input text can be provided as an argument:

````bash
$ claude -p "Explain this code"
````

Or input text can be piped via stdin:

````bash
$ echo "Explain this code" | claude -p
````


### [​](#streaming-json-input) Streaming JSON input

A stream of messages provided via `stdin` where each message represents a user turn. This allows multiple turns of a conversation without re-launching the `claude` binary and allows providing guidance to the model while it is processing a request.

Each message is a JSON ‘User message’ object, following the same format as the output message schema. Messages are formatted using the [jsonl](https://jsonlines.org/) format where each line of input is a complete JSON object. Streaming JSON input requires `-p` and `--output-format stream-json`.

Currently this is limited to text-only user messages.

````bash
$ echo '{"type":"user","message":{"role":"user","content":[{"type":"text","text":"Explain this code"}]}}' | claude -p --output-format=stream-json --input-format=stream-json --verbose
````


## [​](#examples) Examples


### [​](#simple-script-integration) Simple script integration

````bash
#!/bin/bash

# Simple function to run Claude and check exit code
run_claude() {
local prompt="$1"
local output_format="${2:-text}"
if claude -p "$prompt" --output-format "$output_format"; then
echo "Success!"
else
echo "Error: Claude failed with exit code $?" >&2
return 1
fi
}

# Usage examples
run_claude "Write a Python function to read CSV files"
run_claude "Optimize this database query" "json"
````


### [​](#processing-files-with-claude) Processing files with Claude

````bash

# Process a file through Claude
$ cat mycode.py | claude -p "Review this code for bugs"

# Process multiple files
$ for file in *.js; do
echo "Processing $file..."
claude -p "Add JSDoc comments to this file:" < "$file" > "${file}.documented"
done

# Use Claude in a pipeline
$ grep -l "TODO" *.py | while read file; do
claude -p "Fix all TODO items in this file" < "$file"
done
````


### [​](#session-management) Session management

````bash

# Start a session and capture the session ID
$ claude -p "Initialize a new project" --output-format json | jq -r '.session_id' > session.txt

# Continue with the same session
$ claude -p --resume "$(cat session.txt)" "Add unit tests"
````


## [​](#best-practices) Best practices

1. **Use JSON output format** for programmatic parsing of responses:

   ````bash
   # Parse JSON response with jq
   result=$(claude -p "Generate code" --output-format json)
   code=$(echo "$result" | jq -r '.result')
   cost=$(echo "$result" | jq -r '.cost_usd')
   ````
2. **Handle errors gracefully** - check exit codes and stderr:

   ````bash
   if ! claude -p "$prompt" 2>error.log; then
   echo "Error occurred:" >&2
   cat error.log >&2
   exit 1
   fi
   ````
3. **Use session management** for maintaining context in multi-turn conversations
4. **Consider timeouts** for long-running operations:

   ````bash
   timeout 300 claude -p "$complex_prompt" || echo "Timed out after 5 minutes"
   ````
5. **Respect rate limits** when making multiple requests by adding delays between calls


## [​](#real-world-applications) Real-world applications

The Claude Code SDK enables powerful integrations with your development workflow. One notable example is the [Claude Code GitHub Actions](./en/docs/claude-code/github-actions/index.md), which uses the SDK to provide automated code review, PR creation, and issue triage capabilities directly in your GitHub workflow.


## [​](#related-resources) Related resources


- [CLI usage and controls](./en/docs/claude-code/cli-reference/index.md) - Complete CLI documentation

- [GitHub Actions integration](./en/docs/claude-code/github-actions/index.md) - Automate your GitHub workflow with Claude

- [Common workflows](./en/docs/claude-code/common-workflows/index.md) - Step-by-step guides for common use cases

Was this page helpful?

YesNo

[Common workflows](./en/docs/claude-code/common-workflows/index.md)[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

On this page


- [Authentication](#authentication)

- [Anthropic API key](#anthropic-api-key)

- [Third-Party API credentials](#third-party-api-credentials)

- [Basic SDK usage](#basic-sdk-usage)

- [Command line](#command-line)

- [TypeScript](#typescript)

- [Python](#python)

- [Advanced usage](#advanced-usage)

- [Multi-turn conversations](#multi-turn-conversations)

- [Custom system prompts](#custom-system-prompts)

- [MCP Configuration](#mcp-configuration)

- [Custom permission prompt tool](#custom-permission-prompt-tool)

- [Available CLI options](#available-cli-options)

- [Output formats](#output-formats)

- [Text output (default)](#text-output-default)

- [JSON output](#json-output)

- [Streaming JSON output](#streaming-json-output)

- [Message schema](#message-schema)

- [Input formats](#input-formats)

- [Text input (default)](#text-input-default)

- [Streaming JSON input](#streaming-json-input)

- [Examples](#examples)

- [Simple script integration](#simple-script-integration)

- [Processing files with Claude](#processing-files-with-claude)

- [Session management](#session-management)

- [Best practices](#best-practices)

- [Real-world applications](#real-world-applications)

- [Related resources](#related-resources)

======= security/index.md ======
Security - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Security

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#how-we-approach-security) How we approach security


### [​](#security-foundation) Security foundation

Your code’s security is paramount. Claude Code is built with security at its core, developed according to Anthropic’s comprehensive security program. Learn more and access resources (SOC 2 Type 2 report, ISO 27001 certificate, etc.) at [Anthropic Trust Center](https://trust.anthropic.com).


### [​](#permission-based-architecture) Permission-based architecture

Claude Code uses strict read-only permissions by default. When additional actions are needed (editing files, running tests, executing commands), Claude Code requests explicit permission. Users control whether to approve actions once or allow them automatically.

We designed Claude Code to be transparent and secure. For example, we require approval for `git` commands before executing them, giving you direct control. This approach enables users and organizations to configure permissions directly.

For detailed permission configuration, see [Identity and Access Management](./en/docs/claude-code/iam/index.md).


### [​](#built-in-protections) Built-in protections

To mitigate risks in agentic systems:


- **Folder access restriction**: Claude Code can only access the folder where it was started and its subfolders—it cannot go upstream to parent directories. This creates a clear security boundary, ensuring Claude Code only operates within the intended project scope

- **Prompt fatigue mitigation**: Support for allowlisting frequently used safe commands per-user, per-codebase, or per-organization

- **Accept Edits mode**: Batch accept multiple edits while maintaining permission prompts for commands with side effects


### [​](#user-responsibility) User responsibility

Claude Code only has the permissions you grant it. You’re responsible for reviewing proposed code and commands for safety before approval.


## [​](#protect-against-prompt-injection) Protect against prompt injection

Prompt injection is a technique where an attacker attempts to override or manipulate an AI assistant’s instructions by inserting malicious text. Claude Code includes several safeguards against these attacks:


### [​](#core-protections) Core protections


- **Permission system**: Sensitive operations require explicit approval

- **Context-aware analysis**: Detects potentially harmful instructions by analyzing the full request

- **Input sanitization**: Prevents command injection by processing user inputs

- **Command blocklist**: Blocks risky commands that fetch arbitrary content from the web like `curl` and `wget`


### [​](#additional-safeguards) Additional safeguards


- **Network request approval**: Tools that make network requests require user approval by default

- **Isolated context windows**: Web fetch uses a separate context window to avoid injecting potentially malicious prompts

- **Trust verification**: First-time codebase runs and new MCP servers require trust verification

- **Command injection detection**: Suspicious bash commands require manual approval even if previously allowlisted

- **Fail-closed matching**: Unmatched commands default to requiring manual approval

- **Natural language descriptions**: Complex bash commands include explanations for user understanding

**Best practices for working with untrusted content**:

1. Review suggested commands before approval
2. Avoid piping untrusted content directly to Claude
3. Verify proposed changes to critical files
4. Use virtual machines (VMs) to run scripts and make tool calls, especially when interacting with external web services
5. Report suspicious behavior with `/bug`

While these protections significantly reduce risk, no system is completely
immune to all attacks. Always maintain good security practices when working
with any AI tool.


## [​](#mcp-security) MCP security

Claude Code allows users to configure Model Context Protocol (MCP) servers. The list of allowed MCP servers is configured in your source code, as part of Claude Code settings engineers check into source control.

We encourage either writing your own MCP servers or using MCP servers from providers that you trust. You are able to configure Claude Code permissions for MCP servers. Anthropic does not manage or audit any MCP servers.


## [​](#security-best-practices) Security best practices


### [​](#working-with-sensitive-code) Working with sensitive code


- Review all suggested changes before approval

- Use project-specific permission settings for sensitive repositories

- Consider using [devcontainers](./en/docs/claude-code/devcontainer/index.md) for additional isolation

- Regularly audit your permission settings with `/permissions`


### [​](#team-security) Team security


- Use [enterprise managed policies](./en/docs/claude-code/iam#enterprise-managed-policy-settings/index.md) to enforce organizational standards

- Share approved permission configurations through version control

- Train team members on security best practices

- Monitor Claude Code usage through [OpenTelemetry metrics](./en/docs/claude-code/monitoring-usage/index.md)


### [​](#reporting-security-issues) Reporting security issues

If you discover a security vulnerability in Claude Code:

1. Do not disclose it publicly
2. Report it through our [HackerOne program](https://hackerone.com/anthropic-vdp/reports/new?type=team&report_type=vulnerability)
3. Include detailed reproduction steps
4. Allow time for us to address the issue before public disclosure


## [​](#related-resources) Related resources


- [Identity and Access Management](./en/docs/claude-code/iam/index.md) - Configure permissions and access controls

- [Monitoring usage](./en/docs/claude-code/monitoring-usage/index.md) - Track and audit Claude Code activity

- [Development containers](./en/docs/claude-code/devcontainer/index.md) - Secure, isolated environments

- [Anthropic Trust Center](https://trust.anthropic.com) - Security certifications and compliance

Was this page helpful?

YesNo

[Identity and Access Management](./en/docs/claude-code/iam/index.md)[Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

On this page


- [How we approach security](#how-we-approach-security)

- [Security foundation](#security-foundation)

- [Permission-based architecture](#permission-based-architecture)

- [Built-in protections](#built-in-protections)

- [User responsibility](#user-responsibility)

- [Protect against prompt injection](#protect-against-prompt-injection)

- [Core protections](#core-protections)

- [Additional safeguards](#additional-safeguards)

- [MCP security](#mcp-security)

- [Security best practices](#security-best-practices)

- [Working with sensitive code](#working-with-sensitive-code)

- [Team security](#team-security)

- [Reporting security issues](#reporting-security-issues)

- [Related resources](#related-resources)

======= settings/index.md ======
Claude Code settings - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Claude Code settings

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code offers a variety of settings to configure its behavior to meet your needs. You can configure Claude Code by running the `/config` command when using the interactive REPL.


## [​](#settings-files) Settings files

The `settings.json` file is our official mechanism for configuring Claude
Code through hierarchical settings:


- **User settings** are defined in `~/.claude/settings.json` and apply to all
  projects.

- **Project settings** are saved in your project directory:

  - `.claude/settings.json` for settings that are checked into source control and shared with your team

  - `.claude/settings.local.json` for settings that are not checked in, useful for personal preferences and experimentation. Claude Code will configure git to ignore `.claude/settings.local.json` when it is created.

- For enterprise deployments of Claude Code, we also support **enterprise
  managed policy settings**. These take precedence over user and project
  settings. System administrators can deploy policies to:

  - macOS: `/Library/Application Support/ClaudeCode/managed-settings.json`

  - Linux and WSL: `/etc/claude-code/managed-settings.json`

  - Windows: `C:\ProgramData\ClaudeCode\managed-settings.json`

Example settings.json

````JSON
{
"permissions": {
"allow": [
"Bash(npm run lint)",
"Bash(npm run test:*)",
"Read(~/.zshrc)"
],
"deny": [
"Bash(curl:*)"
]
},
"env": {
"CLAUDE_CODE_ENABLE_TELEMETRY": "1",
"OTEL_METRICS_EXPORTER": "otlp"
}
}
````


### [​](#available-settings) Available settings

`settings.json` supports a number of options:

| Key | Description | Example |
| --- | --- | --- |
| `apiKeyHelper` | Custom script, to be executed in `/bin/sh`, to generate an auth value. This value will generally be sent as `X-Api-Key`, `Authorization: Bearer`, and `Proxy-Authorization: Bearer` headers for model requests | `/bin/generate_temp_api_key.sh` |
| `cleanupPeriodDays` | How long to locally retain chat transcripts (default: 30 days) | `20` |
| `env` | Environment variables that will be applied to every session | `{"FOO": "bar"}` |
| `includeCoAuthoredBy` | Whether to include the `co-authored-by Claude` byline in git commits and pull requests (default: `true`) | `false` |
| `permissions` | See table below for structure of permissions. |
| `hooks` | Configure custom commands to run before or after tool executions. See [hooks documentation](hooks) | `{"PreToolUse": {"Bash": "echo 'Running command...'"}}` |
| `model` | Override the default model to use for Claude Code | `"claude-3-5-sonnet-20241022"` |
| `forceLoginMethod` | Use `claudeai` to restrict login to Claude.ai accounts, `console` to restrict login to Anthropic Console (API usage billing) accounts | `claudeai` |
| `enableAllProjectMcpServers` | Automatically approve all MCP servers defined in project `.mcp.json` files | `true` |
| `enabledMcpjsonServers` | List of specific MCP servers from `.mcp.json` files to approve | `["memory", "github"]` |
| `disabledMcpjsonServers` | List of specific MCP servers from `.mcp.json` files to reject | `["filesystem"]` |


### [​](#permission-settings) Permission settings

| Keys | Description | Example |
| --- | --- | --- |
| `allow` | Array of [permission rules](./en/docs/claude-code/iam#configuring-permissions/index.md) to allow tool use | `[ "Bash(git diff:*)" ]` |
| `deny` | Array of [permission rules](./en/docs/claude-code/iam#configuring-permissions/index.md) to deny tool use | `[ "WebFetch", "Bash(curl:*)" ]` |
| `additionalDirectories` | Additional [working directories](iam#working-directories) that Claude has access to | `[ "../docs/" ]` |
| `defaultMode` | Default [permission mode](iam#permission-modes) when opening Claude Code | `"acceptEdits"` |
| `disableBypassPermissionsMode` | Set to `"disable"` to prevent `bypassPermissions` mode from being activated. See [managed policy settings](iam#enterprise-managed-policy-settings) | `"disable"` |


### [​](#settings-precedence) Settings precedence

Settings are applied in order of precedence:

1. Enterprise policies (see [IAM documentation](./en/docs/claude-code/iam#enterprise-managed-policy-settings/index.md))
2. Command line arguments
3. Local project settings
4. Shared project settings
5. User settings


## [​](#environment-variables) Environment variables

Claude Code supports the following environment variables to control its behavior:

All environment variables can also be configured in [`settings.json`](./_sites/docs.anthropic.com/en/docs/claude-code/settings#available-settings/index.md). This is useful as a way to automatically set environment variables for each session, or to roll out a set of environment variables for your whole team or organization.

| Variable | Purpose |
| --- | --- |
| `ANTHROPIC_API_KEY` | API key sent as `X-Api-Key` header, typically for the Claude SDK (for interactive usage, run `/login`) |
| `ANTHROPIC_AUTH_TOKEN` | Custom value for the `Authorization` and `Proxy-Authorization` headers (the value you set here will be prefixed with `Bearer` ) |
| `ANTHROPIC_CUSTOM_HEADERS` | Custom headers you want to add to the request (in `Name: Value` format) |
| `ANTHROPIC_MODEL` | Name of custom model to use (see [Model Configuration](./en/docs/claude-code/bedrock-vertex-proxies#model-configuration/index.md)) |
| `ANTHROPIC_SMALL_FAST_MODEL` | Name of [Haiku-class model for background tasks](./en/docs/claude-code/costs/index.md) |
| `ANTHROPIC_SMALL_FAST_MODEL_AWS_REGION` | Override AWS region for the small/fast model when using Bedrock |
| `AWS_BEARER_TOKEN_BEDROCK` | Bedrock API key for authentication (see [Bedrock API keys](https://aws.amazon.com/blogs/machine-learning/accelerate-ai-development-with-amazon-bedrock-api-keys/)) |
| `BASH_DEFAULT_TIMEOUT_MS` | Default timeout for long-running bash commands |
| `BASH_MAX_TIMEOUT_MS` | Maximum timeout the model can set for long-running bash commands |
| `BASH_MAX_OUTPUT_LENGTH` | Maximum number of characters in bash outputs before they are middle-truncated |
| `CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR` | Return to the original working directory after each Bash command |
| `CLAUDE_CODE_API_KEY_HELPER_TTL_MS` | Interval in milliseconds at which credentials should be refreshed (when using `apiKeyHelper`) |
| `CLAUDE_CODE_IDE_SKIP_AUTO_INSTALL` | Skip auto-installation of IDE extensions |
| `CLAUDE_CODE_MAX_OUTPUT_TOKENS` | Set the maximum number of output tokens for most requests |
| `CLAUDE_CODE_USE_BEDROCK` | Use [Bedrock](./en/docs/claude-code/amazon-bedrock/index.md) |
| `CLAUDE_CODE_USE_VERTEX` | Use [Vertex](./en/docs/claude-code/google-vertex-ai/index.md) |
| `CLAUDE_CODE_SKIP_BEDROCK_AUTH` | Skip AWS authentication for Bedrock (e.g. when using an LLM gateway) |
| `CLAUDE_CODE_SKIP_VERTEX_AUTH` | Skip Google authentication for Vertex (e.g. when using an LLM gateway) |
| `CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC` | Equivalent of setting `DISABLE_AUTOUPDATER`, `DISABLE_BUG_COMMAND`, `DISABLE_ERROR_REPORTING`, and `DISABLE_TELEMETRY` |
| `CLAUDE_CODE_DISABLE_TERMINAL_TITLE` | Set to `1` to disable automatic terminal title updates based on conversation context |
| `DISABLE_AUTOUPDATER` | Set to `1` to disable automatic updates. This takes precedence over the `autoUpdates` configuration setting. |
| `DISABLE_BUG_COMMAND` | Set to `1` to disable the `/bug` command |
| `DISABLE_COST_WARNINGS` | Set to `1` to disable cost warning messages |
| `DISABLE_ERROR_REPORTING` | Set to `1` to opt out of Sentry error reporting |
| `DISABLE_NON_ESSENTIAL_MODEL_CALLS` | Set to `1` to disable model calls for non-critical paths like flavor text |
| `DISABLE_TELEMETRY` | Set to `1` to opt out of Statsig telemetry (note that Statsig events do not include user data like code, file paths, or bash commands) |
| `HTTP_PROXY` | Specify HTTP proxy server for network connections |
| `HTTPS_PROXY` | Specify HTTPS proxy server for network connections |
| `MAX_THINKING_TOKENS` | Force a thinking for the model budget |
| `MCP_TIMEOUT` | Timeout in milliseconds for MCP server startup |
| `MCP_TOOL_TIMEOUT` | Timeout in milliseconds for MCP tool execution |
| `MAX_MCP_OUTPUT_TOKENS` | Maximum number of tokens allowed in MCP tool responses (default: 25000) |
| `VERTEX_REGION_CLAUDE_3_5_HAIKU` | Override region for Claude 3.5 Haiku when using Vertex AI |
| `VERTEX_REGION_CLAUDE_3_5_SONNET` | Override region for Claude 3.5 Sonnet when using Vertex AI |
| `VERTEX_REGION_CLAUDE_3_7_SONNET` | Override region for Claude 3.7 Sonnet when using Vertex AI |
| `VERTEX_REGION_CLAUDE_4_0_OPUS` | Override region for Claude 4.0 Opus when using Vertex AI |
| `VERTEX_REGION_CLAUDE_4_0_SONNET` | Override region for Claude 4.0 Sonnet when using Vertex AI |


## [​](#configuration-options) Configuration options

To manage your configurations, use the following commands:


- List settings: `claude config list`

- See a setting: `claude config get <key>`

- Change a setting: `claude config set <key> <value>`

- Push to a setting (for lists): `claude config add <key> <value>`

- Remove from a setting (for lists): `claude config remove <key> <value>`

By default `config` changes your project configuration. To manage your global configuration, use the `--global` (or `-g`) flag.


### [​](#global-configuration) Global configuration

To set a global configuration, use `claude config set -g <key> <value>`:

| Key | Description | Example |
| --- | --- | --- |
| `autoUpdates` | Whether to enable automatic updates (default: `true`). When enabled, Claude Code automatically downloads and installs updates in the background. Updates are applied when you restart Claude Code. | `false` |
| `preferredNotifChannel` | Where you want to receive notifications (default: `iterm2`) | `iterm2`, `iterm2_with_bell`, `terminal_bell`, or `notifications_disabled` |
| `theme` | Color theme | `dark`, `light`, `light-daltonized`, or `dark-daltonized` |
| `verbose` | Whether to show full bash and command outputs (default: `false`) | `true` |


## [​](#tools-available-to-claude) Tools available to Claude

Claude Code has access to a set of powerful tools that help it understand and modify your codebase:

| Tool | Description | Permission Required |
| --- | --- | --- |
| **Bash** | Executes shell commands in your environment | Yes |
| **Edit** | Makes targeted edits to specific files | Yes |
| **Glob** | Finds files based on pattern matching | No |
| **Grep** | Searches for patterns in file contents | No |
| **LS** | Lists files and directories | No |
| **MultiEdit** | Performs multiple edits on a single file atomically | Yes |
| **NotebookEdit** | Modifies Jupyter notebook cells | Yes |
| **NotebookRead** | Reads and displays Jupyter notebook contents | No |
| **Read** | Reads the contents of files | No |
| **Task** | Runs a sub-agent to handle complex, multi-step tasks | No |
| **TodoWrite** | Creates and manages structured task lists | No |
| **WebFetch** | Fetches content from a specified URL | Yes |
| **WebSearch** | Performs web searches with domain filtering | Yes |
| **Write** | Creates or overwrites files | Yes |

Permission rules can be configured using `/allowed-tools` or in [permission settings](./en/docs/claude-code/settings#available-settings/index.md).


### [​](#extending-tools-with-hooks) Extending tools with hooks

You can run custom commands before or after any tool executes using
[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md).

For example, you could automatically run a Python formatter after Claude
modifies Python files, or prevent modifications to production configuration
files by blocking Write operations to certain paths.


## [​](#see-also) See also


- [Identity and Access Management](./en/docs/claude-code/iam#configuring-permissions/index.md) - Learn about Claude Code’s permission system

- [IAM and access control](./en/docs/claude-code/iam#enterprise-managed-policy-settings/index.md) - Enterprise policy management

- [Troubleshooting](./en/docs/claude-code/troubleshooting#auto-updater-issues/index.md) - Solutions for common configuration issues

Was this page helpful?

YesNo

[Analytics](./en/docs/claude-code/analytics/index.md)[Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

On this page


- [Settings files](#settings-files)

- [Available settings](#available-settings)

- [Permission settings](#permission-settings)

- [Settings precedence](#settings-precedence)

- [Environment variables](#environment-variables)

- [Configuration options](#configuration-options)

- [Global configuration](#global-configuration)

- [Tools available to Claude](#tools-available-to-claude)

- [Extending tools with hooks](#extending-tools-with-hooks)

- [See also](#see-also)

======= setup/index.md ======
Set up Claude Code - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Set up Claude Code

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#system-requirements) System requirements


- **Operating Systems**: macOS 10.15+, Ubuntu 20.04+/Debian 10+, or Windows 10+ (with WSL 1, WSL 2, or Git for Windows)

- **Hardware**: 4GB+ RAM

- **Software**: [Node.js 18+](https://nodejs.org/en/download)

- **Network**: Internet connection required for authentication and AI processing

- **Shell**: Works best in Bash, Zsh or Fish

- **Location**: [Anthropic supported countries](https://www.anthropic.com/supported-countries)


## [​](#standard-installation) Standard installation

To install Claude Code, run the following command:

````sh
npm install -g @anthropic-ai/claude-code
````

Do NOT use `sudo npm install -g` as this can lead to permission issues and security risks.
If you encounter permission errors, see [configure Claude Code](./en/docs/claude-code/troubleshooting#linux-permission-issues/index.md) for recommended solutions.

Some users may be automatically migrated to an improved installation method.
Run `claude doctor` after installation to check your installation type.

After the installation process completes, navigate to your project and start Claude Code:

````bash
cd your-awesome-project
claude
````

Claude Code offers the following authentication options:

1. **Anthropic Console**: The default option. Connect through the Anthropic Console and complete the OAuth process. Requires active billing at [console.anthropic.com](https://console.anthropic.com).
2. **Claude App (with Pro or Max plan)**: Subscribe to Claude’s [Pro or Max plan](https://www.anthropic.com/pricing) for a unified subscription that includes both Claude Code and the web interface. Get more value at the same price point while managing your account in one place. Log in with your Claude.ai account. During launch, choose the option that matches your subscription type.
3. **Enterprise platforms**: Configure Claude Code to use [Amazon Bedrock or Google Vertex AI](./en/docs/claude-code/third-party-integrations/index.md) for enterprise deployments with your existing cloud infrastructure.


## [​](#windows-setup) Windows setup

**Option 1: Claude Code within WSL**


- Both WSL 1 and WSL 2 are supported

**Option 2: Claude Code on native Windows with Git Bash**


- Requires [Git for Windows](https://git-scm.com/downloads/win)

- For portable Git installations, specify the path to your `bash.exe`:

  ````powershell
  $env:CLAUDE_CODE_GIT_BASH_PATH="C:\Program Files\Git\bin\bash.exe"
  ````


## [​](#alternative-installation-methods) Alternative installation methods

Claude Code offers multiple installation methods to suit different environments.

If you encounter any issues during installation, consult the [troubleshooting guide](./en/docs/claude-code/troubleshooting#linux-permission-issues/index.md).

Run `claude doctor` after installation to check your installation type and version.


### [​](#global-npm-installation) Global npm installation

Traditional method shown in the [install steps above](./_sites/docs.anthropic.com/en/docs/claude-code/setup#install-and-authenticate/index.md)


### [​](#local-installation) Local installation


- After global install via npm, use `claude migrate-installer` to move to local

- Avoids autoupdater npm permission issues

- Some users may be automatically migrated to this method


### [​](#native-binary-installation-alpha) Native binary installation (Alpha)


- Use `claude install` from an existing installation

- or `curl -fsSL claude.ai/install.sh | bash` for a fresh install

- Currently in alpha testing

- Platform support: macOS, Linux, Windows (via WSL)


## [​](#running-on-aws-or-gcp) Running on AWS or GCP

By default, Claude Code uses Anthropic’s API.

For details on running Claude Code on AWS or GCP, see [third-party integrations](./en/docs/claude-code/third-party-integrations/index.md).


## [​](#update-claude-code) Update Claude Code


### [​](#auto-updates) Auto updates

Claude Code automatically keeps itself up to date to ensure you have the latest features and security fixes.


- **Update checks**: Performed on startup and periodically while running

- **Update process**: Downloads and installs automatically in the background

- **Notifications**: You’ll see a notification when updates are installed

- **Applying updates**: Updates take effect the next time you start Claude Code

**Disable auto-updates:**

````bash

# Via configuration
claude config set autoUpdates false --global

# Or via environment variable
export DISABLE_AUTOUPDATER=1
````


### [​](#update-manually) Update manually

````bash
claude update
````

Was this page helpful?

YesNo

[Development containers](./en/docs/claude-code/devcontainer/index.md)[Identity and Access Management](./en/docs/claude-code/iam/index.md)

On this page


- [System requirements](#system-requirements)

- [Standard installation](#standard-installation)

- [Windows setup](#windows-setup)

- [Alternative installation methods](#alternative-installation-methods)

- [Global npm installation](#global-npm-installation)

- [Local installation](#local-installation)

- [Native binary installation (Alpha)](#native-binary-installation-alpha)

- [Running on AWS or GCP](#running-on-aws-or-gcp)

- [Update Claude Code](#update-claude-code)

- [Auto updates](#auto-updates)

- [Update manually](#update-manually)

======= slash-commands/index.md ======
Slash commands - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

Slash commands

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#built-in-slash-commands) Built-in slash commands

| Command | Purpose |
| --- | --- |
| `/add-dir` | Add additional working directories |
| `/bug` | Report bugs (sends conversation to Anthropic) |
| `/clear` | Clear conversation history |
| `/compact [instructions]` | Compact conversation with optional focus instructions |
| `/config` | View/modify configuration |
| `/cost` | Show token usage statistics |
| `/doctor` | Checks the health of your Claude Code installation |
| `/help` | Get usage help |
| `/init` | Initialize project with CLAUDE.md guide |
| `/login` | Switch Anthropic accounts |
| `/logout` | Sign out from your Anthropic account |
| `/mcp` | Manage MCP server connections and OAuth authentication |
| `/memory` | Edit CLAUDE.md memory files |
| `/model` | Select or change the AI model |
| `/permissions` | View or update [permissions](./en/docs/claude-code/iam#configuring-permissions/index.md) |
| `/pr_comments` | View pull request comments |
| `/review` | Request code review |
| `/status` | View account and system statuses |
| `/terminal-setup` | Install Shift+Enter key binding for newlines (iTerm2 and VSCode only) |
| `/vim` | Enter vim mode for alternating insert and command modes |


## [​](#custom-slash-commands) Custom slash commands

Custom slash commands allow you to define frequently-used prompts as Markdown files that Claude Code can execute. Commands are organized by scope (project-specific or personal) and support namespacing through directory structures.


### [​](#syntax) Syntax

```
/<command-name> [arguments]

```


#### [​](#parameters) Parameters

| Parameter | Description |
| --- | --- |
| `<command-name>` | Name derived from the Markdown filename (without `.md` extension) |
| `[arguments]` | Optional arguments passed to the command |


### [​](#command-types) Command types


#### [​](#project-commands) Project commands

Commands stored in your repository and shared with your team. When listed in `/help`, these commands show “(project)” after their description.

**Location**: `.claude/commands/`

In the following example, we create the `/optimize` command:

````bash

# Create a project command
mkdir -p .claude/commands
echo "Analyze this code for performance issues and suggest optimizations:" > .claude/commands/optimize.md
````


#### [​](#personal-commands) Personal commands

Commands available across all your projects. When listed in `/help`, these commands show “(user)” after their description.

**Location**: `~/.claude/commands/`

In the following example, we create the `/security-review` command:

````bash

# Create a personal command
mkdir -p ~/.claude/commands
echo "Review this code for security vulnerabilities:" > ~/.claude/commands/security-review.md
````


### [​](#features) Features


#### [​](#namespacing) Namespacing

Organize commands in subdirectories. The subdirectories determine the command’s
full name. The description will show whether the command comes from the project
directory (`.claude/commands`) or the user-level directory (`~/.claude/commands`).

Conflicts between user and project level commands are not supported. Otherwise,
multiple commands with the same base file name can coexist.

For example, a file at `.claude/commands/frontend/component.md` creates the command `/frontend:component` with description showing “(project)”.
Meanwhile, a file at `~/.claude/commands/component.md` creates the command `/component` with description showing “(user)”.


#### [​](#arguments) Arguments

Pass dynamic values to commands using the `$ARGUMENTS` placeholder.

For example:

````bash

# Command definition
echo 'Fix issue #$ARGUMENTS following our coding standards' > .claude/commands/fix-issue.md

# Usage
> /fix-issue 123
````


#### [​](#bash-command-execution) Bash command execution

Execute bash commands before the slash command runs using the `!` prefix. The output is included in the command context. You *must* include `allowed-tools` with the `Bash` tool, but you can choose the specific bash commands to allow.

For example:

````markdown
---
allowed-tools: Bash(git add:*), Bash(git status:*), Bash(git commit:*)
description: Create a git commit
---

## Context

- Current git status: !`git status`

- Current git diff (staged and unstaged changes): !`git diff HEAD`

- Current branch: !`git branch --show-current`

- Recent commits: !`git log --oneline -10`

## Your task
Based on the above changes, create a single git commit.
````


#### [​](#file-references) File references

Include file contents in commands using the `@` prefix to [reference files](./en/docs/claude-code/common-workflows#reference-files-and-directories/index.md).

For example:

````markdown

# Reference a specific file
Review the implementation in @src/utils/helpers.js

# Reference multiple files
Compare @src/old-version.js with @src/new-version.js
````


#### [​](#thinking-mode) Thinking mode

Slash commands can trigger extended thinking by including [extended thinking keywords](./en/docs/claude-code/common-workflows#use-extended-thinking/index.md).


### [​](#file-format) File format

Command files support:


- **Markdown format** (`.md` extension)

- **YAML frontmatter** for metadata:

  - `allowed-tools`: List of tools the command can use

  - `description`: Brief description of the command

  - `argument-hint`: The arguments expected for the slash command. Example: `argument-hint: add [tagId] | remove [tagId] | list`. This hint is shown to the user when auto-completing the slash command.

- **Dynamic content** with bash commands (`!`) and file references (`@`)

- **Prompt instructions** as the main content


## [​](#mcp-slash-commands) MCP slash commands

MCP servers can expose prompts as slash commands that become available in Claude Code. These commands are dynamically discovered from connected MCP servers.


### [​](#command-format) Command format

MCP commands follow the pattern:

```
/mcp__<server-name>__<prompt-name> [arguments]

```


### [​](#features-2) Features


#### [​](#dynamic-discovery) Dynamic discovery

MCP commands are automatically available when:


- An MCP server is connected and active

- The server exposes prompts through the MCP protocol

- The prompts are successfully retrieved during connection


#### [​](#arguments-2) Arguments

MCP prompts can accept arguments defined by the server:

```

# Without arguments
> /mcp__github__list_prs


# With arguments
> /mcp__github__pr_review 456
> /mcp__jira__create_issue "Bug title" high

```


#### [​](#naming-conventions) Naming conventions


- Server and prompt names are normalized

- Spaces and special characters become underscores

- Names are lowercased for consistency


### [​](#managing-mcp-connections) Managing MCP connections

Use the `/mcp` command to:


- View all configured MCP servers

- Check connection status

- Authenticate with OAuth-enabled servers

- Clear authentication tokens

- View available tools and prompts from each server


## [​](#see-also) See also


- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md) - Shortcuts, input modes, and interactive features

- [CLI reference](./en/docs/claude-code/cli-reference/index.md) - Command-line flags and options

- [Settings](./en/docs/claude-code/settings/index.md) - Configuration options

- [Memory management](./en/docs/claude-code/memory/index.md) - Managing Claude’s memory across sessions

Was this page helpful?

YesNo

[Interactive mode](./en/docs/claude-code/interactive-mode/index.md)[Hooks reference](./en/docs/claude-code/hooks/index.md)

On this page


- [Built-in slash commands](#built-in-slash-commands)

- [Custom slash commands](#custom-slash-commands)

- [Syntax](#syntax)

- [Parameters](#parameters)

- [Command types](#command-types)

- [Project commands](#project-commands)

- [Personal commands](#personal-commands)

- [Features](#features)

- [Namespacing](#namespacing)

- [Arguments](#arguments)

- [Bash command execution](#bash-command-execution)

- [File references](#file-references)

- [Thinking mode](#thinking-mode)

- [File format](#file-format)

- [MCP slash commands](#mcp-slash-commands)

- [Command format](#command-format)

- [Features](#features-2)

- [Dynamic discovery](#dynamic-discovery)

- [Arguments](#arguments-2)

- [Naming conventions](#naming-conventions)

- [Managing MCP connections](#managing-mcp-connections)

- [See also](#see-also)

======= terminal-config/index.md ======
Optimize your terminal setup - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Optimize your terminal setup

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


### [​](#themes-and-appearance) Themes and appearance

Claude cannot control the theme of your terminal. That’s handled by your terminal application. You can match Claude Code’s theme to your terminal any time via the `/config` command.


### [​](#line-breaks) Line breaks

You have several options for entering linebreaks into Claude Code:


- **Quick escape**: Type `\` followed by Enter to create a newline

- **Keyboard shortcut**: Set up a keybinding to insert a newline


#### [​](#set-up-shift%2Benter-vs-code-or-iterm2-%3A) Set up Shift+Enter (VS Code or iTerm2):

Run `/terminal-setup` within Claude Code to automatically configure Shift+Enter.


#### [​](#set-up-option%2Benter-vs-code%2C-iterm2-or-macos-terminal-app-%3A) Set up Option+Enter (VS Code, iTerm2 or macOS Terminal.app):

**For Mac Terminal.app:**

1. Open Settings → Profiles → Keyboard
2. Check “Use Option as Meta Key”

**For iTerm2 and VS Code terminal:**

1. Open Settings → Profiles → Keys
2. Under General, set Left/Right Option key to “Esc+“


### [​](#notification-setup) Notification setup

Never miss when Claude completes a task with proper notification configuration:


#### [​](#terminal-bell-notifications) Terminal bell notifications

Enable sound alerts when tasks complete:

````sh
claude config set --global preferredNotifChannel terminal_bell
````

**For macOS users**: Don’t forget to enable notification permissions in System Settings → Notifications → [Your Terminal App].


#### [​](#iterm-2-system-notifications) iTerm 2 system notifications

For iTerm 2 alerts when tasks complete:

1. Open iTerm 2 Preferences
2. Navigate to Profiles → Terminal
3. Enable “Silence bell” and Filter Alerts → “Send escape sequence-generated alerts”
4. Set your preferred notification delay

Note that these notifications are specific to iTerm 2 and not available in the default macOS Terminal.


#### [​](#custom-notification-hooks) Custom notification hooks

For advanced notification handling, you can create [notification hooks](./en/docs/claude-code/hooks#notification/index.md) to run your own logic.


### [​](#handling-large-inputs) Handling large inputs

When working with extensive code or long instructions:


- **Avoid direct pasting**: Claude Code may struggle with very long pasted content

- **Use file-based workflows**: Write content to a file and ask Claude to read it

- **Be aware of VS Code limitations**: The VS Code terminal is particularly prone to truncating long pastes


### [​](#vim-mode) Vim Mode

Claude Code supports a subset of Vim keybindings that can be enabled with `/vim` or configured via `/config`.

The supported subset includes:


- Mode switching: `Esc` (to NORMAL), `i`/`I`, `a`/`A`, `o`/`O` (to INSERT)

- Navigation: `h`/`j`/`k`/`l`, `w`/`e`/`b`, `0`/`$`/`^`, `gg`/`G`

- Editing: `x`, `dw`/`de`/`db`/`dd`/`D`, `cw`/`ce`/`cb`/`cc`/`C`, `.` (repeat)

Was this page helpful?

YesNo

[Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)[Memory management](./en/docs/claude-code/memory/index.md)

On this page


- [Themes and appearance](#themes-and-appearance)

- [Line breaks](#line-breaks)

- [Set up Shift+Enter (VS Code or iTerm2):](#set-up-shift%2Benter-vs-code-or-iterm2-%3A)

- [Set up Option+Enter (VS Code, iTerm2 or macOS Terminal.app):](#set-up-option%2Benter-vs-code%2C-iterm2-or-macos-terminal-app-%3A)

- [Notification setup](#notification-setup)

- [Terminal bell notifications](#terminal-bell-notifications)

- [iTerm 2 system notifications](#iterm-2-system-notifications)

- [Custom notification hooks](#custom-notification-hooks)

- [Handling large inputs](#handling-large-inputs)

- [Vim Mode](#vim-mode)

======= third-party-integrations/index.md ======
Enterprise deployment overview - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Enterprise deployment overview

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

This page provides an overview of available deployment options and helps you choose the right configuration for your organization.


## [​](#provider-comparison) Provider comparison

| Feature | Anthropic | Amazon Bedrock | Google Vertex AI |
| --- | --- | --- | --- |
| Regions | Supported [countries](https://www.anthropic.com/supported-countries) | Multiple AWS [regions](https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html) | Multiple GCP [regions](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/locations) |
| Prompt caching | Enabled by default | Enabled by default | Enabled by default |
| Authentication | API key | AWS credentials (IAM) | GCP credentials (OAuth/Service Account) |
| Cost tracking | Dashboard | AWS Cost Explorer | GCP Billing |
| Enterprise features | Teams, usage monitoring | IAM policies, CloudTrail | IAM roles, Cloud Audit Logs |


## [​](#cloud-providers) Cloud providers

[## Amazon Bedrock

Use Claude models through AWS infrastructure with IAM-based authentication and AWS-native monitoring](./en/docs/claude-code/amazon-bedrock/index.md)[## Google Vertex AI

Access Claude models via Google Cloud Platform with enterprise-grade security and compliance](./en/docs/claude-code/google-vertex-ai/index.md)


## [​](#corporate-infrastructure) Corporate infrastructure

[## Corporate Proxy

Configure Claude Code to work with your organization’s proxy servers and SSL/TLS requirements](./en/docs/claude-code/corporate-proxy/index.md)[## LLM Gateway

Deploy centralized model access with usage tracking, budgeting, and audit logging](./en/docs/claude-code/llm-gateway/index.md)


## [​](#configuration-overview) Configuration overview

Claude Code supports flexible configuration options that allow you to combine different providers and infrastructure:

Understand the difference between:


- **Corporate proxy**: An HTTP/HTTPS proxy for routing traffic (set via `HTTPS_PROXY` or `HTTP_PROXY`)

- **LLM Gateway**: A service that handles authentication and provides provider-compatible endpoints (set via `ANTHROPIC_BASE_URL`, `ANTHROPIC_BEDROCK_BASE_URL`, or `ANTHROPIC_VERTEX_BASE_URL`)

Both configurations can be used in tandem.


### [​](#using-bedrock-with-corporate-proxy) Using Bedrock with corporate proxy

Route Bedrock traffic through a corporate HTTP/HTTPS proxy:

````bash

# Enable Bedrock
export CLAUDE_CODE_USE_BEDROCK=1
export AWS_REGION=us-east-1

# Configure corporate proxy
export HTTPS_PROXY='https://proxy.example.com:8080'
````


### [​](#using-bedrock-with-llm-gateway) Using Bedrock with LLM Gateway

Use a gateway service that provides Bedrock-compatible endpoints:

````bash

# Enable Bedrock
export CLAUDE_CODE_USE_BEDROCK=1

# Configure LLM gateway
export ANTHROPIC_BEDROCK_BASE_URL='https://your-llm-gateway.com/bedrock'
export CLAUDE_CODE_SKIP_BEDROCK_AUTH=1 # If gateway handles AWS auth
````


### [​](#using-vertex-ai-with-corporate-proxy) Using Vertex AI with corporate proxy

Route Vertex AI traffic through a corporate HTTP/HTTPS proxy:

````bash

# Enable Vertex
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
export ANTHROPIC_VERTEX_PROJECT_ID=your-project-id

# Configure corporate proxy
export HTTPS_PROXY='https://proxy.example.com:8080'
````


### [​](#using-vertex-ai-with-llm-gateway) Using Vertex AI with LLM Gateway

Combine Google Vertex AI models with an LLM gateway for centralized management:

````bash

# Enable Vertex
export CLAUDE_CODE_USE_VERTEX=1

# Configure LLM gateway
export ANTHROPIC_VERTEX_BASE_URL='https://your-llm-gateway.com/vertex'
export CLAUDE_CODE_SKIP_VERTEX_AUTH=1 # If gateway handles GCP auth
````


### [​](#authentication-configuration) Authentication configuration

Claude Code uses the `ANTHROPIC_AUTH_TOKEN` for both `Authorization` and `Proxy-Authorization` headers when needed. The `SKIP_AUTH` flags (`CLAUDE_CODE_SKIP_BEDROCK_AUTH`, `CLAUDE_CODE_SKIP_VERTEX_AUTH`) are used in LLM gateway scenarios where the gateway handles provider authentication.


## [​](#choosing-the-right-deployment-configuration) Choosing the right deployment configuration

Consider these factors when selecting your deployment approach:


### [​](#direct-provider-access) Direct provider access

Best for organizations that:


- Want the simplest setup

- Have existing AWS or GCP infrastructure

- Need provider-native monitoring and compliance


### [​](#corporate-proxy) Corporate proxy

Best for organizations that:


- Have existing corporate proxy requirements

- Need traffic monitoring and compliance

- Must route all traffic through specific network paths


### [​](#llm-gateway) LLM Gateway

Best for organizations that:


- Need usage tracking across teams

- Want to dynamically switch between models

- Require custom rate limiting or budgets

- Need centralized authentication management


## [​](#debugging) Debugging

When debugging your deployment:


- Use the `claude /status` [slash command](./en/docs/claude-code/slash-commands/index.md). This command provides observability into any applied authentication, proxy, and URL settings.

- Set environment variable `export ANTHROPIC_LOG=debug` to log requests.


## [​](#best-practices-for-organizations) Best practices for organizations

1. We strongly recommend investing in documentation so that Claude Code understands your codebase. Many organizations make a `CLAUDE.md` file (which we also refer to as memory) in the root of the repository that contains the system architecture, how to run tests and other common commands, and best practices for contributing to the codebase. This file is typically checked into source control so that all users can benefit from it. [Learn more](./en/docs/claude-code/memory/index.md).
2. If you have a custom development environment, we find that creating a “one click” way to install Claude Code is key to growing adoption across an organization.
3. Encourage new users to try Claude Code for codebase Q&A, or on smaller bug fixes or feature requests. Ask Claude Code to make a plan. Check Claude’s suggestions and give feedback if it’s off-track. Over time, as users understand this new paradigm better, then they’ll be more effective at letting Claude Code run more agentically.
4. Security teams can configure managed permissions for what Claude Code is and is not allowed to do, which cannot be overwritten by local configuration. [Learn more](./en/docs/claude-code/security/index.md).
5. MCP is a great way to give Claude Code more information, such as connecting to ticket management systems or error logs. We recommend that one central team configures MCP servers and checks a `.mcp.json` configuration into the codebase so that all users benefit. [Learn more](./en/docs/claude-code/mcp/index.md).

At Anthropic, we trust Claude Code to power development across every Anthropic codebase. We hope you enjoy using Claude Code as much as we do!


## [​](#next-steps) Next steps


- [Set up Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md) for AWS-native deployment

- [Configure Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md) for GCP deployment

- [Implement Corporate Proxy](./en/docs/claude-code/corporate-proxy/index.md) for network requirements

- [Deploy LLM Gateway](./en/docs/claude-code/llm-gateway/index.md) for enterprise management

- [Settings](./en/docs/claude-code/settings/index.md) for configuration options and environment variables

Was this page helpful?

YesNo

[Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)[Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

On this page


- [Provider comparison](#provider-comparison)

- [Cloud providers](#cloud-providers)

- [Corporate infrastructure](#corporate-infrastructure)

- [Configuration overview](#configuration-overview)

- [Using Bedrock with corporate proxy](#using-bedrock-with-corporate-proxy)

- [Using Bedrock with LLM Gateway](#using-bedrock-with-llm-gateway)

- [Using Vertex AI with corporate proxy](#using-vertex-ai-with-corporate-proxy)

- [Using Vertex AI with LLM Gateway](#using-vertex-ai-with-llm-gateway)

- [Authentication configuration](#authentication-configuration)

- [Choosing the right deployment configuration](#choosing-the-right-deployment-configuration)

- [Direct provider access](#direct-provider-access)

- [Corporate proxy](#corporate-proxy)

- [LLM Gateway](#llm-gateway)

- [Debugging](#debugging)

- [Best practices for organizations](#best-practices-for-organizations)

- [Next steps](#next-steps)

======= troubleshooting/index.md ======
Troubleshooting - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Troubleshooting

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#common-installation-issues) Common installation issues


### [​](#windows-installation-issues%3A-errors-in-wsl) Windows installation issues: errors in WSL

You might encounter the following issues in WSL:

**OS/platform detection issues**: If you receive an error during installation, WSL may be using Windows `npm`. Try:


- Run `npm config set os linux` before installation

- Install with `npm install -g @anthropic-ai/claude-code --force --no-os-check` (Do NOT use `sudo`)

**Node not found errors**: If you see `exec: node: not found` when running `claude`, your WSL environment may be using a Windows installation of Node.js. You can confirm this with `which npm` and `which node`, which should point to Linux paths starting with `/usr/` rather than `/mnt/c/`. To fix this, try installing Node via your Linux distribution’s package manager or via [`nvm`](https://github.com/nvm-sh/nvm).


### [​](#linux-installation-issues%3A-permission-errors) Linux installation issues: permission errors

When installing Claude Code with npm, you may encounter permission errors if your npm global prefix is not user writable (eg. `/usr`, or `/usr/local`).


#### [​](#recommended-solution%3A-migrate-to-local-installation) Recommended solution: Migrate to local installation

The simplest solution is to migrate to a local installation:

````bash
claude migrate-installer
````

This moves Claude Code to `~/.claude/local/` and sets up an alias in your shell configuration. No `sudo` is required for future updates.

After migration, restart your shell, and then verify your installation:

````bash
which claude # Should show an alias to ~/.claude/local/claude
claude doctor # Check installation health
````


#### [​](#alternative-solution%3A-create-a-user-writable-npm-prefix-for-global-installs) Alternative solution: Create a user-writable npm prefix for global installs

You can configure npm to use a directory within your home folder:

````bash

# First, save a list of your existing global packages for later migration
npm list -g --depth=0 > ~/npm-global-packages.txt

# Create a directory for your global packages
mkdir -p ~/.npm-global

# Configure npm to use the new directory path
npm config set prefix ~/.npm-global

# Note: Replace ~/.bashrc with ~/.zshrc, ~/.profile, or other appropriate file for your shell
echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc

# Apply the new PATH setting
source ~/.bashrc

# Now reinstall Claude Code in the new location
npm install -g @anthropic-ai/claude-code

# Optional: Reinstall your previous global packages in the new location

# Look at ~/npm-global-packages.txt and install packages you want to keep
````

This solution:


- Avoids modifying system directory permissions

- Creates a clean, dedicated location for your global npm packages

- Follows security best practices


#### [​](#system-recovery%3A-if-you-have-run-commands-that-change-ownership-and-permissions-of-system-files-or-similar) System Recovery: If you have run commands that change ownership and permissions of system files or similar

If you’ve already run a command that changed system directory permissions (such as `sudo chown -R $USER:$(id -gn) /usr && sudo chmod -R u+w /usr`) and your system is now broken (for example, if you see `sudo: /usr/bin/sudo must be owned by uid 0 and have the setuid bit set`), you’ll need to perform recovery steps.


##### Ubuntu/Debian Recovery Method:

1. While rebooting, hold **SHIFT** to access the GRUB menu
2. Select “Advanced options for Ubuntu/Debian”
3. Choose the recovery mode option
4. Select “Drop to root shell prompt”
5. Remount the filesystem as writable:

   ````bash
   mount -o remount,rw /
   ````
6. Fix permissions:

   ````bash
   # Restore root ownership
   chown -R root:root /usr
   chmod -R 755 /usr
   # Ensure /usr/local is owned by your user for npm packages
   chown -R YOUR_USERNAME:YOUR_USERNAME /usr/local
   # Set setuid bit for critical binaries
   chmod u+s /usr/bin/sudo
   chmod 4755 /usr/bin/sudo
   chmod u+s /usr/bin/su
   chmod u+s /usr/bin/passwd
   chmod u+s /usr/bin/newgrp
   chmod u+s /usr/bin/gpasswd
   chmod u+s /usr/bin/chsh
   chmod u+s /usr/bin/chfn
   # Fix sudo configuration
   chown root:root /usr/libexec/sudo/sudoers.so
   chmod 4755 /usr/libexec/sudo/sudoers.so
   chown root:root /etc/sudo.conf
   chmod 644 /etc/sudo.conf
   ````
7. Reinstall affected packages (optional but recommended):

   ````bash
   # Save list of installed packages
   dpkg --get-selections > /tmp/installed_packages.txt
   # Reinstall them
   awk '{print $1}' /tmp/installed_packages.txt | xargs -r apt-get install --reinstall -y
   ````
8. Reboot:

   ````bash
   reboot
   ````


##### Alternative Live USB Recovery Method:

If the recovery mode doesn’t work, you can use a live USB:

1. Boot from a live USB (Ubuntu, Debian, or any Linux distribution)
2. Find your system partition:

   ````bash
   lsblk
   ````
3. Mount your system partition:

   ````bash
   sudo mount /dev/sdXY /mnt # replace sdXY with your actual system partition
   ````
4. If you have a separate boot partition, mount it too:

   ````bash
   sudo mount /dev/sdXZ /mnt/boot # if needed
   ````
5. Chroot into your system:

   ````bash
   # For Ubuntu/Debian:
   sudo chroot /mnt
   # For Arch-based systems:
   sudo arch-chroot /mnt
   ````
6. Follow steps 6-8 from the Ubuntu/Debian recovery method above

After restoring your system, follow the recommended solution above to set up a user-writable npm prefix.


## [​](#auto-updater-issues) Auto-updater issues

If Claude Code can’t update automatically (see [Update Claude Code](./en/docs/claude-code/setup#update-claude-code/index.md) for how updates work):


### [​](#for-permission-errors) For permission errors

This is typically due to permission issues with your npm global prefix directory. You have several options:

1. **Migrate to local installation** (recommended): Run `claude migrate-installer` to move to a local installation that avoids permission issues entirely
2. **Update manually**: Run `claude update` with appropriate permissions
3. **Fix npm permissions**: Follow the [recommended solution](./_sites/docs.anthropic.com/en/docs/claude-code/troubleshooting#recommended-solution-create-a-user-writable-npm-prefix/index.md) above (more complex)


### [​](#to-disable-auto-updates) To disable auto-updates

If you prefer to control when Claude Code updates:

````bash

# Via configuration
claude config set autoUpdates false --global

# Or via environment variable
export DISABLE_AUTOUPDATER=1
````


### [​](#to-check-your-installation) To check your installation


- **Current version and diagnostics**: Run `claude doctor`

- **Check for updates**: Run `claude update`

- **View update settings**: Run `claude config get autoUpdates --global`

- **Verify installation location**: Run `which claude` - if this shows an alias pointing to `~/.claude/local/claude`, you’re using the recommended local installation


## [​](#permissions-and-authentication) Permissions and authentication


### [​](#repeated-permission-prompts) Repeated permission prompts

If you find yourself repeatedly approving the same commands, you can allow specific tools
to run without approval using the `/permissions` command. See [Permissions docs](./en/docs/claude-code/iam#configuring-permissions/index.md).


### [​](#authentication-issues) Authentication issues

If you’re experiencing authentication problems:

1. Run `/logout` to sign out completely
2. Close Claude Code
3. Restart with `claude` and complete the authentication process again

If problems persist, try:

````bash
rm -rf ~/.config/claude-code/auth.json
claude
````

This removes your stored authentication information and forces a clean login.


## [​](#performance-and-stability) Performance and stability


### [​](#high-cpu-or-memory-usage) High CPU or memory usage

Claude Code is designed to work with most development environments, but may consume significant resources when processing large codebases. If you’re experiencing performance issues:

1. Use `/compact` regularly to reduce context size
2. Close and restart Claude Code between major tasks
3. Consider adding large build directories to your `.gitignore` file


### [​](#command-hangs-or-freezes) Command hangs or freezes

If Claude Code seems unresponsive:

1. Press Ctrl+C to attempt to cancel the current operation
2. If unresponsive, you may need to close the terminal and restart


### [​](#esc-key-not-working-in-jetbrains-intellij%2C-pycharm%2C-etc-terminals) ESC key not working in JetBrains (IntelliJ, PyCharm, etc.) terminals

If you’re using Claude Code in JetBrains terminals and the ESC key doesn’t interrupt the agent as expected, this is likely due to a keybinding clash with JetBrains’ default shortcuts.

To fix this issue:

1. Go to Settings → Tools → Terminal
2. Click the “Configure terminal keybindings” hyperlink next to “Override IDE Shortcuts”
3. Within the terminal keybindings, scroll down to “Switch focus to Editor” and delete that shortcut

This will allow the ESC key to properly function for canceling Claude Code operations instead of being captured by PyCharm’s “Switch focus to Editor” action.


## [​](#getting-more-help) Getting more help

If you’re experiencing issues not covered here:

1. Use the `/bug` command within Claude Code to report problems directly to Anthropic
2. Check the [GitHub repository](https://github.com/anthropics/claude-code) for known issues
3. Run `/doctor` to check the health of your Claude Code installation

Was this page helpful?

YesNo

[Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)[Overview](./en/docs/claude-code/third-party-integrations/index.md)

On this page


- [Common installation issues](#common-installation-issues)

- [Windows installation issues: errors in WSL](#windows-installation-issues%3A-errors-in-wsl)

- [Linux installation issues: permission errors](#linux-installation-issues%3A-permission-errors)

- [Recommended solution: Migrate to local installation](#recommended-solution%3A-migrate-to-local-installation)

- [Alternative solution: Create a user-writable npm prefix for global installs](#alternative-solution%3A-create-a-user-writable-npm-prefix-for-global-installs)

- [System Recovery: If you have run commands that change ownership and permissions of system files or similar](#system-recovery%3A-if-you-have-run-commands-that-change-ownership-and-permissions-of-system-files-or-similar)

- [Auto-updater issues](#auto-updater-issues)

- [For permission errors](#for-permission-errors)

- [To disable auto-updates](#to-disable-auto-updates)

- [To check your installation](#to-check-your-installation)

- [Permissions and authentication](#permissions-and-authentication)

- [Repeated permission prompts](#repeated-permission-prompts)

- [Authentication issues](#authentication-issues)

- [Performance and stability](#performance-and-stability)

- [High CPU or memory usage](#high-cpu-or-memory-usage)

- [Command hangs or freezes](#command-hangs-or-freezes)

- [ESC key not working in JetBrains (IntelliJ, PyCharm, etc.) terminals](#esc-key-not-working-in-jetbrains-intellij%2C-pycharm%2C-etc-terminals)

- [Getting more help](#getting-more-help)

========================================================================================
== FILE: mcp/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 18.04 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 81ec65a8892a9b45c3a5b3e0c311b8e5d80456218ad6d84fce7ecf0f8eded42f
========================================================================================
Model Context Protocol (MCP) - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Model Context Protocol (MCP)

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Model Context Protocol (MCP) is an open protocol that enables LLMs to access external tools and data sources. For more details about MCP, see the [MCP documentation](https://modelcontextprotocol.io/introduction).

Use third party MCP servers at your own risk. Make sure you trust the MCP
servers, and be especially careful when using MCP servers that talk to the
internet, as these can expose you to prompt injection risk.


## [​](#configure-mcp-servers) Configure MCP servers

1

Add an MCP stdio Server

````bash

# Basic syntax
claude mcp add <name> <command> [args...]

# Example: Adding a local server
claude mcp add my-server -e API_KEY=123 -- /path/to/server arg1 arg2

# This creates: command="/path/to/server", args=["arg1", "arg2"]
````

2

Add an MCP SSE Server

````bash

# Basic syntax
claude mcp add --transport sse <name> <url>

# Example: Adding an SSE server
claude mcp add --transport sse sse-server https://example.com/sse-endpoint

# Example: Adding an SSE server with custom headers
claude mcp add --transport sse api-server https://api.example.com/mcp --header "X-API-Key: your-key"
````

3

Add an MCP HTTP Server

````bash

# Basic syntax
claude mcp add --transport http <name> <url>

# Example: Adding a streamable HTTP server
claude mcp add --transport http http-server https://example.com/mcp

# Example: Adding an HTTP server with authentication header
claude mcp add --transport http secure-server https://api.example.com/mcp --header "Authorization: Bearer your-token"
````

4

Manage your MCP servers

````bash

# List all configured servers
claude mcp list

# Get details for a specific server
claude mcp get my-server

# Remove a server
claude mcp remove my-server
````

Tips:


- Use the `-s` or `--scope` flag to specify where the configuration is stored:

  - `local` (default): Available only to you in the current project (was called `project` in older versions)

  - `project`: Shared with everyone in the project via `.mcp.json` file

  - `user`: Available to you across all projects (was called `global` in older versions)

- Set environment variables with `-e` or `--env` flags (e.g., `-e KEY=value`)

- Configure MCP server startup timeout using the MCP\_TIMEOUT environment variable (e.g., `MCP_TIMEOUT=10000 claude` sets a 10-second timeout)

- Check MCP server status any time using the `/mcp` command within Claude Code

- MCP follows a client-server architecture where Claude Code (the client) can connect to multiple specialized servers

- Claude Code supports SSE (Server-Sent Events) and streamable HTTP servers for real-time communication

- Use `/mcp` to authenticate with remote servers that require OAuth 2.0 authentication

**Windows Users**: On native Windows (not WSL), local MCP servers that use `npx` require the `cmd /c` wrapper to ensure proper execution.

````bash

# This creates command="cmd" which Windows can execute
claude mcp add my-server -- cmd /c npx -y @some/package
````

Without the `cmd /c` wrapper, you’ll encounter “Connection closed” errors because Windows cannot directly execute `npx`.


## [​](#understanding-mcp-server-scopes) Understanding MCP server scopes

MCP servers can be configured at three different scope levels, each serving distinct purposes for managing server accessibility and sharing. Understanding these scopes helps you determine the best way to configure servers for your specific needs.


### [​](#scope-hierarchy-and-precedence) Scope hierarchy and precedence

MCP server configurations follow a clear precedence hierarchy. When servers with the same name exist at multiple scopes, the system resolves conflicts by prioritizing local-scoped servers first, followed by project-scoped servers, and finally user-scoped servers. This design ensures that personal configurations can override shared ones when needed.


### [​](#local-scope) Local scope

Local-scoped servers represent the default configuration level and are stored in your project-specific user settings. These servers remain private to you and are only accessible when working within the current project directory. This scope is ideal for personal development servers, experimental configurations, or servers containing sensitive credentials that shouldn’t be shared.

````bash

# Add a local-scoped server (default)
claude mcp add my-private-server /path/to/server

# Explicitly specify local scope
claude mcp add my-private-server -s local /path/to/server
````


### [​](#project-scope) Project scope

Project-scoped servers enable team collaboration by storing configurations in a `.mcp.json` file at your project’s root directory. This file is designed to be checked into version control, ensuring all team members have access to the same MCP tools and services. When you add a project-scoped server, Claude Code automatically creates or updates this file with the appropriate configuration structure.

````bash

# Add a project-scoped server
claude mcp add shared-server -s project /path/to/server
````

The resulting `.mcp.json` file follows a standardized format:

````json
{
"mcpServers": {
"shared-server": {
"command": "/path/to/server",
"args": [],
"env": {}
}
}
}
````

For security reasons, Claude Code prompts for approval before using project-scoped servers from `.mcp.json` files. If you need to reset these approval choices, use the `claude mcp reset-project-choices` command.


### [​](#user-scope) User scope

User-scoped servers provide cross-project accessibility, making them available across all projects on your machine while remaining private to your user account. This scope works well for personal utility servers, development tools, or services you frequently use across different projects.

````bash

# Add a user server
claude mcp add my-user-server -s user /path/to/server
````


### [​](#choosing-the-right-scope) Choosing the right scope

Select your scope based on:


- **Local scope**: Personal servers, experimental configurations, or sensitive credentials specific to one project

- **Project scope**: Team-shared servers, project-specific tools, or services required for collaboration

- **User scope**: Personal utilities needed across multiple projects, development tools, or frequently-used services


### [​](#environment-variable-expansion-in-mcp-json) Environment variable expansion in `.mcp.json`

Claude Code supports environment variable expansion in `.mcp.json` files, allowing teams to share configurations while maintaining flexibility for machine-specific paths and sensitive values like API keys.

**Supported syntax:**


- `${VAR}` - Expands to the value of environment variable `VAR`

- `${VAR:-default}` - Expands to `VAR` if set, otherwise uses `default`

**Expansion locations:**
Environment variables can be expanded in:


- `command` - The server executable path

- `args` - Command-line arguments

- `env` - Environment variables passed to the server

- `url` - For SSE/HTTP server types

- `headers` - For SSE/HTTP server authentication

**Example with variable expansion:**

````json
{
"mcpServers": {
"api-server": {
"type": "sse",
"url": "${API_BASE_URL:-https://api.example.com}/mcp",
"headers": {
"Authorization": "Bearer ${API_KEY}"
}
}
}
}
````

If a required environment variable is not set and has no default value, Claude Code will fail to parse the config.


## [​](#authenticate-with-remote-mcp-servers) Authenticate with remote MCP servers

Many remote MCP servers require authentication. Claude Code supports OAuth 2.0 authentication flow for secure connection to these servers.

1

Add a remote server requiring authentication

````bash

# Add an SSE or HTTP server that requires OAuth
claude mcp add --transport sse github-server https://api.github.com/mcp
````

2

Authenticate using the /mcp command

Within Claude Code, use the `/mcp` command to manage authentication:

```
> /mcp

```

This opens an interactive menu where you can:


- View connection status for all servers

- Authenticate with servers requiring OAuth

- Clear existing authentication

- View server capabilities

3

Complete the OAuth flow

When you select “Authenticate” for a server:

1. Your browser opens automatically to the OAuth provider
2. Complete the authentication in your browser
3. Claude Code receives and securely stores the access token
4. The server connection becomes active

Tips:


- Authentication tokens are stored securely and refreshed automatically

- Use “Clear authentication” in the `/mcp` menu to revoke access

- If your browser doesn’t open automatically, copy the provided URL

- OAuth authentication works with both SSE and HTTP transports


## [​](#connect-to-a-postgres-mcp-server) Connect to a Postgres MCP server

Suppose you want to give Claude read-only access to a PostgreSQL database for querying and schema inspection.

1

Add the Postgres MCP server

````bash
claude mcp add postgres-server /path/to/postgres-mcp-server --connection-string "postgresql://user:pass@localhost:5432/mydb"
````

2

Query your database with Claude

```
> describe the schema of our users table

```

```
> what are the most recent orders in the system?

```

```
> show me the relationship between customers and invoices

```

Tips:


- The Postgres MCP server provides read-only access for safety

- Claude can help you explore database structure and run analytical queries

- You can use this to quickly understand database schemas in unfamiliar projects

- Make sure your connection string uses appropriate credentials with minimum required permissions


## [​](#add-mcp-servers-from-json-configuration) Add MCP servers from JSON configuration

Suppose you have a JSON configuration for a single MCP server that you want to add to Claude Code.

1

Add an MCP server from JSON

````bash

# Basic syntax
claude mcp add-json <name> '<json>'

# Example: Adding a stdio server with JSON configuration
claude mcp add-json weather-api '{"type":"stdio","command":"/path/to/weather-cli","args":["--api-key","abc123"],"env":{"CACHE_DIR":"/tmp"}}'
````

2

Verify the server was added

````bash
claude mcp get weather-api
````

Tips:


- Make sure the JSON is properly escaped in your shell

- The JSON must conform to the MCP server configuration schema

- You can use `-s global` to add the server to your global configuration instead of the project-specific one


## [​](#import-mcp-servers-from-claude-desktop) Import MCP servers from Claude Desktop

Suppose you have already configured MCP servers in Claude Desktop and want to use the same servers in Claude Code without manually reconfiguring them.

1

Import servers from Claude Desktop

````bash

# Basic syntax
claude mcp add-from-claude-desktop
````

2

Select which servers to import

After running the command, you’ll see an interactive dialog that allows you to select which servers you want to import.

3

Verify the servers were imported

````bash
claude mcp list
````

Tips:


- This feature only works on macOS and Windows Subsystem for Linux (WSL)

- It reads the Claude Desktop configuration file from its standard location on those platforms

- Use the `-s global` flag to add servers to your global configuration

- Imported servers will have the same names as in Claude Desktop

- If servers with the same names already exist, they will get a numerical suffix (e.g., `server_1`)


## [​](#use-claude-code-as-an-mcp-server) Use Claude Code as an MCP server

Suppose you want to use Claude Code itself as an MCP server that other applications can connect to, providing them with Claude’s tools and capabilities.

1

Start Claude as an MCP server

````bash

# Basic syntax
claude mcp serve
````

2

Connect from another application

You can connect to Claude Code MCP server from any MCP client, such as Claude Desktop. If you’re using Claude Desktop, you can add the Claude Code MCP server using this configuration:

````json
{
"command": "claude",
"args": ["mcp", "serve"],
"env": {}
}
````

Tips:


- The server provides access to Claude’s tools like View, Edit, LS, etc.

- In Claude Desktop, try asking Claude to read files in a directory, make edits, and more.

- Note that this MCP server is simply exposing Claude Code’s tools to your MCP client, so your own client is responsible for implementing user confirmation for individual tool calls.


## [​](#use-mcp-resources) Use MCP resources

MCP servers can expose resources that you can reference using @ mentions, similar to how you reference files.


### [​](#reference-mcp-resources) Reference MCP resources

1

List available resources

Type `@` in your prompt to see available resources from all connected MCP servers. Resources appear alongside files in the autocomplete menu.

2

Reference a specific resource

Use the format `@server:protocol://resource/path` to reference a resource:

```
> Can you analyze @github:issue://123 and suggest a fix?

```

```
> Please review the API documentation at @docs:file://api/authentication

```

3

Multiple resource references

You can reference multiple resources in a single prompt:

```
> Compare @postgres:schema://users with @docs:file://database/user-model

```

Tips:


- Resources are automatically fetched and included as attachments when referenced

- Resource paths are fuzzy-searchable in the @ mention autocomplete

- Claude Code automatically provides tools to list and read MCP resources when servers support them

- Resources can contain any type of content that the MCP server provides (text, JSON, structured data, etc.)


## [​](#use-mcp-prompts-as-slash-commands) Use MCP prompts as slash commands

MCP servers can expose prompts that become available as slash commands in Claude Code.


### [​](#execute-mcp-prompts) Execute MCP prompts

1

Discover available prompts

Type `/` to see all available commands, including those from MCP servers. MCP prompts appear with the format `/mcp__servername__promptname`.

2

Execute a prompt without arguments

```
> /mcp__github__list_prs

```

3

Execute a prompt with arguments

Many prompts accept arguments. Pass them space-separated after the command:

```
> /mcp__github__pr_review 456

```

```
> /mcp__jira__create_issue "Bug in login flow" high

```

Tips:


- MCP prompts are dynamically discovered from connected servers

- Arguments are parsed based on the prompt’s defined parameters

- Prompt results are injected directly into the conversation

- Server and prompt names are normalized (spaces become underscores)

Was this page helpful?

YesNo

[GitHub Actions](./en/docs/claude-code/github-actions/index.md)[Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)

On this page


- [Configure MCP servers](#configure-mcp-servers)

- [Understanding MCP server scopes](#understanding-mcp-server-scopes)

- [Scope hierarchy and precedence](#scope-hierarchy-and-precedence)

- [Local scope](#local-scope)

- [Project scope](#project-scope)

- [User scope](#user-scope)

- [Choosing the right scope](#choosing-the-right-scope)

- [Environment variable expansion in .mcp.json](#environment-variable-expansion-in-mcp-json)

- [Authenticate with remote MCP servers](#authenticate-with-remote-mcp-servers)

- [Connect to a Postgres MCP server](#connect-to-a-postgres-mcp-server)

- [Add MCP servers from JSON configuration](#add-mcp-servers-from-json-configuration)

- [Import MCP servers from Claude Desktop](#import-mcp-servers-from-claude-desktop)

- [Use Claude Code as an MCP server](#use-claude-code-as-an-mcp-server)

- [Use MCP resources](#use-mcp-resources)

- [Reference MCP resources](#reference-mcp-resources)

- [Use MCP prompts as slash commands](#use-mcp-prompts-as-slash-commands)

- [Execute MCP prompts](#execute-mcp-prompts)

========================================================================================
== FILE: memory/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 7.40 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: aa407a590329875aaeabb152e59c91df0769240a762f9926241909536acf43f2
========================================================================================
Manage Claude's memory - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Manage Claude's memory

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code can remember your preferences across sessions, like style guidelines and common commands in your workflow.


## [​](#determine-memory-type) Determine memory type

Claude Code offers three memory locations, each serving a different purpose:

| Memory Type | Location | Purpose | Use Case Examples |
| --- | --- | --- | --- |
| **Project memory** | `./CLAUDE.md` | Team-shared instructions for the project | Project architecture, coding standards, common workflows |
| **User memory** | `~/.claude/CLAUDE.md` | Personal preferences for all projects | Code styling preferences, personal tooling shortcuts |
| **Project memory (local)** | `./CLAUDE.local.md` | Personal project-specific preferences | *(Deprecated, see below)* Your sandbox URLs, preferred test data |

All memory files are automatically loaded into Claude Code’s context when launched.


## [​](#claude-md-imports) CLAUDE.md imports

CLAUDE.md files can import additional files using `@path/to/import` syntax. The following example imports 3 files:

```
See @README for project overview and @package.json for available npm commands for this project.


# Additional Instructions

- git workflow @docs/git-instructions.md

```

Both relative and absolute paths are allowed. In particular, importing files in user’s home dir is a convenient way for your team members to provide individual instructions that are not checked into the repository. Previously CLAUDE.local.md served a similar purpose, but is now deprecated in favor of imports since they work better across multiple git worktrees.

```

# Individual Preferences

- @~/.claude/my-project-instructions.md

```

To avoid potential collisions, imports are not evaluated inside markdown code spans and code blocks.

```
This code span will not be treated as an import: `@anthropic-ai/claude-code`

```

Imported files can recursively import additional files, with a max-depth of 5 hops. You can see what memory files are loaded by running `/memory` command.


## [​](#how-claude-looks-up-memories) How Claude looks up memories

Claude Code reads memories recursively: starting in the cwd, Claude Code recurses up to (but not including) the root directory */* and reads any CLAUDE.md or CLAUDE.local.md files it finds. This is especially convenient when working in large repositories where you run Claude Code in *foo/bar/*, and have memories in both *foo/CLAUDE.md* and *foo/bar/CLAUDE.md*.

Claude will also discover CLAUDE.md nested in subtrees under your current working directory. Instead of loading them at launch, they are only included when Claude reads files in those subtrees.


## [​](#quickly-add-memories-with-the-%23-shortcut) Quickly add memories with the `#` shortcut

The fastest way to add a memory is to start your input with the `#` character:

```

# Always use descriptive variable names

```

You’ll be prompted to select which memory file to store this in.


## [​](#directly-edit-memories-with-%2Fmemory) Directly edit memories with `/memory`

Use the `/memory` slash command during a session to open any memory file in your system editor for more extensive additions or organization.


## [​](#set-up-project-memory) Set up project memory

Suppose you want to set up a CLAUDE.md file to store important project information, conventions, and frequently used commands.

Bootstrap a CLAUDE.md for your codebase with the following command:

```
> /init 

```

Tips:


- Include frequently used commands (build, test, lint) to avoid repeated searches

- Document code style preferences and naming conventions

- Add important architectural patterns specific to your project

- CLAUDE.md memories can be used for both instructions shared with your team and for your individual preferences.


## [​](#memory-best-practices) Memory best practices


- **Be specific**: “Use 2-space indentation” is better than “Format code properly”.

- **Use structure to organize**: Format each individual memory as a bullet point and group related memories under descriptive markdown headings.

- **Review periodically**: Update memories as your project evolves to ensure Claude is always using the most up to date information and context.

Was this page helpful?

YesNo

[Terminal configuration](./en/docs/claude-code/terminal-config/index.md)[CLI reference](./en/docs/claude-code/cli-reference/index.md)

On this page


- [Determine memory type](#determine-memory-type)

- [CLAUDE.md imports](#claude-md-imports)

- [How Claude looks up memories](#how-claude-looks-up-memories)

- [Quickly add memories with the # shortcut](#quickly-add-memories-with-the-%23-shortcut)

- [Directly edit memories with /memory](#directly-edit-memories-with-%2Fmemory)

- [Set up project memory](#set-up-project-memory)

- [Memory best practices](#memory-best-practices)

========================================================================================
== FILE: monitoring-usage/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 24.15 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 9fdfe623b48d5d5450343432a7b1fe0aa0a41375d8d40ab8378ceda414d48a45
========================================================================================
Monitoring - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Monitoring

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code supports OpenTelemetry (OTel) metrics and events for monitoring and observability.

All metrics are time series data exported via OpenTelemetry’s standard metrics protocol, and events are exported via OpenTelemetry’s logs/events protocol. It is the user’s responsibility to ensure their metrics and logs backends are properly configured and that the aggregation granularity meets their monitoring requirements.

OpenTelemetry support is currently in beta and details are subject to change.


## [​](#quick-start) Quick Start

Configure OpenTelemetry using environment variables:

````bash

# 1. Enable telemetry
export CLAUDE_CODE_ENABLE_TELEMETRY=1

# 2. Choose exporters (both are optional - configure only what you need)
export OTEL_METRICS_EXPORTER=otlp # Options: otlp, prometheus, console
export OTEL_LOGS_EXPORTER=otlp # Options: otlp, console

# 3. Configure OTLP endpoint (for OTLP exporter)
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# 4. Set authentication (if required)
export OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer your-token"

# 5. For debugging: reduce export intervals
export OTEL_METRIC_EXPORT_INTERVAL=10000 # 10 seconds (default: 60000ms)
export OTEL_LOGS_EXPORT_INTERVAL=5000 # 5 seconds (default: 5000ms)

# 6. Run Claude Code
claude
````

The default export intervals are 60 seconds for metrics and 5 seconds for logs. During setup, you may want to use shorter intervals for debugging purposes. Remember to reset these for production use.

For full configuration options, see the [OpenTelemetry specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#configuration-options).


## [​](#administrator-configuration) Administrator Configuration

Administrators can configure OpenTelemetry settings for all users through the managed settings file. This allows for centralized control of telemetry settings across an organization. See the [settings precedence](./en/docs/claude-code/settings#settings-precedence/index.md) for more information about how settings are applied.

The managed settings file is located at:


- macOS: `/Library/Application Support/ClaudeCode/managed-settings.json`

- Linux and WSL: `/etc/claude-code/managed-settings.json`

- Windows: `C:\ProgramData\ClaudeCode\managed-settings.json`

Example managed settings configuration:

````json
{
"env": {
"CLAUDE_CODE_ENABLE_TELEMETRY": "1",
"OTEL_METRICS_EXPORTER": "otlp",
"OTEL_LOGS_EXPORTER": "otlp",
"OTEL_EXPORTER_OTLP_PROTOCOL": "grpc",
"OTEL_EXPORTER_OTLP_ENDPOINT": "http://collector.company.com:4317",
"OTEL_EXPORTER_OTLP_HEADERS": "Authorization=Bearer company-token"
}
}
````

Managed settings can be distributed via MDM (Mobile Device Management) or other device management solutions. Environment variables defined in the managed settings file have high precedence and cannot be overridden by users.


## [​](#configuration-details) Configuration Details


### [​](#common-configuration-variables) Common Configuration Variables

| Environment Variable | Description | Example Values |
| --- | --- | --- |
| `CLAUDE_CODE_ENABLE_TELEMETRY` | Enables telemetry collection (required) | `1` |
| `OTEL_METRICS_EXPORTER` | Metrics exporter type(s) (comma-separated) | `console`, `otlp`, `prometheus` |
| `OTEL_LOGS_EXPORTER` | Logs/events exporter type(s) (comma-separated) | `console`, `otlp` |
| `OTEL_EXPORTER_OTLP_PROTOCOL` | Protocol for OTLP exporter (all signals) | `grpc`, `http/json`, `http/protobuf` |
| `OTEL_EXPORTER_OTLP_ENDPOINT` | OTLP collector endpoint (all signals) | `http://localhost:4317` |
| `OTEL_EXPORTER_OTLP_METRICS_PROTOCOL` | Protocol for metrics (overrides general) | `grpc`, `http/json`, `http/protobuf` |
| `OTEL_EXPORTER_OTLP_METRICS_ENDPOINT` | OTLP metrics endpoint (overrides general) | `http://localhost:4318/v1/metrics` |
| `OTEL_EXPORTER_OTLP_LOGS_PROTOCOL` | Protocol for logs (overrides general) | `grpc`, `http/json`, `http/protobuf` |
| `OTEL_EXPORTER_OTLP_LOGS_ENDPOINT` | OTLP logs endpoint (overrides general) | `http://localhost:4318/v1/logs` |
| `OTEL_EXPORTER_OTLP_HEADERS` | Authentication headers for OTLP | `Authorization=Bearer token` |
| `OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY` | Client key for mTLS authentication | Path to client key file |
| `OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE` | Client certificate for mTLS authentication | Path to client cert file |
| `OTEL_METRIC_EXPORT_INTERVAL` | Export interval in milliseconds (default: 60000) | `5000`, `60000` |
| `OTEL_LOGS_EXPORT_INTERVAL` | Logs export interval in milliseconds (default: 5000) | `1000`, `10000` |
| `OTEL_LOG_USER_PROMPTS` | Enable logging of user prompt content (default: disabled) | `1` to enable |


### [​](#metrics-cardinality-control) Metrics Cardinality Control

The following environment variables control which attributes are included in metrics to manage cardinality:

| Environment Variable | Description | Default Value | Example to Disable |
| --- | --- | --- | --- |
| `OTEL_METRICS_INCLUDE_SESSION_ID` | Include session.id attribute in metrics | `true` | `false` |
| `OTEL_METRICS_INCLUDE_VERSION` | Include app.version attribute in metrics | `false` | `true` |
| `OTEL_METRICS_INCLUDE_ACCOUNT_UUID` | Include user.account\_uuid attribute in metrics | `true` | `false` |

These variables help control the cardinality of metrics, which affects storage requirements and query performance in your metrics backend. Lower cardinality generally means better performance and lower storage costs but less granular data for analysis.


### [​](#dynamic-headers) Dynamic Headers

For enterprise environments that require dynamic authentication, you can configure a script to generate headers dynamically:


#### [​](#settings-configuration) Settings Configuration

Add to your `.claude/settings.json`:

````json
{
"otelHeadersHelper": "/bin/generate_opentelemetry_headers.sh"
}
````


#### [​](#script-requirements) Script Requirements

The script must output valid JSON with string key-value pairs representing HTTP headers:

````bash
#!/bin/bash

# Example: Multiple headers
echo "{\"Authorization\": \"Bearer $(get-token.sh)\", \"X-API-Key\": \"$(get-api-key.sh)\"}"
````


#### [​](#important-limitations) Important Limitations

**Headers are fetched only at startup, not during runtime.** This is due to OpenTelemetry exporter architecture limitations.

For scenarios requiring frequent token refresh, use an OpenTelemetry Collector as a proxy that can refresh its own headers.


### [​](#multi-team-organization-support) Multi-Team Organization Support

Organizations with multiple teams or departments can add custom attributes to distinguish between different groups using the `OTEL_RESOURCE_ATTRIBUTES` environment variable:

````bash

# Add custom attributes for team identification
export OTEL_RESOURCE_ATTRIBUTES="department=engineering,team.id=platform,cost_center=eng-123"
````

These custom attributes will be included in all metrics and events, allowing you to:


- Filter metrics by team or department

- Track costs per cost center

- Create team-specific dashboards

- Set up alerts for specific teams


### [​](#example-configurations) Example Configurations

````bash

# Console debugging (1-second intervals)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console
export OTEL_METRIC_EXPORT_INTERVAL=1000

# OTLP/gRPC
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Prometheus
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=prometheus

# Multiple exporters
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console,otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=http/json

# Different endpoints/backends for metrics and logs
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_LOGS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf
export OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://metrics.company.com:4318
export OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://logs.company.com:4317

# Metrics only (no events/logs)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Events/logs only (no metrics)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_LOGS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
````


## [​](#available-metrics-and-events) Available Metrics and Events


### [​](#standard-attributes) Standard Attributes

All metrics and events share these standard attributes:

| Attribute | Description | Controlled By |
| --- | --- | --- |
| `session.id` | Unique session identifier | `OTEL_METRICS_INCLUDE_SESSION_ID` (default: true) |
| `app.version` | Current Claude Code version | `OTEL_METRICS_INCLUDE_VERSION` (default: false) |
| `organization.id` | Organization UUID (when authenticated) | Always included when available |
| `user.account_uuid` | Account UUID (when authenticated) | `OTEL_METRICS_INCLUDE_ACCOUNT_UUID` (default: true) |
| `terminal.type` | Terminal type (e.g., `iTerm.app`, `vscode`, `cursor`, `tmux`) | Always included when detected |


### [​](#metrics) Metrics

Claude Code exports the following metrics:

| Metric Name | Description | Unit |
| --- | --- | --- |
| `claude_code.session.count` | Count of CLI sessions started | count |
| `claude_code.lines_of_code.count` | Count of lines of code modified | count |
| `claude_code.pull_request.count` | Number of pull requests created | count |
| `claude_code.commit.count` | Number of git commits created | count |
| `claude_code.cost.usage` | Cost of the Claude Code session | USD |
| `claude_code.token.usage` | Number of tokens used | tokens |
| `claude_code.code_edit_tool.decision` | Count of code editing tool permission decisions | count |
| `claude_code.active_time.total` | Total active time in seconds | s |


### [​](#metric-details) Metric Details


#### [​](#session-counter) Session Counter

Incremented at the start of each session.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


#### [​](#lines-of-code-counter) Lines of Code Counter

Incremented when code is added or removed.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `type`: (`"added"`, `"removed"`)


#### [​](#pull-request-counter) Pull Request Counter

Incremented when creating pull requests via Claude Code.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


#### [​](#commit-counter) Commit Counter

Incremented when creating git commits via Claude Code.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


#### [​](#cost-counter) Cost Counter

Incremented after each API request.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `model`: Model identifier (e.g., “claude-3-5-sonnet-20241022”)


#### [​](#token-counter) Token Counter

Incremented after each API request.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `type`: (`"input"`, `"output"`, `"cacheRead"`, `"cacheCreation"`)

- `model`: Model identifier (e.g., “claude-3-5-sonnet-20241022”)


#### [​](#code-edit-tool-decision-counter) Code Edit Tool Decision Counter

Incremented when user accepts or rejects Edit, MultiEdit, Write, or NotebookEdit tool usage.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `tool`: Tool name (`"Edit"`, `"MultiEdit"`, `"Write"`, `"NotebookEdit"`)

- `decision`: User decision (`"accept"`, `"reject"`)

- `language`: Programming language of the edited file (e.g., `"TypeScript"`, `"Python"`, `"JavaScript"`, `"Markdown"`). Returns `"unknown"` for unrecognized file extensions.


#### [​](#active-time-counter) Active Time Counter

Tracks actual time spent actively using Claude Code (not idle time). This metric is incremented during user interactions such as typing prompts or receiving responses.

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)


### [​](#events) Events

Claude Code exports the following events via OpenTelemetry logs/events (when `OTEL_LOGS_EXPORTER` is configured):


#### [​](#user-prompt-event) User Prompt Event

Logged when a user submits a prompt.

**Event Name**: `claude_code.user_prompt`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"user_prompt"`

- `event.timestamp`: ISO 8601 timestamp

- `prompt_length`: Length of the prompt

- `prompt`: Prompt content (redacted by default, enable with `OTEL_LOG_USER_PROMPTS=1`)


#### [​](#tool-result-event) Tool Result Event

Logged when a tool completes execution.

**Event Name**: `claude_code.tool_result`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"tool_result"`

- `event.timestamp`: ISO 8601 timestamp

- `tool_name`: Name of the tool

- `success`: `"true"` or `"false"`

- `duration_ms`: Execution time in milliseconds

- `error`: Error message (if failed)

- `decision`: Either `"accept"` or `"reject"`

- `source`: Decision source - `"config"`, `"user_permanent"`, `"user_temporary"`, `"user_abort"`, or `"user_reject"`

- `tool_parameters`: JSON string containing tool-specific parameters (when available)

  - For Bash tool: includes `bash_command`, `full_command`, `timeout`, `description`, `sandbox`


#### [​](#api-request-event) API Request Event

Logged for each API request to Claude.

**Event Name**: `claude_code.api_request`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"api_request"`

- `event.timestamp`: ISO 8601 timestamp

- `model`: Model used (e.g., “claude-3-5-sonnet-20241022”)

- `cost_usd`: Estimated cost in USD

- `duration_ms`: Request duration in milliseconds

- `input_tokens`: Number of input tokens

- `output_tokens`: Number of output tokens

- `cache_read_tokens`: Number of tokens read from cache

- `cache_creation_tokens`: Number of tokens used for cache creation


#### [​](#api-error-event) API Error Event

Logged when an API request to Claude fails.

**Event Name**: `claude_code.api_error`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"api_error"`

- `event.timestamp`: ISO 8601 timestamp

- `model`: Model used (e.g., “claude-3-5-sonnet-20241022”)

- `error`: Error message

- `status_code`: HTTP status code (if applicable)

- `duration_ms`: Request duration in milliseconds

- `attempt`: Attempt number (for retried requests)


#### [​](#tool-decision-event) Tool Decision Event

Logged when a tool permission decision is made (accept/reject).

**Event Name**: `claude_code.tool_decision`

**Attributes**:


- All [standard attributes](./_sites/docs.anthropic.com/en/docs/claude-code/monitoring-usage#standard-attributes/index.md)

- `event.name`: `"tool_decision"`

- `event.timestamp`: ISO 8601 timestamp

- `tool_name`: Name of the tool (e.g., “Read”, “Edit”, “MultiEdit”, “Write”, “NotebookEdit”, etc.)

- `decision`: Either `"accept"` or `"reject"`

- `source`: Decision source - `"config"`, `"user_permanent"`, `"user_temporary"`, `"user_abort"`, or `"user_reject"`


## [​](#interpreting-metrics-and-events-data) Interpreting Metrics and Events Data

The metrics exported by Claude Code provide valuable insights into usage patterns and productivity. Here are some common visualizations and analyses you can create:


### [​](#usage-monitoring) Usage Monitoring

| Metric | Analysis Opportunity |
| --- | --- |
| `claude_code.token.usage` | Break down by `type` (input/output), user, team, or model |
| `claude_code.session.count` | Track adoption and engagement over time |
| `claude_code.lines_of_code.count` | Measure productivity by tracking code additions/removals |
| `claude_code.commit.count` & `claude_code.pull_request.count` | Understand impact on development workflows |


### [​](#cost-monitoring) Cost Monitoring

The `claude_code.cost.usage` metric helps with:


- Tracking usage trends across teams or individuals

- Identifying high-usage sessions for optimization

Cost metrics are approximations. For official billing data, refer to your API provider (Anthropic Console, AWS Bedrock, or Google Cloud Vertex).


### [​](#alerting-and-segmentation) Alerting and Segmentation

Common alerts to consider:


- Cost spikes

- Unusual token consumption

- High session volume from specific users

All metrics can be segmented by `user.account_uuid`, `organization.id`, `session.id`, `model`, and `app.version`.


### [​](#event-analysis) Event Analysis

The event data provides detailed insights into Claude Code interactions:

**Tool Usage Patterns**: Analyze tool result events to identify:


- Most frequently used tools

- Tool success rates

- Average tool execution times

- Error patterns by tool type

**Performance Monitoring**: Track API request durations and tool execution times to identify performance bottlenecks.


## [​](#backend-considerations) Backend Considerations

Your choice of metrics and logs backends will determine the types of analyses you can perform:


### [​](#for-metrics%3A) For Metrics:


- **Time series databases (e.g., Prometheus)**: Rate calculations, aggregated metrics

- **Columnar stores (e.g., ClickHouse)**: Complex queries, unique user analysis

- **Full-featured observability platforms (e.g., Honeycomb, Datadog)**: Advanced querying, visualization, alerting


### [​](#for-events%2Flogs%3A) For Events/Logs:


- **Log aggregation systems (e.g., Elasticsearch, Loki)**: Full-text search, log analysis

- **Columnar stores (e.g., ClickHouse)**: Structured event analysis

- **Full-featured observability platforms (e.g., Honeycomb, Datadog)**: Correlation between metrics and events

For organizations requiring Daily/Weekly/Monthly Active User (DAU/WAU/MAU) metrics, consider backends that support efficient unique value queries.


## [​](#service-information) Service Information

All metrics and events are exported with the following resource attributes:


- `service.name`: `claude-code`

- `service.version`: Current Claude Code version

- `os.type`: Operating system type (e.g., `linux`, `darwin`, `windows`)

- `os.version`: Operating system version string

- `host.arch`: Host architecture (e.g., `amd64`, `arm64`)

- `wsl.version`: WSL version number (only present when running on Windows Subsystem for Linux)

- Meter Name: `com.anthropic.claude_code`


## [​](#security%2Fprivacy-considerations) Security/Privacy Considerations


- Telemetry is opt-in and requires explicit configuration

- Sensitive information like API keys or file contents are never included in metrics or events

- User prompt content is redacted by default - only prompt length is recorded. To enable user prompt logging, set `OTEL_LOG_USER_PROMPTS=1`

Was this page helpful?

YesNo

[Security](./en/docs/claude-code/security/index.md)[Costs](./en/docs/claude-code/costs/index.md)

On this page


- [Quick Start](#quick-start)

- [Administrator Configuration](#administrator-configuration)

- [Configuration Details](#configuration-details)

- [Common Configuration Variables](#common-configuration-variables)

- [Metrics Cardinality Control](#metrics-cardinality-control)

- [Dynamic Headers](#dynamic-headers)

- [Settings Configuration](#settings-configuration)

- [Script Requirements](#script-requirements)

- [Important Limitations](#important-limitations)

- [Multi-Team Organization Support](#multi-team-organization-support)

- [Example Configurations](#example-configurations)

- [Available Metrics and Events](#available-metrics-and-events)

- [Standard Attributes](#standard-attributes)

- [Metrics](#metrics)

- [Metric Details](#metric-details)

- [Session Counter](#session-counter)

- [Lines of Code Counter](#lines-of-code-counter)

- [Pull Request Counter](#pull-request-counter)

- [Commit Counter](#commit-counter)

- [Cost Counter](#cost-counter)

- [Token Counter](#token-counter)

- [Code Edit Tool Decision Counter](#code-edit-tool-decision-counter)

- [Active Time Counter](#active-time-counter)

- [Events](#events)

- [User Prompt Event](#user-prompt-event)

- [Tool Result Event](#tool-result-event)

- [API Request Event](#api-request-event)

- [API Error Event](#api-error-event)

- [Tool Decision Event](#tool-decision-event)

- [Interpreting Metrics and Events Data](#interpreting-metrics-and-events-data)

- [Usage Monitoring](#usage-monitoring)

- [Cost Monitoring](#cost-monitoring)

- [Alerting and Segmentation](#alerting-and-segmentation)

- [Event Analysis](#event-analysis)

- [Backend Considerations](#backend-considerations)

- [For Metrics:](#for-metrics%3A)

- [For Events/Logs:](#for-events%2Flogs%3A)

- [Service Information](#service-information)

- [Security/Privacy Considerations](#security%2Fprivacy-considerations)

========================================================================================
== FILE: overview/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 6.80 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 698621de236f21f51febe6edbaffa03b292171c6c5920ae7a490720de177de0f
========================================================================================
Claude Code overview - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Getting started

Claude Code overview

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#get-started-in-30-seconds) Get started in 30 seconds

Prerequisites: [Node.js 18 or newer](https://nodejs.org/en/download/)

````bash

# Install Claude Code
npm install -g @anthropic-ai/claude-code

# Navigate to your project
cd your-awesome-project

# Start coding with Claude
claude
````

That’s it! You’re ready to start coding with Claude. [Continue with Quickstart (5 mins) →](./en/docs/claude-code/quickstart/index.md)

(Got specific setup needs or hit issues? See [advanced setup](./en/docs/claude-code/setup/index.md) or [troubleshooting](./en/docs/claude-code/troubleshooting/index.md).)


## [​](#what-claude-code-does-for-you) What Claude Code does for you


- **Build features from descriptions**: Tell Claude what you want to build in plain English. It will make a plan, write the code, and ensure it works.

- **Debug and fix issues**: Describe a bug or paste an error message. Claude Code will analyze your codebase, identify the problem, and implement a fix.

- **Navigate any codebase**: Ask anything about your team’s codebase, and get a thoughtful answer back. Claude Code maintains awareness of your entire project structure, can find up-to-date information from the web, and with [MCP](./en/docs/claude-code/mcp/index.md) can pull from external datasources like Google Drive, Figma, and Slack.

- **Automate tedious tasks**: Fix fiddly lint issues, resolve merge conflicts, and write release notes. Do all this in a single command from your developer machines, or automatically in CI.


## [​](#why-developers-love-claude-code) Why developers love Claude Code


- **Works in your terminal**: Not another chat window. Not another IDE. Claude Code meets you where you already work, with the tools you already love.

- **Takes action**: Claude Code can directly edit files, run commands, and create commits. Need more? [MCP](./en/docs/claude-code/mcp/index.md) lets Claude read your design docs in Google Drive, update your tickets in Jira, or use *your* custom developer tooling.

- **Unix philosophy**: Claude Code is composable and scriptable. `tail -f app.log | claude -p "Slack me if you see any anomalies appear in this log stream"` *works*. Your CI can run `claude -p "If there are new text strings, translate them into French and raise a PR for @lang-fr-team to review"`.

- **Enterprise-ready**: Use Anthropic’s API, or host on AWS or GCP. Enterprise-grade [security](./en/docs/claude-code/security/index.md), [privacy](./en/docs/claude-code/data-usage/index.md), and [compliance](https://trust.anthropic.com/) is built-in.


## [​](#next-steps) Next steps

[## Quickstart

See Claude Code in action with practical examples](./en/docs/claude-code/quickstart/index.md)[## Common workflows

Step-by-step guides for common workflows](./en/docs/claude-code/common-workflows/index.md)[## Troubleshooting

Solutions for common issues with Claude Code](./en/docs/claude-code/troubleshooting/index.md)[## IDE setup

Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)


## [​](#additional-resources) Additional resources

[## Host on AWS or GCP

Configure Claude Code with Amazon Bedrock or Google Vertex AI](./en/docs/claude-code/third-party-integrations/index.md)[## Settings

Customize Claude Code for your workflow](./en/docs/claude-code/settings/index.md)[## Commands

Learn about CLI commands and controls](./en/docs/claude-code/cli-reference/index.md)[## Reference implementation

Clone our development container reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer)[## Security

Discover Claude Code’s safeguards and best practices for safe usage](./en/docs/claude-code/security/index.md)[## Privacy and data usage

Understand how Claude Code handles your data](./en/docs/claude-code/data-usage/index.md)

Was this page helpful?

YesNo

[Quickstart](./en/docs/claude-code/quickstart/index.md)

On this page


- [Get started in 30 seconds](#get-started-in-30-seconds)

- [What Claude Code does for you](#what-claude-code-does-for-you)

- [Why developers love Claude Code](#why-developers-love-claude-code)

- [Next steps](#next-steps)

- [Additional resources](#additional-resources)

========================================================================================
== FILE: quickstart/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 8.60 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 69f3dd43d7ba82d328e7dd5d2440543cce7de6713ca449372584570d4fedd643
========================================================================================
Quickstart - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Getting started

Quickstart

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

This quickstart guide will have you using AI-powered coding assistance in just a few minutes. By the end, you’ll understand how to use Claude Code for common development tasks.


## [​](#before-you-begin) Before you begin

Make sure you have:


- A terminal or command prompt open

- [Node.js 18 or newer installed](https://nodejs.org/en/download/)

- A code project to work with


## [​](#step-1%3A-install-claude-code) Step 1: Install Claude Code

To install Claude Code, run the following command:

````sh
npm install -g @anthropic-ai/claude-code
````


## [​](#step-2%3A-start-your-first-session) Step 2: Start your first session

Open your terminal in any project directory and start Claude Code:

````bash
cd /path/to/your/project
claude
````

You’ll see the Claude Code prompt inside a new interactive session:

```
✻ Welcome to Claude Code!

...

> Try "create a util logging.py that..." 

```


## [​](#step-3%3A-ask-your-first-question) Step 3: Ask your first question

Let’s start with understanding your codebase. Try one of these commands:

```
> what does this project do?

```

Claude will analyze your files and provide a summary. You can also ask more specific questions:

```
> what technologies does this project use?

```

```
> where is the main entry point?

```

```
> explain the folder structure

```

Claude Code reads your files as needed - you don’t have to manually add context.


## [​](#step-4%3A-make-your-first-code-change) Step 4: Make your first code change

Now let’s make Claude Code do some actual coding. Try a simple task:

```
> add a hello world function to the main file

```

Claude Code will:

1. Find the appropriate file
2. Show you the proposed changes
3. Ask for your approval
4. Make the edit

Claude Code always asks for permission before modifying files. You can approve individual changes or enable “Accept all” mode for a session.


## [​](#step-5%3A-use-git-with-claude-code) Step 5: Use Git with Claude Code

Claude Code makes Git operations conversational:

```
> what files have I changed?

```

```
> commit my changes with a descriptive message

```

You can also prompt for more complex Git operations:

```
> create a new branch called feature/quickstart

```

```
> show me the last 5 commits

```

```
> help me resolve merge conflicts

```


## [​](#step-6%3A-fix-a-bug-or-add-a-feature) Step 6: Fix a bug or add a feature

Claude is proficient at debugging and feature implementation.

Describe what you want in natural language:

```
> add input validation to the user registration form

```

Or fix existing issues:

```
> there's a bug where users can submit empty forms - fix it

```

Claude Code will:


- Locate the relevant code

- Understand the context

- Implement a solution

- Run tests if available


## [​](#step-7%3A-test-out-other-common-workflows) Step 7: Test out other common workflows

There are a number of ways to work with Claude:

**Refactor code**

```
> refactor the authentication module to use async/await instead of callbacks

```

**Write tests**

```
> write unit tests for the calculator functions

```

**Update documentation**

```
> update the README with installation instructions

```

**Code review**

```
> review my changes and suggest improvements

```

**Remember**: Claude Code is your AI pair programmer. Talk to it like you would a helpful colleague - describe what you want to achieve, and it will help you get there.


## [​](#essential-commands) Essential commands

Here are the most important commands for daily use:

| Command | What it does | Example |
| --- | --- | --- |
| `claude` | Start interactive mode | `claude` |
| `claude "task"` | Run a one-time task | `claude "fix the build error"` |
| `claude -p "query"` | Run one-off query, then exit | `claude -p "explain this function"` |
| `claude -c` | Continue most recent conversation | `claude -c` |
| `claude -r` | Resume a previous conversation | `claude -r` |
| `claude commit` | Create a Git commit | `claude commit` |
| `/clear` | Clear conversation history | `> /clear` |
| `/help` | Show available commands | `> /help` |
| `exit` or Ctrl+C | Exit Claude Code | `> exit` |

See the [CLI reference](./en/docs/claude-code/cli-reference/index.md) for a complete list of commands.


## [​](#pro-tips-for-beginners) Pro tips for beginners

Be specific with your requests

Use step-by-step instructions

Let Claude explore first

Save time with shortcuts


## [​](#what%E2%80%99s-next%3F) What’s next?

Now that you’ve learned the basics, explore more advanced features:

[## Common workflows

Step-by-step guides for common tasks](./en/docs/claude-code/common-workflows/index.md)[## CLI reference

Master all commands and options](./en/docs/claude-code/cli-reference/index.md)[## Configuration

Customize Claude Code for your workflow](./en/docs/claude-code/settings/index.md)


## [​](#getting-help) Getting help


- **In Claude Code**: Type `/help` or ask “how do I…”

- **Documentation**: You’re here! Browse other guides

- **Community**: Join our [Discord](https://www.anthropic.com/discord) for tips and support

Was this page helpful?

YesNo

[Overview](./en/docs/claude-code/overview/index.md)[Common workflows](./en/docs/claude-code/common-workflows/index.md)

On this page


- [Before you begin](#before-you-begin)

- [Step 1: Install Claude Code](#step-1%3A-install-claude-code)

- [Step 2: Start your first session](#step-2%3A-start-your-first-session)

- [Step 3: Ask your first question](#step-3%3A-ask-your-first-question)

- [Step 4: Make your first code change](#step-4%3A-make-your-first-code-change)

- [Step 5: Use Git with Claude Code](#step-5%3A-use-git-with-claude-code)

- [Step 6: Fix a bug or add a feature](#step-6%3A-fix-a-bug-or-add-a-feature)

- [Step 7: Test out other common workflows](#step-7%3A-test-out-other-common-workflows)

- [Essential commands](#essential-commands)

- [Pro tips for beginners](#pro-tips-for-beginners)

- [What’s next?](#what%E2%80%99s-next%3F)

- [Getting help](#getting-help)

========================================================================================
== FILE: sdk/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 22.39 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 28c7f84369d61d6462f29d3155c2d95e2a80c2121e8c8fb28a4b7146f78d3b8b
========================================================================================
Claude Code SDK - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Claude Code SDK

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

The Claude Code SDK enables running Claude Code as a subprocess, providing a way to build AI-powered coding assistants and tools that leverage Claude’s capabilities.

The SDK is available for command line, TypeScript, and Python usage.


## [​](#authentication) Authentication

The Claude Code SDK supports multiple authentication methods:


### [​](#anthropic-api-key) Anthropic API key

To use the Claude Code SDK directly with Anthropic’s API, we recommend creating a dedicated API key:

1. Create an Anthropic API key in the [Anthropic Console](https://console.anthropic.com/)
2. Then, set the `ANTHROPIC_API_KEY` environment variable. We recommend storing this key securely (e.g., using a Github [secret](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions))


### [​](#third-party-api-credentials) Third-Party API credentials

The SDK also supports third-party API providers:


- **Amazon Bedrock**: Set `CLAUDE_CODE_USE_BEDROCK=1` environment variable and configure AWS credentials

- **Google Vertex AI**: Set `CLAUDE_CODE_USE_VERTEX=1` environment variable and configure Google Cloud credentials

For detailed configuration instructions for third-party providers, see the [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md) and [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md) documentation.


## [​](#basic-sdk-usage) Basic SDK usage

The Claude Code SDK allows you to use Claude Code in non-interactive mode from your applications.


### [​](#command-line) Command line

Here are a few basic examples for the command line SDK:

````bash

# Run a single prompt and exit (print mode)
$ claude -p "Write a function to calculate Fibonacci numbers"

# Using a pipe to provide stdin
$ echo "Explain this code" | claude -p

# Output in JSON format with metadata
$ claude -p "Generate a hello world function" --output-format json

# Stream JSON output as it arrives
$ claude -p "Build a React component" --output-format stream-json
````


### [​](#typescript) TypeScript

The TypeScript SDK is included in the main [`@anthropic-ai/claude-code`](https://www.npmjs.com/package/@anthropic-ai/claude-code) package on NPM:

````ts
import { query, type SDKMessage } from "@anthropic-ai/claude-code";
const messages: SDKMessage[] = [];
for await (const message of query({
prompt: "Write a haiku about foo.py",
abortController: new AbortController(),
options: {
maxTurns: 3,
},
})) {
messages.push(message);
}
console.log(messages);
````

The TypeScript SDK accepts all arguments supported by the command line SDK, as well as:

| Argument | Description | Default |
| --- | --- | --- |
| `abortController` | Abort controller | `new AbortController()` |
| `cwd` | Current working directory | `process.cwd()` |
| `executable` | Which JavaScript runtime to use | `node` when running with Node.js, `bun` when running with Bun |
| `executableArgs` | Arguments to pass to the executable | `[]` |
| `pathToClaudeCodeExecutable` | Path to the Claude Code executable | Executable that ships with `@anthropic-ai/claude-code` |


### [​](#python) Python

The Python SDK is available as [`claude-code-sdk`](https://github.com/anthropics/claude-code-sdk-python) on PyPI:

````bash
pip install claude-code-sdk
````

**Prerequisites:**


- Python 3.10+

- Node.js

- Claude Code CLI: `npm install -g @anthropic-ai/claude-code`

Basic usage:

````python
import anyio
from claude_code_sdk import query, ClaudeCodeOptions, Message
async def main():
messages: list[Message] = []
async for message in query(
prompt="Write a haiku about foo.py",
options=ClaudeCodeOptions(max_turns=3)
):
messages.append(message)
print(messages)
anyio.run(main)
````

The Python SDK accepts all arguments supported by the command line SDK through the `ClaudeCodeOptions` class:

````python
from claude_code_sdk import query, ClaudeCodeOptions
from pathlib import Path
options = ClaudeCodeOptions(
max_turns=3,
system_prompt="You are a helpful assistant",
cwd=Path("/path/to/project"), # Can be string or Path
allowed_tools=["Read", "Write", "Bash"],
permission_mode="acceptEdits"
)
async for message in query(prompt="Hello", options=options):
print(message)
````


## [​](#advanced-usage) Advanced usage

The documentation below uses the command line SDK as an example, but can also be used with the TypeScript and Python SDKs.


### [​](#multi-turn-conversations) Multi-turn conversations

For multi-turn conversations, you can resume conversations or continue from the most recent session:

````bash

# Continue the most recent conversation
$ claude --continue

# Continue and provide a new prompt
$ claude --continue "Now refactor this for better performance"

# Resume a specific conversation by session ID
$ claude --resume 550e8400-e29b-41d4-a716-446655440000

# Resume in print mode (non-interactive)
$ claude -p --resume 550e8400-e29b-41d4-a716-446655440000 "Update the tests"

# Continue in print mode (non-interactive)
$ claude -p --continue "Add error handling"
````


### [​](#custom-system-prompts) Custom system prompts

You can provide custom system prompts to guide Claude’s behavior:

````bash

# Override system prompt (only works with --print)
$ claude -p "Build a REST API" --system-prompt "You are a senior backend engineer. Focus on security, performance, and maintainability."

# System prompt with specific requirements
$ claude -p "Create a database schema" --system-prompt "You are a database architect. Use PostgreSQL best practices and include proper indexing."
````

You can also append instructions to the default system prompt:

````bash

# Append system prompt (only works with --print)
$ claude -p "Build a REST API" --append-system-prompt "After writing code, be sure to code review yourself."
````


### [​](#mcp-configuration) MCP Configuration

The Model Context Protocol (MCP) allows you to extend Claude Code with additional tools and resources from external servers. Using the `--mcp-config` flag, you can load MCP servers that provide specialized capabilities like database access, API integrations, or custom tooling.

Create a JSON configuration file with your MCP servers:

````json
{
"mcpServers": {
"filesystem": {
"command": "npx",
"args": [
"-y",
"@modelcontextprotocol/server-filesystem",
"/path/to/allowed/files"
]
},
"github": {
"command": "npx",
"args": ["-y", "@modelcontextprotocol/server-github"],
"env": {
"GITHUB_TOKEN": "your-github-token"
}
}
}
}
````

Then use it with Claude Code:

````bash

# Load MCP servers from configuration
$ claude -p "List all files in the project" --mcp-config mcp-servers.json

# Important: MCP tools must be explicitly allowed using --allowedTools

# MCP tools follow the format: mcp__$serverName__$toolName
$ claude -p "Search for TODO comments" \
--mcp-config mcp-servers.json \
--allowedTools "mcp__filesystem__read_file,mcp__filesystem__list_directory"

# Use an MCP tool for handling permission prompts in non-interactive mode
$ claude -p "Deploy the application" \
--mcp-config mcp-servers.json \
--allowedTools "mcp__permissions__approve" \
--permission-prompt-tool mcp__permissions__approve
````

When using MCP tools, you must explicitly allow them using the `--allowedTools` flag. MCP tool names follow the pattern `mcp__<serverName>__<toolName>` where:


- `serverName` is the key from your MCP configuration file

- `toolName` is the specific tool provided by that server

This security measure ensures that MCP tools are only used when explicitly permitted.

If you specify just the server name (i.e., `mcp__<serverName>`), all tools from that server will be allowed.

Glob patterns (e.g., `mcp__go*`) are not supported.


### [​](#custom-permission-prompt-tool) Custom permission prompt tool

Optionally, use `--permission-prompt-tool` to pass in an MCP tool that we will use to check whether or not the user grants the model permissions to invoke a given tool. When the model invokes a tool the following happens:

1. We first check permission settings: all [settings.json files](./en/docs/claude-code/settings/index.md), as well as `--allowedTools` and `--disallowedTools` passed into the SDK; if one of these allows or denies the tool call, we proceed with the tool call
2. Otherwise, we invoke the MCP tool you provided in `--permission-prompt-tool`

The `--permission-prompt-tool` MCP tool is passed the tool name and input, and must return a JSON-stringified payload with the result. The payload must be one of:

````ts
// tool call is allowed
{
"behavior": "allow",
"updatedInput": {...}, // updated input, or just return back the original input
}
// tool call is denied
{
"behavior": "deny",
"message": "..." // human-readable string explaining why the permission was denied
}
````

For example, a TypeScript MCP permission prompt tool implementation might look like this:

````ts
const server = new McpServer({
name: "Test permission prompt MCP Server",
version: "0.0.1",
});
server.tool(
"approval_prompt",
'Simulate a permission check - approve if the input contains "allow", otherwise deny',
{
tool_name: z.string().describe("The name of the tool requesting permission"),
input: z.object({}).passthrough().describe("The input for the tool"),
tool_use_id: z.string().optional().describe("The unique tool use request ID"),
},
async ({ tool_name, input }) => {
return {
content: [
{
type: "text",
text: JSON.stringify(
JSON.stringify(input).includes("allow")
? {
behavior: "allow",
updatedInput: input,
}
: {
behavior: "deny",
message: "Permission denied by test approval_prompt tool",
}
),
},
],
};
}
);
````

To use this tool, add your MCP server (eg. with `--mcp-config`), then invoke the SDK like so:

````sh
claude -p "..." \
--permission-prompt-tool mcp__test-server__approval_prompt \
--mcp-config my-config.json
````

Usage notes:


- Use `updatedInput` to tell the model that the permission prompt mutated its input; otherwise, set `updatedInput` to the original input, as in the example above. For example, if the tool shows a file edit diff to the user and lets them edit the diff manually, the permission prompt tool should return that updated edit.

- The payload must be JSON-stringified


## [​](#available-cli-options) Available CLI options

The SDK leverages all the CLI options available in Claude Code. Here are the key ones for SDK usage:

| Flag | Description | Example |
| --- | --- | --- |
| `--print`, `-p` | Run in non-interactive mode | `claude -p "query"` |
| `--output-format` | Specify output format (`text`, `json`, `stream-json`) | `claude -p --output-format json` |
| `--resume`, `-r` | Resume a conversation by session ID | `claude --resume abc123` |
| `--continue`, `-c` | Continue the most recent conversation | `claude --continue` |
| `--verbose` | Enable verbose logging | `claude --verbose` |
| `--max-turns` | Limit agentic turns in non-interactive mode | `claude --max-turns 3` |
| `--system-prompt` | Override system prompt (only with `--print`) | `claude --system-prompt "Custom instruction"` |
| `--append-system-prompt` | Append to system prompt (only with `--print`) | `claude --append-system-prompt "Custom instruction"` |
| `--allowedTools` | Space-separated list of allowed tools, or    string of comma-separated list of allowed tools | `claude --allowedTools mcp__slack mcp__filesystem`  `claude --allowedTools "Bash(npm install),mcp__filesystem"` |
| `--disallowedTools` | Space-separated list of denied tools, or    string of comma-separated list of denied tools | `claude --disallowedTools mcp__splunk mcp__github`  `claude --disallowedTools "Bash(git commit),mcp__github"` |
| `--mcp-config` | Load MCP servers from a JSON file | `claude --mcp-config servers.json` |
| `--permission-prompt-tool` | MCP tool for handling permission prompts (only with `--print`) | `claude --permission-prompt-tool mcp__auth__prompt` |

For a complete list of CLI options and features, see the [CLI reference](./en/docs/claude-code/cli-reference/index.md) documentation.


## [​](#output-formats) Output formats

The SDK supports multiple output formats:


### [​](#text-output-default) Text output (default)

Returns just the response text:

````bash
$ claude -p "Explain file src/components/Header.tsx"

# Output: This is a React component showing...
````


### [​](#json-output) JSON output

Returns structured data including metadata:

````bash
$ claude -p "How does the data layer work?" --output-format json
````

Response format:

````json
{
"type": "result",
"subtype": "success",
"total_cost_usd": 0.003,
"is_error": false,
"duration_ms": 1234,
"duration_api_ms": 800,
"num_turns": 6,
"result": "The response text here...",
"session_id": "abc123"
}
````


### [​](#streaming-json-output) Streaming JSON output

Streams each message as it is received:

````bash
$ claude -p "Build an application" --output-format stream-json
````

Each conversation begins with an initial `init` system message, followed by a list of user and assistant messages, followed by a final `result` system message with stats. Each message is emitted as a separate JSON object.


## [​](#message-schema) Message schema

Messages returned from the JSON API are strictly typed according to the following schema:

````ts
type SDKMessage =
// An assistant message
| {
type: "assistant";
message: Message; // from Anthropic SDK
session_id: string;
}
// A user message
| {
type: "user";
message: MessageParam; // from Anthropic SDK
session_id: string;
}
// Emitted as the last message
| {
type: "result";
subtype: "success";
duration_ms: float;
duration_api_ms: float;
is_error: boolean;
num_turns: int;
result: string;
session_id: string;
total_cost_usd: float;
}
// Emitted as the last message, when we've reached the maximum number of turns
| {
type: "result";
subtype: "error_max_turns" | "error_during_execution";
duration_ms: float;
duration_api_ms: float;
is_error: boolean;
num_turns: int;
session_id: string;
total_cost_usd: float;
}
// Emitted as the first message at the start of a conversation
| {
type: "system";
subtype: "init";
apiKeySource: string;
cwd: string;
session_id: string;
tools: string[];
mcp_servers: {
name: string;
status: string;
}[];
model: string;
permissionMode: "default" | "acceptEdits" | "bypassPermissions" | "plan";
};
````

We will soon publish these types in a JSONSchema-compatible format. We use semantic versioning for the main Claude Code package to communicate breaking changes to this format.

`Message` and `MessageParam` types are available in Anthropic SDKs. For example, see the Anthropic [TypeScript](https://github.com/anthropics/anthropic-sdk-typescript) and [Python](https://github.com/anthropics/anthropic-sdk-python/) SDKs.


## [​](#input-formats) Input formats

The SDK supports multiple input formats:


### [​](#text-input-default) Text input (default)

Input text can be provided as an argument:

````bash
$ claude -p "Explain this code"
````

Or input text can be piped via stdin:

````bash
$ echo "Explain this code" | claude -p
````


### [​](#streaming-json-input) Streaming JSON input

A stream of messages provided via `stdin` where each message represents a user turn. This allows multiple turns of a conversation without re-launching the `claude` binary and allows providing guidance to the model while it is processing a request.

Each message is a JSON ‘User message’ object, following the same format as the output message schema. Messages are formatted using the [jsonl](https://jsonlines.org/) format where each line of input is a complete JSON object. Streaming JSON input requires `-p` and `--output-format stream-json`.

Currently this is limited to text-only user messages.

````bash
$ echo '{"type":"user","message":{"role":"user","content":[{"type":"text","text":"Explain this code"}]}}' | claude -p --output-format=stream-json --input-format=stream-json --verbose
````


## [​](#examples) Examples


### [​](#simple-script-integration) Simple script integration

````bash
#!/bin/bash

# Simple function to run Claude and check exit code
run_claude() {
local prompt="$1"
local output_format="${2:-text}"
if claude -p "$prompt" --output-format "$output_format"; then
echo "Success!"
else
echo "Error: Claude failed with exit code $?" >&2
return 1
fi
}

# Usage examples
run_claude "Write a Python function to read CSV files"
run_claude "Optimize this database query" "json"
````


### [​](#processing-files-with-claude) Processing files with Claude

````bash

# Process a file through Claude
$ cat mycode.py | claude -p "Review this code for bugs"

# Process multiple files
$ for file in *.js; do
echo "Processing $file..."
claude -p "Add JSDoc comments to this file:" < "$file" > "${file}.documented"
done

# Use Claude in a pipeline
$ grep -l "TODO" *.py | while read file; do
claude -p "Fix all TODO items in this file" < "$file"
done
````


### [​](#session-management) Session management

````bash

# Start a session and capture the session ID
$ claude -p "Initialize a new project" --output-format json | jq -r '.session_id' > session.txt

# Continue with the same session
$ claude -p --resume "$(cat session.txt)" "Add unit tests"
````


## [​](#best-practices) Best practices

1. **Use JSON output format** for programmatic parsing of responses:

   ````bash
   # Parse JSON response with jq
   result=$(claude -p "Generate code" --output-format json)
   code=$(echo "$result" | jq -r '.result')
   cost=$(echo "$result" | jq -r '.cost_usd')
   ````
2. **Handle errors gracefully** - check exit codes and stderr:

   ````bash
   if ! claude -p "$prompt" 2>error.log; then
   echo "Error occurred:" >&2
   cat error.log >&2
   exit 1
   fi
   ````
3. **Use session management** for maintaining context in multi-turn conversations
4. **Consider timeouts** for long-running operations:

   ````bash
   timeout 300 claude -p "$complex_prompt" || echo "Timed out after 5 minutes"
   ````
5. **Respect rate limits** when making multiple requests by adding delays between calls


## [​](#real-world-applications) Real-world applications

The Claude Code SDK enables powerful integrations with your development workflow. One notable example is the [Claude Code GitHub Actions](./en/docs/claude-code/github-actions/index.md), which uses the SDK to provide automated code review, PR creation, and issue triage capabilities directly in your GitHub workflow.


## [​](#related-resources) Related resources


- [CLI usage and controls](./en/docs/claude-code/cli-reference/index.md) - Complete CLI documentation

- [GitHub Actions integration](./en/docs/claude-code/github-actions/index.md) - Automate your GitHub workflow with Claude

- [Common workflows](./en/docs/claude-code/common-workflows/index.md) - Step-by-step guides for common use cases

Was this page helpful?

YesNo

[Common workflows](./en/docs/claude-code/common-workflows/index.md)[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

On this page


- [Authentication](#authentication)

- [Anthropic API key](#anthropic-api-key)

- [Third-Party API credentials](#third-party-api-credentials)

- [Basic SDK usage](#basic-sdk-usage)

- [Command line](#command-line)

- [TypeScript](#typescript)

- [Python](#python)

- [Advanced usage](#advanced-usage)

- [Multi-turn conversations](#multi-turn-conversations)

- [Custom system prompts](#custom-system-prompts)

- [MCP Configuration](#mcp-configuration)

- [Custom permission prompt tool](#custom-permission-prompt-tool)

- [Available CLI options](#available-cli-options)

- [Output formats](#output-formats)

- [Text output (default)](#text-output-default)

- [JSON output](#json-output)

- [Streaming JSON output](#streaming-json-output)

- [Message schema](#message-schema)

- [Input formats](#input-formats)

- [Text input (default)](#text-input-default)

- [Streaming JSON input](#streaming-json-input)

- [Examples](#examples)

- [Simple script integration](#simple-script-integration)

- [Processing files with Claude](#processing-files-with-claude)

- [Session management](#session-management)

- [Best practices](#best-practices)

- [Real-world applications](#real-world-applications)

- [Related resources](#related-resources)

========================================================================================
== FILE: security/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 9.42 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 0ac7598fa95af8096ac8c7b3e43910813663355a2b438996a9c7b5416db9efa2
========================================================================================
Security - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Security

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#how-we-approach-security) How we approach security


### [​](#security-foundation) Security foundation

Your code’s security is paramount. Claude Code is built with security at its core, developed according to Anthropic’s comprehensive security program. Learn more and access resources (SOC 2 Type 2 report, ISO 27001 certificate, etc.) at [Anthropic Trust Center](https://trust.anthropic.com).


### [​](#permission-based-architecture) Permission-based architecture

Claude Code uses strict read-only permissions by default. When additional actions are needed (editing files, running tests, executing commands), Claude Code requests explicit permission. Users control whether to approve actions once or allow them automatically.

We designed Claude Code to be transparent and secure. For example, we require approval for `git` commands before executing them, giving you direct control. This approach enables users and organizations to configure permissions directly.

For detailed permission configuration, see [Identity and Access Management](./en/docs/claude-code/iam/index.md).


### [​](#built-in-protections) Built-in protections

To mitigate risks in agentic systems:


- **Folder access restriction**: Claude Code can only access the folder where it was started and its subfolders—it cannot go upstream to parent directories. This creates a clear security boundary, ensuring Claude Code only operates within the intended project scope

- **Prompt fatigue mitigation**: Support for allowlisting frequently used safe commands per-user, per-codebase, or per-organization

- **Accept Edits mode**: Batch accept multiple edits while maintaining permission prompts for commands with side effects


### [​](#user-responsibility) User responsibility

Claude Code only has the permissions you grant it. You’re responsible for reviewing proposed code and commands for safety before approval.


## [​](#protect-against-prompt-injection) Protect against prompt injection

Prompt injection is a technique where an attacker attempts to override or manipulate an AI assistant’s instructions by inserting malicious text. Claude Code includes several safeguards against these attacks:


### [​](#core-protections) Core protections


- **Permission system**: Sensitive operations require explicit approval

- **Context-aware analysis**: Detects potentially harmful instructions by analyzing the full request

- **Input sanitization**: Prevents command injection by processing user inputs

- **Command blocklist**: Blocks risky commands that fetch arbitrary content from the web like `curl` and `wget`


### [​](#additional-safeguards) Additional safeguards


- **Network request approval**: Tools that make network requests require user approval by default

- **Isolated context windows**: Web fetch uses a separate context window to avoid injecting potentially malicious prompts

- **Trust verification**: First-time codebase runs and new MCP servers require trust verification

- **Command injection detection**: Suspicious bash commands require manual approval even if previously allowlisted

- **Fail-closed matching**: Unmatched commands default to requiring manual approval

- **Natural language descriptions**: Complex bash commands include explanations for user understanding

**Best practices for working with untrusted content**:

1. Review suggested commands before approval
2. Avoid piping untrusted content directly to Claude
3. Verify proposed changes to critical files
4. Use virtual machines (VMs) to run scripts and make tool calls, especially when interacting with external web services
5. Report suspicious behavior with `/bug`

While these protections significantly reduce risk, no system is completely
immune to all attacks. Always maintain good security practices when working
with any AI tool.


## [​](#mcp-security) MCP security

Claude Code allows users to configure Model Context Protocol (MCP) servers. The list of allowed MCP servers is configured in your source code, as part of Claude Code settings engineers check into source control.

We encourage either writing your own MCP servers or using MCP servers from providers that you trust. You are able to configure Claude Code permissions for MCP servers. Anthropic does not manage or audit any MCP servers.


## [​](#security-best-practices) Security best practices


### [​](#working-with-sensitive-code) Working with sensitive code


- Review all suggested changes before approval

- Use project-specific permission settings for sensitive repositories

- Consider using [devcontainers](./en/docs/claude-code/devcontainer/index.md) for additional isolation

- Regularly audit your permission settings with `/permissions`


### [​](#team-security) Team security


- Use [enterprise managed policies](./en/docs/claude-code/iam#enterprise-managed-policy-settings/index.md) to enforce organizational standards

- Share approved permission configurations through version control

- Train team members on security best practices

- Monitor Claude Code usage through [OpenTelemetry metrics](./en/docs/claude-code/monitoring-usage/index.md)


### [​](#reporting-security-issues) Reporting security issues

If you discover a security vulnerability in Claude Code:

1. Do not disclose it publicly
2. Report it through our [HackerOne program](https://hackerone.com/anthropic-vdp/reports/new?type=team&report_type=vulnerability)
3. Include detailed reproduction steps
4. Allow time for us to address the issue before public disclosure


## [​](#related-resources) Related resources


- [Identity and Access Management](./en/docs/claude-code/iam/index.md) - Configure permissions and access controls

- [Monitoring usage](./en/docs/claude-code/monitoring-usage/index.md) - Track and audit Claude Code activity

- [Development containers](./en/docs/claude-code/devcontainer/index.md) - Secure, isolated environments

- [Anthropic Trust Center](https://trust.anthropic.com) - Security certifications and compliance

Was this page helpful?

YesNo

[Identity and Access Management](./en/docs/claude-code/iam/index.md)[Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

On this page


- [How we approach security](#how-we-approach-security)

- [Security foundation](#security-foundation)

- [Permission-based architecture](#permission-based-architecture)

- [Built-in protections](#built-in-protections)

- [User responsibility](#user-responsibility)

- [Protect against prompt injection](#protect-against-prompt-injection)

- [Core protections](#core-protections)

- [Additional safeguards](#additional-safeguards)

- [MCP security](#mcp-security)

- [Security best practices](#security-best-practices)

- [Working with sensitive code](#working-with-sensitive-code)

- [Team security](#team-security)

- [Reporting security issues](#reporting-security-issues)

- [Related resources](#related-resources)

========================================================================================
== FILE: settings/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 15.11 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: d9b5bcdc4102b4c2c741db1166eb3a3b873f13659124226c84a3b79f8b91b61d
========================================================================================
Claude Code settings - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Claude Code settings

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

Claude Code offers a variety of settings to configure its behavior to meet your needs. You can configure Claude Code by running the `/config` command when using the interactive REPL.


## [​](#settings-files) Settings files

The `settings.json` file is our official mechanism for configuring Claude
Code through hierarchical settings:


- **User settings** are defined in `~/.claude/settings.json` and apply to all
  projects.

- **Project settings** are saved in your project directory:

  - `.claude/settings.json` for settings that are checked into source control and shared with your team

  - `.claude/settings.local.json` for settings that are not checked in, useful for personal preferences and experimentation. Claude Code will configure git to ignore `.claude/settings.local.json` when it is created.

- For enterprise deployments of Claude Code, we also support **enterprise
  managed policy settings**. These take precedence over user and project
  settings. System administrators can deploy policies to:

  - macOS: `/Library/Application Support/ClaudeCode/managed-settings.json`

  - Linux and WSL: `/etc/claude-code/managed-settings.json`

  - Windows: `C:\ProgramData\ClaudeCode\managed-settings.json`

Example settings.json

````JSON
{
"permissions": {
"allow": [
"Bash(npm run lint)",
"Bash(npm run test:*)",
"Read(~/.zshrc)"
],
"deny": [
"Bash(curl:*)"
]
},
"env": {
"CLAUDE_CODE_ENABLE_TELEMETRY": "1",
"OTEL_METRICS_EXPORTER": "otlp"
}
}
````


### [​](#available-settings) Available settings

`settings.json` supports a number of options:

| Key | Description | Example |
| --- | --- | --- |
| `apiKeyHelper` | Custom script, to be executed in `/bin/sh`, to generate an auth value. This value will generally be sent as `X-Api-Key`, `Authorization: Bearer`, and `Proxy-Authorization: Bearer` headers for model requests | `/bin/generate_temp_api_key.sh` |
| `cleanupPeriodDays` | How long to locally retain chat transcripts (default: 30 days) | `20` |
| `env` | Environment variables that will be applied to every session | `{"FOO": "bar"}` |
| `includeCoAuthoredBy` | Whether to include the `co-authored-by Claude` byline in git commits and pull requests (default: `true`) | `false` |
| `permissions` | See table below for structure of permissions. |
| `hooks` | Configure custom commands to run before or after tool executions. See [hooks documentation](hooks) | `{"PreToolUse": {"Bash": "echo 'Running command...'"}}` |
| `model` | Override the default model to use for Claude Code | `"claude-3-5-sonnet-20241022"` |
| `forceLoginMethod` | Use `claudeai` to restrict login to Claude.ai accounts, `console` to restrict login to Anthropic Console (API usage billing) accounts | `claudeai` |
| `enableAllProjectMcpServers` | Automatically approve all MCP servers defined in project `.mcp.json` files | `true` |
| `enabledMcpjsonServers` | List of specific MCP servers from `.mcp.json` files to approve | `["memory", "github"]` |
| `disabledMcpjsonServers` | List of specific MCP servers from `.mcp.json` files to reject | `["filesystem"]` |


### [​](#permission-settings) Permission settings

| Keys | Description | Example |
| --- | --- | --- |
| `allow` | Array of [permission rules](./en/docs/claude-code/iam#configuring-permissions/index.md) to allow tool use | `[ "Bash(git diff:*)" ]` |
| `deny` | Array of [permission rules](./en/docs/claude-code/iam#configuring-permissions/index.md) to deny tool use | `[ "WebFetch", "Bash(curl:*)" ]` |
| `additionalDirectories` | Additional [working directories](iam#working-directories) that Claude has access to | `[ "../docs/" ]` |
| `defaultMode` | Default [permission mode](iam#permission-modes) when opening Claude Code | `"acceptEdits"` |
| `disableBypassPermissionsMode` | Set to `"disable"` to prevent `bypassPermissions` mode from being activated. See [managed policy settings](iam#enterprise-managed-policy-settings) | `"disable"` |


### [​](#settings-precedence) Settings precedence

Settings are applied in order of precedence:

1. Enterprise policies (see [IAM documentation](./en/docs/claude-code/iam#enterprise-managed-policy-settings/index.md))
2. Command line arguments
3. Local project settings
4. Shared project settings
5. User settings


## [​](#environment-variables) Environment variables

Claude Code supports the following environment variables to control its behavior:

All environment variables can also be configured in [`settings.json`](./_sites/docs.anthropic.com/en/docs/claude-code/settings#available-settings/index.md). This is useful as a way to automatically set environment variables for each session, or to roll out a set of environment variables for your whole team or organization.

| Variable | Purpose |
| --- | --- |
| `ANTHROPIC_API_KEY` | API key sent as `X-Api-Key` header, typically for the Claude SDK (for interactive usage, run `/login`) |
| `ANTHROPIC_AUTH_TOKEN` | Custom value for the `Authorization` and `Proxy-Authorization` headers (the value you set here will be prefixed with `Bearer` ) |
| `ANTHROPIC_CUSTOM_HEADERS` | Custom headers you want to add to the request (in `Name: Value` format) |
| `ANTHROPIC_MODEL` | Name of custom model to use (see [Model Configuration](./en/docs/claude-code/bedrock-vertex-proxies#model-configuration/index.md)) |
| `ANTHROPIC_SMALL_FAST_MODEL` | Name of [Haiku-class model for background tasks](./en/docs/claude-code/costs/index.md) |
| `ANTHROPIC_SMALL_FAST_MODEL_AWS_REGION` | Override AWS region for the small/fast model when using Bedrock |
| `AWS_BEARER_TOKEN_BEDROCK` | Bedrock API key for authentication (see [Bedrock API keys](https://aws.amazon.com/blogs/machine-learning/accelerate-ai-development-with-amazon-bedrock-api-keys/)) |
| `BASH_DEFAULT_TIMEOUT_MS` | Default timeout for long-running bash commands |
| `BASH_MAX_TIMEOUT_MS` | Maximum timeout the model can set for long-running bash commands |
| `BASH_MAX_OUTPUT_LENGTH` | Maximum number of characters in bash outputs before they are middle-truncated |
| `CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR` | Return to the original working directory after each Bash command |
| `CLAUDE_CODE_API_KEY_HELPER_TTL_MS` | Interval in milliseconds at which credentials should be refreshed (when using `apiKeyHelper`) |
| `CLAUDE_CODE_IDE_SKIP_AUTO_INSTALL` | Skip auto-installation of IDE extensions |
| `CLAUDE_CODE_MAX_OUTPUT_TOKENS` | Set the maximum number of output tokens for most requests |
| `CLAUDE_CODE_USE_BEDROCK` | Use [Bedrock](./en/docs/claude-code/amazon-bedrock/index.md) |
| `CLAUDE_CODE_USE_VERTEX` | Use [Vertex](./en/docs/claude-code/google-vertex-ai/index.md) |
| `CLAUDE_CODE_SKIP_BEDROCK_AUTH` | Skip AWS authentication for Bedrock (e.g. when using an LLM gateway) |
| `CLAUDE_CODE_SKIP_VERTEX_AUTH` | Skip Google authentication for Vertex (e.g. when using an LLM gateway) |
| `CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC` | Equivalent of setting `DISABLE_AUTOUPDATER`, `DISABLE_BUG_COMMAND`, `DISABLE_ERROR_REPORTING`, and `DISABLE_TELEMETRY` |
| `CLAUDE_CODE_DISABLE_TERMINAL_TITLE` | Set to `1` to disable automatic terminal title updates based on conversation context |
| `DISABLE_AUTOUPDATER` | Set to `1` to disable automatic updates. This takes precedence over the `autoUpdates` configuration setting. |
| `DISABLE_BUG_COMMAND` | Set to `1` to disable the `/bug` command |
| `DISABLE_COST_WARNINGS` | Set to `1` to disable cost warning messages |
| `DISABLE_ERROR_REPORTING` | Set to `1` to opt out of Sentry error reporting |
| `DISABLE_NON_ESSENTIAL_MODEL_CALLS` | Set to `1` to disable model calls for non-critical paths like flavor text |
| `DISABLE_TELEMETRY` | Set to `1` to opt out of Statsig telemetry (note that Statsig events do not include user data like code, file paths, or bash commands) |
| `HTTP_PROXY` | Specify HTTP proxy server for network connections |
| `HTTPS_PROXY` | Specify HTTPS proxy server for network connections |
| `MAX_THINKING_TOKENS` | Force a thinking for the model budget |
| `MCP_TIMEOUT` | Timeout in milliseconds for MCP server startup |
| `MCP_TOOL_TIMEOUT` | Timeout in milliseconds for MCP tool execution |
| `MAX_MCP_OUTPUT_TOKENS` | Maximum number of tokens allowed in MCP tool responses (default: 25000) |
| `VERTEX_REGION_CLAUDE_3_5_HAIKU` | Override region for Claude 3.5 Haiku when using Vertex AI |
| `VERTEX_REGION_CLAUDE_3_5_SONNET` | Override region for Claude 3.5 Sonnet when using Vertex AI |
| `VERTEX_REGION_CLAUDE_3_7_SONNET` | Override region for Claude 3.7 Sonnet when using Vertex AI |
| `VERTEX_REGION_CLAUDE_4_0_OPUS` | Override region for Claude 4.0 Opus when using Vertex AI |
| `VERTEX_REGION_CLAUDE_4_0_SONNET` | Override region for Claude 4.0 Sonnet when using Vertex AI |


## [​](#configuration-options) Configuration options

To manage your configurations, use the following commands:


- List settings: `claude config list`

- See a setting: `claude config get <key>`

- Change a setting: `claude config set <key> <value>`

- Push to a setting (for lists): `claude config add <key> <value>`

- Remove from a setting (for lists): `claude config remove <key> <value>`

By default `config` changes your project configuration. To manage your global configuration, use the `--global` (or `-g`) flag.


### [​](#global-configuration) Global configuration

To set a global configuration, use `claude config set -g <key> <value>`:

| Key | Description | Example |
| --- | --- | --- |
| `autoUpdates` | Whether to enable automatic updates (default: `true`). When enabled, Claude Code automatically downloads and installs updates in the background. Updates are applied when you restart Claude Code. | `false` |
| `preferredNotifChannel` | Where you want to receive notifications (default: `iterm2`) | `iterm2`, `iterm2_with_bell`, `terminal_bell`, or `notifications_disabled` |
| `theme` | Color theme | `dark`, `light`, `light-daltonized`, or `dark-daltonized` |
| `verbose` | Whether to show full bash and command outputs (default: `false`) | `true` |


## [​](#tools-available-to-claude) Tools available to Claude

Claude Code has access to a set of powerful tools that help it understand and modify your codebase:

| Tool | Description | Permission Required |
| --- | --- | --- |
| **Bash** | Executes shell commands in your environment | Yes |
| **Edit** | Makes targeted edits to specific files | Yes |
| **Glob** | Finds files based on pattern matching | No |
| **Grep** | Searches for patterns in file contents | No |
| **LS** | Lists files and directories | No |
| **MultiEdit** | Performs multiple edits on a single file atomically | Yes |
| **NotebookEdit** | Modifies Jupyter notebook cells | Yes |
| **NotebookRead** | Reads and displays Jupyter notebook contents | No |
| **Read** | Reads the contents of files | No |
| **Task** | Runs a sub-agent to handle complex, multi-step tasks | No |
| **TodoWrite** | Creates and manages structured task lists | No |
| **WebFetch** | Fetches content from a specified URL | Yes |
| **WebSearch** | Performs web searches with domain filtering | Yes |
| **Write** | Creates or overwrites files | Yes |

Permission rules can be configured using `/allowed-tools` or in [permission settings](./en/docs/claude-code/settings#available-settings/index.md).


### [​](#extending-tools-with-hooks) Extending tools with hooks

You can run custom commands before or after any tool executes using
[Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md).

For example, you could automatically run a Python formatter after Claude
modifies Python files, or prevent modifications to production configuration
files by blocking Write operations to certain paths.


## [​](#see-also) See also


- [Identity and Access Management](./en/docs/claude-code/iam#configuring-permissions/index.md) - Learn about Claude Code’s permission system

- [IAM and access control](./en/docs/claude-code/iam#enterprise-managed-policy-settings/index.md) - Enterprise policy management

- [Troubleshooting](./en/docs/claude-code/troubleshooting#auto-updater-issues/index.md) - Solutions for common configuration issues

Was this page helpful?

YesNo

[Analytics](./en/docs/claude-code/analytics/index.md)[Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

On this page


- [Settings files](#settings-files)

- [Available settings](#available-settings)

- [Permission settings](#permission-settings)

- [Settings precedence](#settings-precedence)

- [Environment variables](#environment-variables)

- [Configuration options](#configuration-options)

- [Global configuration](#global-configuration)

- [Tools available to Claude](#tools-available-to-claude)

- [Extending tools with hooks](#extending-tools-with-hooks)

- [See also](#see-also)

========================================================================================
== FILE: setup/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 7.90 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 16bfeea493cfd2c0a41e9e64477dbf4f8e211bd32cd400e5270e9af21d710250
========================================================================================
Set up Claude Code - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Administration

Set up Claude Code

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#system-requirements) System requirements


- **Operating Systems**: macOS 10.15+, Ubuntu 20.04+/Debian 10+, or Windows 10+ (with WSL 1, WSL 2, or Git for Windows)

- **Hardware**: 4GB+ RAM

- **Software**: [Node.js 18+](https://nodejs.org/en/download)

- **Network**: Internet connection required for authentication and AI processing

- **Shell**: Works best in Bash, Zsh or Fish

- **Location**: [Anthropic supported countries](https://www.anthropic.com/supported-countries)


## [​](#standard-installation) Standard installation

To install Claude Code, run the following command:

````sh
npm install -g @anthropic-ai/claude-code
````

Do NOT use `sudo npm install -g` as this can lead to permission issues and security risks.
If you encounter permission errors, see [configure Claude Code](./en/docs/claude-code/troubleshooting#linux-permission-issues/index.md) for recommended solutions.

Some users may be automatically migrated to an improved installation method.
Run `claude doctor` after installation to check your installation type.

After the installation process completes, navigate to your project and start Claude Code:

````bash
cd your-awesome-project
claude
````

Claude Code offers the following authentication options:

1. **Anthropic Console**: The default option. Connect through the Anthropic Console and complete the OAuth process. Requires active billing at [console.anthropic.com](https://console.anthropic.com).
2. **Claude App (with Pro or Max plan)**: Subscribe to Claude’s [Pro or Max plan](https://www.anthropic.com/pricing) for a unified subscription that includes both Claude Code and the web interface. Get more value at the same price point while managing your account in one place. Log in with your Claude.ai account. During launch, choose the option that matches your subscription type.
3. **Enterprise platforms**: Configure Claude Code to use [Amazon Bedrock or Google Vertex AI](./en/docs/claude-code/third-party-integrations/index.md) for enterprise deployments with your existing cloud infrastructure.


## [​](#windows-setup) Windows setup

**Option 1: Claude Code within WSL**


- Both WSL 1 and WSL 2 are supported

**Option 2: Claude Code on native Windows with Git Bash**


- Requires [Git for Windows](https://git-scm.com/downloads/win)

- For portable Git installations, specify the path to your `bash.exe`:

  ````powershell
  $env:CLAUDE_CODE_GIT_BASH_PATH="C:\Program Files\Git\bin\bash.exe"
  ````


## [​](#alternative-installation-methods) Alternative installation methods

Claude Code offers multiple installation methods to suit different environments.

If you encounter any issues during installation, consult the [troubleshooting guide](./en/docs/claude-code/troubleshooting#linux-permission-issues/index.md).

Run `claude doctor` after installation to check your installation type and version.


### [​](#global-npm-installation) Global npm installation

Traditional method shown in the [install steps above](./_sites/docs.anthropic.com/en/docs/claude-code/setup#install-and-authenticate/index.md)


### [​](#local-installation) Local installation


- After global install via npm, use `claude migrate-installer` to move to local

- Avoids autoupdater npm permission issues

- Some users may be automatically migrated to this method


### [​](#native-binary-installation-alpha) Native binary installation (Alpha)


- Use `claude install` from an existing installation

- or `curl -fsSL claude.ai/install.sh | bash` for a fresh install

- Currently in alpha testing

- Platform support: macOS, Linux, Windows (via WSL)


## [​](#running-on-aws-or-gcp) Running on AWS or GCP

By default, Claude Code uses Anthropic’s API.

For details on running Claude Code on AWS or GCP, see [third-party integrations](./en/docs/claude-code/third-party-integrations/index.md).


## [​](#update-claude-code) Update Claude Code


### [​](#auto-updates) Auto updates

Claude Code automatically keeps itself up to date to ensure you have the latest features and security fixes.


- **Update checks**: Performed on startup and periodically while running

- **Update process**: Downloads and installs automatically in the background

- **Notifications**: You’ll see a notification when updates are installed

- **Applying updates**: Updates take effect the next time you start Claude Code

**Disable auto-updates:**

````bash

# Via configuration
claude config set autoUpdates false --global

# Or via environment variable
export DISABLE_AUTOUPDATER=1
````


### [​](#update-manually) Update manually

````bash
claude update
````

Was this page helpful?

YesNo

[Development containers](./en/docs/claude-code/devcontainer/index.md)[Identity and Access Management](./en/docs/claude-code/iam/index.md)

On this page


- [System requirements](#system-requirements)

- [Standard installation](#standard-installation)

- [Windows setup](#windows-setup)

- [Alternative installation methods](#alternative-installation-methods)

- [Global npm installation](#global-npm-installation)

- [Local installation](#local-installation)

- [Native binary installation (Alpha)](#native-binary-installation-alpha)

- [Running on AWS or GCP](#running-on-aws-or-gcp)

- [Update Claude Code](#update-claude-code)

- [Auto updates](#auto-updates)

- [Update manually](#update-manually)

========================================================================================
== FILE: slash-commands/index.md
== DATE: 2025-07-19 15:24:58 | SIZE: 10.93 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 6f4a0814e9e91781a3afe407551c424881501292d679a3db9bb91dd632881a61
========================================================================================
Slash commands - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Reference

Slash commands

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#built-in-slash-commands) Built-in slash commands

| Command | Purpose |
| --- | --- |
| `/add-dir` | Add additional working directories |
| `/bug` | Report bugs (sends conversation to Anthropic) |
| `/clear` | Clear conversation history |
| `/compact [instructions]` | Compact conversation with optional focus instructions |
| `/config` | View/modify configuration |
| `/cost` | Show token usage statistics |
| `/doctor` | Checks the health of your Claude Code installation |
| `/help` | Get usage help |
| `/init` | Initialize project with CLAUDE.md guide |
| `/login` | Switch Anthropic accounts |
| `/logout` | Sign out from your Anthropic account |
| `/mcp` | Manage MCP server connections and OAuth authentication |
| `/memory` | Edit CLAUDE.md memory files |
| `/model` | Select or change the AI model |
| `/permissions` | View or update [permissions](./en/docs/claude-code/iam#configuring-permissions/index.md) |
| `/pr_comments` | View pull request comments |
| `/review` | Request code review |
| `/status` | View account and system statuses |
| `/terminal-setup` | Install Shift+Enter key binding for newlines (iTerm2 and VSCode only) |
| `/vim` | Enter vim mode for alternating insert and command modes |


## [​](#custom-slash-commands) Custom slash commands

Custom slash commands allow you to define frequently-used prompts as Markdown files that Claude Code can execute. Commands are organized by scope (project-specific or personal) and support namespacing through directory structures.


### [​](#syntax) Syntax

```
/<command-name> [arguments]

```


#### [​](#parameters) Parameters

| Parameter | Description |
| --- | --- |
| `<command-name>` | Name derived from the Markdown filename (without `.md` extension) |
| `[arguments]` | Optional arguments passed to the command |


### [​](#command-types) Command types


#### [​](#project-commands) Project commands

Commands stored in your repository and shared with your team. When listed in `/help`, these commands show “(project)” after their description.

**Location**: `.claude/commands/`

In the following example, we create the `/optimize` command:

````bash

# Create a project command
mkdir -p .claude/commands
echo "Analyze this code for performance issues and suggest optimizations:" > .claude/commands/optimize.md
````


#### [​](#personal-commands) Personal commands

Commands available across all your projects. When listed in `/help`, these commands show “(user)” after their description.

**Location**: `~/.claude/commands/`

In the following example, we create the `/security-review` command:

````bash

# Create a personal command
mkdir -p ~/.claude/commands
echo "Review this code for security vulnerabilities:" > ~/.claude/commands/security-review.md
````


### [​](#features) Features


#### [​](#namespacing) Namespacing

Organize commands in subdirectories. The subdirectories determine the command’s
full name. The description will show whether the command comes from the project
directory (`.claude/commands`) or the user-level directory (`~/.claude/commands`).

Conflicts between user and project level commands are not supported. Otherwise,
multiple commands with the same base file name can coexist.

For example, a file at `.claude/commands/frontend/component.md` creates the command `/frontend:component` with description showing “(project)”.
Meanwhile, a file at `~/.claude/commands/component.md` creates the command `/component` with description showing “(user)”.


#### [​](#arguments) Arguments

Pass dynamic values to commands using the `$ARGUMENTS` placeholder.

For example:

````bash

# Command definition
echo 'Fix issue #$ARGUMENTS following our coding standards' > .claude/commands/fix-issue.md

# Usage
> /fix-issue 123
````


#### [​](#bash-command-execution) Bash command execution

Execute bash commands before the slash command runs using the `!` prefix. The output is included in the command context. You *must* include `allowed-tools` with the `Bash` tool, but you can choose the specific bash commands to allow.

For example:

````markdown
---
allowed-tools: Bash(git add:*), Bash(git status:*), Bash(git commit:*)
description: Create a git commit
---

## Context

- Current git status: !`git status`

- Current git diff (staged and unstaged changes): !`git diff HEAD`

- Current branch: !`git branch --show-current`

- Recent commits: !`git log --oneline -10`

## Your task
Based on the above changes, create a single git commit.
````


#### [​](#file-references) File references

Include file contents in commands using the `@` prefix to [reference files](./en/docs/claude-code/common-workflows#reference-files-and-directories/index.md).

For example:

````markdown

# Reference a specific file
Review the implementation in @src/utils/helpers.js

# Reference multiple files
Compare @src/old-version.js with @src/new-version.js
````


#### [​](#thinking-mode) Thinking mode

Slash commands can trigger extended thinking by including [extended thinking keywords](./en/docs/claude-code/common-workflows#use-extended-thinking/index.md).


### [​](#file-format) File format

Command files support:


- **Markdown format** (`.md` extension)

- **YAML frontmatter** for metadata:

  - `allowed-tools`: List of tools the command can use

  - `description`: Brief description of the command

  - `argument-hint`: The arguments expected for the slash command. Example: `argument-hint: add [tagId] | remove [tagId] | list`. This hint is shown to the user when auto-completing the slash command.

- **Dynamic content** with bash commands (`!`) and file references (`@`)

- **Prompt instructions** as the main content


## [​](#mcp-slash-commands) MCP slash commands

MCP servers can expose prompts as slash commands that become available in Claude Code. These commands are dynamically discovered from connected MCP servers.


### [​](#command-format) Command format

MCP commands follow the pattern:

```
/mcp__<server-name>__<prompt-name> [arguments]

```


### [​](#features-2) Features


#### [​](#dynamic-discovery) Dynamic discovery

MCP commands are automatically available when:


- An MCP server is connected and active

- The server exposes prompts through the MCP protocol

- The prompts are successfully retrieved during connection


#### [​](#arguments-2) Arguments

MCP prompts can accept arguments defined by the server:

```

# Without arguments
> /mcp__github__list_prs


# With arguments
> /mcp__github__pr_review 456
> /mcp__jira__create_issue "Bug title" high

```


#### [​](#naming-conventions) Naming conventions


- Server and prompt names are normalized

- Spaces and special characters become underscores

- Names are lowercased for consistency


### [​](#managing-mcp-connections) Managing MCP connections

Use the `/mcp` command to:


- View all configured MCP servers

- Check connection status

- Authenticate with OAuth-enabled servers

- Clear authentication tokens

- View available tools and prompts from each server


## [​](#see-also) See also


- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md) - Shortcuts, input modes, and interactive features

- [CLI reference](./en/docs/claude-code/cli-reference/index.md) - Command-line flags and options

- [Settings](./en/docs/claude-code/settings/index.md) - Configuration options

- [Memory management](./en/docs/claude-code/memory/index.md) - Managing Claude’s memory across sessions

Was this page helpful?

YesNo

[Interactive mode](./en/docs/claude-code/interactive-mode/index.md)[Hooks reference](./en/docs/claude-code/hooks/index.md)

On this page


- [Built-in slash commands](#built-in-slash-commands)

- [Custom slash commands](#custom-slash-commands)

- [Syntax](#syntax)

- [Parameters](#parameters)

- [Command types](#command-types)

- [Project commands](#project-commands)

- [Personal commands](#personal-commands)

- [Features](#features)

- [Namespacing](#namespacing)

- [Arguments](#arguments)

- [Bash command execution](#bash-command-execution)

- [File references](#file-references)

- [Thinking mode](#thinking-mode)

- [File format](#file-format)

- [MCP slash commands](#mcp-slash-commands)

- [Command format](#command-format)

- [Features](#features-2)

- [Dynamic discovery](#dynamic-discovery)

- [Arguments](#arguments-2)

- [Naming conventions](#naming-conventions)

- [Managing MCP connections](#managing-mcp-connections)

- [See also](#see-also)

========================================================================================
== FILE: terminal-config/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 6.35 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 80a76d58f20236746067b111850be2182f37e489672af4d2cf01686c9203c5ed
========================================================================================
Optimize your terminal setup - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Configuration

Optimize your terminal setup

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


### [​](#themes-and-appearance) Themes and appearance

Claude cannot control the theme of your terminal. That’s handled by your terminal application. You can match Claude Code’s theme to your terminal any time via the `/config` command.


### [​](#line-breaks) Line breaks

You have several options for entering linebreaks into Claude Code:


- **Quick escape**: Type `\` followed by Enter to create a newline

- **Keyboard shortcut**: Set up a keybinding to insert a newline


#### [​](#set-up-shift%2Benter-vs-code-or-iterm2-%3A) Set up Shift+Enter (VS Code or iTerm2):

Run `/terminal-setup` within Claude Code to automatically configure Shift+Enter.


#### [​](#set-up-option%2Benter-vs-code%2C-iterm2-or-macos-terminal-app-%3A) Set up Option+Enter (VS Code, iTerm2 or macOS Terminal.app):

**For Mac Terminal.app:**

1. Open Settings → Profiles → Keyboard
2. Check “Use Option as Meta Key”

**For iTerm2 and VS Code terminal:**

1. Open Settings → Profiles → Keys
2. Under General, set Left/Right Option key to “Esc+“


### [​](#notification-setup) Notification setup

Never miss when Claude completes a task with proper notification configuration:


#### [​](#terminal-bell-notifications) Terminal bell notifications

Enable sound alerts when tasks complete:

````sh
claude config set --global preferredNotifChannel terminal_bell
````

**For macOS users**: Don’t forget to enable notification permissions in System Settings → Notifications → [Your Terminal App].


#### [​](#iterm-2-system-notifications) iTerm 2 system notifications

For iTerm 2 alerts when tasks complete:

1. Open iTerm 2 Preferences
2. Navigate to Profiles → Terminal
3. Enable “Silence bell” and Filter Alerts → “Send escape sequence-generated alerts”
4. Set your preferred notification delay

Note that these notifications are specific to iTerm 2 and not available in the default macOS Terminal.


#### [​](#custom-notification-hooks) Custom notification hooks

For advanced notification handling, you can create [notification hooks](./en/docs/claude-code/hooks#notification/index.md) to run your own logic.


### [​](#handling-large-inputs) Handling large inputs

When working with extensive code or long instructions:


- **Avoid direct pasting**: Claude Code may struggle with very long pasted content

- **Use file-based workflows**: Write content to a file and ask Claude to read it

- **Be aware of VS Code limitations**: The VS Code terminal is particularly prone to truncating long pastes


### [​](#vim-mode) Vim Mode

Claude Code supports a subset of Vim keybindings that can be enabled with `/vim` or configured via `/config`.

The supported subset includes:


- Mode switching: `Esc` (to NORMAL), `i`/`I`, `a`/`A`, `o`/`O` (to INSERT)

- Navigation: `h`/`j`/`k`/`l`, `w`/`e`/`b`, `0`/`$`/`^`, `gg`/`G`

- Editing: `x`, `dw`/`de`/`db`/`dd`/`D`, `cw`/`ce`/`cb`/`cc`/`C`, `.` (repeat)

Was this page helpful?

YesNo

[Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)[Memory management](./en/docs/claude-code/memory/index.md)

On this page


- [Themes and appearance](#themes-and-appearance)

- [Line breaks](#line-breaks)

- [Set up Shift+Enter (VS Code or iTerm2):](#set-up-shift%2Benter-vs-code-or-iterm2-%3A)

- [Set up Option+Enter (VS Code, iTerm2 or macOS Terminal.app):](#set-up-option%2Benter-vs-code%2C-iterm2-or-macos-terminal-app-%3A)

- [Notification setup](#notification-setup)

- [Terminal bell notifications](#terminal-bell-notifications)

- [iTerm 2 system notifications](#iterm-2-system-notifications)

- [Custom notification hooks](#custom-notification-hooks)

- [Handling large inputs](#handling-large-inputs)

- [Vim Mode](#vim-mode)

========================================================================================
== FILE: third-party-integrations/index.md
== DATE: 2025-07-19 15:24:57 | SIZE: 11.07 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 0a78735da15ca47ea6fb7dcf41b7b4da2e0b4c704303956ef434bc6baca69dc2
========================================================================================
Enterprise deployment overview - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Deployment

Enterprise deployment overview

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)

This page provides an overview of available deployment options and helps you choose the right configuration for your organization.


## [​](#provider-comparison) Provider comparison

| Feature | Anthropic | Amazon Bedrock | Google Vertex AI |
| --- | --- | --- | --- |
| Regions | Supported [countries](https://www.anthropic.com/supported-countries) | Multiple AWS [regions](https://docs.aws.amazon.com/bedrock/latest/userguide/models-regions.html) | Multiple GCP [regions](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/locations) |
| Prompt caching | Enabled by default | Enabled by default | Enabled by default |
| Authentication | API key | AWS credentials (IAM) | GCP credentials (OAuth/Service Account) |
| Cost tracking | Dashboard | AWS Cost Explorer | GCP Billing |
| Enterprise features | Teams, usage monitoring | IAM policies, CloudTrail | IAM roles, Cloud Audit Logs |


## [​](#cloud-providers) Cloud providers

[## Amazon Bedrock

Use Claude models through AWS infrastructure with IAM-based authentication and AWS-native monitoring](./en/docs/claude-code/amazon-bedrock/index.md)[## Google Vertex AI

Access Claude models via Google Cloud Platform with enterprise-grade security and compliance](./en/docs/claude-code/google-vertex-ai/index.md)


## [​](#corporate-infrastructure) Corporate infrastructure

[## Corporate Proxy

Configure Claude Code to work with your organization’s proxy servers and SSL/TLS requirements](./en/docs/claude-code/corporate-proxy/index.md)[## LLM Gateway

Deploy centralized model access with usage tracking, budgeting, and audit logging](./en/docs/claude-code/llm-gateway/index.md)


## [​](#configuration-overview) Configuration overview

Claude Code supports flexible configuration options that allow you to combine different providers and infrastructure:

Understand the difference between:


- **Corporate proxy**: An HTTP/HTTPS proxy for routing traffic (set via `HTTPS_PROXY` or `HTTP_PROXY`)

- **LLM Gateway**: A service that handles authentication and provides provider-compatible endpoints (set via `ANTHROPIC_BASE_URL`, `ANTHROPIC_BEDROCK_BASE_URL`, or `ANTHROPIC_VERTEX_BASE_URL`)

Both configurations can be used in tandem.


### [​](#using-bedrock-with-corporate-proxy) Using Bedrock with corporate proxy

Route Bedrock traffic through a corporate HTTP/HTTPS proxy:

````bash

# Enable Bedrock
export CLAUDE_CODE_USE_BEDROCK=1
export AWS_REGION=us-east-1

# Configure corporate proxy
export HTTPS_PROXY='https://proxy.example.com:8080'
````


### [​](#using-bedrock-with-llm-gateway) Using Bedrock with LLM Gateway

Use a gateway service that provides Bedrock-compatible endpoints:

````bash

# Enable Bedrock
export CLAUDE_CODE_USE_BEDROCK=1

# Configure LLM gateway
export ANTHROPIC_BEDROCK_BASE_URL='https://your-llm-gateway.com/bedrock'
export CLAUDE_CODE_SKIP_BEDROCK_AUTH=1 # If gateway handles AWS auth
````


### [​](#using-vertex-ai-with-corporate-proxy) Using Vertex AI with corporate proxy

Route Vertex AI traffic through a corporate HTTP/HTTPS proxy:

````bash

# Enable Vertex
export CLAUDE_CODE_USE_VERTEX=1
export CLOUD_ML_REGION=us-east5
export ANTHROPIC_VERTEX_PROJECT_ID=your-project-id

# Configure corporate proxy
export HTTPS_PROXY='https://proxy.example.com:8080'
````


### [​](#using-vertex-ai-with-llm-gateway) Using Vertex AI with LLM Gateway

Combine Google Vertex AI models with an LLM gateway for centralized management:

````bash

# Enable Vertex
export CLAUDE_CODE_USE_VERTEX=1

# Configure LLM gateway
export ANTHROPIC_VERTEX_BASE_URL='https://your-llm-gateway.com/vertex'
export CLAUDE_CODE_SKIP_VERTEX_AUTH=1 # If gateway handles GCP auth
````


### [​](#authentication-configuration) Authentication configuration

Claude Code uses the `ANTHROPIC_AUTH_TOKEN` for both `Authorization` and `Proxy-Authorization` headers when needed. The `SKIP_AUTH` flags (`CLAUDE_CODE_SKIP_BEDROCK_AUTH`, `CLAUDE_CODE_SKIP_VERTEX_AUTH`) are used in LLM gateway scenarios where the gateway handles provider authentication.


## [​](#choosing-the-right-deployment-configuration) Choosing the right deployment configuration

Consider these factors when selecting your deployment approach:


### [​](#direct-provider-access) Direct provider access

Best for organizations that:


- Want the simplest setup

- Have existing AWS or GCP infrastructure

- Need provider-native monitoring and compliance


### [​](#corporate-proxy) Corporate proxy

Best for organizations that:


- Have existing corporate proxy requirements

- Need traffic monitoring and compliance

- Must route all traffic through specific network paths


### [​](#llm-gateway) LLM Gateway

Best for organizations that:


- Need usage tracking across teams

- Want to dynamically switch between models

- Require custom rate limiting or budgets

- Need centralized authentication management


## [​](#debugging) Debugging

When debugging your deployment:


- Use the `claude /status` [slash command](./en/docs/claude-code/slash-commands/index.md). This command provides observability into any applied authentication, proxy, and URL settings.

- Set environment variable `export ANTHROPIC_LOG=debug` to log requests.


## [​](#best-practices-for-organizations) Best practices for organizations

1. We strongly recommend investing in documentation so that Claude Code understands your codebase. Many organizations make a `CLAUDE.md` file (which we also refer to as memory) in the root of the repository that contains the system architecture, how to run tests and other common commands, and best practices for contributing to the codebase. This file is typically checked into source control so that all users can benefit from it. [Learn more](./en/docs/claude-code/memory/index.md).
2. If you have a custom development environment, we find that creating a “one click” way to install Claude Code is key to growing adoption across an organization.
3. Encourage new users to try Claude Code for codebase Q&A, or on smaller bug fixes or feature requests. Ask Claude Code to make a plan. Check Claude’s suggestions and give feedback if it’s off-track. Over time, as users understand this new paradigm better, then they’ll be more effective at letting Claude Code run more agentically.
4. Security teams can configure managed permissions for what Claude Code is and is not allowed to do, which cannot be overwritten by local configuration. [Learn more](./en/docs/claude-code/security/index.md).
5. MCP is a great way to give Claude Code more information, such as connecting to ticket management systems or error logs. We recommend that one central team configures MCP servers and checks a `.mcp.json` configuration into the codebase so that all users benefit. [Learn more](./en/docs/claude-code/mcp/index.md).

At Anthropic, we trust Claude Code to power development across every Anthropic codebase. We hope you enjoy using Claude Code as much as we do!


## [​](#next-steps) Next steps


- [Set up Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md) for AWS-native deployment

- [Configure Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md) for GCP deployment

- [Implement Corporate Proxy](./en/docs/claude-code/corporate-proxy/index.md) for network requirements

- [Deploy LLM Gateway](./en/docs/claude-code/llm-gateway/index.md) for enterprise management

- [Settings](./en/docs/claude-code/settings/index.md) for configuration options and environment variables

Was this page helpful?

YesNo

[Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)[Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

On this page


- [Provider comparison](#provider-comparison)

- [Cloud providers](#cloud-providers)

- [Corporate infrastructure](#corporate-infrastructure)

- [Configuration overview](#configuration-overview)

- [Using Bedrock with corporate proxy](#using-bedrock-with-corporate-proxy)

- [Using Bedrock with LLM Gateway](#using-bedrock-with-llm-gateway)

- [Using Vertex AI with corporate proxy](#using-vertex-ai-with-corporate-proxy)

- [Using Vertex AI with LLM Gateway](#using-vertex-ai-with-llm-gateway)

- [Authentication configuration](#authentication-configuration)

- [Choosing the right deployment configuration](#choosing-the-right-deployment-configuration)

- [Direct provider access](#direct-provider-access)

- [Corporate proxy](#corporate-proxy)

- [LLM Gateway](#llm-gateway)

- [Debugging](#debugging)

- [Best practices for organizations](#best-practices-for-organizations)

- [Next steps](#next-steps)

========================================================================================
== FILE: troubleshooting/index.md
== DATE: 2025-07-19 15:24:59 | SIZE: 13.75 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 6192c3f5c49f688d6dd64f407393d3009a0d6765c5977c0d4b2f74c12e0c5409
========================================================================================
Troubleshooting - Anthropic

[Anthropic home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/light.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/anthropic/logo/dark.svg)](/)

English

Search...

Search...

Navigation

Build with Claude Code

Troubleshooting

[Welcome](./en/home/index.md)[Developer Platform](./en/docs/intro/index.md)[Claude Code](./en/docs/claude-code/overview/index.md)[Model Context Protocol (MCP)](./en/docs/mcp/index.md)[API Reference](./en/api/messages/index.md)[Resources](./en/resources/overview/index.md)[Release Notes](./en/release-notes/overview/index.md)


##### Getting started


- [Overview](./en/docs/claude-code/overview/index.md)

- [Quickstart](./en/docs/claude-code/quickstart/index.md)

- [Common workflows](./en/docs/claude-code/common-workflows/index.md)


##### Build with Claude Code


- [Claude Code SDK](./en/docs/claude-code/sdk/index.md)

- [Claude Code hooks](./en/docs/claude-code/hooks-guide/index.md)

- [GitHub Actions](./en/docs/claude-code/github-actions/index.md)

- [Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)

- [Troubleshooting](./en/docs/claude-code/troubleshooting/index.md)


##### Deployment


- [Overview](./en/docs/claude-code/third-party-integrations/index.md)

- [Amazon Bedrock](./en/docs/claude-code/amazon-bedrock/index.md)

- [Google Vertex AI](./en/docs/claude-code/google-vertex-ai/index.md)

- [Corporate proxy](./en/docs/claude-code/corporate-proxy/index.md)

- [LLM gateway](./en/docs/claude-code/llm-gateway/index.md)

- [Development containers](./en/docs/claude-code/devcontainer/index.md)


##### Administration


- [Advanced installation](./en/docs/claude-code/setup/index.md)

- [Identity and Access Management](./en/docs/claude-code/iam/index.md)

- [Security](./en/docs/claude-code/security/index.md)

- [Monitoring](./en/docs/claude-code/monitoring-usage/index.md)

- [Costs](./en/docs/claude-code/costs/index.md)

- [Analytics](./en/docs/claude-code/analytics/index.md)


##### Configuration


- [Settings](./en/docs/claude-code/settings/index.md)

- [Add Claude Code to your IDE](./en/docs/claude-code/ide-integrations/index.md)

- [Terminal configuration](./en/docs/claude-code/terminal-config/index.md)

- [Memory management](./en/docs/claude-code/memory/index.md)


##### Reference


- [CLI reference](./en/docs/claude-code/cli-reference/index.md)

- [Interactive mode](./en/docs/claude-code/interactive-mode/index.md)

- [Slash commands](./en/docs/claude-code/slash-commands/index.md)

- [Hooks reference](./en/docs/claude-code/hooks/index.md)


##### Resources


- [Data usage](./en/docs/claude-code/data-usage/index.md)

- [Legal and compliance](./en/docs/claude-code/legal-and-compliance/index.md)


## [​](#common-installation-issues) Common installation issues


### [​](#windows-installation-issues%3A-errors-in-wsl) Windows installation issues: errors in WSL

You might encounter the following issues in WSL:

**OS/platform detection issues**: If you receive an error during installation, WSL may be using Windows `npm`. Try:


- Run `npm config set os linux` before installation

- Install with `npm install -g @anthropic-ai/claude-code --force --no-os-check` (Do NOT use `sudo`)

**Node not found errors**: If you see `exec: node: not found` when running `claude`, your WSL environment may be using a Windows installation of Node.js. You can confirm this with `which npm` and `which node`, which should point to Linux paths starting with `/usr/` rather than `/mnt/c/`. To fix this, try installing Node via your Linux distribution’s package manager or via [`nvm`](https://github.com/nvm-sh/nvm).


### [​](#linux-installation-issues%3A-permission-errors) Linux installation issues: permission errors

When installing Claude Code with npm, you may encounter permission errors if your npm global prefix is not user writable (eg. `/usr`, or `/usr/local`).


#### [​](#recommended-solution%3A-migrate-to-local-installation) Recommended solution: Migrate to local installation

The simplest solution is to migrate to a local installation:

````bash
claude migrate-installer
````

This moves Claude Code to `~/.claude/local/` and sets up an alias in your shell configuration. No `sudo` is required for future updates.

After migration, restart your shell, and then verify your installation:

````bash
which claude # Should show an alias to ~/.claude/local/claude
claude doctor # Check installation health
````


#### [​](#alternative-solution%3A-create-a-user-writable-npm-prefix-for-global-installs) Alternative solution: Create a user-writable npm prefix for global installs

You can configure npm to use a directory within your home folder:

````bash

# First, save a list of your existing global packages for later migration
npm list -g --depth=0 > ~/npm-global-packages.txt

# Create a directory for your global packages
mkdir -p ~/.npm-global

# Configure npm to use the new directory path
npm config set prefix ~/.npm-global

# Note: Replace ~/.bashrc with ~/.zshrc, ~/.profile, or other appropriate file for your shell
echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc

# Apply the new PATH setting
source ~/.bashrc

# Now reinstall Claude Code in the new location
npm install -g @anthropic-ai/claude-code

# Optional: Reinstall your previous global packages in the new location

# Look at ~/npm-global-packages.txt and install packages you want to keep
````

This solution:


- Avoids modifying system directory permissions

- Creates a clean, dedicated location for your global npm packages

- Follows security best practices


#### [​](#system-recovery%3A-if-you-have-run-commands-that-change-ownership-and-permissions-of-system-files-or-similar) System Recovery: If you have run commands that change ownership and permissions of system files or similar

If you’ve already run a command that changed system directory permissions (such as `sudo chown -R $USER:$(id -gn) /usr && sudo chmod -R u+w /usr`) and your system is now broken (for example, if you see `sudo: /usr/bin/sudo must be owned by uid 0 and have the setuid bit set`), you’ll need to perform recovery steps.


##### Ubuntu/Debian Recovery Method:

1. While rebooting, hold **SHIFT** to access the GRUB menu
2. Select “Advanced options for Ubuntu/Debian”
3. Choose the recovery mode option
4. Select “Drop to root shell prompt”
5. Remount the filesystem as writable:

   ````bash
   mount -o remount,rw /
   ````
6. Fix permissions:

   ````bash
   # Restore root ownership
   chown -R root:root /usr
   chmod -R 755 /usr
   # Ensure /usr/local is owned by your user for npm packages
   chown -R YOUR_USERNAME:YOUR_USERNAME /usr/local
   # Set setuid bit for critical binaries
   chmod u+s /usr/bin/sudo
   chmod 4755 /usr/bin/sudo
   chmod u+s /usr/bin/su
   chmod u+s /usr/bin/passwd
   chmod u+s /usr/bin/newgrp
   chmod u+s /usr/bin/gpasswd
   chmod u+s /usr/bin/chsh
   chmod u+s /usr/bin/chfn
   # Fix sudo configuration
   chown root:root /usr/libexec/sudo/sudoers.so
   chmod 4755 /usr/libexec/sudo/sudoers.so
   chown root:root /etc/sudo.conf
   chmod 644 /etc/sudo.conf
   ````
7. Reinstall affected packages (optional but recommended):

   ````bash
   # Save list of installed packages
   dpkg --get-selections > /tmp/installed_packages.txt
   # Reinstall them
   awk '{print $1}' /tmp/installed_packages.txt | xargs -r apt-get install --reinstall -y
   ````
8. Reboot:

   ````bash
   reboot
   ````


##### Alternative Live USB Recovery Method:

If the recovery mode doesn’t work, you can use a live USB:

1. Boot from a live USB (Ubuntu, Debian, or any Linux distribution)
2. Find your system partition:

   ````bash
   lsblk
   ````
3. Mount your system partition:

   ````bash
   sudo mount /dev/sdXY /mnt # replace sdXY with your actual system partition
   ````
4. If you have a separate boot partition, mount it too:

   ````bash
   sudo mount /dev/sdXZ /mnt/boot # if needed
   ````
5. Chroot into your system:

   ````bash
   # For Ubuntu/Debian:
   sudo chroot /mnt
   # For Arch-based systems:
   sudo arch-chroot /mnt
   ````
6. Follow steps 6-8 from the Ubuntu/Debian recovery method above

After restoring your system, follow the recommended solution above to set up a user-writable npm prefix.


## [​](#auto-updater-issues) Auto-updater issues

If Claude Code can’t update automatically (see [Update Claude Code](./en/docs/claude-code/setup#update-claude-code/index.md) for how updates work):


### [​](#for-permission-errors) For permission errors

This is typically due to permission issues with your npm global prefix directory. You have several options:

1. **Migrate to local installation** (recommended): Run `claude migrate-installer` to move to a local installation that avoids permission issues entirely
2. **Update manually**: Run `claude update` with appropriate permissions
3. **Fix npm permissions**: Follow the [recommended solution](./_sites/docs.anthropic.com/en/docs/claude-code/troubleshooting#recommended-solution-create-a-user-writable-npm-prefix/index.md) above (more complex)


### [​](#to-disable-auto-updates) To disable auto-updates

If you prefer to control when Claude Code updates:

````bash

# Via configuration
claude config set autoUpdates false --global

# Or via environment variable
export DISABLE_AUTOUPDATER=1
````


### [​](#to-check-your-installation) To check your installation


- **Current version and diagnostics**: Run `claude doctor`

- **Check for updates**: Run `claude update`

- **View update settings**: Run `claude config get autoUpdates --global`

- **Verify installation location**: Run `which claude` - if this shows an alias pointing to `~/.claude/local/claude`, you’re using the recommended local installation


## [​](#permissions-and-authentication) Permissions and authentication


### [​](#repeated-permission-prompts) Repeated permission prompts

If you find yourself repeatedly approving the same commands, you can allow specific tools
to run without approval using the `/permissions` command. See [Permissions docs](./en/docs/claude-code/iam#configuring-permissions/index.md).


### [​](#authentication-issues) Authentication issues

If you’re experiencing authentication problems:

1. Run `/logout` to sign out completely
2. Close Claude Code
3. Restart with `claude` and complete the authentication process again

If problems persist, try:

````bash
rm -rf ~/.config/claude-code/auth.json
claude
````

This removes your stored authentication information and forces a clean login.


## [​](#performance-and-stability) Performance and stability


### [​](#high-cpu-or-memory-usage) High CPU or memory usage

Claude Code is designed to work with most development environments, but may consume significant resources when processing large codebases. If you’re experiencing performance issues:

1. Use `/compact` regularly to reduce context size
2. Close and restart Claude Code between major tasks
3. Consider adding large build directories to your `.gitignore` file


### [​](#command-hangs-or-freezes) Command hangs or freezes

If Claude Code seems unresponsive:

1. Press Ctrl+C to attempt to cancel the current operation
2. If unresponsive, you may need to close the terminal and restart


### [​](#esc-key-not-working-in-jetbrains-intellij%2C-pycharm%2C-etc-terminals) ESC key not working in JetBrains (IntelliJ, PyCharm, etc.) terminals

If you’re using Claude Code in JetBrains terminals and the ESC key doesn’t interrupt the agent as expected, this is likely due to a keybinding clash with JetBrains’ default shortcuts.

To fix this issue:

1. Go to Settings → Tools → Terminal
2. Click the “Configure terminal keybindings” hyperlink next to “Override IDE Shortcuts”
3. Within the terminal keybindings, scroll down to “Switch focus to Editor” and delete that shortcut

This will allow the ESC key to properly function for canceling Claude Code operations instead of being captured by PyCharm’s “Switch focus to Editor” action.


## [​](#getting-more-help) Getting more help

If you’re experiencing issues not covered here:

1. Use the `/bug` command within Claude Code to report problems directly to Anthropic
2. Check the [GitHub repository](https://github.com/anthropics/claude-code) for known issues
3. Run `/doctor` to check the health of your Claude Code installation

Was this page helpful?

YesNo

[Model Context Protocol (MCP)](./en/docs/claude-code/mcp/index.md)[Overview](./en/docs/claude-code/third-party-integrations/index.md)

On this page


- [Common installation issues](#common-installation-issues)

- [Windows installation issues: errors in WSL](#windows-installation-issues%3A-errors-in-wsl)

- [Linux installation issues: permission errors](#linux-installation-issues%3A-permission-errors)

- [Recommended solution: Migrate to local installation](#recommended-solution%3A-migrate-to-local-installation)

- [Alternative solution: Create a user-writable npm prefix for global installs](#alternative-solution%3A-create-a-user-writable-npm-prefix-for-global-installs)

- [System Recovery: If you have run commands that change ownership and permissions of system files or similar](#system-recovery%3A-if-you-have-run-commands-that-change-ownership-and-permissions-of-system-files-or-similar)

- [Auto-updater issues](#auto-updater-issues)

- [For permission errors](#for-permission-errors)

- [To disable auto-updates](#to-disable-auto-updates)

- [To check your installation](#to-check-your-installation)

- [Permissions and authentication](#permissions-and-authentication)

- [Repeated permission prompts](#repeated-permission-prompts)

- [Authentication issues](#authentication-issues)

- [Performance and stability](#performance-and-stability)

- [High CPU or memory usage](#high-cpu-or-memory-usage)

- [Command hangs or freezes](#command-hangs-or-freezes)

- [ESC key not working in JetBrains (IntelliJ, PyCharm, etc.) terminals](#esc-key-not-working-in-jetbrains-intellij%2C-pycharm%2C-etc-terminals)

- [Getting more help](#getting-more-help)

======= tasks/README.md ======
# AI Context File Generator & Auto-Bundling System

## Overview

This directory contains tasks for creating selective file bundles that serve as
context for AI interactions. The system includes:

1. **Manual Selection** - Create bundles from carefully selected files
2. **Auto-Bundling** - Automatically organize project content into topic-based
   bundles
3. **Preset System** - Apply file-specific processing rules
4. **Watch Mode** - Automatically regenerate bundles when files change

Using the `m1f` tool and auto-bundling scripts, you can create optimized context
files for AI assistants.

## VS Code Setup

To use these tasks in VS Code:

1. Create a `.vscode` directory in your project root (if it doesn't exist)
2. Copy the example tasks configuration:
   ```bash
   cp tasks/example.tasks.json .vscode/tasks.json
   ```
3. Now you can access all tasks via the Command Palette (`Ctrl+Shift+P` →
   "Tasks: Run Task")

The `example.tasks.json` file references all available task definitions:

- `m1f.json` - Manual file selection tasks
- `auto_bundle.json` - Automated bundling tasks with preset support
- `linting.json` - Code quality and linting tasks

**Note**: The `.vscode` directory is typically gitignored, so each developer can
customize their tasks.json as needed.

## When to Use This Tool

**Do NOT use this tool if:**

- You only have a few files to work with (just reference them directly)
- You want to include your entire project (this will overwhelm the AI with
  irrelevant information)

**DO use this tool when:**

- You have a large project (hundreds or thousands of files)
- You need to provide context from ~50 key files that are most relevant to your
  current task
- You want to give the AI a focused understanding of specific parts of your
  codebase

## Purpose

When working with AI assistants (like those in Windsurf, Cursor, VS Code, or
other AI-enabled editors), providing selective but sufficient context is
essential. This tool helps you to:

1. Select and combine only the most important files into a single document
2. Include metadata that helps AI systems understand file relationships
3. Create machine-readable formats optimized for Large Language Models
4. Efficiently manage context limitations by focusing on what matters

## Available Task Files

This directory contains several task definition files:

### Task Definition Files

1. **m1f.json** - Core context generation tasks for manual file selection
2. **auto_bundle.json** - Automated bundling tasks with 11 different bundle
   types
3. **linting.json** - Code quality and linting tasks
4. **example.tasks.json** - Example VS Code tasks.json that integrates all task
   files

### Supporting Files

- **ai_context_files.txt** - Example list of files for manual context creation
- **wp\_\*.txt** - WordPress-specific include/exclude patterns

### m1f.json - Core Context Generation Tasks

The `m1f.json` file defines core tasks for manual file selection:

### 1. AI Context: Create Combined File

This task combines files from your project with common exclusions:

- **Source**: Project directory with extensive filtering
- **Output**: `.gen/ai_context.m1f.txt`
- **Excludes**: Non-relevant directories (`node_modules`, `.git`, `.venv`, etc.)
- **Format**: Machine-readable format with clear file separators
- **Optimization**: Uses `--minimal-output` to generate only the combined file
  without extra logs or lists
- **Best for**: Initial exploration when you're unsure which files are important

### 2. AI Context: Create From Input List (Recommended)

This task combines only the specific files you select:

- **Source**: Files explicitly listed in `tasks/ai_context_files.txt`
- **Output**: `.gen/ai_context_custom.m1f.txt`
- **Format**: Same machine-readable format
- **Efficiency**: Uses `--minimal-output --quiet` for silent operation with no
  auxiliary files
- **Best for**: Focused work when you know which ~20-50 files are most relevant

## Practical Usage Guide

### Step 1: Identify Key Files

Start by identifying the most important files for your current task:

- **Core files**: Main entry points, key modules, and configuration files
- **Relevant to your task**: Files you're actively working on or need to
  understand
- **Context providers**: Files that explain project structure or domain concepts
- **Aim for 20-50 files**: This provides enough context without overwhelming the
  AI

### Step 2: Create Your Custom File List

The recommended approach is to create a task-specific file list in
`ai_context_files.txt`:

```
# Core modules for authentication feature
${workspaceFolder}/auth/user.py
${workspaceFolder}/auth/permissions.py
${workspaceFolder}/auth/tokens.py

# Configuration
${workspaceFolder}/config/settings.py

# Related utilities
${workspaceFolder}/utils/crypto.py
```

### Step 3: Generate the Context File

1. Open Windsurf/VS Code Command Palette (`Ctrl+Shift+P`)
2. Type "Tasks: Run Task" and press Enter
3. Select "AI Context: Create From Input List" (recommended)
4. The task will run and create the output file in the `.gen` directory

### Step 4: Use with AI

1. Open the generated `.m1f.txt` file in your editor
2. In your AI-enabled editor (Windsurf, Cursor, VS Code):
   - Include this file in the AI's context using the editor's method
   - In Windsurf: Type `@filename` in chat or use the "Add to Context" option

### auto_bundle.json - Automated Topic-Based Bundling

The `auto_bundle.json` file provides tasks for automatic bundle generation:

#### Available Auto-Bundle Tasks:

1. **Auto Bundle: Docs Bundle** - All documentation, READMEs, and markdown files
2. **Auto Bundle: Source Bundle** - All source code files
3. **Auto Bundle: Tests Bundle** - All test files and fixtures
4. **Auto Bundle: Complete Bundle** - Combined documentation, source, and tests
5. **Auto Bundle: Custom Focus** - Topic-specific bundles (html2md, m1f, s1f,
   etc.)
6. **Auto Bundle: Watch and Update** - Monitor changes and regenerate bundles
7. **Auto Bundle: With Preset** - Apply processing rules during bundling
8. **Auto Bundle: Generate All Bundles** - Creates all standard bundles in one
   go
9. **Auto Bundle: Preset - All Standard** - Creates all standard preset-based
   bundles
10. **Auto Bundle: Preset - Focused** - Creates focused bundles using presets
11. **Auto Bundle: List Presets** - Lists all available presets and their groups

#### Using Auto-Bundle Tasks:

1. Open VS Code Command Palette (`Ctrl+Shift+P`)
2. Type "Tasks: Run Task"
3. Select an auto-bundle task (e.g., "Auto Bundle: Complete Bundle")
4. The bundle will be created in `.ai-context/`

#### Configuration:

Auto-bundling is configured via `.m1f.config.yml`. See the
[Auto Bundle Guide](../docs/01_m1f/06_auto_bundle_guide.md) for details.

#### Preset-Based Auto-Bundling:

The preset-based tasks (9-11) use the `scripts/auto_bundle_preset.sh` script
which leverages the m1f preset system:

- **Intelligent file filtering** - Presets apply smart includes/excludes based
  on file type
- **Per-file-type processing** - Different settings for different file
  extensions
- **Security scanning control** - Enable/disable security checks per file type
- **Size limit management** - Different size limits for CSS vs PHP files
- **Processing actions** - Minify, strip tags, compress whitespace per file type

Example preset usage:

```bash
# Create all standard bundles using presets
m1f-update all

# Create WordPress-specific bundles
m1f-update focus wordpress

# Use specific preset with group
m1f auto-bundle preset web-project frontend
```

Available presets:

- `wordpress` - WordPress themes and plugins with appropriate excludes
- `web-project` - Modern web projects with frontend/backend separation
- `documentation` - Documentation-focused bundles
- `example-globals` - Example with comprehensive global settings

See [m1f Presets Documentation](../docs/01_m1f/02_m1f_presets.md) for detailed
preset information.

## Best Practices for Effective AI Context

### For Manual Selection:

1. **Be selective**: Choose only the most important 20-50 files for your current
   task
2. **Include structure files**: Add README.md, configuration files, and key
   interfaces
3. **Group related files**: When customizing your list, organize files by
   related functionality
4. **Comment your file lists**: Add comments in `ai_context_files.txt` to
   explain why files are included

### For Auto-Bundling:

1. **Use focused bundles**: Start with topic-specific bundles (docs, src) before
   using complete
2. **Configure properly**: Customize `.m1f.config.yml` for your project
   structure
3. **Apply presets**: Use the preset system to optimize file processing
4. **Watch mode**: Use watch tasks during active development
5. **Refresh regularly**: Regenerate bundles after significant changes

## Customizing the Process

You can customize the tasks by editing `m1f.json` for your specific needs:

- Modify output file locations and naming conventions
- Adjust file exclusion patterns for your project structure
- Add task-specific configurations for different project components

## Additional Options

Consider these advanced options from `m1f` for specific needs:

- `--include-dot-paths`: Useful for including WordPress-specific configuration
  files like `.htaccess` or other dot files and directories (e.g., `.config/`,
  `.github/`) if they are relevant to your context. By default, all files and
  directories starting with a dot are excluded.
- `--separator-style`: While `MachineReadable` is generally recommended for AI
  context files, you can explore other styles if needed.
- `--skip-output-file`: Executes all operations (logs, additional files, etc.)
  but skips writing the final .m1f.txt output file. Useful when you're only
  interested in generating the file and directory listings or logs, but not the
  combined content file itself.

For a complete list of all available options and their detailed descriptions,
run:

```
m1f --help
```

## Machine-Readable Format

The default separator style "MachineReadable" optimizes the combined file for AI
understanding:

```
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
METADATA_JSON:
{
    "original_filepath": "relative/path.ext",
    "original_filename": "path.ext",
    "timestamp_utc_iso": "2023-01-01T12:00:00Z",
    "type": ".ext",
    "size_bytes": 1234,
    "checksum_sha256": "abc123..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---

[file content]

--- PYMK1F_END_FILE_CONTENT_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
```

This format ensures the AI can clearly identify file boundaries and understand
metadata about each file, making it more effective in processing your selected
files. The JSON metadata includes the original filepath, filename, timestamp in
ISO format, file type, size in bytes, and SHA256 checksum for data integrity
verification. It's particularly suitable for automated processing and splitting
back into individual files.

## Author

Franz und Franz - https://franz.agency

## Use Case: WordPress Theme/Plugin Context File

When developing WordPress themes or plugins, you often need to provide an AI
assistant with the context of your specific theme/plugin files. Here's how you
can create a single context file for this purpose using `m1f.py`:

### 1. Strategically Select WordPress Files

To create an effective AI context for WordPress development, carefully select
files that represent the functionality or problem area you're focusing on.
Consider these categories:

- **Core Theme Files**:
  - `style.css` (for theme identity and metadata)
  - `functions.php` (critical for theme logic, hooks, and filters)
  - `index.php`, `header.php`, `footer.php`, `sidebar.php` (main template
    structure)
  - Specific template files relevant to your task: `single.php`, `page.php`,
    `archive.php`, `category.php`, `tag.php`, `search.php`, `404.php`,
    `front-page.php`, `home.php`.
  - Template parts (e.g., files in `template-parts/` directory like
    `content-page.php`).
  - Customizer settings and controls if relevant (`inc/customizer.php`).
  - Key JavaScript (e.g., `assets/js/custom.js`) and CSS files.

- **Core Plugin Files**:
  - The main plugin file (e.g., `your-plugin-name/your-plugin-name.php`) which
    includes the plugin header.
  - Files containing main classes, action/filter hooks, shortcodes, and admin
    panel logic.
  - AJAX handlers, REST API endpoint definitions.
  - Files related to Custom Post Types (CPTs) or taxonomies defined by the
    plugin.
  - Key JavaScript and CSS files specific to the plugin's functionality.

- **Feature-Specific Files**: If you are working on a particular feature (e.g.,
  WooCommerce integration, a custom contact form, a specific admin page):
  - Include all files directly related to that feature from both your theme and
    any relevant plugins.
  - For example, for WooCommerce: relevant template overrides in
    `your-theme/woocommerce/`, custom functions related to WooCommerce in
    `functions.php` or a plugin.

- **Problem-Specific Files**: If debugging, include files involved in the error
  stack trace or areas where the bug is suspected.

- **Important Note on Parent/Child Themes**:
  - If using a child theme, include relevant files from _both_ the child theme
    and parent theme that interact or are being overridden.

### 2. Structure Your Input File List (`my_wp_context_files.txt`)

Create a plain text file (e.g., `my_wp_context_files.txt`) listing the absolute
or relative paths to your selected files. Organize and comment this list for
clarity, especially if you plan to reuse or modify it.

**Example `my_wp_context_files.txt` for a theme feature and a related plugin:**

```plaintext
# Paths should be relative to your project root, or absolute.
# For VS Code tasks, ${workspaceFolder} can be used.

# =====================================
# My Custom Theme: "AwesomeTheme"
# Working on: Homepage Slider Feature
# =====================================

# Core Theme Files
wp-content/themes/AwesomeTheme/style.css
wp-content/themes/AwesomeTheme/functions.php
wp-content/themes/AwesomeTheme/header.php
wp-content/themes/AwesomeTheme/footer.php
wp-content/themes/AwesomeTheme/front-page.php

# Homepage Slider Specifics
wp-content/themes/AwesomeTheme/template-parts/homepage-slider.php
wp-content/themes/AwesomeTheme/includes/slider-customizer-settings.php
wp-content/themes/AwesomeTheme/assets/js/homepage-slider.js
wp-content/themes/AwesomeTheme/assets/css/homepage-slider.css

# =====================================
# Related Plugin: "UtilityPlugin"
# Used by: Homepage Slider for data
# =====================================
wp-content/plugins/UtilityPlugin/utility-plugin.php
wp-content/plugins/UtilityPlugin/includes/class-data-provider.php
wp-content/plugins/UtilityPlugin/includes/cpt-slides.php

# =====================================
# General WordPress Context (Optional)
# =====================================
# Consider adding if debugging core interactions, but be selective:
# wp-includes/post.php
# wp-includes/query.php
```

**Tips for your list:**

- Use comments (`#`) to organize sections or explain choices.
- Start with a small, focused set of files and expand if the AI needs more
  context.
- Paths are typically relative to where you run the `m1f.py` script, or from the
  `${workspaceFolder}` if using VS Code tasks.

### 3. Generate the Combined Context File

Run `m1f` from your terminal, pointing to your input file list and specifying an
output file. It's recommended to use the `MachineReadable` separator style.

```bash
m1f \
  --input-file my_wp_context_files.txt \
  --output-file .gen/wordpress_context.m1f.txt \
  --separator-style MachineReadable \
  --force \
  --minimal-output
```

**Explanation of options:**

- `--input-file my_wp_context_files.txt`: Specifies the list of files to
  include.
- `--output-file .gen/wordpress_context.m1f.txt`: Defines where the combined
  file will be saved. Using a `.gen` or `.ai-context` subfolder is good
  practice.
- `--separator-style MachineReadable`: Ensures the output is easily parsable by
  AI tools.
- `--force`: Overwrites the output file if it already exists.
- `--minimal-output`: Prevents the script from generating auxiliary files like
  file lists or logs, keeping your project clean.

You can also generate only the auxiliary files (file list and directory list)
without creating the combined file:

```bash
m1f \
  --input-file my_wp_context_files.txt \
  --output-file .gen/wordpress_auxiliary_only.m1f.txt \
  --skip-output-file \
  --verbose
```

This will create `wordpress_auxiliary_only_filelist.txt` and
`wordpress_auxiliary_only_dirlist.txt` files but won't generate the combined
content file.

### 4. Using the Context File with Your AI Assistant

Once `wordpress_context.m1f.txt` is generated:

1.  Open the file in your AI-enabled editor (e.g., Cursor, VS Code with AI
    extensions).
2.  Use your editor's features to add this file to the AI's context. For
    example, in Cursor, you can type `@wordpress_context.m1f.txt` in the chat or
    use the "Add to Context" option.
3.  Now, when you ask the AI questions or request code related to your WordPress
    theme/plugin, it will have the specific context of your selected files.

### Example: Creating a VS Code Task

You can automate this process by creating a VS Code task in your
`.vscode/tasks.json` file:

```json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "WordPress: Generate AI Context from List",
      "type": "shell",
      "command": "python",
      "args": [
        "${workspaceFolder}/tools/m1f.py",
        "--input-file",
        "${workspaceFolder}/my_wp_context_files.txt",
        "--output-file",
        "${workspaceFolder}/.gen/wordpress_context.m1f.txt",
        "--separator-style",
        "MachineReadable",
        "--force",
        "--minimal-output",
        "--quiet"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "detail": "Combines specified WordPress theme/plugin files into a single context file for AI."
    },
    {
      "label": "WordPress: Generate File Lists Only",
      "type": "shell",
      "command": "python",
      "args": [
        "${workspaceFolder}/tools/m1f.py",
        "--input-file",
        "${workspaceFolder}/my_wp_context_files.txt",
        "--output-file",
        "${workspaceFolder}/.gen/wordpress_auxiliary.m1f.txt",
        "--skip-output-file",
        "--verbose"
      ],
      "problemMatcher": [],
      "group": "build",
      "detail": "Generates file and directory lists without creating the combined file."
    }
  ]
}
```

With this task, you can simply run "WordPress: Generate AI Context from List"
from the VS Code Command Palette to update your context file. Remember to
maintain your `my_wp_context_files.txt` list as your project evolves.

This approach helps you provide targeted and relevant information to your AI
assistant, leading to more accurate and helpful responses for your WordPress
development tasks.

## Example: Organizing a Large Project with `m1f`

When dealing with a project that contains hundreds or thousands of files, start
by generating a complete file and directory listing without creating the merged
context file. Run the **Project Review: Generate Lists** task. It calls `m1f`
with `--skip-output-file` and saves two inventory files to the `m1f` directory:

- `m1f/project_review_filelist.txt`
- `m1f/project_review_dirlist.txt`

Review these lists and decide which areas of the project you want to load into
your AI assistant. Typical numbered context files might include:

- `1_doc.txt` – the full documentation bundle
- `2_template.txt` – template files from your theme
- `3_plugin.txt` – a specific plugin or a group of plugins

Store each generated context file in the `m1f` folder with a number prefix for
quick referencing in Windsurf, Cursor, or Claude (for example `@m1f/1_doc.txt`).

To keep the inventory current during development, launch **Project Review: Watch
for Changes**. This background watcher reruns the list generation whenever files
are modified.

Remember to add `m1f/` (and `.1f/` if used) to your `.gitignore` so these helper
files stay out of version control.

======= tasks/ai_context_files.txt ======
# This is an example file list for AI context bundling
# Group related files by feature/functionality with comments

# Core project documentation
/path/to/project/README.md
/path/to/project/ARCHITECTURE.md
/path/to/project/docs/api_reference.md

# Authentication feature
/path/to/project/auth/models.py           # Data models for users and permissions
/path/to/project/auth/views.py            # Authentication API endpoints
/path/to/project/auth/middleware.py       # Auth verification middleware
/path/to/project/auth/tests/test_auth.py  # Key tests that explain requirements

# Database configuration
/path/to/project/config/database.py       # Database connection settings
/path/to/project/db/migrations/001_init.py # Shows schema structure
/path/to/project/db/models/base.py        # Base model classes

# Frontend components
/path/to/project/frontend/components/AuthForm.jsx
/path/to/project/frontend/components/Dashboard.jsx
/path/to/project/frontend/services/api.js # API integration points

# Utility functions
/path/to/project/utils/logging.py
/path/to/project/utils/validators.py

# Configuration files
/path/to/project/.env.example             # Shows required environment variables
/path/to/project/config/settings.py       # Application settings

# Main application entry points
/path/to/project/app.py                   # Main application initialization
/path/to/project/server.py                # Server startup code

# Add task-specific files here as needed

======= tasks/wp_excludes.txt ======
# WordPress Paths to Exclude

# Core WordPress system files
wp-admin/
wp-includes/

# Uploads directory (usually too large and contains only binary media files)
wp-content/uploads/

# Cache files
wp-content/cache/
wp-content/advanced-cache.php
wp-content/wp-cache-config.php
wp-content/object-cache.php

# Default and inactive themes
wp-content/themes/twentytwenty/
wp-content/themes/twentytwentyone/
wp-content/themes/twentytwentytwo/
wp-content/themes/twentytwentythree/
wp-content/themes/twentytwentyfour/

# Common plugins not relevant for development
wp-content/plugins/akismet/
wp-content/plugins/hello-dolly/
wp-content/plugins/wordpress-seo/
wp-content/plugins/wp-super-cache/
wp-content/plugins/wordfence/
wp-content/plugins/elementor/
wp-content/plugins/woocommerce/

# Language files
wp-content/languages/plugins/
wp-content/languages/themes/
wp-content/languages/continents-cities*.po
wp-content/languages/admin*.po

# Backup files
*.bak
*.backup
*.old
*-backup.*
~*

# Plugin/theme development build artifacts
node_modules/
dist/
build/
vendor/
.git/
.github/
.vscode/

# Logs and temporary files
*.log
*.tmp
.DS_Store
Thumbs.db

# Database dumps
*.sql

# Minified files (keep the source files, exclude minified versions)
*.min.js
*.min.css 

======= tasks/wp_plugin_includes.txt ======
# WordPress Plugin Files to Include

# Main plugin file
wp-content/plugins/myplugin/myplugin.php

# Plugin structure
wp-content/plugins/myplugin/includes/*.php
wp-content/plugins/myplugin/admin/*.php
wp-content/plugins/myplugin/public/*.php
wp-content/plugins/myplugin/includes/class-*.php
wp-content/plugins/myplugin/admin/class-*.php
wp-content/plugins/myplugin/public/class-*.php

# API and REST endpoints
wp-content/plugins/myplugin/includes/api/*.php
wp-content/plugins/myplugin/includes/rest-api/*.php

# Templates and partials
wp-content/plugins/myplugin/templates/*.php
wp-content/plugins/myplugin/partials/*.php

# Assets
wp-content/plugins/myplugin/assets/js/*.js
wp-content/plugins/myplugin/assets/css/*.css
wp-content/plugins/myplugin/admin/js/*.js
wp-content/plugins/myplugin/admin/css/*.css
wp-content/plugins/myplugin/public/js/*.js
wp-content/plugins/myplugin/public/css/*.css

# Blocks (if using Gutenberg blocks)
wp-content/plugins/myplugin/blocks/*.php
wp-content/plugins/myplugin/blocks/*.js
wp-content/plugins/myplugin/blocks/*.json

# Languages and internationalization
wp-content/plugins/myplugin/languages/*.pot
wp-content/plugins/myplugin/languages/*.po
wp-content/plugins/myplugin/languages/*.mo

# Configuration
wp-content/plugins/myplugin/config/*.php
wp-content/plugins/myplugin/uninstall.php 

======= tasks/wp_theme_includes.txt ======
# WordPress Theme Files to Include

# Core theme files
wp-content/themes/mytheme/style.css
wp-content/themes/mytheme/functions.php
wp-content/themes/mytheme/index.php
wp-content/themes/mytheme/header.php
wp-content/themes/mytheme/footer.php
wp-content/themes/mytheme/sidebar.php
wp-content/themes/mytheme/page.php
wp-content/themes/mytheme/single.php
wp-content/themes/mytheme/archive.php
wp-content/themes/mytheme/search.php
wp-content/themes/mytheme/404.php
wp-content/themes/mytheme/comments.php

# Template parts
wp-content/themes/mytheme/template-parts/*.php

# Theme includes and functionality
wp-content/themes/mytheme/inc/*.php
wp-content/themes/mytheme/includes/*.php

# Theme assets
wp-content/themes/mytheme/assets/js/*.js
wp-content/themes/mytheme/assets/css/*.css
wp-content/themes/mytheme/assets/scss/*.scss

# WooCommerce templates (if used)
wp-content/themes/mytheme/woocommerce/*.php

# Block patterns and templates
wp-content/themes/mytheme/patterns/*.php
wp-content/themes/mytheme/block-templates/*.html
wp-content/themes/mytheme/block-template-parts/*.html

# Configuration files
wp-content/themes/mytheme/theme.json 

======= tasks/wp_theme_plugin_includes.txt ======
# WordPress Theme Files to Include

# Core theme files
wp-content/themes/mytheme/style.css
wp-content/themes/mytheme/functions.php
wp-content/themes/mytheme/index.php
wp-content/themes/mytheme/header.php
wp-content/themes/mytheme/footer.php
wp-content/themes/mytheme/sidebar.php
wp-content/themes/mytheme/page.php
wp-content/themes/mytheme/single.php
wp-content/themes/mytheme/archive.php
wp-content/themes/mytheme/search.php
wp-content/themes/mytheme/404.php
wp-content/themes/mytheme/comments.php

# Template parts
wp-content/themes/mytheme/template-parts/*.php

# Theme includes and functionality
wp-content/themes/mytheme/inc/*.php
wp-content/themes/mytheme/includes/*.php

# Theme assets
wp-content/themes/mytheme/assets/js/*.js
wp-content/themes/mytheme/assets/css/*.css
wp-content/themes/mytheme/assets/scss/*.scss

# WooCommerce templates (if used)
wp-content/themes/mytheme/woocommerce/*.php

# Block patterns and templates
wp-content/themes/mytheme/patterns/*.php
wp-content/themes/mytheme/block-templates/*.html
wp-content/themes/mytheme/block-template-parts/*.html

# Configuration files
wp-content/themes/mytheme/theme.json
# WordPress Plugin Files to Include

# Main plugin file
wp-content/plugins/myplugin/myplugin.php

# Plugin structure
wp-content/plugins/myplugin/includes/*.php
wp-content/plugins/myplugin/admin/*.php
wp-content/plugins/myplugin/public/*.php
wp-content/plugins/myplugin/includes/class-*.php
wp-content/plugins/myplugin/admin/class-*.php
wp-content/plugins/myplugin/public/class-*.php

# API and REST endpoints
wp-content/plugins/myplugin/includes/api/*.php
wp-content/plugins/myplugin/includes/rest-api/*.php

# Templates and partials
wp-content/plugins/myplugin/templates/*.php
wp-content/plugins/myplugin/partials/*.php

# Assets
wp-content/plugins/myplugin/assets/js/*.js
wp-content/plugins/myplugin/assets/css/*.css
wp-content/plugins/myplugin/admin/js/*.js
wp-content/plugins/myplugin/admin/css/*.css
wp-content/plugins/myplugin/public/js/*.js
wp-content/plugins/myplugin/public/css/*.css

# Blocks (if using Gutenberg blocks)
wp-content/plugins/myplugin/blocks/*.php
wp-content/plugins/myplugin/blocks/*.js
wp-content/plugins/myplugin/blocks/*.json

# Languages and internationalization
wp-content/plugins/myplugin/languages/*.pot
wp-content/plugins/myplugin/languages/*.po
wp-content/plugins/myplugin/languages/*.mo

# Configuration
wp-content/plugins/myplugin/config/*.php
wp-content/plugins/myplugin/uninstall.php

======= docs/01_m1f/README.md ======
# m1f Documentation

Welcome to the m1f (Make One File) documentation. This tool combines multiple
text files into a single output file, perfect for providing context to Large
Language Models (LLMs) and creating bundled documentation.

## Table of Contents

### Getting Started

- [**00_m1f.md**](00_m1f.md) - Main documentation with features, usage examples,
  and architecture
- [**01_quick_reference.md**](./01_quick_reference.md) - Quick command reference
  and common patterns
- [**02_cli_reference.md**](./02_cli_reference.md) - Complete command-line
  parameter reference
- [**03_troubleshooting.md**](./03_troubleshooting.md) - Common issues and
  solutions

### Preset System

- [**10_m1f_presets.md**](./10_m1f_presets.md) - Comprehensive preset system
  guide
- [**11_preset_per_file_settings.md**](./11_preset_per_file_settings.md) -
  Advanced per-file processing configuration
- [**12_preset_reference.md**](./12_preset_reference.md) - Complete preset
  reference with all settings, features, and clarifications

### Features & Tools

- [**20_auto_bundle_guide.md**](./20_auto_bundle_guide.md) - Automated bundling
  with configuration files
- [**21_development_workflow.md**](./21_development_workflow.md) - Best
  practices for development workflows
- [**25_m1f_config_examples.md**](./25_m1f_config_examples.md) - Comprehensive
  configuration examples for different project types

### AI Integration

- [**30_claude_workflows.md**](./30_claude_workflows.md) - Working with Claude
  and LLMs
- [**31_claude_code_integration.md**](./31_claude_code_integration.md) -
  Integration with Claude Code for AI-assisted development

### Advanced Topics

- [**40_security_best_practices.md**](./40_security_best_practices.md) -
  Security guidelines and protective measures
- [**41_version_3_2_features.md**](./41_version_3_2_features.md) - Comprehensive
  v3.2 feature documentation and migration guide

## Quick Start

```bash
# Basic usage
m1f -s ./your_project -o ./combined.txt

# With file type filtering
m1f -s ./src -o code.txt --include-extensions .py .js

# Using presets
m1f -s . -o bundle.txt --preset wordpress.m1f-presets.yml

# v3.2 features: Allow duplicate files + custom encoding
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Security scanning with warning mode
m1f -s ./src -o bundle.txt --security-check warn
```

For detailed information, start with the [main documentation](00_m1f.md) or jump
to the [quick reference](./01_quick_reference.md) for common commands.

======= docs/01_m1f/00_m1f.md ======
# m1f (Make One File)

A modern, high-performance tool that combines multiple files into a single file
with rich metadata, content deduplication, and async I/O support.

## Overview

The m1f tool solves a common challenge when working with LLMs: providing
sufficient context without exceeding token limits. It creates optimized
reference files from multiple sources while automatically handling duplicates
and providing comprehensive metadata.

## Key Features

- **Content Deduplication**: Automatically detects and skips duplicate files
  based on SHA256 checksums
- **Async I/O**: High-performance file operations with concurrent processing
- **Type Safety**: Full type annotations throughout the codebase
- **Smart Filtering**: Advanced file filtering with size limits, extensions, and
  patterns
- **Symlink Support**: Intelligent symlink handling with cycle detection
- **Professional Security**: Integration with detect-secrets for sensitive data
  detection

## Quick Start

### Initialize m1f in Your Project

```bash
# Quick setup for any project
cd /your/project
m1f-init

# This creates in the m1f/ directory:
# The place for your bundled files of the current project
```

### Basic m1f Commands

```bash
# Basic usage with a source directory
m1f -s ./your_project -o ./combined.txt

# Include only specific file types
m1f -s ./your_project -o ./combined.txt --include-extensions .py .js .md

# Include only documentation files (62 extensions)
m1f -s ./your_project -o ./docs_bundle.txt --docs-only

# Exclude specific directories
m1f -s ./your_project -o ./combined.txt --excludes "node_modules/" "build/" "dist/"

# Filter by file size (new in v2.0.0)
m1f -s ./your_project -o ./combined.txt --max-file-size 50KB
```

> **Note**: For a complete reference of all available options, see the
> [CLI Reference](./07_cli_reference.md). For troubleshooting, see the
> [Troubleshooting Guide](./08_troubleshooting.md).

## Command Line Options

| Option                      | Description                                                                                                                                                                                                                                                      |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-s, --source-directory`    | Path to the directory containing files to process. Can be specified multiple times to include files from multiple directories (e.g., `-s dir1 -s dir2`)                                                                                                          |
| `-i, --input-file`          | Path to a file containing a list of files/directories to process. Can be used together with --source-directory to resolve relative paths in the input file against the source directory                                                                          |
| `-o, --output-file`         | Path for the combined output file                                                                                                                                                                                                                                |
| `-f, --force`               | Force overwrite of existing output file without prompting                                                                                                                                                                                                        |
| `-t, --add-timestamp`       | Add a timestamp (\_YYYYMMDD_HHMMSS) to the output filename. Useful for versioning and preventing accidental overwrite of previous output files                                                                                                                   |
| `--filename-mtime-hash`     | Append a hash of file modification timestamps to the filename. The hash is created using all filenames and their modification dates, enabling caching mechanisms. Hash only changes when files are added/removed or their content changes                        |
| `--include-extensions`      | Space-separated list of file extensions to include (e.g., `--include-extensions .py .js .html` will only process files with these extensions)                                                                                                                    |
| `--exclude-extensions`      | Space-separated list of file extensions to exclude (e.g., `--exclude-extensions .log .tmp .bak` will skip these file types)                                                                                                                                      |
| `--includes`                | Space-separated list of gitignore-style patterns to include (e.g., `--includes "*.py" "src/**" "!test.py"`). When combined with `--include-extensions`, files must match both criteria                                                                           |
| `--docs-only`               | Include only documentation files (62 extensions including .md, .txt, .rst, .org, .tex, .info, etc.). Overrides include-extensions.                                                                                                                               |
| `--max-file-size`           | Skip files larger than the specified size (e.g., `--max-file-size 50KB` will exclude files over 50 kilobytes). Supports units: B, KB, MB, GB, TB. Useful for filtering out large generated files, logs, or binary data when merging text files for LLM context   |
| `--exclude-paths-file`      | Path to file containing paths or patterns to exclude. Supports both exact path lists and gitignore-style pattern formats. Can use a .gitignore file directly                                                                                                     |
| `--no-default-excludes`     | Disable default directory exclusions. By default, the following directories are excluded: vendor, node_modules, build, dist, cache, .git, .svn, .hg, \***\*pycache\*\*** (see [Default Excludes Guide](./26_default_excludes_guide.md) for complete list)        |
| `--excludes`                | Space-separated list of paths to exclude. Supports directory names, exact file paths, and gitignore-style patterns (e.g., `--excludes logs "config/settings.json" "*.log" "build/" "!important.log"`)                                                            |
| `--include-dot-paths`       | Include files and directories that start with a dot (e.g., .gitignore, .hidden/). By default, all dot files and directories are excluded.                                                                                                                        |
| `--include-binary-files`    | Attempt to include files with binary extensions                                                                                                                                                                                                                  |
| `--remove-scraped-metadata` | Remove scraped metadata (URL, timestamp) from HTML2MD files during processing. Automatically detects and removes metadata blocks at the end of markdown files created by HTML scraping tools                                                                     |
| `--separator-style`         | Style of separators between files (`Standard`, `Detailed`, `Markdown`, `MachineReadable`, `None`)                                                                                                                                                                |
| `--line-ending`             | Line ending for script-generated separators (`lf` or `crlf`)                                                                                                                                                                                                     |
| `--convert-to-charset`      | Convert all files to the specified character encoding (`utf-8` [default], `utf-16`, `utf-16-le`, `utf-16-be`, `ascii`, `latin-1`, `cp1252`). The original encoding is automatically detected and included in the metadata when using compatible separator styles |
| `--abort-on-encoding-error` | Abort processing if encoding conversion errors occur. Without this flag, characters that cannot be represented will be replaced                                                                                                                                  |
| `-v, --verbose`             | Enable verbose logging. Without this flag, only summary information is shown, and detailed file-by-file logs are written to the log file instead of the console                                                                                                  |
| `--minimal-output`          | Generate only the combined output file (no auxiliary files)                                                                                                                                                                                                      |
| `--skip-output-file`        | Execute operations but skip writing the final output file                                                                                                                                                                                                        |
| `-q, --quiet`               | Suppress all console output                                                                                                                                                                                                                                      |
| `--create-archive`          | Create a backup archive of all processed files                                                                                                                                                                                                                   |
| `--archive-type`            | Type of archive to create (`zip` or `tar.gz`)                                                                                                                                                                                                                    |
| `--security-check`          | Scan files for secrets before merging (`abort`, `skip`, `warn`)                                                                                                                                                                                                  |
| `--preset`                  | One or more preset configuration files for file-specific processing. Files are loaded in order with later files overriding earlier ones                                                                                                                          |
| `--preset-group`            | Specific preset group to use from the configuration. If not specified, all matching presets from all groups are considered                                                                                                                                       |
| `--disable-presets`         | Disable all preset processing even if preset files are loaded                                                                                                                                                                                                    |

## Preset System

The preset system allows you to define file-specific processing rules for
different file types within the same bundle. This is particularly useful for
projects with mixed content types.

### Preset Hierarchy

Presets are loaded in the following order (highest priority wins):

1. **Global Presets** (~/.m1f/global-presets.yml) - Lowest priority
2. **User Presets** (~/.m1f/presets/\*.yml) - Medium priority
3. **Project Presets** (via --preset parameter) - Highest priority

### Quick Preset Examples

```bash
# Use built-in WordPress preset
m1f -s ./wp-site -o bundle.txt --preset presets/wordpress.m1f-presets.yml

# Use specific preset group
m1f -s ./project -o bundle.txt --preset my-presets.yml --preset-group production

# Load multiple preset files (merged in order)
m1f -s . -o out.txt --preset defaults.yml project.yml overrides.yml
```

### Available Processing Actions

- **minify** - Remove unnecessary whitespace (HTML, CSS, JS)
- **strip_tags** - Remove specified HTML tags
- **strip_comments** - Remove comments based on file type
- **compress_whitespace** - Normalize whitespace
- **remove_empty_lines** - Remove all empty lines
- **custom** - Apply custom processors

For detailed preset documentation, see:

- [Preset System Guide](02_m1f_presets.md) - Complete preset documentation
- [Per-File-Type Settings](03_m1f_preset_per_file_settings.md) - File-specific
  overrides

## Usage Examples

### Basic Operations

```bash
# Basic command using a source directory
m1f --source-directory /path/to/your/code \
  --output-file /path/to/combined_output.txt

# Using multiple source directories (new in v3.4.0)
m1f -s ./src -s ./docs -s ./tests -o combined_output.txt

# Using an input file containing paths to process (one per line)
m1f -i filelist.txt -o combined_output.txt

# Using both source directory and input file together
m1f -s ./source_code -i ./file_list.txt -o ./combined.txt

# Using include patterns to filter files (new in v3.4.0)
m1f -s ./project -o output.txt --includes "src/**" "*.py" "!*_test.py"

# Combining includes with extensions for precise filtering
m1f -s ./project -o docs.txt --include-extensions .md .rst \
  --includes "docs/**" "README.md"

# Remove scraped metadata from HTML2MD files (new in v2.0.0)
m1f -s ./scraped_docs -o ./clean_docs.txt \
  --include-extensions .md --remove-scraped-metadata
```

### Advanced Operations

```bash
# Using MachineReadable style with verbose logging
m1f -s ./my_project -o ./output/bundle.m1f.txt \
  --separator-style MachineReadable --force --verbose

# Creating a combined file and a backup zip archive
m1f -s ./source_code -o ./dist/combined.txt \
  --create-archive --archive-type zip

# Only include text files under 50KB to avoid large generated files
m1f -s ./project -o ./text_only.txt \
  --max-file-size 50KB --include-extensions .py .js .md .txt .json

# Handle symlinks with cycle detection (new in v2.0.0)
m1f -s ./project -o ./output.txt \
  --include-symlinks --verbose
```

## Security Check

The `--security-check` option scans files for potential secrets using
`detect-secrets` if the library is installed. When secrets are detected you can
decide how the script proceeds:

- `abort` – stop processing immediately and do not create the output file.
- `skip` – omit files that contain secrets from the final output.
- `warn` – include all files but print a summary warning at the end.

If `detect-secrets` is not available, a simplified pattern-based scan is used as
a fallback.

## Output Files

By default, `m1f.py` creates several output files to provide comprehensive
information about the processed files:

1. **Primary output file** - The combined file specified by `--output-file`
   containing all processed files with separators
2. **Log file** - A `.log` file with the same base name as the output file,
   containing detailed processing information
3. **File list** - A `_filelist.txt` file containing the paths of all included
   files
4. **Directory list** - A `_dirlist.txt` file containing all unique directories
   from the included files
5. **Archive file** - An optional backup archive (zip or tar.gz) if
   `--create-archive` is specified

To create only the primary output file and skip the auxiliary files, use the
`--minimal-output` option:

```bash
# Create only the combined output file without any auxiliary files
m1f -s ./src -o ./combined.txt --minimal-output
```

## Common Use Cases

### Documentation Compilation

```bash
# Create a complete documentation bundle from all markdown files
m1f -s ./docs -o ./doc_bundle.m1f.txt --include-extensions .md
```

### Code Review Preparation

```bash
# Bundle specific components for code review
m1f -i code_review_files.txt -o ./review_bundle.m1f.txt
```

### WordPress Development

```bash
# Combine theme or plugin files for AI analysis
m1f -s ./wp-content/themes/my-theme -o ./theme_context.m1f.txt \
  --include-extensions .php .js .css --exclude-paths-file ./exclude_build_files.txt
```

### Project Knowledge Base

```bash
# Create a searchable knowledge base from project documentation
m1f -s ./project -o ./knowledge_base.m1f.txt \
  --include-extensions .md .txt .rst --minimal-output
```

### Documentation Bundles

```bash
# Create a documentation-only bundle using --docs-only
m1f -s ./project -o ./docs_bundle.txt --docs-only

# Equivalent using include-extensions (more verbose)
m1f -s ./project -o ./docs_bundle.txt --include-extensions \
  .1 .1st .2 .3 .4 .5 .6 .7 .8 .adoc .asciidoc .changelog .changes \
  .creole .faq .feature .help .history .info .lhs .litcoffee .ltx \
  .man .markdown .markdown2 .md .mdown .mdtxt .mdtext .mdwn .mdx \
  .me .mkd .mkdn .mkdown .ms .news .nfo .notes .org .pod .pod6 \
  .qmd .rd .rdoc .readme .release .rmd .roff .rst .rtf .story \
  .t .tex .texi .texinfo .text .textile .todo .tr .txt .wiki
```

### HTML2MD Integration

```bash
# Combine scraped markdown files and remove metadata
m1f -s ./scraped_content -o ./clean_content.m1f.txt \
  --include-extensions .md --remove-scraped-metadata

# Merge multiple scraped websites into a clean documentation bundle
m1f -s ./web_content -o ./web_docs.m1f.txt \
  --include-extensions .md --remove-scraped-metadata --separator-style Markdown
```

### Project Analysis and Overview

```bash
# Generate complete project file and directory lists for analysis
m1f -s . -o m1f/project_analysis.txt --skip-output-file \
  --exclude-paths-file .gitignore --excludes m1f/

# This creates (without the main output file):
# - m1f/project_analysis_filelist.txt  # All project files
# - m1f/project_analysis_dirlist.txt   # All directories
# - m1f/project_analysis.log           # Processing log
```

Use this when you need:

- A complete overview of your project structure
- To understand what files m1f will process
- To verify your exclusion patterns are working correctly
- To analyze project composition before creating bundles
- Input for m1f-claude --init to create optimal configurations

The file lists respect all m1f defaults (excluding .git, node_modules, etc.)
plus your .gitignore patterns.

## Output Files

### Main Output File

The primary output specified with `-o` contains the combined content of all
processed files.

### Auxiliary Files (Automatically Generated)

For each m1f operation, auxiliary files are automatically created alongside the
main output file:

1. **File List** (`<output>_filelist.txt`)
   - Complete list of all files included in the bundle
   - One file path per line
   - Useful for:
     - Understanding what's in your bundle
     - Creating custom file lists for specific m1f operations
     - Input for other tools or scripts
     - Selective inclusion/exclusion in future bundles

2. **Directory List** (`<output>_dirlist.txt`)
   - Complete list of all directories containing processed files
   - One directory path per line
   - Useful for:
     - Understanding project structure
     - Identifying which directories to include/exclude
     - Creating directory-specific bundles

3. **Processing Log** (`<output>.log`)
   - Detailed processing information
   - Includes timing, errors, and statistics

### Working with File Lists

The generated file lists can be edited and used as input for subsequent m1f
operations:

```bash
# Initial project analysis
m1f-init
# Creates: m1f/<project>_complete_filelist.txt and m1f/<project>_docs_filelist.txt

# Edit the file list to remove unwanted files
vi m1f/myproject_complete_filelist.txt

# Use the edited list for a custom bundle
m1f -i m1f/myproject_complete_filelist.txt -o m1f/custom_bundle.txt

# Combine multiple file lists
cat m1f/*_filelist.txt | sort -u > m1f/all_files.txt
m1f -i m1f/all_files.txt -o m1f/combined.txt
```

### Disabling Auxiliary Files

Use `--minimal-output` to create only the main output file without auxiliary
files:

```bash
m1f -s . -o output.txt --minimal-output
```

## Separator Styles

The `--separator-style` option allows you to choose how files are separated in
the combined output file. Each style is designed for specific use cases, from
human readability to automated parsing.

### Standard Style

A simple, concise separator that shows only the file path:

```
======= path/to/file.py ======
```

### Detailed Style (Default)

A more comprehensive separator that includes file metadata:

```
========================================================================================
== FILE: path/to/file.py
== DATE: 2025-05-15 14:30:21 | SIZE: 2.50 KB | TYPE: .py
== CHECKSUM_SHA256: abcdef1234567890...
========================================================================================
```

### Markdown Style

Formats the metadata as Markdown with proper code blocks, using the file
extension to set syntax highlighting:

````markdown
## path/to/file.py

**Date Modified:** 2025-05-15 14:30:21 | **Size:** 2.50 KB | **Type:** .py |
**Checksum (SHA256):** abcdef1234567890...

```python
# File content starts here
def example():
    return "Hello, world!"
```
````

### MachineReadable Style

A robust format designed for reliable automated parsing and processing:

```text
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
METADATA_JSON:
{
    "original_filepath": "path/to/file.py",
    "original_filename": "file.py",
    "timestamp_utc_iso": "2025-05-15T14:30:21Z",
    "type": ".py",
    "size_bytes": 2560,
    "checksum_sha256": "abcdef1234567890..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---

# File content here

--- PYMK1F_END_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---
```

### None Style

Files are concatenated directly without any separators between them.

## Additional Notes

### Binary File Handling

While the script can include binary files using the `--include-binary-files`
option, these are read as text (UTF-8 with error ignoring). This can result in
garbled/unreadable content in the output and significantly increase file size.

### Encoding Behavior

The script uses UTF-8 as the default encoding for reading and writing files.
When using `--convert-to-charset`, the original encoding of each file is
automatically detected and recorded in the file metadata.

### Documentation File Extensions

m1f recognizes the following extensions as documentation files:

- Man pages: .1, .1st, .2, .3, .4, .5, .6, .7, .8
- Markup formats: .adoc, .asciidoc, .md, .markdown, .mdx, .rst, .org, .textile,
  .wiki
- Text formats: .txt, .text, .readme, .changelog, .changes, .todo, .notes
- Developer docs: .pod, .rdoc, .yard, .lhs, .litcoffee
- LaTeX/TeX: .tex, .ltx, .texi, .texinfo
- Other: .rtf, .nfo, .faq, .help, .history, .info, .news, .release, .story

When `--prefer-utf8-for-text-files` is enabled (default), m1f prefers UTF-8
encoding for:

- All Markdown variants (.md, .markdown, .mdx, .rmd, .qmd, etc.)
- Plain text files (.txt, .text, .readme, .changelog, .todo, etc.)
- Structured text formats (.rst, .org, .textile, .wiki, etc.)
- Developer documentation (.pod, .rdoc, .lhs, .litcoffee, etc.)

### Line Ending Behavior

The `--line-ending` option only affects the line endings generated by the script
(in separators and blank lines), not those in the original files. The line
endings of original files remain unchanged.

### Archive Creation

When `--create-archive` is used, the archive will contain all files selected for
inclusion in the main output file, using their relative paths within the
archive.

### Architecture

The m1f tool has been completely rewritten as a modular Python package:

```
tools/m1f/
├── __init__.py          # Package initialization
├── cli.py               # Command-line interface
├── core.py              # Main orchestration logic
├── config.py            # Configuration management
├── constants.py         # Constants and enums
├── exceptions.py        # Custom exceptions
├── file_processor.py    # File handling with async I/O
├── encoding_handler.py  # Smart encoding detection
├── security_scanner.py  # Secret detection integration
├── output_writer.py     # Output generation
├── archive_creator.py   # Archive functionality
├── separator_generator.py # Separator formatting
├── logging.py           # Structured logging
└── utils.py             # Utility functions
```

### Performance Considerations

With the new async I/O architecture, m1f can handle large projects more
efficiently:

- Concurrent file reading and processing
- Memory-efficient streaming for large files
- Smart caching to avoid redundant operations
- Content deduplication saves space and processing time

For extremely large directories with tens of thousands of files or very large
individual files, the script might take some time to process.

## Preset System

The preset system provides powerful file-specific processing capabilities:

### Key Features

- **Hierarchical Configuration**: Settings cascade from global → project → CLI
- **File-Type Processing**: Apply different rules to different file extensions
- **Processing Actions**:
  - `minify` - Reduce file size by removing unnecessary characters
  - `strip_tags` - Remove HTML tags
  - `strip_comments` - Remove code comments
  - `compress_whitespace` - Reduce multiple spaces/newlines
  - `remove_empty_lines` - Clean up empty lines
- **Per-File Settings**: Override security, size limits, and filters per file
  type
- **Custom Processors**: Extend with your own processing functions

### Quick Start

1. Create a preset file in your project (`.m1f-presets.yml`):

```yaml
globals:
  global_settings:
    include_extensions: [.js, .css, .html, .php]
    security_check: warn
    max_file_size: 1MB

  presets:
    frontend:
      extensions: [.js, .css, .html]
      actions: [minify]

    backend:
      extensions: [.php]
      security_check: fail
      max_file_size: 500KB
```

2. Use the preset:

```bash
m1f -s ./src -o output.txt --preset .m1f-presets.yml
```

### Documentation

**Core Documentation:**

- [Quick Reference](./09_quick_reference.md) - Common commands and patterns
- [CLI Reference](./07_cli_reference.md) - Complete command-line reference
- [Default Excludes Guide](./26_default_excludes_guide.md) - What's excluded
  automatically
- [Troubleshooting Guide](./08_troubleshooting.md) - Common issues and solutions

**Preset System:**

- [Complete Preset Guide](02_m1f_presets.md) - Full preset system documentation
- [Per-File Settings](03_m1f_preset_per_file_settings.md) - Advanced file-type
  overrides
- [Example Presets](../presets/) - Ready-to-use preset templates

**Workflows and Integration:**

- [Development Workflow](./21_development_workflow.md) - Best practices
- [Claude Code Integration](./31_claude_code_integration.md) - AI-assisted
  development
- [Auto Bundle Guide](./20_auto_bundle_guide.md) - Automated bundling

======= docs/01_m1f/01_quick_reference.md ======
# m1f Quick Reference

## Most Common Commands

### Basic File Combination

```bash
# Combine all files in current directory
m1f -s . -o output.txt

# Combine specific directory
m1f -s ./src -o bundle.txt

# Force overwrite existing output
m1f -s . -o output.txt -f
```

### Using Presets (v3.2.0+)

```bash
# Use a preset file (can define ALL parameters)
m1f --preset production.yml -o output.txt

# Preset can even define source and output
m1f --preset full-config.yml

# Override preset values with CLI
m1f --preset prod.yml -o custom-output.txt -v
```

### File Type Filtering

```bash
# Only Python files
m1f -s . -o code.txt --include-extensions .py

# Multiple file types
m1f -s . -o docs.txt --include-extensions .md .txt .rst

# Exclude certain types
m1f -s . -o output.txt --exclude-extensions .pyc .log
```

### Directory and Pattern Exclusions

```bash
# Exclude specific directories
m1f -s . -o output.txt --excludes "tests/" "docs/"

# Exclude patterns
m1f -s . -o output.txt --excludes "*.test.js" "*/tmp/*"

# Use gitignore file
m1f -s . -o output.txt --exclude-paths-file .gitignore
```

### Output Formatting

```bash
# Markdown format
m1f -s . -o output.md --separator-style Markdown

# Machine-readable JSON metadata
m1f -s . -o output.txt --separator-style MachineReadable

# No separators
m1f -s . -o output.txt --separator-style None
```

### Size Management

```bash
# Skip large files
m1f -s . -o output.txt --max-file-size 100KB

# Include only small text files
m1f -s . -o small.txt --max-file-size 50KB --include-extensions .txt .md
```

### Archive Creation

```bash
# Create zip backup
m1f -s . -o output.txt --create-archive

# Create tar.gz backup
m1f -s . -o output.txt --create-archive --archive-type tar.gz
```

### Using Presets

```bash
# Use single preset
m1f -s . -o output.txt --preset wordpress.m1f-presets.yml

# Use preset group
m1f -s . -o output.txt --preset web.yml --preset-group frontend

# Multiple presets (merged in order)
m1f -s . -o output.txt --preset base.yml project.yml
```

## Common Patterns

### Documentation Bundle

```bash
m1f -s ./docs -o documentation.txt \
    --include-extensions .md .rst .txt \
    --separator-style Markdown
```

### Source Code Bundle

```bash
m1f -s ./src -o source-code.txt \
    --include-extensions .py .js .ts .jsx .tsx \
    --excludes "*.test.*" "*.spec.*" \
    --max-file-size 500KB
```

### WordPress Theme/Plugin

```bash
m1f -s ./wp-content/themes/mytheme -o theme.txt \
    --include-extensions .php .js .css \
    --excludes "node_modules/" "vendor/" \
    --preset presets/wordpress.m1f-presets.yml
```

### Clean Documentation Export

```bash
m1f -s ./scraped_docs -o clean-docs.txt \
    --include-extensions .md \
    --remove-scraped-metadata \
    --separator-style Markdown
```

### Multiple Exclude/Include Files

```bash
# Multiple exclude files (merged)
m1f -s . -o output.txt \
    --exclude-paths-file .gitignore .dockerignore custom-excludes.txt

# Whitelist mode with include files
m1f -s . -o api-bundle.txt \
    --include-paths-file api-files.txt core-files.txt \
    --exclude-paths-file .gitignore
```

### Working with File Lists (-i)

```bash
# Single input file
m1f -s . -i files.txt -o output.txt

# Merge multiple file lists (Bash)
m1f -s . -i <(cat critical.txt important.txt nice-to-have.txt) -o output.txt

# Combine with filters (input files bypass filters)
m1f -s . -i must-include.txt -o output.txt \
    --exclude-paths-file .gitignore
```

### CI/CD Integration

```bash
# Create timestamped output
m1f -s . -o build.txt -t

# Minimal output for automation
m1f -s . -o output.txt --minimal-output --quiet

# With security check
m1f -s . -o output.txt --security-check abort
```

## Quick Option Reference

| Short | Long                 | Purpose                   |
| ----- | -------------------- | ------------------------- |
| `-s`  | `--source-directory` | Source directory          |
| `-i`  | `--input-file`       | File list input           |
| `-o`  | `--output-file`      | Output file (required)    |
| `-f`  | `--force`            | Overwrite existing        |
| `-t`  | `--add-timestamp`    | Add timestamp to filename |
| `-v`  | `--verbose`          | Detailed output           |
| `-q`  | `--quiet`            | Suppress output           |

## Separator Styles

- **Standard**: Simple filename separator
- **Detailed**: Full metadata (default)
- **Markdown**: Markdown formatting
- **MachineReadable**: JSON metadata
- **None**: No separators

## Size Units

- `B`: Bytes
- `KB`: Kilobytes (1024 bytes)
- `MB`: Megabytes
- `GB`: Gigabytes

Example: `--max-file-size 1.5MB`

## Exit on Success

```bash
m1f -s . -o output.txt && echo "Success!"
```

## Aliases Setup

Add to your shell profile:

```bash
alias m1f='python /path/to/m1f/tools/m1f.py'
alias m1f-docs='m1f -s . -o docs.txt --include-extensions .md .txt'
alias m1f-code='m1f -s . -o code.txt --include-extensions .py .js'
```

## Need Help?

- Full options: `m1f --help`
- [Complete CLI Reference](./02_cli_reference.md)
- [Troubleshooting Guide](./03_troubleshooting.md)
- [Preset Documentation](./10_m1f_presets.md)

======= docs/01_m1f/02_cli_reference.md ======
# m1f CLI Reference

This is a comprehensive reference for all command-line parameters and flags
available in m1f v3.4.0.

## Synopsis

```bash
m1f [-h] [--version] [-s DIR] [-i FILE] -o FILE
    [--input-include-files [FILE ...]]
    [--separator-style {Standard,Detailed,Markdown,MachineReadable,None}]
    [--line-ending {lf,crlf}] [-t] [--filename-mtime-hash]
    [--excludes [PATTERN ...]] [--exclude-paths-file FILE ...]
    [--include-paths-file FILE ...]
    [--include-extensions [EXT ...]] [--exclude-extensions [EXT ...]]
    [--include-dot-paths] [--include-binary-files] [--include-symlinks]
    [--max-file-size SIZE] [--no-default-excludes]
    [--remove-scraped-metadata]
    [--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}]
    [--abort-on-encoding-error] [--no-prefer-utf8-for-text-files]
    [--security-check {error,warn,skip}]
    [--create-archive] [--archive-type {zip,tar.gz}] [-f]
    [--minimal-output] [--skip-output-file] [--allow-duplicate-files]
    [-v] [-q]
    [--preset FILE [FILE ...]] [--preset-group GROUP]
    [--disable-presets]
```

## General Options

### `--help`, `-h`

Show help message and exit.

### `--version`

Show program version and exit. Current version: v3.4.0

## Input/Output Options

### `--source-directory DIR`, `-s DIR`

Path to the directory containing files to combine. Can be used multiple times to
process multiple directories.

### `--input-file FILE`, `-i FILE`

Path to a text file containing a list of files/directories to process, one per
line. These files are explicitly included and bypass all filter rules.

**Note**: At least one of `-s` (source directory) or `-i` (input file) must be
specified. When using `-i` alone, relative paths in the input file are resolved
relative to the current working directory. When both `-s` and `-i` are used,
relative paths in the input file are resolved relative to the source directory.

Example input file:

```
# Comments are supported
src/main.py          # Relative to source directory
/absolute/path.txt   # Absolute path
docs/**/*.md         # Glob patterns supported
```

**Merging multiple file lists with Bash**:

```bash
# Create temporary merged file
cat files1.txt files2.txt files3.txt > merged_files.txt
m1f -s . -i merged_files.txt -o output.txt

# Or use process substitution (Linux/Mac)
m1f -s . -i <(cat files1.txt files2.txt files3.txt) -o output.txt

# Remove duplicates while merging
m1f -s . -i <(cat files1.txt files2.txt | sort -u) -o output.txt
```

### `--output-file FILE`, `-o FILE` (REQUIRED)

Path where the combined output file will be created. This is the only required
parameter.

### `--input-include-files [FILE ...]`

Files to include at the beginning of the output. The first file is treated as an
introduction/header.

## Output Formatting

### `--separator-style {Standard,Detailed,Markdown,MachineReadable,None}`

Format of the separator between files. Default: `Detailed`

- **Standard**: Simple separator with filename
- **Detailed**: Includes file metadata (date, size, type, checksum)
- **Markdown**: Markdown-formatted headers and metadata
- **MachineReadable**: JSON metadata blocks for programmatic parsing
- **None**: No separators (files concatenated directly)

### `--line-ending {lf,crlf}`

Line ending style for generated content. Default: `lf`

- **lf**: Unix/Linux/Mac style (\n)
- **crlf**: Windows style (\r\n)

### `--add-timestamp`, `-t`

Add timestamp to output filename in format `_YYYYMMDD_HHMMSS`.

### `--filename-mtime-hash`

Add hash of file modification times to output filename. Useful for
cache-busting.

## File Filtering

### `--excludes [PATTERN ...]`

Paths, directories, or glob patterns to exclude. Supports wildcards.

Example: `--excludes "*/tests/*" "*.pyc" "node_modules/"`

### `--exclude-paths-file FILE ...`

File(s) containing paths to exclude (supports gitignore format). Each pattern on
a new line. Multiple files can be specified and will be merged. Non-existent
files are skipped gracefully.

Examples:

```bash
# Single file
m1f -s . -o output.txt --exclude-paths-file .gitignore

# Multiple files
m1f -s . -o output.txt --exclude-paths-file .gitignore .m1fignore custom-excludes.txt
```

### `--include-paths-file FILE ...`

File(s) containing patterns to include (supports gitignore format). When
specified, only files matching these patterns will be included (whitelist mode).
Multiple files can be specified and will be merged. Non-existent files are
skipped gracefully.

**Processing Order**:

1. Files from `-i` (input-file) are always included, bypassing all filters
2. Files from `-s` (source directory) are filtered by include patterns first
3. Then exclude patterns are applied

**Path Resolution**: Same as `-i` - relative paths are resolved relative to the
source directory (`-s`).

Example include file:

```
# Include all Python files
*.py
# Include specific directories
src/**/*
api/**/*
# Exclude tests even if they match above
!test_*.py
```

Examples:

```bash
# Single file
m1f -s . -o output.txt --include-paths-file important-files.txt

# Multiple files
m1f -s . -o output.txt --include-paths-file core-files.txt api-files.txt

# Combined with input file (input file takes precedence)
m1f -s . -i explicit-files.txt -o output.txt --include-paths-file patterns.txt
```

### `--include-extensions [EXT ...]`

Only include files with these extensions. Extensions should include the dot.

Example: `--include-extensions .py .js .md`

### `--exclude-extensions [EXT ...]`

Exclude files with these extensions.

Example: `--exclude-extensions .pyc .pyo`

### `--include-dot-paths`

Include files and directories starting with a dot (hidden files). By default,
these are excluded.

### `--include-binary-files`

Attempt to include binary files. Use with caution as this may produce unreadable
output.

### `--include-symlinks`

Follow symbolic links. Be careful of infinite loops!

**Deduplication behavior**:

- By default (without `--allow-duplicate-files`), m1f intelligently handles
  symlinks:
  - Internal symlinks (pointing to files within source directories) are excluded
    to avoid duplicates
  - External symlinks (pointing outside source directories) are included
- With `--allow-duplicate-files`, all symlinks are included regardless of their
  target

### `--max-file-size SIZE`

Skip files larger than specified size. Supports KB, MB, GB suffixes.

Examples: `10KB`, `1.5MB`, `2GB`

### `--no-default-excludes`

Disable default exclusions. By default, m1f excludes:

- `.git/`, `.svn/`, `.hg/`
- `node_modules/`, `venv/`, `.venv/`
- `__pycache__/`, `*.pyc`
- `.DS_Store`, `Thumbs.db`

### `--remove-scraped-metadata`

Remove scraped metadata (URL, timestamp) from HTML2MD files during processing.
Useful when processing scraped content.

## Character Encoding

### `--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}`

Convert all files to specified encoding. Default behavior is to detect and
preserve original encoding.

### `--abort-on-encoding-error`

Abort if encoding conversion fails. By default, files with encoding errors are
skipped with a warning.

### `--no-prefer-utf8-for-text-files`

Disable UTF-8 preference for text files (.md, .txt, .rst) when encoding is
ambiguous. By default, m1f prefers UTF-8 encoding for these file types when
chardet detects windows-1252 with less than 95% confidence, as these files often
contain UTF-8 emojis or special characters.

## Security Options

### `--security-check {error,warn,skip}`

Check for sensitive information in files using detect-secrets.

- **error**: Stop processing if secrets are found (default in v3.2)
- **warn**: Include files but show warnings
- **skip**: Disable security scanning (not recommended)

## Archive Options

### `--create-archive`

Create backup archive of processed files in addition to the combined output.

### `--archive-type {zip,tar.gz}`

Type of archive to create. Default: `zip`

## Output Control

### `--force`, `-f`

Force overwrite of existing output file without prompting.

### `--minimal-output`

Only create the combined file (no auxiliary files like file lists or directory
structure).

### `--skip-output-file`

Skip creating the main output file. Useful when only creating an archive.

### `--allow-duplicate-files`

Allow files with identical content to be included in the output. By default, m1f
deduplicates files based on their content checksum to save space and tokens.
With this flag, all files are included even if they have identical content.

**Special behavior with symlinks** (when used with `--include-symlinks`):

- **Without** `--allow-duplicate-files`:
  - Symlinks pointing to files **inside** the source directories are excluded
    (the original file is already included)
  - Symlinks pointing to files **outside** the source directories are included
- **With** `--allow-duplicate-files`:
  - All symlinks are included, regardless of where they point
  - Both the original file and symlinks pointing to it can appear in the output

### `--verbose`, `-v`

Enable verbose output with detailed processing information.

### `--quiet`, `-q`

Suppress all console output except errors.

## Preset Configuration

### `--preset FILE [FILE ...]`

Load preset configuration file(s) for file-specific processing. Multiple files
are merged in order.

### `--preset-group GROUP`

Use a specific preset group from the configuration file.

### `--disable-presets`

Disable all preset processing, even if preset files are specified.

## Exit Codes

- **0**: Success
- **1**: General error (M1FError base)
- **2**: File not found (FileNotFoundError)
- **3**: Permission denied (PermissionError)
- **4**: Encoding error (EncodingError)
- **5**: Configuration error (ConfigurationError)
- **6**: Validation error (ValidationError)
- **7**: Security check failed (SecurityError)
- **8**: Archive creation failed (ArchiveError)
- **130**: Operation cancelled by user (Ctrl+C)

## Environment Variables

**Note**: The following environment variables are documented for future
implementation but are not currently supported in v3.4.0:

- `M1F_DEFAULT_PRESET` - Path to default preset file (not implemented)
- `M1F_SECURITY_CHECK` - Default security check mode (not implemented)
- `M1F_MAX_FILE_SIZE` - Default maximum file size limit (not implemented)

## Subcommands

### `auto-bundle`

Create multiple m1f bundles based on a YAML configuration file
(`.m1f.config.yml`).

```bash
# Create all bundles
m1f auto-bundle

# Create specific bundle
m1f auto-bundle BUNDLE_NAME

# List available bundles
m1f auto-bundle --list

# With options
m1f auto-bundle --verbose
m1f auto-bundle --quiet
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle`
that can be used interchangeably:

```bash
# These are equivalent:
m1f auto-bundle
m1f-update

# With specific bundle:
m1f auto-bundle code
m1f-update code
```

**Options:**

- `BUNDLE_NAME`: Name of specific bundle to create (optional)
- `--list`: List available bundles from configuration
- `--verbose`, `-v`: Enable verbose output
- `--quiet`, `-q`: Suppress all console output

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for detailed configuration
instructions.

## Notes

1. **Module Invocation**: You can use either `m1f` or `python -m tools.m1f`, or
   set up the `m1f` alias as described in the development workflow.

2. **Input Requirements**: At least one of `-s` (source directory) or `-i`
   (input file) must be specified. If neither is provided, m1f will show an
   error message.

3. **Gitignore**: m1f respects .gitignore files by default unless
   `--no-default-excludes` is used.

4. **Performance**: For large projects, use `--include-extensions` to limit
   processing to specific file types.

======= docs/01_m1f/03_troubleshooting.md ======
# Troubleshooting Guide

This guide covers common issues and error messages you might encounter when
using m1f.

## Common Issues

### Module Import Error

**Problem**: Running `m1f` results in:

```
ModuleNotFoundError: No module named 'm1f'
```

**Solution**: Use the direct script invocation instead:

```bash
m1f [options]
```

Or set up the alias as described in the
[Development Workflow](./21_development_workflow.md).

### Permission Denied

**Problem**: Error when trying to write output file:

```
PermissionError: [Errno 13] Permission denied: '/path/to/output.txt'
```

**Solutions**:

1. Check write permissions in the output directory
2. Use a different output location
3. Run with appropriate permissions (avoid using sudo unless necessary)

### File Not Found

**Problem**: Source directory or input file not found.

**Solutions**:

1. Verify the path exists: `ls -la /path/to/source`
2. Use absolute paths to avoid confusion
3. Check for typos in the path

### Encoding Errors

**Problem**: `UnicodeDecodeError` when processing files.

**Solutions**:

1. Use `--convert-to-charset utf-8` to force UTF-8 encoding
2. Skip problematic files with proper exclusion patterns
3. Use `--abort-on-encoding-error` to identify problematic files

Example:

```bash
m1f -s . -o output.txt --convert-to-charset utf-8
```

### Memory Issues with Large Projects

**Problem**: Memory usage is too high or process is killed.

**Solutions**:

1. Use `--max-file-size` to limit individual file sizes
2. Process specific directories instead of entire project
3. Use `--include-extensions` to limit file types
4. Enable minimal output mode: `--minimal-output`

Example:

```bash
m1f -s . -o output.txt --max-file-size 1MB --include-extensions .py .md
```

### Symlink Cycles

**Problem**: Infinite loop when following symlinks.

**Solutions**:

1. Don't use `--include-symlinks` unless necessary
2. Exclude directories with circular symlinks
3. m1f has built-in cycle detection, but it's better to avoid the issue

### Security Check Failures

**Problem**: Files contain sensitive information.

**Solutions**:

1. Review the detected secrets
2. Use `--security-check skip` to skip files with secrets
3. Use `--security-check warn` to include but get warnings
4. Add sensitive files to exclusions

Example:

```bash
m1f -s . -o output.txt --security-check warn --excludes ".env" "config/secrets.yml"
```

## Error Messages

### "Output file already exists"

**Meaning**: The specified output file exists and would be overwritten.

**Solution**: Use `-f` or `--force` to overwrite, or choose a different output
filename.

### "No files found to process"

**Meaning**: No files matched the inclusion criteria.

**Solutions**:

1. Check your source directory contains files
2. Verify extension filters aren't too restrictive
3. Check exclusion patterns aren't excluding everything
4. Use `--verbose` to see what's being processed

### "File size exceeds maximum allowed"

**Meaning**: A file is larger than the specified `--max-file-size`.

**Solution**: The file is automatically skipped. Adjust `--max-file-size` if
needed.

### "Failed to create archive"

**Meaning**: Archive creation failed (disk space, permissions, etc.).

**Solutions**:

1. Check available disk space
2. Verify write permissions
3. Try a different archive format
4. Skip archive creation and create output file only

### "Preset file not found"

**Meaning**: The specified preset configuration file doesn't exist.

**Solutions**:

1. Check the preset file path
2. Use absolute paths for preset files
3. Verify preset file exists: `ls -la presets/`

## Performance Optimization

### Slow Processing

**Solutions**:

1. Use `--include-extensions` to limit file types
2. Exclude large directories like `node_modules`
3. Use `--max-file-size` to skip large files
4. Enable minimal output: `--minimal-output`
5. Disable security checks if not needed

### High Memory Usage

**Solutions**:

1. Process smaller directory trees
2. Use file size limits
3. Exclude binary files
4. Process in batches using input file lists

## Debug Mode

For detailed debugging information:

```bash
m1f -s . -o output.txt --verbose
```

This will show:

- Files being processed
- Files being skipped and why
- Processing times
- Detailed error messages

## Getting Help

1. Check the [CLI Reference](./02_cli_reference.md) for parameter details
2. Review [examples in the main documentation](00_m1f.md#common-use-cases)
3. Check the [preset documentation](./10_m1f_presets.md) for configuration
   issues
4. Report issues at the project repository

## Exit Codes

Understanding exit codes can help in scripting:

- `0`: Success
- `1`: General error
- `2`: Invalid arguments
- `3`: File not found
- `4`: Permission denied
- `5`: Security check failed

Use in scripts:

```bash
if m1f -s . -o output.txt; then
    echo "Success"
else
    echo "Failed with exit code: $?"
fi
```

======= docs/01_m1f/05_getting_started.md ======
# Getting Started with m1f

This guide will walk you through installing m1f and creating your first bundles
using a real-world example.

## Installation (3 Simple Steps)

### For Users

```bash
# Step 1: Clone the repository
git clone https://github.com/franz-agency/m1f.git

# Step 2: Navigate to the directory
cd m1f

# Step 3: Run the installer
source ./scripts/install.sh    # Linux/macOS
.\scripts\install.ps1          # Windows (restart your shell after)
```

That's it! The installer automatically:

- ✅ Checks for Python 3.10+
- ✅ Creates a virtual environment
- ✅ Installs all dependencies
- ✅ Sets up global command aliases
- ✅ Generates initial m1f bundles

### For Developers

If you want to contribute or modify m1f:

```bash
# Clone and enter directory
git clone https://github.com/franz-agency/m1f.git
cd m1f

# Create virtual environment
python3 -m venv .venv

# Activate it
source .venv/bin/activate    # Linux/macOS
.venv\Scripts\activate       # Windows

# Install in development mode
pip install -e .
pip install -r requirements.txt
```

## Real Example: Bundling TailwindCSS Documentation

Let's walk through a complete example of bundling the TailwindCSS documentation
for use with AI assistants.

### Step 1: Get the Repository

```bash
git clone https://github.com/tailwindlabs/tailwindcss.com
cd tailwindcss.com
```

### Step 2: Initialize m1f

```bash
m1f-init
```

This command:

- Scans the entire repository
- Creates a `.m1f.config.yml` configuration file
- Generates two default bundles in the `m1f/` directory:
  - `tailwind_complete.txt` - All text files in the repository
  - `tailwind_docs.txt` - Documentation files only

### Step 3: Optional - Create Claude-Optimized Bundles

```bash
m1f-claude --setup
```

This creates additional bundles specifically optimized for Claude AI, with
proper formatting and structure.

### Using Your Bundles

Now you can:

1. **In Claude Desktop**: Reference files with `@m1f/tailwind_complete.txt`
2. **Copy & Paste**: Open the bundle file and paste into any LLM
3. **Check Token Count**: Run `m1f-token-counter m1f/tailwind_docs.txt`

## Understanding m1f-init

When you run `m1f-init` in any project directory:

1. **Scans the repository** - Analyzes file types and structure
2. **Creates `.m1f.config.yml`** - A configuration file with:
   - Default bundle definitions
   - Smart file patterns based on your project
   - Sensible exclusions (node_modules, .git, etc.)
3. **Generates bundles** - Creates initial bundles in the `m1f/` directory

## Customizing Your Bundles

After initialization, you can edit `.m1f.config.yml` to create custom bundles:

```yaml
bundles:
  # Existing bundles...

  # Add your custom bundle
  api-docs:
    description: "API documentation only"
    patterns:
      - "docs/api/**/*.md"
      - "src/**/README.md"
    exclude_patterns:
      - "**/*test*"
    output: "m1f/api_documentation.txt"
```

Then regenerate bundles:

```bash
m1f-update  # Updates all bundles
# or
m1f auto-bundle api-docs  # Update specific bundle
```

## Common Workflows

### 1. Documentation Sites

```bash
# Clone documentation
git clone https://github.com/vuejs/docs vuejs-docs
cd vuejs-docs

# Initialize and create bundles
m1f-init

# Feed to your AI
#  m1f/vuejs-docs_complete.txt
#  m1f/vuejs-docs_docs.txt
```

### 2. Your Own Projects

```bash
# In your project directory
# This creates a .m1f.config.yml with default bundles
m1f-init

# Let claude check your project to create smaller bundles sorted by topics
m1f-claude --setup

# Edit .m1f.config.yml to customize
# Then update bundles after code or config changes
m1f-update
```

### 3. Web Documentation

```bash
# Scrape online docs
m1f-scrape https://docs.python.org/3/ -o python-docs-html

# Convert to markdown
m1f-html2md convert python-docs-html -o python-docs-md

# Bundle for AI
cd python-docs-md
m1f-init
```

## Next Steps

- Learn about [configuration options](./25_m1f_config_examples.md)
- Explore [preset systems](./10_m1f_presets.md) for specialized file handling
- Set up [auto-bundling](./20_auto_bundle_guide.md) with git hooks
- Read the [complete m1f documentation](./00_m1f.md)

## Tips

- **Start Simple**: Use `m1f-init` first, customize later
- **Check Token Counts**: Always verify with `m1f-token-counter`
- **Use Presets**: For WordPress, documentation sites, etc.
- **Security**: m1f automatically scans for secrets before bundling

## Getting Help

- Run `m1f --help` for command options
- Check [troubleshooting guide](./03_troubleshooting.md)
- Visit [m1f.dev](https://m1f.dev) for updates

======= docs/01_m1f/10_m1f_presets.md ======
# m1f Preset System Documentation

The m1f preset system allows you to define file-specific processing rules,
enabling different handling for different file types within the same bundle.

## Overview

Instead of applying the same settings to all files, presets let you:

- Minify HTML files while preserving source code formatting
- Strip comments from production code but keep them in documentation
- Apply different separator styles for different file types
- Truncate large data files while keeping full source code
- Override security checks and size limits per file type
- Integrate with auto-bundling for intelligent project organization

## Quick Start

1. **Use a built-in preset**:

   ```bash
   m1f -s ./my-project -o bundle.txt --preset presets/wordpress.m1f-presets.yml
   ```

2. **Specify a preset group**:

   ```bash
   m1f -s ./site -o bundle.txt --preset presets/web-project.m1f-presets.yml --preset-group frontend
   ```

3. **Use multiple preset files**:
   ```bash
   m1f -s . -o bundle.txt --preset company-presets.yml project-presets.yml
   ```

## Preset Configuration File

Preset files are YAML documents that define processing rules:

```yaml
# Group name
my_project:
  description: "Processing rules for my project"
  enabled: true
  priority: 10 # Higher priority groups are checked first

  presets:
    # Preset for Python files
    python:
      extensions: [".py"]
      patterns:
        - "*.py"
        - "src/**/*.py" # Must include full path
        - "lib/**/*.py"
      actions:
        - strip_comments
        - remove_empty_lines
      separator_style: "Detailed"
      include_metadata: true

    # Preset for HTML files - remove specific tags
    html:
      extensions: [".html", ".htm"]
      actions:
        - minify
        - strip_tags
      strip_tags: ["script", "style", "meta", "link"]
      max_lines: 500 # Truncate after 500 lines

    # Preset for HTML to text conversion - strip all but content tags
    html_to_text:
      extensions: [".html"]
      actions:
        - strip_tags
      # Empty strip_tags means remove ALL tags
      strip_tags: []
      # But preserve content-relevant tags
      preserve_tags: ["p", "h1", "h2", "h3", "pre", "code", "blockquote"]

    # Default preset for unmatched files
    default:
      actions: []
      include_metadata: true
```

## Available Actions

### Built-in Actions

1. **`minify`** - Reduces file size by removing unnecessary whitespace. Keep in
   mind that removing comments may remove valuable context for AI models.

   - HTML: Removes comments, compresses whitespace
   - CSS: Removes comments, compresses rules
   - JS: Basic minification (removes comments and newlines)

2. **`strip_tags`** - Removes HTML tags

   - Use `strip_tags` to list tags to remove
   - Use `preserve_tags` to protect specific tags

3. **`strip_comments`** - Removes comments based on file type

   - **WARNING**: Removing comments removes valuable context for AI models.
     Comments often explain the "why" behind code, making it harder for AI to
     understand intent. Only use this when file size reduction is critical.
   - Python: Removes # comments (preserves docstrings)
   - JS/Java/C/C++: Removes // and /\* \*/ comments
   - CSS: Removes /\* \*/ comments
   - HTML: Removes <!-- --> comments

4. **`compress_whitespace`** - Normalizes whitespace

   - Replaces multiple spaces with single space
   - Reduces multiple newlines to double newline

5. **`remove_empty_lines`** - Removes all empty lines

6. **`join_paragraphs`** - Joins multi-line paragraphs into single lines
   (Markdown files)

   - Intelligently preserves code blocks, lists, tables, and other markdown
     structures
   - Helps maximize content density for LLMs that focus on first 200 lines
   - Only affects regular paragraph text

7. **`custom`** - Apply custom processor
   - Specify processor with `custom_processor`
   - Pass arguments with `processor_args`

### Built-in Custom Processors

m1f includes three built-in custom processors:

1. **`truncate`** - Limit content length

   - Truncates content to specified number of characters
   - Adds "[... truncated ...]" marker at the end
   - Useful for large log files or data files

   ```yaml
   actions:
     - custom
   custom_processor: "truncate"
   processor_args:
     max_chars: 1000 # Default: 1000
   ```

2. **`redact_secrets`** - Remove sensitive data

   - Uses regex patterns to find and replace secrets
   - Default patterns include: API keys, secrets, passwords, tokens, bearer
     tokens
   - Replaces matches with "[REDACTED]"

   ```yaml
   actions:
     - custom
   custom_processor: "redact_secrets"
   processor_args:
     patterns:  # Optional custom patterns
       - '(?i)api[_-]?key\s*[:=]\s*["\']?[\w-]+["\']?'
       - '(?i)bearer\s+[\w-]+'
   ```

3. **`extract_functions`** - Extract only function definitions (Python only)

   - Uses Python's AST parser to extract function definitions
   - Includes function names, signatures, and docstrings
   - Only works with `.py` files

   ```yaml
   actions:
     - custom
   custom_processor: "extract_functions"
   # No processor_args needed
   ```

## Important Notes on Binary Files

**m1f is designed for text files only.** Binary files (images, videos,
executables, etc.) are:

- Excluded by default
- Cannot be meaningfully processed even with `include_binary_files: true`
- Would need base64 encoding for proper inclusion (not implemented)

For binary file references, consider:

- Including just the filenames in a text list
- Using external tools to convert binary to text formats first
- Focusing on text-based assets for AI context

## Preset Options

### File Matching

- **`extensions`**: List of file extensions (e.g., `[".py", ".js"]`)
- **`patterns`**: Glob patterns for matching files (e.g., `["src/**/*.py"]`)

### Processing Options

- **`actions`**: List of processing actions to apply
- **`strip_tags`**: HTML tags to remove
- **`preserve_tags`**: HTML tags to keep when stripping
- **`separator_style`**: Override separator style
  - `"Standard"` (default) - Best for AI consumption: `--- FILE: path ---`
  - `"Detailed"` - Includes metadata: `===== FILE: path | ENCODING: utf-8 =====`
  - `"Markdown"` - Uses markdown code blocks
  - `"MachineReadable"` - Structured format for parsing
  - `"None"` - No separators
- **`max_lines`**: Truncate file after N lines

### Custom Processing

- **`custom_processor`**: Name of custom processor
- **`processor_args`**: Arguments for custom processor

## Examples

### WordPress Project

```yaml
wordpress:
  description: "WordPress project processing"

  presets:
    php:
      extensions: [".php"]
      actions:
        - remove_empty_lines # Keep comments for context

    config:
      patterns: ["wp-config*.php", ".env*"]
      actions:
        - custom
      custom_processor: "redact_secrets"

    sql:
      extensions: [".sql"]
      actions:
        - remove_empty_lines # Keep SQL comments
      max_lines: 1000 # Truncate large dumps
```

### Frontend Project

```yaml
frontend:
  description: "React/Vue/Angular project"

  presets:
    components:
      extensions: [".jsx", ".tsx", ".vue"]
      actions:
        - compress_whitespace
        - remove_empty_lines

    styles:
      extensions: [".css", ".scss"]
      actions:
        - minify
      # Note: exclude_patterns is available in global_settings, not in presets

    # Large log files - show only beginning
    logs:
      extensions: [".log"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 5000 # Show first 5KB
```

### Documentation Project

```yaml
documentation:
  description: "Documentation processing"

  presets:
    markdown:
      extensions: [".md", ".mdx"]
      actions:
        - remove_empty_lines
      separator_style: "Markdown"

    code_examples:
      patterns: ["examples/**/*"]
      actions:
        - remove_empty_lines # Keep comments in examples
      max_lines: 50 # Keep examples concise
```

## Priority and Selection

When multiple preset groups are loaded:

1. Groups are checked by priority (highest first)
2. Within a group, presets are checked in order:
   - Extension matches
   - Pattern matches
   - Default preset
3. First matching preset is used
4. If no preset matches, standard m1f processing applies

## Command Line Usage

```bash
# Use single preset file
m1f -s . -o out.txt --preset my-presets.yml

# Use specific group
m1f -s . -o out.txt --preset presets.yml --preset-group backend

# Multiple preset files (merged in order)
m1f -s . -o out.txt --preset base.yml project.yml

# Disable all presets
m1f -s . -o out.txt --preset presets.yml --disable-presets
```

## Complete List of Supported Settings

### Global Settings

These apply to all files unless overridden:

```yaml
global_settings:
  # Encoding and formatting
  # encoding: "utf-8"  # Default encoding - supports: utf-8, utf-16, latin-1, cp1252, ascii, etc.
  # separator_style: "Standard"  # Default - best for AI consumption
  # line_ending: "lf"  # Default - Unix style (use "crlf" for Windows)

  # Include/exclude patterns
  include_patterns: ["src/**/*", "lib/**/*"]
  exclude_patterns: ["*.min.js", "*.map"]
  include_extensions: [".py", ".js", ".md"]
  exclude_extensions: [".log", ".tmp"]

  # File filtering
  include_dot_paths: false
  include_binary_files: false
  include_symlinks: false
  no_default_excludes: false
  max_file_size: "10MB"

  # Exclude/include file(s) - can be single file or list
  exclude_paths_file: ".gitignore"
  # Or multiple files:
  # exclude_paths_file:
  #   - ".gitignore"
  #   - ".m1fignore"
  #   - "custom-excludes.txt"

  # Include file(s) for whitelist mode
  # include_paths_file: "important-files.txt"
  # Or multiple files:
  # include_paths_file:
  #   - "core-files.txt"
  #   - "api-files.txt"

  # Processing options
  remove_scraped_metadata: true
  abort_on_encoding_error: false

  # Security
  security_check: "warn" # abort, skip, warn
```

### Encoding Options

m1f provides comprehensive encoding support:

**Supported Encodings**:

- `utf-8` (default) - Unicode UTF-8
- `utf-16` - Unicode UTF-16 with BOM detection
- `utf-16-le` - UTF-16 Little Endian
- `utf-16-be` - UTF-16 Big Endian
- `ascii` - Basic ASCII (7-bit)
- `latin-1` / `iso-8859-1` - Western European
- `cp1252` / `windows-1252` - Windows Western European
- Many more via Python's codecs module

**Encoding Configuration**:

```yaml
global_settings:
  encoding: "utf-8" # Target encoding for output (default)
  abort_on_encoding_error: false # Continue on errors (default)
  prefer_utf8_for_text_files: true # Auto UTF-8 for .md, .txt (default)
```

### Extension-Specific Settings

All file-specific settings can now be overridden per extension in
global_settings or in individual presets:

```yaml
global_settings:
  extensions:
    .md:
      actions: [remove_empty_lines]
      security_check: null # Disable security checks for markdown
      remove_scraped_metadata: true
    .php:
      actions: [strip_comments]
      security_check: "abort" # Strict security for PHP
      max_file_size: "5MB"
    .css:
      actions: [minify]
      max_file_size: "50KB" # Stricter size limit for CSS
    .log:
      include_dot_paths: true # Include hidden log files
      max_file_size: "100KB"

presets:
  sensitive_code:
    extensions: [".env", ".key", ".pem"]
    security_check: "abort"
    include_binary_files: false

  documentation:
    extensions: [".md", ".txt", ".rst"]
    security_check: null # No security check for docs
    remove_scraped_metadata: true
```

## Advanced Examples

### Security Check per File Type

Disable security checks for documentation but keep them for code:

```yaml
security_example:
  global_settings:
    security_check: "abort" # Default: strict

    extensions:
      .md:
        security_check: null # Disable for markdown
      .txt:
        security_check: null # Disable for text
      .rst:
        security_check: null # Disable for reStructuredText
      .php:
        security_check: "abort" # Keep strict for PHP
      .js:
        security_check: "warn" # Warn only for JS
      .env:
        security_check: "abort" # Very strict for env files
```

### Size Limits per File Type

Different size limits for different file types:

```yaml
size_limits:
  global_settings:
    max_file_size: "1MB" # Default limit

    extensions:
      .css:
        max_file_size: "50KB" # Stricter for CSS
      .js:
        max_file_size: "100KB" # JavaScript limit
      .php:
        max_file_size: "5MB" # More lenient for PHP
      .sql:
        max_file_size: "10MB" # Large SQL dumps allowed
      .log:
        max_file_size: "500KB" # Log file limit

  presets:
    # Override for specific patterns
    config_files:
      patterns: ["config/**/*.json", "*.config.js"]
      max_file_size: "10KB" # Keep config files small in bundle
```

### Different Processing by Location

Process files differently based on their location:

```yaml
conditional:
  presets:
    # Source files - keep readable
    source:
      patterns: ["src/**/*", "lib/**/*"]
      actions: [remove_empty_lines]

    # Test files - minimal processing
    tests:
      patterns: ["test/**/*", "tests/**/*", "*.test.*"]
      actions: [] # No processing needed

    # Example/demo files - compress
    examples:
      patterns: ["examples/**/*", "demo/**/*"]
      actions: [compress_whitespace]
      max_lines: 100 # Keep examples concise
```

### Combining Multiple Presets

You can load multiple preset files that build on each other:

```bash
m1f -s . -o bundle.txt \
  --preset base-rules.yml \
  --preset project-specific.yml \
  --preset production-overrides.yml
```

## Creating Custom Presets

1. **Start with a template**:

   ```bash
   # Use the comprehensive template with all available settings
   cp presets/template-all-settings.m1f-presets.yml my-project.m1f-presets.yml

   # Or start from a simpler example
   cp presets/web-project.m1f-presets.yml my-project.m1f-presets.yml
   ```

2. **Customize for your project**:

   - Identify file types needing special handling
   - Choose appropriate actions
   - Test with a small subset first

3. **Tips**:
   - Use `max_lines` for generated or data files
   - Apply `minify` only to production builds
   - Keep `preserve_tags` for code examples in HTML
   - Use high priority for project-specific rules

## Integration with CI/CD

```yaml
# GitHub Actions example
- name: Create bundle with presets
  run: |
    m1f \
      -s . \
      -o release-bundle.txt \
      --preset .github/release-presets.yml \
      --preset-group production
```

## Troubleshooting

### Preset not applying

- Check file extension includes the dot (`.py` not `py`)
- Verify pattern matches with `--verbose` flag
- Ensure preset group is enabled

### Wrong preset selected

- Check priority values (higher = checked first)
- Use specific patterns over broad extensions
- Use `--preset-group` to target specific group

### Processing errors

- Some actions may not work on all file types
- Binary files skip most processing
- Use `--verbose` to see which presets are applied

## Auto-Bundling Integration

The preset system integrates seamlessly with the auto-bundling scripts:

### Using Presets with Auto-Bundle

1. **With VS Code Tasks**:

   - Use the "Auto Bundle: With Preset" task
   - Select your preset file and optional group
   - The bundle will apply file-specific processing

2. **With m1f-update Command**:

   ```bash
   # Create all bundles with auto-bundle
   m1f-update

   # Create specific bundle
   m1f-update wordpress

   # List available bundles
   m1f-update --list
   ```

3. **Available Preset Bundles**:
   - `wordpress` - Theme and plugin development
   - `web-project` - Frontend/backend web projects
   - `documentation` - Documentation-focused bundles
   - Custom presets in `presets/` directory

### Benefits

- **Intelligent Filtering**: Each preset knows which files to include
- **Optimized Processing**: Apply minification only where beneficial
- **Security Control**: Different security levels for different file types
- **Size Management**: Appropriate size limits per file type

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for more details on the
bundling system.

## See Also

- [**Preset System Complete Reference**](./10_preset_reference.md) -
  Comprehensive reference with all settings, undocumented features, and advanced
  patterns
- [**Per-File Settings Guide**](./11_preset_per_file_settings.md) - Deep dive
  into per-file processing
- [**Auto Bundle Guide**](./20_auto_bundle_guide.md) - Automated bundling with
  presets

======= docs/01_m1f/11_preset_per_file_settings.md ======
# Per-File-Type Settings in m1f Presets

The m1f preset system supports fine-grained control over processing settings on
a per-file-type basis. This allows you to apply different rules to different
file types within the same bundle.

## Overview

You can override almost any m1f setting for specific file extensions or
patterns. This is particularly useful for:

- Disabling security checks for documentation while keeping them for code
- Setting different size limits for CSS vs PHP files
- Applying different processing rules based on file type
- Handling sensitive files differently from public files

## Supported Per-File Settings

The following settings can be overridden on a per-file basis:

### Processing Settings

- `actions` - List of processing actions (minify, strip_comments, etc.)
- `strip_tags` - HTML tags to remove
- `preserve_tags` - HTML tags to preserve
- `separator_style` - Override separator style for specific files
- `include_metadata` - Whether to include file metadata
- `max_lines` - Truncate after N lines

### Security & Filtering

- `security_check` - Override security scanning (`"abort"`, `"skip"`, `"warn"`,
  `null`)
- `max_file_size` - File-specific size limit (e.g., `"50KB"`, `"5MB"`)
- `remove_scraped_metadata` - Remove HTML2MD metadata for specific files
- `include_dot_paths` - Include hidden files for this type
- `include_binary_files` - Include binary files for this type

### Custom Processing

- `custom_processor` - Name of custom processor to use
- `processor_args` - Arguments for the custom processor

## Configuration Methods

### Method 1: Global Extension Settings

Define defaults for all files of a specific extension:

```yaml
my_project:
  global_settings:
    # Default settings for all files
    security_check: "abort"
    max_file_size: "1MB"

    # Extension-specific overrides
    extensions:
      .md:
        security_check: null # Disable for markdown
        remove_scraped_metadata: true
        max_file_size: "500KB"

      .php:
        security_check: "abort" # Keep strict for PHP
        max_file_size: "5MB"
        actions: [strip_comments]

      .css:
        max_file_size: "50KB" # Strict limit for CSS
        actions: [minify, strip_comments]

      .env:
        security_check: "abort"
        include_dot_paths: true # Include .env files
        max_file_size: "10KB"
```

### Method 2: Preset-Specific Settings

Define settings for files matching specific patterns:

```yaml
my_project:
  presets:
    documentation:
      extensions: [".md", ".rst", ".txt"]
      patterns: ["docs/**/*", "README*"]
      security_check: null # No security check
      remove_scraped_metadata: true
      max_file_size: "1MB"

    sensitive_files:
      extensions: [".env", ".key", ".pem"]
      patterns: ["config/**/*", "secrets/**/*"]
      security_check: "abort"
      max_file_size: "50KB"
      include_dot_paths: true

    documentation:
      patterns: ["docs/**/*", "*.md"]
      security_check: null # Don't check documentation
      max_file_size: "100KB" # Keep docs concise
      actions: [remove_empty_lines]
```

## Real-World Examples

### Example 1: Web Project with Mixed Content

```yaml
web_project:
  global_settings:
    # Defaults
    security_check: "warn"
    max_file_size: "2MB"

    extensions:
      # Documentation - relaxed rules
      .md:
        security_check: null
        remove_scraped_metadata: true
        actions: [remove_empty_lines]

      # Frontend - strict size limits
      .css:
        max_file_size: "50KB"
        security_check: "skip"
        actions: [minify]

      .js:
        max_file_size: "100KB"
        security_check: "warn"
        actions: [strip_comments, compress_whitespace]

      # Backend - larger files, strict security
      .php:
        max_file_size: "5MB"
        security_check: "abort"
        actions: [strip_comments]

      # Data files - very different handling
      .sql:
        max_file_size: "10MB"
        security_check: null
        max_lines: 1000 # Truncate large dumps
```

### Example 2: Documentation Project

```yaml
documentation:
  global_settings:
    # Default: include everything for docs
    security_check: null
    remove_scraped_metadata: true

    extensions:
      # Markdown files
      .md:
        actions: [remove_empty_lines]
        separator_style: "Markdown"

      # Code examples in docs
      .py:
        max_lines: 50 # Keep examples short
        actions: [strip_comments]

      # Config examples
      .json:
        actions: [compress_whitespace]
        max_lines: 30

      # Log file examples
      .log:
        max_file_size: "100KB"
        max_lines: 100
```

### Example 3: Security-Focused Configuration

```yaml
secure_project:
  global_settings:
    # Very strict by default
    security_check: "abort"
    abort_on_encoding_error: true

    extensions:
      # Public documentation - can be relaxed
      .md:
        security_check: null

      # Code files - different levels
      .js:
        security_check: "warn" # Client-side code

      .php:
        security_check: "abort" # Server-side code

      .env:
        security_check: "abort"
        max_file_size: "10KB" # Env files should be small

      # Config files - careful handling
      .json:
        security_check: "warn"
        actions: [custom]
        custom_processor: "redact_secrets"
```

## Priority and Precedence

When multiple settings could apply to a file, they are resolved in this order:

1. **File-specific preset settings** (highest priority)
   - Settings in a preset that matches the file
2. **Global extension settings**
   - Settings in `global_settings.extensions`
3. **Global defaults** (lowest priority)
   - Settings in `global_settings`

Example:

```yaml
my_project:
  global_settings:
    max_file_size: "1MB" # Default for all

    extensions:
      .js:
        max_file_size: "500KB" # Override for JS files

  presets:
    vendor_js:
      patterns: ["vendor/**/*.js"]
      max_file_size: "2MB" # Override for vendor JS (highest priority)
```

## Best Practices

1. **Start with sensible defaults** in `global_settings`
2. **Use extension settings** for broad file-type rules
3. **Use presets** for location or context-specific overrides
4. **Document your choices** with comments
5. **Test incrementally** with `--verbose` to see which rules apply

## Limitations

- Settings cascade down but don't merge collections (e.g., `actions` lists
  replace, not extend)
- Some settings only make sense for certain file types
- Binary file detection happens before preset processing

## See Also

- [Preset System Guide](10_m1f_presets.md) - General preset documentation
- [Preset Template](../../presets/template-all-settings.m1f-presets.yml) -
  Complete example with all settings
- [Use Case Examples](../../presets/example-use-cases.m1f-presets.yml) -
  Real-world scenarios

======= docs/01_m1f/12_preset_reference.md ======
# m1f Preset System Complete Reference

This document provides a comprehensive reference for the m1f preset system,
including all available settings, clarifications, and advanced usage patterns.

## Table of Contents

- [Quick Start](#quick-start)
- [Preset File Format](#preset-file-format)
- [All Available Settings](#all-available-settings)
- [Available Actions](#available-actions)
- [Pattern Matching](#pattern-matching)
- [Processing Order](#processing-order)
- [Important Clarifications](#important-clarifications)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Debugging and Best Practices](#debugging-and-best-practices)

## Quick Start

The m1f preset system allows you to define file-specific processing rules and
configurations. Here's a minimal example:

```yaml
# my-preset.yml
web_assets:
  description: "Process web assets"
  presets:
    javascript:
      extensions: [".js", ".jsx"]
      actions: ["minify", "strip_comments"]
```

Use it with:

```bash
# Module invocation (recommended)
m1f -s ./src -o bundle.txt --preset my-preset.yml

# Direct command invocation (if installed)
m1f -s ./src -o bundle.txt --preset my-preset.yml
```

## Preset File Format

### Modern Format (Recommended)

```yaml
# Group name - can be selected with --preset-group
group_name:
  description: "Optional description of this preset group"
  enabled: true # Can disable entire group
  priority: 10 # Higher numbers are processed first (default: 0)

  presets:
    # Preset name (for internal reference)
    preset_name:
      patterns: ["*.js", "*.jsx"] # Glob patterns
      extensions: [".js", ".jsx"] # Extension matching (with or without dot)
      actions:
        - minify
        - strip_comments
        - compress_whitespace

      # Per-file overrides
      security_check: "warn" # error, skip, warn
      max_file_size: "500KB"
      include_dot_paths: true
      include_binary_files: false
      remove_scraped_metadata: true

      # Custom processor with arguments
      custom_processor: "truncate"
      processor_args:
        max_lines: 100
        add_marker: true

# Global settings (apply to all groups)
globals:
  global_settings:
    # Input/Output settings (NEW in v3.2.0)
    source_directory: "./src"
    input_file: "files_to_process.txt"
    output_file: "bundle.txt"
    input_include_files:
      - "README.md"
      - "INTRO.txt"

    # Output control (NEW in v3.2.0)
    add_timestamp: true
    filename_mtime_hash: false
    force: false
    minimal_output: false
    skip_output_file: false

    # Archive settings (NEW in v3.2.0)
    create_archive: false
    archive_type: "zip" # zip or tar.gz

    # Runtime behavior (NEW in v3.2.0)
    verbose: false
    quiet: false

    # Default file processing
    security_check: "warn"
    max_file_size: "1MB"

    # Per-extension settings
    extensions:
      .py:
        security_check: "error"
        max_file_size: "2MB"
      .env:
        security_check: "skip"
        actions: ["redact_secrets"]
```

## All Available Settings

### Group-Level Settings

| Setting       | Type    | Default | Description                     |
| ------------- | ------- | ------- | ------------------------------- |
| `description` | string  | none    | Human-readable description      |
| `enabled`     | boolean | true    | Enable/disable this group       |
| `priority`    | integer | 0       | Processing order (higher first) |

### Global Settings (NEW in v3.2.0)

These settings can be specified in the `global_settings` section and override
CLI defaults:

#### Input/Output Settings

| Setting               | Type        | Default | Description                                 |
| --------------------- | ----------- | ------- | ------------------------------------------- |
| `source_directory`    | string      | none    | Source directory path                       |
| `input_file`          | string      | none    | Input file listing paths to process         |
| `output_file`         | string      | none    | Output file path                            |
| `input_include_files` | string/list | []      | Files to include at beginning (intro files) |

#### Output Control Settings

| Setting                 | Type    | Default | Description                          |
| ----------------------- | ------- | ------- | ------------------------------------ |
| `add_timestamp`         | boolean | false   | Add timestamp to output filename     |
| `filename_mtime_hash`   | boolean | false   | Add hash of file mtimes to filename  |
| `force`                 | boolean | false   | Force overwrite existing output file |
| `minimal_output`        | boolean | false   | Only create main output file         |
| `skip_output_file`      | boolean | false   | Skip creating main output file       |
| `allow_duplicate_files` | boolean | false   | Allow duplicate content (v3.2)       |

#### Archive Settings

| Setting          | Type    | Default | Description                       |
| ---------------- | ------- | ------- | --------------------------------- |
| `create_archive` | boolean | false   | Create backup archive of files    |
| `archive_type`   | string  | "zip"   | Archive format: "zip" or "tar.gz" |

#### Runtime Settings

| Setting   | Type    | Default | Description                 |
| --------- | ------- | ------- | --------------------------- |
| `verbose` | boolean | false   | Enable verbose output       |
| `quiet`   | boolean | false   | Suppress all console output |

#### File Processing Settings

| Setting                        | Type    | Default | Description                         |
| ------------------------------ | ------- | ------- | ----------------------------------- |
| `encoding`                     | string  | "utf-8" | Target encoding for all files       |
| `separator_style`              | string  | none    | File separator style                |
| `line_ending`                  | string  | "lf"    | Line ending style (lf/crlf)         |
| `security_check`               | string  | "warn"  | How to handle secrets               |
| `max_file_size`                | string  | none    | Maximum file size to process        |
| `enable_content_deduplication` | boolean | true    | Enable content deduplication (v3.2) |
| `prefer_utf8_for_text_files`   | boolean | true    | Prefer UTF-8 for text files (v3.2)  |

### Preset-Level Settings

| Setting                   | Type    | Default | Description                                 |
| ------------------------- | ------- | ------- | ------------------------------------------- |
| `patterns`                | list    | []      | Glob patterns to match files                |
| `extensions`              | list    | []      | File extensions to match                    |
| `actions`                 | list    | []      | Processing actions to apply                 |
| `security_check`          | string  | "warn"  | How to handle secrets                       |
| `max_file_size`           | string  | none    | Maximum file size to process                |
| `include_dot_paths`       | boolean | false   | Include hidden files                        |
| `include_binary_files`    | boolean | false   | Process binary files                        |
| `remove_scraped_metadata` | boolean | false   | Remove HTML2MD metadata                     |
| `custom_processor`        | string  | none    | Name of custom processor                    |
| `processor_args`          | dict    | {}      | Arguments for custom processor              |
| `line_ending`             | string  | "lf"    | Convert line endings (lf, crlf)             |
| `separator_style`         | string  | none    | Override default separator style            |
| `include_metadata`        | boolean | true    | Include file metadata in output             |
| `max_lines`               | integer | none    | Truncate file after N lines                 |
| `strip_tags`              | list    | []      | HTML tags to remove (for strip_tags action) |
| `preserve_tags`           | list    | []      | HTML tags to preserve when stripping        |

## Available Actions

### Built-in Actions

1. **`minify`** - Remove unnecessary whitespace and formatting

   - Reduces file size
   - Maintains functionality
   - Best for: JS, CSS, HTML

2. **`strip_tags`** - Remove HTML/XML tags

   - Extracts text content only
   - Preserves text between tags
   - Best for: HTML, XML, Markdown with HTML

3. **`strip_comments`** - Remove code comments

   - Removes single and multi-line comments
   - Language-aware (JS, Python, CSS, etc.)
   - Best for: Production code bundles

4. **`compress_whitespace`** - Reduce multiple spaces/newlines

   - Converts multiple spaces to single space
   - Reduces multiple newlines to double newline
   - Best for: Documentation, logs

5. **`remove_empty_lines`** - Remove blank lines
   - Removes lines with only whitespace
   - Keeps single blank lines between sections
   - Best for: Clean documentation

### Custom Processors

Currently implemented:

1. **`truncate`** - Limit file length

   ```yaml
   custom_processor: "truncate"
   processor_args:
     max_lines: 100
     max_chars: 10000
     add_marker: true # Add "... truncated ..." marker
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)(api[_-]?key|secret|password|token)\\s*[:=]\\s*["\\']?[\\w-]+["\\']?'
       - '(?i)bearer\\s+[\\w-]+'
     replacement: "[REDACTED]"
   ```

3. **`extract_functions`** - Extract function definitions
   ```yaml
   custom_processor: "extract_functions"
   processor_args:
     languages: ["python", "javascript"]
     include_docstrings: true
   ```

Note: Other processors mentioned in examples (like `extract_code_cells`) are
illustrative and would need to be implemented.

## Pattern Matching

### Pattern Types

1. **Extension Matching**

   ```yaml
   extensions: [".py", ".pyx", "py"] # All are equivalent
   ```

2. **Glob Patterns**

   ```yaml
   patterns:
     - "*.test.js" # All test files
     - "src/**/*.js" # All JS in src/
   ```

3. **Combined Matching**
   ```yaml
   # File must match BOTH extension AND pattern
   extensions: [".js"]
   patterns: ["src/**/*"]
   ```

## Processing Order

1. **Group Priority** - Higher priority groups are checked first
2. **Preset Order** - Within a group, presets are checked in definition order
3. **First Match Wins** - First matching preset is applied
4. **Action Order** - Actions are applied in the order listed

### Setting Precedence

1. CLI arguments (highest priority)
2. Preset-specific settings
3. Global per-extension settings
4. Global default settings
5. m1f defaults (lowest priority)

**Note**: CLI arguments ALWAYS override preset values.

## Important Clarifications

### Pattern Matching Limitations

**Exclude patterns with `!` prefix are not supported in preset patterns**. To
exclude files:

1. **Use Global Settings** (Recommended):

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js", "*.map", "dist/**/*"]
   ```

2. **Use CLI Arguments**:
   ```bash
   m1f -s . -o out.txt --exclude-patterns "*.min.js" "*.map"
   ```

### Settings Hierarchy

Understanding where settings can be applied:

1. **Global Settings Level** (`globals.global_settings`):

   - `include_patterns` / `exclude_patterns`
   - `include_extensions` / `exclude_extensions`
   - All general m1f settings

2. **Preset Level** (individual presets):

   - `patterns` and `extensions` (for matching)
   - `actions` (processing actions)
   - Override settings like `security_check`

3. **Extension-Specific Global Settings**
   (`globals.global_settings.extensions.{ext}`):
   - All preset-level settings per extension

### Common Misconceptions

1. **Exclude Patterns in Presets**

   ❌ **Incorrect**:

   ```yaml
   presets:
     my_preset:
       exclude_patterns: ["*.min.js"] # Doesn't work here
   ```

   ✅ **Correct**:

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js"] # Works here
   ```

2. **Actions vs Settings**

   **Actions** (go in `actions` list):

   - `minify`, `strip_tags`, `strip_comments`, etc.

   **Settings** (separate fields):

   - `strip_tags: ["script", "style"]` (configuration)
   - `max_lines: 100` (configuration)

## Advanced Features

### Conditional Enabling

To conditionally enable/disable preset groups:

```yaml
production:
  enabled: false # Manually disable this group
  presets:
    minify_all:
      extensions: [".js", ".css", ".html"]
      actions: ["minify"]
```

**Note**: The `enabled_if_exists` feature is only available in auto-bundle
configurations (`.m1f.config.yml`), not in preset files.

### Multiple Preset Files

```bash
# Files are merged in order (later files override earlier ones)
m1f -s . -o out.txt \
  --preset base.yml \
  --preset project.yml \
  --preset overrides.yml
```

### Preset Locations

1. **Project presets**: `./presets/*.m1f-presets.yml`
2. **Local preset**: `./.m1f-presets.yml`
3. **User presets**: `~/m1f/*.m1f-presets.yml`
4. **Specified presets**: Via `--preset` flag

### Complete Parameter Control (v3.2.0+)

Starting with v3.2.0, ALL m1f parameters can be controlled via presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production build configuration"

  global_settings:
    # Define all inputs/outputs
    source_directory: "./src"
    output_file: "dist/bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Enable production features
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true

    # Production optimizations
    minimal_output: true
    quiet: true

    # File processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    security_check: "error"
```

Usage comparison:

**Before v3.2.0** (long command):

```bash
m1f -s ./src -o dist/bundle.txt \
  --input-include-files README.md LICENSE \
  --add-timestamp --create-archive --archive-type tar.gz \
  --force --minimal-output --quiet \
  --separator-style MachineReadable \
  --security-check error
```

**After v3.2.0** (simple command):

```bash
m1f --preset production.m1f-presets.yml -o output.txt
```

## Examples

### Web Development Preset

```yaml
web_development:
  description: "Modern web development bundle"

  presets:
    # Minify production assets
    production_assets:
      patterns: ["dist/**/*", "build/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]

    # Source code - keep readable
    source_code:
      patterns: ["src/**/*"]
      extensions: [".js", ".jsx", ".ts", ".tsx"]
      actions: ["strip_comments"]
      security_check: "error"

    # Documentation
    docs:
      extensions: [".md", ".mdx"]
      actions: ["compress_whitespace", "remove_empty_lines"]

    # Configuration files
    config:
      patterns: ["*.json", "*.yml", "*.yaml"]
      security_check: "error"
      custom_processor: "redact_secrets"
```

### Data Science Preset

```yaml
data_science:
  presets:
    # Large data files - truncate
    data_files:
      extensions: [".csv", ".json", ".parquet"]
      max_file_size: "100KB"
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000

    # Scripts - full content
    scripts:
      extensions: [".py", ".r", ".jl"]
      actions: ["strip_comments"]
```

### Multiple Environment Presets

```yaml
# environments.m1f-presets.yml
development:
  priority: 10
  global_settings:
    source_directory: "./src"
    output_file: "dev-bundle.txt"
    verbose: true
    include_dot_paths: true
    security_check: "warn"

staging:
  priority: 20
  global_settings:
    source_directory: "./src"
    output_file: "stage-bundle.txt"
    create_archive: true
    security_check: "error"

production:
  priority: 30
  global_settings:
    source_directory: "./dist"
    output_file: "prod-bundle.txt"
    minimal_output: true
    quiet: true
    create_archive: true
    archive_type: "tar.gz"
```

Use with `--preset-group`:

```bash
# Development build
m1f --preset environments.yml --preset-group development

# Production build
m1f --preset environments.yml --preset-group production
```

## Debugging and Best Practices

### Debugging Tips

1. **Verbose Mode**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose
   ```

   Shows which preset is applied to each file and processing details.

2. **Check What's Applied**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose 2>&1 | grep "Applying preset"
   ```

3. **Validate YAML**

   ```bash
   python -c "import yaml; yaml.safe_load(open('my-preset.yml'))"
   ```

4. **Test Small First** Create a test directory with a few files to verify
   preset behavior before running on large codebases.

### Best Practices

1. **Start Simple** - Begin with basic actions, add complexity as needed
2. **Test Thoroughly** - Use verbose mode to verify behavior
3. **Layer Presets** - Use multiple files for base + overrides
4. **Document Presets** - Add descriptions to groups and complex presets
5. **Version Control** - Keep presets in your repository
6. **Performance First** - Apply expensive actions only where needed
7. **Use Priority Wisely** - Higher priority groups are checked first

### Common Issues

1. **Preset not applied**

   - Check pattern matching
   - Verify preset group is enabled
   - Use verbose mode to debug

2. **Wrong action order**

   - Actions are applied sequentially
   - Order matters (e.g., minify before strip_comments)

3. **Performance issues**
   - Limit expensive actions to necessary files
   - Use `max_file_size` to skip large files
   - Consider `minimal_output` mode

## Version Information

This documentation is accurate as of m1f version 3.2.0.

======= docs/01_m1f/20_auto_bundle_guide.md ======
# Auto-Bundle Guide

The m1f auto-bundle feature allows you to automatically generate predefined
bundles of files based on configuration. This is especially useful for
maintaining consistent documentation bundles, creating project snapshots, and
managing multiple projects on a server.

## Configuration File

Auto-bundle looks for a `.m1f.config.yml` file in your project. The tool
searches from the current directory upward to the root, allowing flexible
project organization.

### Basic Configuration Structure

```yaml
# .m1f.config.yml

# Global settings that apply to all bundles
global:
  global_excludes:
    - "**/*.pyc"
    - "**/*.log"
    - "**/tmp/**"

# Bundle definitions
bundles:
  docs:
    description: "Project documentation"
    output: "m1f/docs/manual.txt"
    sources:
      - path: "docs"
        include_extensions: [".md", ".txt"]

  code:
    description: "Source code bundle"
    output: "m1f/src/code.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts"]
```

## Command Usage

### Create All Bundles

```bash
m1f auto-bundle
# Or use the convenient alias:
m1f-update
```

### Create Specific Bundle

```bash
m1f auto-bundle docs
# Or use the convenient alias:
m1f-update docs
```

### List Available Bundles

```bash
m1f auto-bundle --list
```

### Create Bundles by Group

```bash
m1f auto-bundle --group documentation
# Or use the convenient alias:
m1f-update --group documentation
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle`
that provides a simpler way to regenerate bundles.

## Bundle Groups

You can organize bundles into groups for easier management:

```yaml
bundles:
  user-docs:
    description: "User documentation"
    group: "documentation"
    output: "m1f/docs/user.txt"
    sources:
      - path: "docs/user"

  api-docs:
    description: "API documentation"
    group: "documentation"
    output: "m1f/docs/api.txt"
    sources:
      - path: "docs/api"

  frontend-code:
    description: "Frontend source code"
    group: "source"
    output: "m1f/src/frontend.txt"
    sources:
      - path: "frontend"
```

Then create all documentation bundles:

```bash
m1f auto-bundle --group documentation
```

## Server-Wide Usage

### Managing Multiple Projects

For server environments with multiple projects, you can create a management
script:

```bash
#!/bin/bash
# update-all-bundles.sh

# Find all projects with .m1f.config.yml
for config in $(find /home/projects -name ".m1f.config.yml" -type f); do
    project_dir=$(dirname "$config")
    echo "Updating bundles in: $project_dir"

    cd "$project_dir"
    m1f-update --quiet
done
```

### Project-Specific Bundles

Create project-specific configurations by using groups:

```yaml
# Project A - .m1f.config.yml
bundles:
  all:
    description: "Complete project bundle"
    group: "project-a"
    output: "m1f/project-a-complete.txt"
    sources:
      - path: "."
```

Then update only specific projects:

```bash
cd /path/to/project-a
m1f-update --group project-a
```

### Automated Bundle Updates

Set up a cron job for automatic updates:

```bash
# Update all project bundles daily at 2 AM
0 2 * * * /usr/local/bin/update-all-bundles.sh
```

### Organized Bundle Output

Keep bundles organized within your project:

```yaml
bundles:
  project-bundle:
    description: "Main project bundle"
    output: "bundles/latest/project.txt" # Relative to project root
    sources:
      - path: "src"

  archived-bundle:
    description: "Archived version with timestamp"
    output: "bundles/archive/project-{timestamp}.txt"
    add_timestamp: true
    sources:
      - path: "."
```

**Note**: For security reasons, m1f only allows output paths within the project
directory. Use relative paths for portability.

## Advanced Features

### Conditional Bundles

Enable bundles only when specific files exist:

```yaml
bundles:
  python-docs:
    description: "Python documentation"
    enabled_if_exists: "setup.py"
    output: "m1f/python-docs.txt"
    sources:
      - path: "."
        include_extensions: [".py"]
```

### Multiple Source Configurations

Combine files from different locations with different settings:

```yaml
bundles:
  complete:
    description: "Complete project documentation"
    output: "m1f/complete.txt"
    sources:
      - path: "docs"
        include_extensions: [".md"]
      - path: "src"
        include_extensions: [".py"]
        excludes: ["**/test_*.py"]
      - path: "."
        include_files: ["README.md", "CHANGELOG.md"]

  # New in v3.4.0: Using includes patterns
  tool-specific:
    description: "Specific tool code only"
    output: "m1f/tool-code.txt"
    sources:
      - path: "tools/"
        include_extensions: [".py"]
        includes: ["m1f/**", "s1f/**", "!**/test_*.py"]
```

### Using Presets

Apply presets for advanced file processing:

```yaml
bundles:
  web-bundle:
    description: "Web project bundle"
    output: "m1f/web.txt"
    preset: "presets/web-project.m1f-presets.yml"
    preset_group: "production"
    sources:
      - path: "."
```

## Automatic Bundle Generation with Git Hooks

m1f provides a Git pre-commit hook that automatically runs auto-bundle before
each commit. This ensures your bundles are always in sync with your source code.

### Installing the Git Hook

```bash
# Run from your project root (where .m1f.config.yml is located)
bash /path/to/m1f/scripts/install-git-hooks.sh
```

The hook will:

- Run `m1f-update` before each commit
- Add generated bundles to the commit automatically
- Block commits if bundle generation fails

For detailed setup instructions, see the
[Git Hooks Setup Guide](../05_development/56_git_hooks_setup.md).

## Best Practices

1. **Organize with Groups**: Use groups to categorize bundles logically
2. **Version Control**: Include `.m1f.config.yml` in version control
3. **Include m1f/ Directory**: Keep generated bundles in version control for AI
   tool access
4. **Use Descriptive Names**: Make bundle names self-explanatory
5. **Regular Updates**: Use Git hooks or schedule automatic updates for
   frequently changing projects
6. **Review Bundle Changes**: Check generated bundle diffs before committing

## Troubleshooting

### Config Not Found

If you see "No .m1f.config.yml configuration found!", the tool couldn't find a
config file searching from the current directory up to the root. Create a
`.m1f.config.yml` in your project root.

### Bundle Not Created

Check the verbose output:

```bash
m1f-update --verbose
```

Common issues:

- Incorrect file paths
- Missing source directories
- Invalid YAML syntax
- Disabled bundles

### Group Not Found

If using `--group` and no bundles are found:

1. Check that bundles have the `group` field
2. Verify the group name matches exactly
3. Use `--list` to see available groups

## Examples

### Documentation Site Bundle

```yaml
bundles:
  docs-site:
    description: "Documentation site content"
    group: "documentation"
    output: "m1f/docs-site.txt"
    sources:
      - path: "content"
        include_extensions: [".md", ".mdx"]
      - path: "src/components"
        include_extensions: [".jsx", ".tsx"]
    excludes:
      - "**/node_modules/**"
      - "**/.next/**"
```

### Multi-Language Project

```yaml
bundles:
  python-code:
    description: "Python backend code"
    group: "backend"
    output: "m1f/backend/python.txt"
    sources:
      - path: "backend"
        include_extensions: [".py"]

  javascript-code:
    description: "JavaScript frontend code"
    group: "frontend"
    output: "m1f/frontend/javascript.txt"
    sources:
      - path: "frontend"
        include_extensions: [".js", ".jsx", ".ts", ".tsx"]

  all-code:
    description: "All source code"
    output: "m1f/all-code.txt"
    sources:
      - path: "."
        include_extensions: [".py", ".js", ".jsx", ".ts", ".tsx"]
```

### Combining Multiple Directories (v3.4.0+)

When you need to combine files from completely different directories:

```yaml
bundles:
  # Combine documentation from multiple locations
  all-docs:
    description: "All project documentation"
    output: "m1f/all-docs.txt"
    sources:
      - path: "docs"
      - path: "src"
        include_extensions: [".md"]
      - path: "../shared-docs"
      - path: "/absolute/path/to/external/docs"
        includes: ["api/**", "guides/**"]
```

### WordPress Plugin Bundle

```yaml
bundles:
  wp-plugin:
    description: "WordPress plugin files"
    group: "wordpress"
    output: "m1f/wp-plugin.txt"
    preset: "presets/wordpress.m1f-presets.yml"
    sources:
      - path: "."
        include_extensions: [".php", ".js", ".css"]
    excludes:
      - "**/vendor/**"
      - "**/node_modules/**"
```

======= docs/01_m1f/21_development_workflow.md ======
# m1f Development Workflow

This document describes the recommended workflow for developing with m1f and
using it in other projects.

## Overview

The m1f project provides a self-contained development environment with:

- Pre-generated m1f bundles of its own source code
- Shell aliases for convenient access from anywhere
- Symlink system for using m1f documentation in other projects

## Prerequisites

For initial setup instructions, see the [SETUP.md](../../SETUP.md) guide.

## Using m1f in Other Projects

### Method 1: Using Aliases (Recommended)

From any directory, you can use m1f directly:

```bash
cd /path/to/your/project
m1f -s . -o combined.txt
```

### Method 2: Quick Project Setup with m1f-init

When starting a new project with m1f, use `m1f-init` for quick setup:

```bash
cd /path/to/your/project
m1f-init
```

#### What m1f-init does:

1. **Links m1f documentation** (creates `m1f/m1f.txt`)
   - Makes m1f docs available to AI tools
   - Creates symlink on Linux/macOS, copies on Windows
   - Use `--no-symlink` to skip this step if not needed

2. **Analyzes your project**
   - Detects project type and programming languages
   - Supports Python, JavaScript, TypeScript, PHP, Java, C#, Go, Rust, Ruby
   - Creates file and directory listings
   - Shows clean output with created files listed at the end
   - Automatically cleans up temporary analysis files

3. **Generates initial bundles with auxiliary files**
   - `m1f/<project>_complete.txt` - Full project bundle
   - `m1f/<project>_complete_filelist.txt` - List of all included files
   - `m1f/<project>_complete_dirlist.txt` - List of all directories
   - `m1f/<project>_docs.txt` - Documentation only bundle
   - `m1f/<project>_docs_filelist.txt` - List of documentation files
   - `m1f/<project>_docs_dirlist.txt` - Documentation directories

4. **Creates basic configuration**
   - Generates `.m1f.config.yml` if not present
   - Sets up sensible defaults
   - Handles .gitignore correctly (only uses from current directory)
   - Smart Git detection (clean messages for subdirectories)

#### Using with AI Tools:

After running `m1f-init`, reference the documentation in your AI tool:

```bash
# For Claude Code, Cursor, or similar AI assistants:
@m1f/m1f.txt

# Example prompts:
"Please read @m1f/m1f.txt and help me create custom bundles
for my Python web application"

"Based on @m1f/m1f.txt, how can I exclude test files
while keeping fixture data?"

"Using @m1f/m1f.txt as reference, help me optimize
my .m1f.config.yml for a React project"
```

#### Advanced Setup (Linux/macOS only):

For topic-specific bundles and Claude-assisted configuration:

```bash
m1f-claude --setup
```

#### Working with File Lists:

The generated file lists are valuable for customizing bundles:

```bash
# View what files are included
cat m1f/*_filelist.txt | wc -l  # Count total files

# Edit file lists to customize bundles
vi m1f/myproject_complete_filelist.txt
# Remove lines for files you don't want
# Add paths for files you do want

# Create a custom bundle from edited list
m1f -i m1f/myproject_complete_filelist.txt -o m1f/custom.txt

# Combine multiple file lists
cat m1f/*_docs_filelist.txt m1f/api_filelist.txt | sort -u > m1f/combined_list.txt
m1f -i m1f/combined_list.txt -o m1f/docs_and_api.txt
```

This single documentation file contains:

- Complete m1f usage guide and all parameters
- Examples and best practices
- Preset system documentation
- Auto-bundle configuration guide
- All tool documentation (m1f, s1f, html2md, webscraper)

The AI can then:

- Understand all m1f parameters and options
- Help create custom `.m1f.config.yml` configurations
- Suggest appropriate presets for your project type
- Generate complex m1f commands with correct syntax
- Troubleshoot issues based on error messages

## Development Workflow

### When Developing m1f

1. Always work in the development environment:

   ```bash
   cd /path/to/m1f
   source .venv/bin/activate
   ```

2. Test changes directly:

   ```bash
   python -m tools.m1f -s test_dir -o output.txt
   ```

3. Run tests:

   ```bash
   pytest tests/
   ```

4. Update bundle files after significant changes:
   ```bash
   m1f-update
   ```

### When Using m1f in Projects

1. Use the global aliases:

   ```bash
   m1f -s src -o bundle.txt --preset documentation
   ```

2. Or create project-specific configuration:

   ```bash
   # Create .m1f directory in your project
   mkdir .m1f

   # Create m1f preset
   cat > .m1f/project.m1f-presets.yml << 'EOF'
   presets:
     my-bundle:
       source_directory: "."
       include_extensions: [".py", ".md", ".txt"]
       excludes: ["*/node_modules/*", "*/__pycache__/*"]
   EOF

   # Use preset
   m1f --preset .m1f/project.m1f-presets.yml --preset-group my-bundle -o bundle.txt
   ```

## Directory Structure

```
m1f/
├── .m1f/                      # Pre-generated m1f bundles
│   ├── m1f/                   # Tool bundles
│   └── m1f-doc/
│       └── 99_m1fdocs.txt    # Complete documentation
├── bin/                       # Executable commands
│   ├── m1f
│   ├── m1f-s1f
│   ├── m1f-html2md
│   ├── scrape_tool
│   └── ...
├── scripts/
│   ├── install.sh            # Installation script
│   └── watch_and_bundle.sh   # File watcher for auto-bundling
└── tools/                    # m1f source code
    ├── m1f/
    ├── s1f/
    └── html2md/

your-project/
└── .m1f/
    └── m1f -> /path/to/m1f/.m1f/  # Symlink to m1f bundles
```

## Best Practices

1. **Keep Bundles Updated**: Run `m1f-update` after significant changes to m1f
2. **Use Aliases**: The shell aliases handle virtual environment activation
   automatically
3. **Project Organization**: Keep project-specific m1f configurations in `.m1f/`
   directory
4. **Version Control**: The `.m1f/` directory is already in `.gitignore`

## Troubleshooting

### Aliases Not Working

If aliases don't work after setup:

1. Make sure you've reloaded your shell configuration
2. Check that the aliases were added to your shell config file
3. Verify the m1f project path is correct in the aliases

### Virtual Environment Issues

The aliases automatically activate the virtual environment. If you encounter
issues:

1. Ensure the virtual environment exists at `/path/to/m1f/.venv`
2. Check that all dependencies are installed

### Symlink Issues

If `m1f-link` fails:

1. Ensure you have write permissions in the current directory
2. Check that the m1f project path is accessible
3. Remove any existing `.m1f/m1f` symlink and try again

## Advanced Usage

### Custom Bundle Generation

Create custom bundles for specific use cases:

```bash
# Bundle only specific file types
m1f -s /path/to/project -o api-docs.txt \
    --include-extensions .py .yaml \
    --excludes "*/tests/*" \
    --separator-style Markdown

# Create compressed archive
m1f -s . -o project.txt --create-archive --archive-type tar.gz
```

### Integration with CI/CD

Add m1f to your CI pipeline:

```yaml
# Example GitHub Actions
- name: Generate Documentation Bundle
  run: |
    python -m tools.m1f -s docs -o docs-bundle.txt

- name: Upload Bundle
  uses: actions/upload-artifact@v2
  with:
    name: documentation
    path: docs-bundle.txt
```

======= docs/01_m1f/25_m1f_config_examples.md ======
# m1f Configuration Examples

This guide provides comprehensive examples of `.m1f.config.yml` files for
different project types. Each example includes detailed comments explaining the
configuration choices.

> **⚠️ IMPORTANT**: m1f automatically excludes many common directories
> (node_modules, .git, **pycache**, etc.). See the
> [Default Excludes Guide](./26_default_excludes_guide.md) for the complete
> list. **Only add project-specific excludes to keep your configs minimal!**

## 🚨 IMPORTANT: Use Standard Separator for AI Bundles!

**The primary purpose of m1f bundles is to provide context to AI assistants like
Claude, NOT for human reading in Markdown!**

- ✅ **ALWAYS use**: `separator_style: Standard` (or omit it - Standard is the
  default)
- ❌ **AVOID**: `separator_style: Markdown` (this adds unnecessary ```language
  blocks)
- 🎯 **Why**: Standard format is clean and optimal for AI consumption

```yaml
# CORRECT - For AI consumption:
bundles:
  - name: my-bundle
    separator_style: Standard  # ← This is optimal (or just omit it)

# AVOID - Adds unnecessary markdown formatting:
bundles:
  - name: my-bundle
    separator_style: Markdown  # ← Don't use for AI bundles!
```

**Note**: `MachineReadable` is only needed when you plan to use `s1f` to split
the bundle back into individual files.

## Minimal vs Verbose Configurations

### ❌ BAD Example - Overly Verbose (Don't Do This!)

```yaml
global:
  global_excludes:
    # ❌ ALL of these are already excluded by default!
    - "**/node_modules/**" # Auto-excluded
    - "**/vendor/**" # Auto-excluded
    - "**/__pycache__/**" # Auto-excluded
    - "**/build/**" # Auto-excluded
    - "**/dist/**" # Auto-excluded
    - "**/.git/**" # Auto-excluded
    - "**/cache/**" # Auto-excluded
    - "**/.vscode/**" # Auto-excluded
    - "**/.idea/**" # Auto-excluded

    # ✅ Only these are needed (project-specific)
    - "**/logs/**"
    - "**/tmp/**"
    - "/m1f/**"
```

### ✅ GOOD Example - Minimal Configuration

```yaml
global:
  global_excludes:
    # Only project-specific excludes
    - "**/logs/**" # Your log files
    - "**/tmp/**" # Your temp files
    - "/m1f/**" # Output directory

  global_settings:
    # Let .gitignore handle most excludes
    exclude_paths_file: ".gitignore"
```

## Table of Contents

1. [m1f Tool Project (Current)](#m1f-tool-project-current)
2. [Node.js/React Project](#nodejsreact-project)
3. [Python/Django Project](#pythondjango-project)
4. [WordPress Theme](#wordpress-theme)
5. [Documentation Site](#documentation-site)
6. [Mixed Language Project](#mixed-language-project)
7. [Microservices Architecture](#microservices-architecture)
8. [Mobile App Project](#mobile-app-project)

## m1f Tool Project (Current)

This is the actual configuration used by the m1f project itself - a Python-based
tool with comprehensive documentation.

```yaml
# m1f Auto-Bundle Configuration

# Global settings
global:
  # Exclusions that apply to all bundles
  global_excludes:
    - "/m1f/**" # Exclude output directory
    - "**/*.pyc" # Python bytecode
    - "**/*.log" # Log files
    - "**/tmp/**" # Temporary directories
    - "**/dev/**" # Development files
    - "**/tests/**/source/**" # Test input data
    - "**/tests/**/output/**" # Test output data
    - "**/tests/**/expected/**" # Expected test results
    - "**/tests/**/scraped_examples/**" # Scraped test examples

  global_settings:
    # Default security setting for all files
    security_check: "warn" # Strict by default
    # Use .gitignore as exclude file (can be single file or list)
    exclude_paths_file:
      - ".gitignore"
      - ".m1fignore"

    # Per-extension overrides
    extensions:
      .py:
        security_check: "abort" # Strict for Python files

  # Default settings for all bundles
  defaults:
    force_overwrite: true
    max_file_size: "1MB"
    minimal_output: false

  # File watcher settings for auto-update
  watcher:
    enabled: true
    debounce_seconds: 2
    ignored_paths:
      - "/m1f"
      - ".git/"
      - ".venv/"
      - "tmp/"
      - ".scrapes/"

# Bundle definitions
bundles:
  # Documentation bundles - separate by tool
  m1f-docs:
    description: "m1f docs"
    group: "documentation"
    output: "m1f/m1f/87_m1f_only_docs.txt"
    sources:
      - path: "docs/01_m1f"

  html2md-docs:
    description: "html2md docs"
    group: "documentation"
    output: "m1f/m1f/88_html2md_docs.txt"
    sources:
      - path: "docs/03_html2md"

  # Source code bundles - modular approach
  m1f-code:
    description: "m1f complete code"
    group: "source"
    output: "m1f/m1f/94_code.txt"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "SETUP.md",
            "requirements.txt",
            "tools/**",
            "scripts/**",
          ]
      - path: "tests/"
        excludes:
          [
            "**/tests/**/source/**",
            "**/tests/**/extracted/**",
            "**/tests/**/output/**",
          ]

  # Complete project bundle
  all:
    description: "All 1 One"
    group: "complete"
    output: "m1f/m1f/99_m1f_complete.txt"
    sources:
      - path: "."
```

## Node.js/React Project

Configuration for a modern React application with TypeScript and testing.

```yaml
# React Application m1f Configuration

global:
  global_excludes:
    # ⚠️ MINIMAL CONFIG - Only project-specific excludes!
    # DON'T add node_modules, dist, build - they're auto-excluded!

    # Next.js specific (not in defaults)
    - "**/.next/**" # Next.js build cache
    - "**/coverage/**" # Test coverage reports

    # Log and temp files
    - "**/*.log"
    - "**/*.map" # Source maps
    - "**/.DS_Store"
    - "**/Thumbs.db"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".eslintignore"]

    # JavaScript/TypeScript specific processing
    extensions:
      .js:
        minify: true # Minify for AI context
        remove_comments: true # Clean comments
      .jsx:
        minify: true
        remove_comments: true
      .ts:
        minify: true
        remove_comments: true
      .tsx:
        minify: true
        remove_comments: true
      .json:
        minify: true # Compact JSON
      .env:
        security_check: "abort" # Never include env files

  defaults:
    force_overwrite: true
    max_file_size: "500KB" # Smaller for JS files
    minimal_output: true # Compact output

bundles:
  # Application source code
  app-components:
    description: "React components"
    group: "frontend"
    output: "m1f/01_components.txt"
    sources:
      - path: "src/components"
        include_extensions: [".tsx", ".ts", ".css", ".scss"]
      - path: "src/hooks"
        include_extensions: [".ts", ".tsx"]

  app-pages:
    description: "Application pages/routes"
    group: "frontend"
    output: "m1f/02_pages.txt"
    sources:
      - path: "src/pages"
      - path: "src/routes"
      - path: "src/layouts"

  app-state:
    description: "State management (Redux/Context)"
    group: "frontend"
    output: "m1f/03_state.txt"
    sources:
      - path: "src/store"
      - path: "src/redux"
      - path: "src/context"
      - path: "src/reducers"
      - path: "src/actions"

  # API and services
  app-api:
    description: "API integration layer"
    group: "integration"
    output: "m1f/10_api.txt"
    sources:
      - path: "src/api"
      - path: "src/services"
      - path: "src/graphql"
        include_extensions: [".ts", ".graphql", ".gql"]

  # Configuration and setup
  app-config:
    description: "Build configuration"
    group: "config"
    output: "m1f/20_config.txt"
    sources:
      - path: "."
        includes:
          [
            "package.json",
            "tsconfig.json",
            "webpack.config.js",
            "vite.config.js",
            ".eslintrc.*",
            ".prettierrc.*",
            "babel.config.*",
          ]

  # Tests
  app-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/30_tests.txt"
    sources:
      - path: "src"
        includes:
          ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
      - path: "__tests__"
      - path: "cypress/integration"
        include_extensions: [".js", ".ts"]

  # Documentation
  app-docs:
    description: "Project documentation"
    group: "docs"
    output: "m1f/40_docs.txt"
    sources:
      - path: "."
        includes: ["README.md", "CONTRIBUTING.md", "docs/**/*.md"]
      - path: "src"
        includes: ["**/*.md"]

  # Quick reference bundle for AI assistance
  app-quick-reference:
    description: "Key files for quick AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB" # Keep small for quick loading
    sources:
      - path: "."
        includes: ["package.json", "README.md", "src/App.tsx", "src/index.tsx"]
      - path: "src/types" # TypeScript types
```

## Python/Django Project

Configuration for a Django web application with REST API.

```yaml
# Django Project m1f Configuration

global:
  global_excludes:
    # ⚠️ MINIMAL CONFIG - __pycache__, .pytest_cache, etc. are auto-excluded!

    # Python bytecode (not in defaults)
    - "**/*.pyc"
    - "**/*.pyo"
    - "**/*.pyd"

    # Virtual environments (common names)
    - "**/venv/**"
    - "**/.venv/**"
    - "**/env/**"

    # Django specific
    - "**/migrations/**" # Database migrations
    - "**/media/**" # User uploads
    - "**/static/**" # Collected static files
    - "**/staticfiles/**"
    - "**/*.sqlite3" # SQLite database
    - "**/celerybeat-schedule"

  global_settings:
    security_check: "abort" # Strict for web apps
    exclude_paths_file: ".gitignore"

    extensions:
      .py:
        remove_docstrings: false # Keep docstrings for API
        remove_comments: true # Remove inline comments
      .html:
        minify: true # Minify templates
      .env:
        security_check: "abort" # Never include
      .yml:
        security_check: "warn" # Check for secrets

  defaults:
    force_overwrite: true
    max_file_size: "1MB"

bundles:
  # Django apps - one bundle per app
  app-accounts:
    description: "User accounts and authentication"
    group: "apps"
    output: "m1f/apps/01_accounts.txt"
    sources:
      - path: "accounts/"
        excludes: ["migrations/", "__pycache__/", "*.pyc"]

  app-api:
    description: "REST API implementation"
    group: "apps"
    output: "m1f/apps/02_api.txt"
    sources:
      - path: "api/"
        excludes: ["migrations/", "__pycache__/"]
      - path: "."
        includes: ["**/serializers.py", "**/viewsets.py"]

  app-core:
    description: "Core business logic"
    group: "apps"
    output: "m1f/apps/03_core.txt"
    sources:
      - path: "core/"
        excludes: ["migrations/", "__pycache__/"]

  # Project configuration
  django-settings:
    description: "Django settings and configuration"
    group: "config"
    output: "m1f/10_settings.txt"
    sources:
      - path: "config/" # Settings module
      - path: "."
        includes:
          ["manage.py", "requirements*.txt", "Dockerfile", "docker-compose.yml"]

  # Models across all apps
  django-models:
    description: "All database models"
    group: "database"
    output: "m1f/20_models.txt"
    sources:
      - path: "."
        includes: ["**/models.py", "**/models/*.py"]

  # Views and URLs
  django-views:
    description: "Views and URL patterns"
    group: "views"
    output: "m1f/21_views.txt"
    sources:
      - path: "."
        includes: ["**/views.py", "**/views/*.py", "**/urls.py"]

  # Templates
  django-templates:
    description: "HTML templates"
    group: "frontend"
    output: "m1f/30_templates.txt"
    sources:
      - path: "templates/"
      - path: "."
        includes: ["**/templates/**/*.html"]

  # Tests
  django-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/40_tests.txt"
    sources:
      - path: "."
        includes: ["**/tests.py", "**/tests/*.py", "**/test_*.py"]

  # Management commands
  django-commands:
    description: "Custom management commands"
    group: "utilities"
    output: "m1f/50_commands.txt"
    sources:
      - path: "."
        includes: ["**/management/commands/*.py"]

  # Quick AI reference
  django-quick-ref:
    description: "Essential files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "requirements.txt",
            "config/settings/base.py",
            "config/urls.py",
          ]
```

## WordPress Theme

Configuration for a custom WordPress theme with modern build tools.

```yaml
# WordPress Theme m1f Configuration

global:
  global_excludes:
    # ⚠️ MINIMAL CONFIG - node_modules, vendor, build, dist are auto-excluded!

    # WordPress specific (not in defaults)
    - "wp-admin/**" # Core files
    - "wp-includes/**" # Core files
    - "wp-content/uploads/**" # User uploads
    - "wp-content/cache/**" # Cache plugins
    - "wp-content/backup/**" # Backup files
    - "wp-content/upgrade/**" # Updates

    # Sass cache (not in defaults)
    - "**/.sass-cache/**"
    - "**/*.map" # Source maps
    - "**/*.log" # Log files

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".wpignore"]

    # Use WordPress preset for optimal processing
    preset: "wordpress"

    extensions:
      .php:
        remove_comments: true # Clean PHP comments
      .js:
        minify: true
      .css:
        minify: true
      .scss:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "500KB"

bundles:
  # Theme core files
  theme-core:
    description: "Theme core functionality"
    group: "theme"
    output: "m1f/01_theme_core.txt"
    sources:
      - path: "."
        includes: [
            "style.css", # Theme header
            "functions.php",
            "index.php",
            "header.php",
            "footer.php",
            "sidebar.php",
            "searchform.php",
            "404.php",
          ]

  # Template files
  theme-templates:
    description: "Page and post templates"
    group: "theme"
    output: "m1f/02_templates.txt"
    sources:
      - path: "."
        includes:
          [
            "single*.php",
            "page*.php",
            "archive*.php",
            "category*.php",
            "tag*.php",
            "taxonomy*.php",
            "front-page.php",
            "home.php",
          ]
      - path: "template-parts/"
      - path: "templates/"

  # Theme includes/components
  theme-includes:
    description: "Theme includes and components"
    group: "theme"
    output: "m1f/03_includes.txt"
    sources:
      - path: "inc/"
      - path: "includes/"
      - path: "lib/"
      - path: "components/"

  # Custom post types and taxonomies
  theme-cpt:
    description: "Custom post types and taxonomies"
    group: "functionality"
    output: "m1f/10_custom_types.txt"
    sources:
      - path: "."
        includes: ["**/post-types/*.php", "**/taxonomies/*.php"]
      - path: "inc/"
        includes: ["*cpt*.php", "*custom-post*.php", "*taxonom*.php"]

  # ACF field groups
  theme-acf:
    description: "Advanced Custom Fields configuration"
    group: "functionality"
    output: "m1f/11_acf_fields.txt"
    sources:
      - path: "acf-json/" # ACF JSON exports
      - path: "."
        includes: ["**/acf-fields/*.php", "**/acf/*.php"]

  # JavaScript and build files
  theme-assets:
    description: "Theme assets and build configuration"
    group: "assets"
    output: "m1f/20_assets.txt"
    sources:
      - path: "src/"
        include_extensions: [".js", ".jsx", ".scss", ".css"]
      - path: "assets/src/"
      - path: "."
        includes:
          [
            "webpack.config.js",
            "gulpfile.js",
            "package.json",
            ".babelrc",
            "postcss.config.js",
          ]

  # WooCommerce integration
  theme-woocommerce:
    description: "WooCommerce customizations"
    group: "integrations"
    output: "m1f/30_woocommerce.txt"
    sources:
      - path: "woocommerce/"
      - path: "inc/"
        includes: ["*woocommerce*.php", "*wc-*.php"]

  # Documentation and setup
  theme-docs:
    description: "Theme documentation"
    group: "docs"
    output: "m1f/40_documentation.txt"
    sources:
      - path: "."
        includes: ["README.md", "CHANGELOG.md", "style.css"]
      - path: "docs/"

  # Quick reference for AI
  theme-quick-ref:
    description: "Essential theme files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: ["style.css", "functions.php", "README.md", "package.json"]
```

## Documentation Site

Configuration for a documentation website using Markdown and static site
generators.

```yaml
# Documentation Site m1f Configuration

global:
  global_excludes:
    # Build outputs
    - "_site/**"
    - "public/**"
    - "dist/**"
    - ".cache/**"

    # Development
    - "**/node_modules/**"
    - "**/.sass-cache/**"
    - "**/tmp/**"

  global_settings:
    security_check: "skip" # Docs are public
    exclude_paths_file: ".gitignore"

    # Optimize for documentation
    extensions:
      .md:
        preserve_formatting: true # Keep Markdown formatting
        max_file_size: "2MB" # Allow larger docs
      .mdx:
        preserve_formatting: true
      .yml:
        minify: false # Keep YAML readable
      .json:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "1MB"
    include_empty_dirs: false

bundles:
  # Documentation by section
  docs-getting-started:
    description: "Getting started guides"
    group: "content"
    output: "m1f/01_getting_started.txt"
    sources:
      - path: "docs/getting-started/"
      - path: "content/getting-started/"
      - path: "src/pages/docs/getting-started/"

  docs-tutorials:
    description: "Tutorial content"
    group: "content"
    output: "m1f/02_tutorials.txt"
    sources:
      - path: "docs/tutorials/"
      - path: "content/tutorials/"
      - path: "examples/"
        include_extensions: [".md", ".mdx"]

  docs-api-reference:
    description: "API documentation"
    group: "content"
    output: "m1f/03_api_reference.txt"
    sources:
      - path: "docs/api/"
      - path: "content/api/"
      - path: "reference/"

  docs-guides:
    description: "How-to guides"
    group: "content"
    output: "m1f/04_guides.txt"
    sources:
      - path: "docs/guides/"
      - path: "content/guides/"
      - path: "content/how-to/"

  # Site configuration and theming
  site-config:
    description: "Site configuration and theme"
    group: "config"
    output: "m1f/10_site_config.txt"
    sources:
      - path: "."
        includes: [
            "config*.yml",
            "config*.yaml",
            "config*.toml",
            "config*.json",
            "_config.yml", # Jekyll
            "docusaurus.config.js", # Docusaurus
            "gatsby-config.js", # Gatsby
            "mkdocs.yml", # MkDocs
            ".vuepress/config.js", # VuePress
          ]
      - path: "data/" # Data files
        include_extensions: [".yml", ".yaml", ".json"]

  # Theme and layouts
  site-theme:
    description: "Theme and layout files"
    group: "theme"
    output: "m1f/11_theme.txt"
    sources:
      - path: "_layouts/" # Jekyll
      - path: "_includes/"
      - path: "layouts/" # Hugo
      - path: "themes/"
      - path: "src/theme/"
      - path: "src/components/"
        include_extensions: [".jsx", ".tsx", ".vue", ".css", ".scss"]

  # Code examples
  docs-examples:
    description: "Code examples and snippets"
    group: "examples"
    output: "m1f/20_examples.txt"
    sources:
      - path: "examples/"
      - path: "snippets/"
      - path: "code-examples/"
      - path: "."
        includes: ["**/*.example.*", "**/examples/**"]

  # Search index and data
  site-search:
    description: "Search configuration and index"
    group: "search"
    output: "m1f/30_search.txt"
    sources:
      - path: "."
        includes: ["**/search-index.json", "**/algolia*.js", "**/lunr*.js"]
      - path: "search/"

  # Complete documentation bundle
  docs-complete:
    description: "All documentation content"
    group: "complete"
    output: "m1f/99_all_docs.txt"
    sources:
      - path: "."
        include_extensions: [".md", ".mdx"]
        excludes: ["node_modules/", "_site/", "public/"]

  # Quick reference
  docs-quick-ref:
    description: "Key documentation for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: ["README.md", "index.md", "docs/index.md"]
      - path: "docs/"
        includes: ["quick-start.md", "overview.md", "introduction.md"]
```

## Mixed Language Project

Configuration for a project with multiple programming languages (e.g., Python
backend, React frontend, Go microservices).

```yaml
# Mixed Language Project m1f Configuration

global:
  global_excludes:
    # Language-specific build artifacts
    - "**/node_modules/**" # JavaScript
    - "**/__pycache__/**" # Python
    - "**/venv/**"
    - "**/vendor/**" # Go/PHP
    - "**/target/**" # Rust/Java
    - "**/bin/**" # Binaries
    - "**/obj/**" # .NET

    # Common excludes
    - "**/dist/**"
    - "**/build/**"
    - "**/*.log"
    - "**/.cache/**"
    - "**/tmp/**"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".dockerignore"]

    # Language-specific processing
    extensions:
      # Frontend
      .js:
        minify: true
        remove_comments: true
      .ts:
        minify: true
        remove_comments: true
      .jsx:
        minify: true
      .tsx:
        minify: true

      # Backend
      .py:
        remove_comments: true
        remove_docstrings: false
      .go:
        remove_comments: true
      .java:
        remove_comments: true
      .rs:
        remove_comments: true

      # Config files
      .env:
        security_check: "abort"
      .yml:
        security_check: "warn"

  defaults:
    force_overwrite: true
    max_file_size: "1MB"

bundles:
  # Frontend - React/TypeScript
  frontend-components:
    description: "Frontend React components"
    group: "frontend"
    output: "m1f/frontend/01_components.txt"
    sources:
      - path: "frontend/src/components/"
      - path: "frontend/src/hooks/"
      - path: "frontend/src/utils/"

  frontend-config:
    description: "Frontend configuration"
    group: "frontend"
    output: "m1f/frontend/02_config.txt"
    sources:
      - path: "frontend/"
        includes:
          ["package.json", "tsconfig.json", "webpack.config.js", ".eslintrc.*"]

  # Backend - Python/FastAPI
  backend-api:
    description: "Python API endpoints"
    group: "backend"
    output: "m1f/backend/01_api.txt"
    sources:
      - path: "backend/app/api/"
      - path: "backend/app/routers/"

  backend-models:
    description: "Database models and schemas"
    group: "backend"
    output: "m1f/backend/02_models.txt"
    sources:
      - path: "backend/app/models/"
      - path: "backend/app/schemas/"
      - path: "backend/app/database/"

  backend-services:
    description: "Business logic services"
    group: "backend"
    output: "m1f/backend/03_services.txt"
    sources:
      - path: "backend/app/services/"
      - path: "backend/app/core/"

  # Microservices - Go
  service-auth:
    description: "Authentication service (Go)"
    group: "microservices"
    output: "m1f/services/01_auth.txt"
    sources:
      - path: "services/auth/"
        include_extensions: [".go"]
        excludes: ["vendor/", "*_test.go"]

  service-notifications:
    description: "Notification service (Go)"
    group: "microservices"
    output: "m1f/services/02_notifications.txt"
    sources:
      - path: "services/notifications/"
        include_extensions: [".go"]
        excludes: ["vendor/", "*_test.go"]

  # Shared libraries
  shared-proto:
    description: "Protocol Buffers definitions"
    group: "shared"
    output: "m1f/shared/01_protobuf.txt"
    sources:
      - path: "proto/"
        include_extensions: [".proto"]

  shared-utils:
    description: "Shared utilities across languages"
    group: "shared"
    output: "m1f/shared/02_utils.txt"
    sources:
      - path: "shared/"
      - path: "common/"

  # Infrastructure as Code
  infrastructure:
    description: "Infrastructure configuration"
    group: "infrastructure"
    output: "m1f/infra/01_infrastructure.txt"
    sources:
      - path: "infrastructure/"
        include_extensions: [".tf", ".yml", ".yaml"]
      - path: "."
        includes: ["docker-compose*.yml", "Dockerfile*", ".dockerignore"]

  # Testing
  tests-frontend:
    description: "Frontend tests"
    group: "testing"
    output: "m1f/tests/01_frontend.txt"
    sources:
      - path: "frontend/"
        includes: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts"]

  tests-backend:
    description: "Backend tests"
    group: "testing"
    output: "m1f/tests/02_backend.txt"
    sources:
      - path: "backend/"
        includes: ["**/test_*.py", "**/*_test.py"]

  tests-integration:
    description: "Integration tests"
    group: "testing"
    output: "m1f/tests/03_integration.txt"
    sources:
      - path: "tests/integration/"
      - path: "e2e/"

  # Documentation
  project-docs:
    description: "Project documentation"
    group: "docs"
    output: "m1f/docs/01_documentation.txt"
    sources:
      - path: "."
        includes: ["README.md", "CONTRIBUTING.md", "ARCHITECTURE.md"]
      - path: "docs/"
      - path: "frontend/README.md"
      - path: "backend/README.md"
      - path: "services/*/README.md"

  # Quick reference bundle
  project-overview:
    description: "Project overview for AI context"
    group: "reference"
    output: "m1f/00_overview.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "docker-compose.yml",
            "frontend/package.json",
            "backend/requirements.txt",
            "services/auth/go.mod",
          ]
```

## Microservices Architecture

Configuration for a microservices-based application with multiple services.

```yaml
# Microservices Architecture m1f Configuration

global:
  global_excludes:
    # Common excludes across all services
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/target/**"
    - "**/build/**"
    - "**/dist/**"
    - "**/.cache/**"
    - "**/logs/**"
    - "**/*.log"

  global_settings:
    security_check: "abort" # Strict for microservices
    exclude_paths_file: [".gitignore", ".dockerignore"]

    # Process by file type
    extensions:
      .env:
        security_check: "abort"
      .yml:
        security_check: "warn"
      .json:
        minify: true
      .proto:
        preserve_formatting: true # Keep protobuf readable

  defaults:
    force_overwrite: true
    max_file_size: "500KB" # Smaller for services

  # Watch for changes in all services
  watcher:
    enabled: true
    debounce_seconds: 3
    ignored_paths:
      - "**/node_modules"
      - "**/vendor"
      - "**/logs"

bundles:
  # API Gateway
  gateway-main:
    description: "API Gateway service"
    group: "gateway"
    output: "m1f/gateway/01_main.txt"
    sources:
      - path: "services/gateway/"
        excludes: ["node_modules/", "dist/", "coverage/"]

  # Individual microservices
  service-users:
    description: "User management service"
    group: "services"
    output: "m1f/services/01_users.txt"
    sources:
      - path: "services/users/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-orders:
    description: "Order processing service"
    group: "services"
    output: "m1f/services/02_orders.txt"
    sources:
      - path: "services/orders/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-inventory:
    description: "Inventory management service"
    group: "services"
    output: "m1f/services/03_inventory.txt"
    sources:
      - path: "services/inventory/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-payments:
    description: "Payment processing service"
    group: "services"
    output: "m1f/services/04_payments.txt"
    sources:
      - path: "services/payments/"
        excludes: ["vendor/", "bin/", "logs/"]

  # Shared configurations and contracts
  shared-contracts:
    description: "Service contracts and interfaces"
    group: "shared"
    output: "m1f/shared/01_contracts.txt"
    sources:
      - path: "contracts/"
        include_extensions: [".proto", ".graphql", ".openapi.yml"]
      - path: "schemas/"

  shared-libs:
    description: "Shared libraries and utilities"
    group: "shared"
    output: "m1f/shared/02_libraries.txt"
    sources:
      - path: "libs/"
      - path: "packages/"
      - path: "common/"

  # Infrastructure and deployment
  k8s-configs:
    description: "Kubernetes configurations"
    group: "infrastructure"
    output: "m1f/k8s/01_configs.txt"
    sources:
      - path: "k8s/"
        include_extensions: [".yml", ".yaml"]
      - path: "helm/"

  docker-configs:
    description: "Docker configurations"
    group: "infrastructure"
    output: "m1f/docker/01_configs.txt"
    sources:
      - path: "."
        includes: ["**/Dockerfile*", "**/.dockerignore", "docker-compose*.yml"]

  # Monitoring and observability
  monitoring:
    description: "Monitoring and alerting configs"
    group: "observability"
    output: "m1f/monitoring/01_configs.txt"
    sources:
      - path: "monitoring/"
      - path: "grafana/"
      - path: "prometheus/"

  # CI/CD pipelines
  cicd:
    description: "CI/CD pipeline definitions"
    group: "devops"
    output: "m1f/cicd/01_pipelines.txt"
    sources:
      - path: ".github/workflows/"
      - path: ".gitlab-ci.yml"
      - path: "jenkins/"
      - path: ".circleci/"

  # Service mesh configuration
  service-mesh:
    description: "Service mesh configurations"
    group: "infrastructure"
    output: "m1f/mesh/01_configs.txt"
    sources:
      - path: "istio/"
      - path: "linkerd/"
      - path: "consul/"

  # Quick overview for new developers
  architecture-overview:
    description: "Architecture overview"
    group: "reference"
    output: "m1f/00_architecture.txt"
    max_file_size: "150KB"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "ARCHITECTURE.md",
            "docker-compose.yml",
            "services/*/README.md",
          ]
```

## Mobile App Project

Configuration for a React Native or Flutter mobile application.

```yaml
# Mobile App m1f Configuration

global:
  global_excludes:
    # Platform-specific builds
    - "**/ios/build/**"
    - "**/ios/Pods/**"
    - "**/android/build/**"
    - "**/android/.gradle/**"
    - "**/android/app/build/**"

    # React Native / Flutter
    - "**/node_modules/**"
    - "**/.dart_tool/**"
    - "**/pubspec.lock"
    - "**/package-lock.json"
    - "**/yarn.lock"

    # IDE and temp files
    - "**/.idea/**"
    - "**/.vscode/**"
    - "**/tmp/**"
    - "**/*.log"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".npmignore"]

    extensions:
      # Mobile-specific
      .swift:
        remove_comments: true
      .kt:
        remove_comments: true
      .dart:
        remove_comments: true
      .java:
        remove_comments: true
      # JavaScript/TypeScript
      .js:
        minify: true
      .jsx:
        minify: true
      .ts:
        minify: true
      .tsx:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "500KB"

bundles:
  # Core application code
  app-screens:
    description: "App screens and navigation"
    group: "app"
    output: "m1f/app/01_screens.txt"
    sources:
      - path: "src/screens/" # React Native
      - path: "lib/screens/" # Flutter
      - path: "src/pages/"
      - path: "src/navigation/"

  app-components:
    description: "Reusable UI components"
    group: "app"
    output: "m1f/app/02_components.txt"
    sources:
      - path: "src/components/"
      - path: "lib/widgets/" # Flutter
      - path: "src/ui/"

  app-state:
    description: "State management"
    group: "app"
    output: "m1f/app/03_state.txt"
    sources:
      - path: "src/store/" # Redux/MobX
      - path: "src/context/" # React Context
      - path: "lib/providers/" # Flutter Provider
      - path: "lib/blocs/" # Flutter BLoC

  app-services:
    description: "API and service layer"
    group: "app"
    output: "m1f/app/04_services.txt"
    sources:
      - path: "src/services/"
      - path: "src/api/"
      - path: "lib/services/"
      - path: "src/utils/"

  # Platform-specific code
  platform-ios:
    description: "iOS specific code"
    group: "platform"
    output: "m1f/platform/01_ios.txt"
    sources:
      - path: "ios/"
        include_extensions: [".swift", ".m", ".h", ".plist"]
        excludes: ["Pods/", "build/"]

  platform-android:
    description: "Android specific code"
    group: "platform"
    output: "m1f/platform/02_android.txt"
    sources:
      - path: "android/"
        include_extensions: [".java", ".kt", ".xml", ".gradle"]
        excludes: ["build/", ".gradle/"]

  # Assets and resources
  app-assets:
    description: "App assets and resources"
    group: "assets"
    output: "m1f/assets/01_resources.txt"
    sources:
      - path: "assets/"
        includes: ["**/*.json", "**/*.xml", "**/strings.xml"]
      - path: "src/assets/"
      - path: "resources/"

  # Configuration
  app-config:
    description: "App configuration"
    group: "config"
    output: "m1f/config/01_configuration.txt"
    sources:
      - path: "."
        includes: [
            "package.json",
            "app.json", # React Native
            "metro.config.js", # React Native
            "babel.config.js",
            "tsconfig.json",
            "pubspec.yaml", # Flutter
            ".env.example",
          ]

  # Tests
  app-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/tests/01_tests.txt"
    sources:
      - path: "__tests__/"
      - path: "test/"
      - path: "src/"
        includes: ["**/*.test.js", "**/*.test.ts", "**/*.spec.js"]

  # Native modules
  native-modules:
    description: "Native modules and bridges"
    group: "native"
    output: "m1f/native/01_modules.txt"
    sources:
      - path: "src/native/"
      - path: "native-modules/"
      - path: "."
        includes: ["**/RN*.swift", "**/RN*.java", "**/RN*.kt"]

  # Quick reference
  app-quick-ref:
    description: "Key files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes:
          ["README.md", "package.json", "app.json", "src/App.js", "index.js"]
```

## Best Practices

When creating your `.m1f.config.yml`:

1. **Group Related Files**: Create focused bundles that group related
   functionality
2. **Use Meaningful Names**: Choose descriptive bundle names that indicate
   content
3. **Set Size Limits**: Keep bundles under 100KB for optimal AI performance
4. **Security First**: Always configure proper security checks for sensitive
   files
5. **Leverage Presets**: Use built-in presets for common project types
6. **Exclude Wisely**: Don't bundle generated files, dependencies, or build
   artifacts
7. **Document Purpose**: Add descriptions to help others understand each bundle
8. **Test Configuration**: Run `m1f-update` and check bundle sizes with
   `m1f-token-counter`

## Common Patterns

### Pattern 1: Separate by Layer

```yaml
bundles:
  frontend: # UI components
  backend: # Server logic
  database: # Models and migrations
  api: # API endpoints
  tests: # Test suites
```

### Pattern 2: Separate by Feature

```yaml
bundles:
  feature-auth: # Authentication
  feature-payment: # Payment processing
  feature-search: # Search functionality
  feature-admin: # Admin panel
```

### Pattern 3: Separate by Purpose

```yaml
bundles:
  quick-reference: # Essential files for context
  documentation: # All docs
  source-code: # Implementation
  configuration: # Config files
  deployment: # Deploy scripts
```

### Pattern 4: Progressive Detail

```yaml
bundles:
  overview: # High-level summary (10KB)
  core-logic: # Main functionality (50KB)
  full-source: # Complete code (100KB)
  everything: # All files (500KB)
```

Remember: The best configuration depends on your specific project needs and how
you plan to use the bundles with AI assistants.

======= docs/01_m1f/26_default_excludes_guide.md ======
# m1f Default Excludes Guide

This guide explains the files and directories that m1f excludes by default,
helping you write minimal and efficient `.m1f.config.yml` configurations.

## 🚨 CRITICAL: Correct Bundle Format

**ALWAYS use the `sources:` array format, NOT `source_directory:`!**

```yaml
# ✅ CORRECT FORMAT:
bundles:
  - name: my-bundle
    sources:
      - "./src"
    output_file: "m1f/my-bundle.txt"
    separator_style: Standard  # Or omit - Standard is default

# ❌ WRONG FORMAT (will cause errors):
bundles:
  my-bundle:
    source_directory: "./src"  # This format causes "ERROR: At least one of -s/--source-directory..."
    output_file: "m1f/my-bundle.txt"
    separator_style: Detailed  # Don't use for AI bundles!
```

**ALWAYS test with `m1f-update` immediately after creating/editing
.m1f.config.yml!**

## Understanding Default Excludes

**IMPORTANT**: m1f automatically excludes many common directories and files. You
DON'T need to repeat these in your configuration - only add project-specific
exclusions!

## Default Excluded Directories

The following directories are ALWAYS excluded unless you explicitly use
`--no-default-excludes`:

```yaml
# These are excluded automatically - no need to add them to your config!
- vendor/ # Composer dependencies (PHP)
- node_modules/ # NPM dependencies (JavaScript)
- build/ # Common build output directory
- dist/ # Distribution/compiled files
- cache/ # Cache directories
- .git/ # Git repository data
- .svn/ # Subversion data
- .hg/ # Mercurial data
- __pycache__/ # Python bytecode cache
- .pytest_cache/ # Pytest cache
- .mypy_cache/ # MyPy type checker cache
- .tox/ # Tox testing cache
- .coverage/ # Coverage.py data
- .eggs/ # Python eggs
- htmlcov/ # HTML coverage reports
- .idea/ # IntelliJ IDEA settings
- .vscode/ # Visual Studio Code settings
```

## Default Excluded Files

These specific files are also excluded automatically:

```yaml
# These files are excluded by default:
- LICENSE # License files (usually not needed in bundles)
- package-lock.json # NPM lock file
- composer.lock # Composer lock file
- poetry.lock # Poetry lock file
- Pipfile.lock # Pipenv lock file
- yarn.lock # Yarn lock file
```

## Writing Minimal Configurations

### ❌ BAD - Overly Verbose Configuration

```yaml
# DON'T DO THIS - repeating default excludes unnecessarily!
global:
  global_excludes:
    - "**/node_modules/**" # Already excluded by default!
    - "**/vendor/**" # Already excluded by default!
    - "**/__pycache__/**" # Already excluded by default!
    - "**/build/**" # Already excluded by default!
    - "**/dist/**" # Already excluded by default!
    - "**/.git/**" # Already excluded by default!
    - "**/cache/**" # Already excluded by default!
    - "**/.vscode/**" # Already excluded by default!
    - "**/*.pyc" # Project-specific - OK
    - "**/logs/**" # Project-specific - OK
```

### ✅ GOOD - Minimal Configuration

```yaml
# Only add project-specific exclusions!
global:
  global_excludes:
    - "**/*.pyc" # Python bytecode
    - "**/logs/**" # Your project's log files
    - "**/tmp/**" # Your temporary directories
    - "/m1f/**" # Output directory
    - "**/secrets/**" # Sensitive data
```

## Common Patterns by Project Type

### Python Projects

```yaml
# Only add what's NOT in default excludes
global:
  global_excludes:
    - "**/*.pyc" # Bytecode files
    - "**/*.pyo" # Optimized bytecode
    - "**/*.pyd" # Python DLL files
    - "**/venv/**" # Virtual environments
    - "**/.venv/**" # Alternative venv naming
    - "**/env/**" # Another venv naming
```

### Node.js Projects

```yaml
# node_modules is already excluded!
global:
  global_excludes:
    - "**/.next/**" # Next.js build cache
    - "**/.nuxt/**" # Nuxt.js build cache
    - "**/coverage/**" # Test coverage reports
    - "**/*.log" # Log files
```

### WordPress Projects

```yaml
# Only WordPress-specific excludes needed
global:
  global_excludes:
    - "**/wp-content/uploads/**" # User uploads
    - "**/wp-content/cache/**" # Cache plugins
    - "**/wp-content/backup/**" # Backup files
    - "wp-admin/**" # Core files
    - "wp-includes/**" # Core files
```

## Using .gitignore as Exclude File

Instead of manually listing excludes, use your existing .gitignore:

```yaml
global:
  global_settings:
    # This automatically uses your .gitignore patterns!
    exclude_paths_file: ".gitignore"
```

Or use multiple exclude files:

```yaml
global:
  global_settings:
    exclude_paths_file:
      - ".gitignore" # Version control ignores
      - ".m1fignore" # m1f-specific ignores
```

## Checking What's Excluded

To see all excluded paths (including defaults), use verbose mode:

```bash
m1f -s . -o test.txt --verbose
```

This will show:

- Default excluded directories
- Patterns from your config
- Files matched by your exclude patterns

## Disabling Default Excludes

If you need to include normally excluded directories:

```bash
# Include everything, even node_modules, .git, etc.
m1f -s . -o complete.txt --no-default-excludes
```

⚠️ **WARNING**: This can create HUGE bundles and include sensitive data!

## Best Practices

1. **Start Simple**: Begin with no excludes and add only as needed
2. **Use .gitignore**: Leverage existing ignore patterns
3. **Test First**: Run with `--verbose` to see what's excluded
4. **Document Why**: Add comments explaining non-obvious excludes

```yaml
global:
  global_excludes:
    # Project-specific build artifacts
    - "**/generated/**" # Auto-generated code
    - "**/reports/**" # Test/coverage reports

    # Large data files
    - "**/*.sqlite" # Database files
    - "**/*.csv" # Data exports

    # Sensitive information
    - "**/.env*" # Environment files
    - "**/secrets/**" # API keys, certs
```

## Quick Reference

### Already Excluded (Don't Repeat)

- `node_modules/`, `vendor/`, `build/`, `dist/`
- `.git/`, `.svn/`, `.hg/`
- `__pycache__/`, `.pytest_cache/`, `.mypy_cache/`
- `.idea/`, `.vscode/`
- Lock files: `*.lock`, `package-lock.json`

### Commonly Added (Project-Specific)

- Virtual envs: `venv/`, `.venv/`, `env/`
- Logs: `*.log`, `logs/`
- Temp files: `tmp/`, `temp/`, `*.tmp`
- Database: `*.sqlite`, `*.db`
- Environment: `.env`, `.env.*`
- Output: `/m1f/` (your bundle directory)

## Summary

Keep your `.m1f.config.yml` files clean and minimal by:

1. NOT repeating default excludes
2. Only adding project-specific patterns
3. Using `.gitignore` when possible
4. Documenting non-obvious exclusions

This makes your configurations easier to read, maintain, and share with others!

======= docs/01_m1f/30_claude_workflows.md ======
# Claude + m1f: Your AI-Powered Project Assistant 🤖

Ever wished you had an AI buddy who actually understands your project structure?
That's what happens when you combine Claude with m1f. This guide shows you how
to turn Claude into your personal project assistant who knows exactly how to
bundle, organize, and process your code.

## The Power of m1f v3.2 + Claude ✨

With m1f v3.2's enhanced features, Claude can help you:

- Configure comprehensive security scanning
- Set up parallel processing for faster bundling
- Create sophisticated preset configurations
- Manage content deduplication strategies
- Handle complex encoding scenarios

## Getting Started with Claude

### Step 1: Give Claude the Power

First, let's get Claude up to speed on what m1f can do:

```bash
cd /your/awesome/project
m1f-init  # Quick setup: links docs, analyzes project, creates bundles
```

Boom! 💥 This command:

- Creates m1f/m1f.txt symlink to the complete documentation
- Analyzes your project structure
- Generates initial bundles (complete and docs)
- Creates a basic .m1f.config.yml

For advanced setup with topic-specific bundles (Linux/macOS only):

```bash
# Interactive mode - will prompt for project description and priorities
m1f-claude --setup

# Or provide project info via command line
m1f-claude --setup \
  --project-description "E-commerce platform with React frontend and Django backend" \
  --project-priorities "performance, security, maintainability"
```

### Step 2: Start the Conversation

Here's where it gets fun. Just tell Claude what you need:

```
Hey Claude, I need help setting up m1f for my project.
Check out @m1f/m1f.txt to see what m1f can do.

My project is a Python web app with:
- Backend API in /api
- Frontend React code in /frontend
- Tests scattered around
- Some docs in /docs

Can you create a .m1f.config.yml that bundles these intelligently?
```

Claude will read the docs and create a perfect config for your project
structure. No more guessing at parameters!

## Real-World Workflows That Actually Work 🚀

### The "Security-First Bundle" Workflow

```
Claude, I need to create bundles for external review.
Using m1f v3.2's security features:

1. Create a config that scans for secrets (security_check: error)
2. Exclude any files with sensitive data
3. Set up proper path validation
4. Ensure no internal IPs or credentials leak through

Focus on making it safe to share with contractors.
```

### The "Performance Optimization" Workflow

```
Claude, my project has 5000+ files and bundling is slow.
Help me optimize using m1f v3.2's features:

1. Leverage parallel processing (enabled by default)
2. Set up smart file size limits
3. Use content deduplication to reduce bundle size
4. Create targeted bundles instead of one massive file

The goal is sub-10 second bundle generation.
```

### The "Multi-Environment Setup" Workflow

```
Claude, I need different bundles for dev/staging/prod.
Using m1f v3.2's preset system:

1. Create environment-specific presets
2. Use enabled flag for environment control
3. Set different security levels per environment
4. Configure appropriate output formats

Make it so I can just run: m1f --preset env.yml --preset-group production
```

## Using m1f-claude: Advanced Project Setup 🧠

For advanced project-specific configuration, use m1f-claude (Linux/macOS only):

```bash
# First, run the quick setup
m1f-init

# Then for advanced configuration with Claude's help
m1f-claude --setup
```

### What Makes m1f-claude Special?

When you use `m1f-claude --setup`, it:

- Analyzes your project in detail with Claude's assistance
- Creates topic-specific bundles (components, API, tests, etc.)
- Optimizes configuration for your specific project type
- Provides intelligent suggestions based on your codebase

**Note**: m1f-claude requires Claude Code SDK and is not available on Windows.
Windows users can manually customize their .m1f.config.yml after running
m1f-init.

### 💡 Important: Claude Code Subscription Recommended

**We strongly recommend using Claude Code with a subscription plan** when using
m1f-claude for project setup. Setting up m1f with Claude's assistance can
involve:

- Multiple file reads to analyze your project structure
- Creating and editing configuration files
- Running various commands to test configurations
- Iterative refinement of bundles

Since we don't know exactly how many tokens this process will consume, a
subscription ensures you won't run into usage limits during critical setup
phases. The investment pays off quickly through the time saved in properly
configuring your project.

## Working with Claude Code

If you're using Claude Code (claude.ai/code), you can leverage its file reading
capabilities:

```
# In Claude Code, you can directly reference files
Claude, please read my current .m1f.config.yml and suggest improvements
based on m1f v3.2 features like:
- Better security scanning
- Optimized performance settings
- Advanced preset configurations
```

## Advanced v3.2 Patterns 🎯

### The "Complete Configuration via Presets"

With v3.2, you can control everything through presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production-ready bundles with full security"

  global_settings:
    # Input/Output
    source_directory: "./src"
    output_file: "dist/prod-bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Security (v3.2)
    security_check: "error" # Stop on any secrets

    # Performance (v3.2)
    enable_content_deduplication: true
    prefer_utf8_for_text_files: true

    # Output control
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true
    minimal_output: true
    quiet: true

    # Processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    max_file_size: "1MB"

    # Exclusions
    exclude_patterns:
      - "**/*.test.js"
      - "**/*.spec.ts"
      - "**/node_modules/**"
      - "**/.env*"

  presets:
    minify_production:
      patterns: ["dist/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]
```

### The "AI Context Optimization" Pattern

```yaml
bundles:
  ai-context:
    description: "Optimized for Claude and other LLMs"
    output: "m1f/ai-context.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts", ".jsx", ".tsx"]
        exclude_patterns:
          - "**/*.test.*"
          - "**/*.spec.*"
          - "**/test/**"

    # v3.2 optimizations
    global_settings:
      # Security first
      security_check: "warn"

      # Performance
      enable_content_deduplication: true # Reduce token usage

      # AI-friendly format
      separator_style: "Markdown"
      max_file_size: "100KB" # Keep context focused

      # Clean output
      remove_scraped_metadata: true
      allow_duplicate_files: false
```

### The "Encoding-Aware Bundle" Pattern

```yaml
bundles:
  legacy-code:
    description: "Handle mixed encoding legacy code"
    output: "m1f/legacy-bundle.txt"

    global_settings:
      # v3.2 encoding features
      prefer_utf8_for_text_files: false # Respect original encoding
      convert_to_charset: "utf-8" # But convert output
      abort_on_encoding_error: false # Continue on errors

      # Include everything
      include_binary_files: false
      include_dot_paths: true
```

## Pro Tips for Claude Interactions 💪

### 1. Let Claude Learn Your Project

First time? Let Claude explore:

```
Claude, analyze my project structure and suggest
how to organize it with m1f bundles. Consider:
- What files change together
- Logical groupings for different use cases
- Size limits for AI context windows

Use @m1f/m1f.txt to understand all available options.
```

### 2. Provide Clear Context

```
Claude, here's my project structure from m1f:
- Total files: 500
- Main languages: Python (60%), JavaScript (30%), Docs (10%)
- Special requirements: HIPAA compliance, no credential exposure
- Target use: Sharing with external auditors

Create a secure bundling strategy using m1f v3.2's security features.
Check @m1f/m1f.txt for security parameters.
```

### 3. Iterative Refinement

```
Claude, the bundle is too large (50MB). Help me:
1. Use content deduplication more aggressively
2. Set up file size limits
3. Create multiple smaller bundles by component
4. Exclude generated files and build artifacts
```

### 4. Preset Composition

```
Claude, I want layered presets:
1. base.yml - Company-wide standards
2. project.yml - Project-specific rules
3. personal.yml - My personal preferences

Show me how to use them together with proper override behavior.
```

## Security-First Workflows 🔒

### Preparing Code for Review

```
Claude, I need to share code with a contractor. Create a config that:
1. Runs strict security scanning (security_check: error)
2. Validates all file paths
3. Excludes .env files and secrets
4. Redacts any hardcoded credentials
5. Creates an audit trail

Use m1f v3.2's security features to make this bulletproof.
```

### Automated Security Checks

```
Claude, write a Git pre-commit hook that:
1. Runs m1f with security scanning
2. Blocks commits if secrets are found
3. Auto-generates safe bundles
4. Updates the m1f/ directory

Make it work with m1f v3.2's git hooks setup.
```

## Performance Optimization Strategies 🚀

### Large Codebase Handling

```
Claude, optimize m1f for our monorepo (10K+ files):

1. Set up smart exclusion patterns
2. Use size-based filtering
3. Create focused bundles per team
4. Leverage parallel processing
5. Implement caching strategies

Goal: Bundle generation under 30 seconds.
```

### Memory-Efficient Processing

```yaml
# Claude might suggest this for large files
large_files:
  description: "Handle massive log files"

  global_settings:
    max_file_size: "10MB" # Skip huge files
    enable_content_deduplication: true

  presets:
    truncate_logs:
      extensions: [".log", ".txt"]
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000
        add_marker: true
```

## Troubleshooting with Claude 🔧

### Common Issues and Solutions

```
Claude, m1f is flagging false positives for secrets. Help me:
1. Configure security_check levels appropriately
2. Create patterns to exclude test fixtures
3. Set up per-file security overrides
4. Document why certain warnings are acceptable
```

### Performance Debugging

```
Claude, bundling takes 5 minutes. Analyze this verbose output
and suggest optimizations:
[paste m1f --verbose output]

Consider:
- File count and sizes
- Duplicate detection overhead
- Encoding detection delays
- Security scanning bottlenecks
```

## Integration Patterns 🔌

### CI/CD Integration

```
Claude, create a GitHub Action that:
1. Triggers on PR creation
2. Generates comparison bundles (before/after)
3. Posts bundle statistics as PR comment
4. Fails if bundle size increases >10%
5. Runs security scanning on changed files

Use m1f v3.2's features for efficiency.
```

### Documentation Automation

```
Claude, automate our documentation workflow:
1. Scrape our docs site weekly
2. Convert HTML to Markdown
3. Bundle by section with m1f
4. Remove outdated metadata
5. Create versioned archives

Leverage m1f's web scraping and processing features.
```

## Quick Reference Commands 🎪

Some powerful one-liners for common tasks:

```bash
# Give Claude m1f superpowers
m1f-link

# Quick m1f setup for your project
m1f-claude "Setup m1f for a typical Python project with tests and docs"

# Interactive Claude session
m1f-claude -i

# Security audit bundle
m1f -s . -o audit.txt --security-check error --minimal-output

# Fast development bundle (no security checks)
m1f -s ./src -o dev.txt --security-check skip

# Documentation bundle with metadata
m1f -s ./docs -o docs.txt --separator-style Detailed

# Clean bundle for AI consumption
m1f -s . -o ai-context.txt --allow-duplicate-files false

# Help me understand this codebase
m1f-claude "Create bundles to help a new developer understand this project"

# Prep for the AI apocalypse
m1f-claude "Optimize my project for AI assistants with proper context windows"
```

## Your Turn! 🎮

Now you're ready to turn Claude into your personal m1f expert. Remember:

1. Always start with `m1f-link` to give Claude the docs
2. Be specific about what you want to achieve
3. Let Claude suggest optimal configurations based on the documentation
4. Iterate and refine based on results
5. Test security settings thoroughly before sharing

The best part? Claude remembers your conversations, so it gets better at
understanding your project over time.

Happy bundling! 🚀

---

_P.S. - If Claude suggests something that seems off, just ask "Are you sure
about that? Check @m1f/m1f.txt again." Works every time! 😉_

======= docs/01_m1f/31_claude_code_integration.md ======
# Claude Code Integration Guide

This guide explains how to integrate Claude Code as an optional AI assistant for
the m1f tools project.

## Overview

Claude Code can help automate complex workflows by understanding natural
language prompts and executing the appropriate tools with correct parameters.

## Installation

### Prerequisites

- Node.js installed on your system
- An Anthropic API key (get one at https://console.anthropic.com)

### Install Claude Code

```bash
npm install -g @anthropic-ai/claude-code
```

### Initial Setup

1. Start Claude Code:

   ```bash
   claude
   ```

2. Login with your API key:

   ```
   /login
   ```

3. Configure Claude Code for this project:
   ```bash
   cd /path/to/m1f
   claude config
   ```

## Project Configuration

Create `.claude/settings.json` in the project root:

```json
{
  "model": "claude-opus-4",
  "customInstructions": "You are helping with the m1f tools project. Key tools available: m1f.py (file bundler), s1f.py (file splitter), mf1-html2md (HTML to Markdown converter), wp_export_md.py (WordPress exporter).",
  "permissions": {
    "write": true,
    "execute": true
  }
}
```

## m1f Project Setup

### Quick Setup with m1f-init

The `m1f-init` command provides cross-platform project initialization:

```bash
# Run in your project directory
m1f-init

# With verbose output
m1f-init --verbose
```

#### What m1f-init Does:

1. **Links m1f Documentation**
   - Creates m1f/m1f.txt symlink (or copies on Windows)
   - Makes documentation accessible to AI tools

2. **Project Analysis**
   - Detects git repository boundaries
   - Analyzes project structure and languages
   - Creates file and directory lists in `m1f/` directory

3. **Creates Initial Bundles with Auxiliary Files**
   - `<project>_complete.txt` - Full project bundle
   - `<project>_complete_filelist.txt` - List of all included files
   - `<project>_complete_dirlist.txt` - List of all directories
   - `<project>_docs.txt` - Documentation only bundle
   - `<project>_docs_filelist.txt` - List of documentation files
   - `<project>_docs_dirlist.txt` - Documentation directories

4. **Generates Configuration**
   - Creates basic .m1f.config.yml if not present
   - Respects .gitignore patterns
   - Excludes m1f/ directory automatically

### Advanced Setup with m1f-claude (Linux/macOS only)

The `m1f-claude` tool enhances project setup by creating topic-specific bundles
based on your project's needs:

```bash
# Interactive mode - prompts for project details
m1f-claude --setup

# With project information provided
m1f-claude --setup \
  --project-description "SaaS dashboard with React frontend and Express API" \
  --project-priorities "code modularity, API documentation, test coverage"
```

#### Project Information Options:

- **--project-description**: Brief description of what your project does and its
  main technologies
- **--project-priorities**: What's important for this project (e.g.,
  performance, security, documentation, maintainability)

This information helps Claude create better-targeted bundles. For example:

- If "security" is a priority, it will create dedicated auth/security bundles
- If "documentation" is important, it will create more granular doc bundles
- If "performance" matters, it will separate performance-critical code

For topic-specific bundles and advanced configuration:

```bash
# First run m1f-init
m1f-init

# Then run advanced setup
m1f-claude --setup
```

#### What --setup Does:

- Claude analyzes your project structure in detail
- Creates topic-specific bundles (models, views, tests, etc.)
- Customizes configuration for your project type
- Optimizes bundle organization for AI consumption
- Requires Claude Code SDK installation

**Note**: Windows users can achieve similar results by manually editing
.m1f.config.yml after running m1f-init.

### Working with Generated File Lists

The file lists generated by m1f-init are powerful tools for customization:

```bash
# View statistics
wc -l m1f/*_filelist.txt  # Count files in each bundle

# Create a custom bundle by editing file lists
cp m1f/myproject_complete_filelist.txt m1f/api_only_filelist.txt
vi m1f/api_only_filelist.txt  # Keep only API-related files
m1f -i m1f/api_only_filelist.txt -o m1f/api_bundle.txt

# Combine multiple lists
cat m1f/*_docs_filelist.txt m1f/tests_filelist.txt | sort -u > m1f/docs_and_tests.txt
m1f -i m1f/docs_and_tests.txt -o m1f/combined.txt

# Use directory lists to focus on specific areas
grep "src/components" m1f/myproject_complete_dirlist.txt
m1f -s src/components -o m1f/components_only.txt
```

3. **Configuration File**
   - Creates `.m1f.config.yml` with complete and docs bundles
   - Uses `docs_only: true` for documentation bundle
   - No global file size limits
   - Proper meta file exclusions (LICENSE*, CLAUDE.md, *.lock)

4. **Advanced Segmentation (Optional)**
   - If Claude Code is installed and advanced mode selected
   - Analyzes project structure for components, API, styles, etc.
   - Adds topic-specific bundles to existing configuration
   - Uses `--allowedTools Read,Write,Edit,MultiEdit` for file operations

#### Example Output:

```
🚀 Initializing m1f for your project...
==================================================
✅ Git repository detected: /home/user/my-project
✅ m1f documentation already available
⚠️  No m1f configuration found - will help you create one
✅ Claude Code is available

📊 Project Analysis
==============================
Analyzing project structure with m1f...
📄 Created file list: project_analysis_filelist.txt
📁 Created directory list: project_analysis_dirlist.txt
✅ Found 127 files in 59 directories
📁 Project Type: Next.js Application
💻 Languages: JavaScript (37 files), TypeScript (30 files)
📂 Code Dirs: src/app, src/components, src/lib

📦 Creating Initial Bundles
==============================
Creating complete project bundle...
✅ Created: m1f/complete.txt
Creating documentation bundle...
✅ Created: m1f/docs.txt

📝 Creating .m1f.config.yml with basic bundles...
✅ Configuration created with complete and docs bundles

🤖 Claude Code for Advanced Segmentation
──────────────────────────────────────────────────
Basic bundles created! Now Claude can help you create topic-specific bundles.

[Claude analyzes and adds topic-specific bundles]

✅ Advanced segmentation complete!
📝 Claude has analyzed your project and added topic-specific bundles.

🚀 Next steps:
• Your basic bundles are ready in m1f/
  - complete.txt: Full project bundle
  - docs.txt: All documentation files
• Run 'm1f-update' to regenerate bundles after config changes
• Use Claude to create topic-specific bundles as needed
```

#### Troubleshooting:

- **Use --verbose** to see the full prompt and command parameters
- **Check file permissions** if config isn't being modified
- **Ensure Claude Code is installed**:
  `npm install -g @anthropic-ai/claude-code`
- **Analysis files are kept** in m1f/ directory for reference

## Using Claude Code with m1f Tools

### Basic Commands

1. **Bundle files into m1f**:

   ```bash
   claude -p "Bundle all Python files in the tools directory into a single m1f file"
   ```

2. **Convert HTML to Markdown**:

   ```bash
   claude -p "Convert all HTML files in ~/docs to Markdown with preprocessing"
   ```

3. **Analyze and preprocess HTML**:
   ```bash
   claude -p "Analyze the HTML files in the docs folder and create a preprocessing config"
   ```

### Advanced Workflows

1. **Complete documentation conversion workflow**:

   ```bash
   claude -p "I have scraped HTML documentation in ~/docs/html. Please:
   1. Analyze a few sample files to understand the structure
   2. Create a preprocessing configuration
   3. Convert all HTML to Markdown
   4. Create thematic m1f bundles (concepts, reference, installation, etc.)"
   ```

2. **Export WordPress site**:
   ```bash
   claude -p "Export my WordPress site at example.com to Markdown, organizing by categories"
   ```

## Programmatic Usage

### Using Claude Code in Scripts

```python
#!/usr/bin/env python3
import subprocess
import json

def claude_command(prompt):
    """Execute a Claude Code command and return the result."""
    result = subprocess.run(
        ['claude', '-p', prompt, '--output-format', 'json'],
        capture_output=True,
        text=True
    )
    return json.loads(result.stdout)

# Example: Get optimal m1f parameters
response = claude_command(
    "What are the optimal m1f parameters for bundling a Python project with tests?"
)
print(response)
```

### Integration with m1f Tools

Create `tools/claude_orchestrator.py`:

```python
#!/usr/bin/env python3
"""Orchestrate m1f tools using Claude Code."""

import subprocess
import json
from pathlib import Path

class ClaudeOrchestrator:
    def __init__(self):
        self.tools = {
            'm1f': 'tools/m1f.py',
            's1f': 'tools/s1f.py',
            'mf1-html2md': 'tools/mf1-html2md',
            'wp_export': 'tools/wp_export_md.py'
        }

    def analyze_request(self, user_prompt):
        """Use Claude to analyze user request and determine actions."""
        analysis_prompt = f"""
        Analyze this request and return a JSON with:
        1. tool: which tool to use ({', '.join(self.tools.keys())})
        2. parameters: dict of parameters for the tool
        3. steps: list of steps to execute

        Request: {user_prompt}
        """

        result = subprocess.run(
            ['claude', '-p', analysis_prompt, '--output-format', 'json'],
            capture_output=True,
            text=True
        )
        return json.loads(result.stdout)

    def execute_workflow(self, user_prompt):
        """Execute a complete workflow based on user prompt."""
        plan = self.analyze_request(user_prompt)

        for step in plan['steps']:
            print(f"Executing: {step['description']}")
            # Execute the actual command
            subprocess.run(step['command'], shell=True)
```

## Best Practices

1. **Create project-specific instructions** in `.claude/settings.json`
2. **Use Claude for complex workflows** that require multiple steps
3. **Leverage Claude's understanding** of file patterns and project structure
4. **Combine with shell pipes** for powerful automation

## Example Workflows

### 1. Documentation Processing Pipeline

```bash
# Complete pipeline with Claude
claude -p "Process the scraped documentation in ~/scraped-docs:
1. Analyze HTML structure
2. Create preprocessing config
3. Convert to Markdown preserving structure
4. Create m1f bundles by topic
5. Generate a summary report"
```

### 2. Project Analysis

```bash
# Analyze project for bundling
claude -p "Analyze this Python project and suggest:
1. Which files should be bundled together
2. Optimal m1f parameters
3. Any files that should be excluded"
```

### 3. Automated Testing

```bash
# Run tests and fix issues
claude -p "Run the test suite, identify any failures, and fix them"
```

## Environment Variables

Set these in your shell profile for persistent configuration:

```bash
export ANTHROPIC_MODEL="claude-sonnet-4-20250514"
export CLAUDE_CODE_PROJECT_ROOT="/path/to/m1f"
```

## Troubleshooting

1. **Permission errors**: Ensure Claude Code has write permissions in settings
2. **Model selection**: Use Claude Opus 4 for the most complex analysis, Claude
   Sonnet 4 for balanced performance
3. **Rate limits**: Be mindful of API usage limits

## Security Considerations

1. **Never commit API keys** to version control
2. **Use `.claude/settings.local.json`** for personal settings
3. **Review Claude's actions** before executing in production

## Further Resources

- [Claude Code Documentation](https://docs.anthropic.com/en/docs/claude-code)
- [m1f Tools Documentation](00_m1f.md)
- [html2md Documentation](../03_html2md/30_html2md.md)

======= docs/01_m1f/40_security_best_practices.md ======
# Security Best Practices Guide for m1f Toolkit

## Overview

This guide documents security best practices and protective measures implemented
in the m1f toolkit v3.2. Following these practices ensures safe operation and
prevents common security vulnerabilities.

## Path Validation and Traversal Protection

### Why It Matters

Path traversal attacks can allow malicious actors to access files outside
intended directories, potentially exposing sensitive system files or overwriting
critical data.

### Best Practices

1. **Always validate resolved paths**:

   ```python
   # Good practice - validate after resolving
   from tools.m1f.utils import validate_safe_path

   target_path = Path(user_input).resolve()
   validate_safe_path(target_path, base_path)
   ```

2. **Use the provided validation utilities**:
   - `validate_safe_path()` in `tools/m1f/utils.py` ensures paths stay within
     allowed boundaries
   - All user-provided paths should be validated before use

3. **Symlink safety**:
   - Symlinks are resolved and validated to prevent escaping directories
   - Target of symlinks must be within the allowed base path

### Common Pitfalls to Avoid

- Never use user input directly in file paths without validation
- Don't trust relative paths without resolving and validating them
- Always validate paths from configuration files and presets

## Web Scraping Security

### SSRF (Server-Side Request Forgery) Protection

The toolkit blocks access to:

- Private IP ranges (10.x.x.x, 172.16.x.x, 192.168.x.x)
- Localhost and loopback addresses (127.0.0.1, ::1)
- Link-local addresses (169.254.x.x)
- Cloud metadata endpoints (169.254.169.254)

### SSL/TLS Validation

1. **Default behavior**: SSL certificates are validated by default
2. **Disabling validation** (use with caution):

   ```bash
   # Only for trusted internal sites or testing
   m1f-scrape --ignore-https-errors https://internal-site.com
   ```

   ⚠️ **Warning**: Disabling SSL validation exposes you to man-in-the-middle
   attacks. Only use for trusted internal resources.

### robots.txt Compliance

All scrapers automatically respect robots.txt files:

- Automatically fetched and parsed for each domain
- Scraping is blocked for disallowed paths
- User-agent specific rules are respected
- This is always enabled - no configuration option to disable

### JavaScript Execution Safety

When using Playwright with custom scripts:

- Scripts are validated for dangerous patterns
- Avoid executing untrusted JavaScript code
- Use built-in actions instead of custom scripts when possible

## Command Injection Prevention

### Safe Command Execution

The toolkit uses proper escaping for all system commands:

```python
# Good - using shlex.quote()
import shlex
command = f"httrack {shlex.quote(url)} -O {shlex.quote(output_dir)}"

# Bad - direct string interpolation
command = f"httrack {url} -O {output_dir}"  # DON'T DO THIS
```

## Preset System Security

### File Size Limits

- Preset files are limited to 10MB to prevent memory exhaustion
- Large preset files are rejected with an error

### Path Validation in Presets

- All paths in preset files are validated
- Paths cannot escape the project directory
- Absolute paths outside the project are blocked

### Custom Processor Validation

- Processor names must be alphanumeric with underscores only
- Special characters that could enable code injection are blocked

## Secure Temporary File Handling

The toolkit uses Python's `tempfile` module for all temporary files:

- Temporary directories are created with restricted permissions
- All temporary files are cleaned up after use
- No sensitive data is left in temporary locations

## Security Scanning for Sensitive Data

### Built-in Secret Detection

m1f includes automatic scanning for:

- API keys and tokens
- Passwords and credentials
- Private keys
- High-entropy strings that might be secrets

### Security Check Modes

1. **Error mode** (default): Stops processing if secrets are found

   ```bash
   m1f -s ./src -o output.txt --security-check error
   ```

2. **Warn mode**: Logs warnings but continues processing

   ```bash
   m1f -s ./src -o output.txt --security-check warn
   ```

3. **Skip mode**: Disables security scanning (not recommended)
   ```bash
   m1f -s ./src -o output.txt --security-check skip
   ```

### Handling False Positives

If legitimate content is flagged as sensitive:

1. Review the warnings carefully
2. Use `--security-check warn` if you're certain the content is safe
3. Consider refactoring code to avoid patterns that trigger detection

## Input Validation Best Practices

### File Type Validation

- Use include/exclude patterns to limit processed file types
- Be explicit about allowed file extensions
- Validate file contents match expected formats

### Size and Resource Limits

- Set appropriate limits for file sizes
- Use `--max-file-size` to prevent processing huge files
- Monitor memory usage for large file sets

### Encoding Safety

- The toolkit automatically detects file encodings
- UTF-8 is preferred for text files by default
- Binary files are handled safely without interpretation

## Deployment Security Recommendations

### Environment Configuration

1. Run with minimal required permissions
2. Use dedicated service accounts when possible
3. Avoid running as root/administrator

### Network Security

1. Use HTTPS for all web scraping when possible
2. Configure firewall rules to limit outbound connections
3. Monitor for unusual network activity

### Logging and Monitoring

1. Enable verbose logging for security-sensitive operations
2. Review logs regularly for suspicious patterns
3. Set up alerts for security check failures

## Reporting Security Issues

If you discover a security vulnerability in m1f:

1. Do NOT open a public issue
2. Email security details to the maintainers
3. Include steps to reproduce the issue
4. Allow time for a fix before public disclosure

## Security Checklist for Users

Before running m1f in production:

- [ ] Validate all input paths and patterns
- [ ] Review security check mode settings
- [ ] Enable SSL validation for web scraping
- [ ] Set appropriate file size limits
- [ ] Use minimal required permissions
- [ ] Review preset files for suspicious content
- [ ] Test security scanning on sample data
- [ ] Configure proper logging and monitoring
- [ ] Keep the toolkit updated to the latest version

## Updates and Security Patches

Stay informed about security updates:

- Check the CHANGELOG for security-related fixes
- Update to new versions promptly
- Review breaking changes that might affect security

Remember: Security is a shared responsibility. While m1f implements many
protective measures, proper configuration and usage are essential for
maintaining a secure environment.

======= docs/01_m1f/41_version_3_2_features.md ======
# m1f v3.2 Feature Documentation

## Overview

Version 3.2 of the m1f toolkit introduces significant security enhancements,
performance improvements, and new configuration options. This document provides
a comprehensive overview of all v3.2 features and changes.

## Major Security Enhancements

### 1. Path Traversal Protection

- **What's New**: Comprehensive validation of all file paths to prevent
  directory traversal attacks
- **Impact**: Prevents malicious actors from accessing files outside intended
  directories
- **Implementation**:
  - New `validate_safe_path()` utility function
  - Applied to all user inputs, preset paths, and configuration files
  - Symlink targets are now validated

### 2. SSRF Protection in Web Scrapers

- **What's New**: Blocks access to private IP ranges and cloud metadata
  endpoints
- **Protected Ranges**:
  - Private networks (10.x.x.x, 172.16.x.x, 192.168.x.x)
  - Localhost (127.0.0.1, ::1)
  - Link-local (169.254.x.x)
  - Cloud metadata (169.254.169.254)
- **Applies to**: All web scraping tools (BeautifulSoup, Playwright, Scrapy,
  Selectolax)

### 3. robots.txt Compliance

- **What's New**: All scrapers now automatically respect robots.txt files
- **Features**:
  - Automatic robots.txt fetching and parsing
  - Per-path access validation
  - User-agent specific rule support

### 4. SSL/TLS Certificate Validation

- **What's New**: SSL validation is now enabled by default
- **Configuration**:
  - New `--ignore-https-errors` flag for exceptions
  - Per-scraper SSL configuration
- **Security**: Prevents man-in-the-middle attacks

### 5. Command Injection Prevention

- **What's New**: Proper escaping of all shell commands
- **Implementation**: Uses `shlex.quote()` for all user inputs in commands
- **Affected Tools**: HTTrack scraper, git operations

### 6. JavaScript Execution Safety

- **What's New**: Validation of custom JavaScript in Playwright scraper
- **Features**:
  - Detects dangerous patterns (eval, Function constructor)
  - Warns about custom script execution
  - Encourages use of built-in actions

### 7. Custom Processor Validation

- **What's New**: Validates processor names to prevent injection attacks
- **Rules**: Only alphanumeric characters and underscores allowed
- **Impact**: Prevents code injection through preset files

## Performance Improvements

### 1. Parallel File Processing

- **Enabled by Default**: Parallel processing is now always active
- **Features**:
  - Concurrent file reading with automatic batch size optimization
  - Thread-safe checksum deduplication
  - Maintains deterministic file order in output
- **Performance**: Up to 3-5x faster for large file sets

### 2. Optimized Checksum Verification

- **What's Changed**: Stream-based file reading for checksums
- **Benefits**:
  - Reduced memory usage for large files
  - Prevents out-of-memory errors
  - 8KB chunk processing

### 3. Concurrent Write Limits in s1f

- **What's New**: Semaphore-based write limiting
- **Default**: 10 concurrent file operations
- **Benefits**: Prevents "too many open files" errors

### 4. Async I/O Improvements

- **Updates**:
  - Uses `aiofiles` for truly async file operations
  - Modern async patterns (asyncio.run())
  - Proper exception handling in async contexts

## Configuration Enhancements

### 1. Content Deduplication Control

- **New CLI Option**: `--allow-duplicate-files`
- **Preset Setting**: `enable_content_deduplication`
- **Default**: Deduplication enabled (False for allow-duplicate)
- **Use Case**: When you need to preserve duplicate content

### 2. UTF-8 Preference Control

- **New CLI Option**: `--no-prefer-utf8-for-text-files`
- **Preset Setting**: `prefer_utf8_for_text_files`
- **Default**: UTF-8 preferred (True)
- **Use Case**: Working with legacy encodings like windows-1252

### 3. Security Check Modes

- **Options**:
  - `error` (default): Stop on security issues
  - `warn`: Log warnings but continue
  - `skip`: Disable security scanning
- **CLI**: `--security-check {error|warn|skip}`
- **Preset**: `security_check` setting

### 4. File Size Limits

- **Preset Files**: Limited to 10MB
- **Benefits**: Prevents memory exhaustion attacks
- **Error Handling**: Clear error messages for oversized files

## Improved Patterns and Flexibility

### 1. Flexible Metadata Stripping

- **What's New**: More flexible regex for scraped content metadata
- **Supports**:
  - Various horizontal rule styles (`---`, `___`, `***`)
  - Different emphasis markers
  - Multiple formatting variations

### 2. Code Block Detection in s1f

- **What's New**: Ignores separators inside code blocks
- **Benefits**: Prevents false positive file detection
- **Applies to**: Markdown code blocks (```)

### 3. Timezone-Aware Timestamps

- **What's Changed**: All timestamps now use UTC
- **Implementation**: `datetime.now(timezone.utc)`
- **Benefits**: Consistent timestamps across timezones

## CLI Updates

### New Options Summary

```bash
# Performance
--allow-duplicate-files         # Disable content deduplication

# Encoding
--no-prefer-utf8-for-text-files # Disable UTF-8 preference

# Security
--security-check {error|warn|skip}  # Security scanning mode
--ignore-https-errors              # Disable SSL validation (scraping)

# Existing options work as before
--source-directory, -s          # Source directory
--output-file, -o              # Output file
--preset                       # Use preset configuration
```

## Breaking Changes

### 1. Standard Separator Format

- **Change**: File separators no longer include checksums
- **Before**: `=== path/to/file.txt === SHA256: abc123...`
- **After**: `=== path/to/file.txt ===`
- **Impact**: s1f can still read old format files

### 2. SSL Validation Default

- **Change**: SSL validation now enabled by default
- **Impact**: May break scraping of sites with invalid certificates
- **Migration**: Use `--ignore-https-errors` if needed

### 3. Security Scanning Default

- **Change**: Security scanning in error mode by default
- **Impact**: Processing stops on sensitive data detection
- **Migration**: Use `--security-check warn` for old behavior

## Preset System Enhancements

### New Preset Settings

```yaml
# Performance
enable_content_deduplication: false # Allow duplicate files

# Encoding
prefer_utf8_for_text_files: false # Disable UTF-8 preference

# Security
security_check: warn # Security check mode

# Per-file settings still work
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Test Suite Improvements

- Fixed test isolation issues
- Added proper async test support
- Improved test server connectivity handling
- Enhanced security test coverage

## Migration Guide

### From v3.1 to v3.2

1. **Review Security Settings**:
   - Default security scanning may flag legitimate content
   - Use `--security-check warn` during migration

2. **Check SSL Requirements**:
   - Sites with self-signed certificates need `--ignore-https-errors`
   - Review and update scraping scripts

3. **Update Separator Parsing**:
   - If you parse m1f output, update to handle new separator format
   - s1f handles both formats automatically

4. **Performance Tuning**:
   - Parallel processing is automatic - no configuration needed
   - Monitor memory usage with large file sets

## Examples

### Using New Features

```bash
# Security in warn mode (parallel processing is automatic)
m1f -s ./src -o bundle.txt --security-check warn

# Allow duplicates with custom encoding handling
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Secure web scraping (robots.txt compliance is automatic)
m1f-scrape https://example.com -o ./scraped

# Using new features in presets
m1f -s . -o bundle.txt --preset my-preset.yml
```

### Sample v3.2 Preset

```yaml
name: "Modern Web Project v3.2"
version: "3.2"

# Global settings with v3.2 features
settings:
  enable_content_deduplication: true
  prefer_utf8_for_text_files: true
  security_check: error

# File patterns remain the same
include_patterns:
  - "src/**/*.{js,ts,jsx,tsx}"
  - "**/*.md"

exclude_patterns:
  - "**/node_modules/**"
  - "**/.git/**"

# Per-file settings with processors
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Performance Benchmarks

Typical improvements with v3.2:

- **Parallel Processing**: 3-5x faster for 1000+ files
- **Memory Usage**: 50% reduction for large files
- **s1f Extraction**: 2x faster with concurrent writes
- **Checksum Calculation**: Constant memory usage regardless of file size

## Security Audit Results

v3.2 addresses all HIGH and MEDIUM priority security issues:

- ✅ Path traversal vulnerabilities fixed
- ✅ SSRF protection implemented
- ✅ Command injection prevented
- ✅ SSL validation enforced
- ✅ robots.txt compliance added
- ✅ JavaScript execution validated
- ✅ Race conditions eliminated

## Support and Resources

- [Security Best Practices Guide](./40_security_best_practices.md)
- [CLI Reference](./02_cli_reference.md)
- [Preset System Guide](./10_m1f_presets.md)
- [Troubleshooting Guide](./03_troubleshooting.md)

For questions or issues, please refer to the project repository.

======= docs/02_s1f/20_s1f.md ======
# s1f (Split One File)

A modern file extraction tool with async I/O that reconstructs original files
from combined archives with full metadata preservation.

## Overview

The s1f tool (v2.0.0) is the counterpart to m1f, designed to extract and
reconstruct original files from a combined file. Built with Python 3.10+ and
modern async architecture, it ensures reliable extraction with checksum
verification and proper encoding handling.

## Key Features

- **Async I/O**: High-performance concurrent file writing
- **Smart Parser Framework**: Automatic format detection with dedicated parsers
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Clean modular design with dependency injection
- **Checksum Verification**: SHA256 integrity checking with line ending
  normalization
- **Encoding Support**: Intelligent encoding detection and conversion
- **Error Recovery**: Graceful fallbacks and detailed error reporting
- **Progress Tracking**: Real-time extraction statistics

## Quick Start

```bash
# Basic extraction (positional arguments - recommended)
m1f-s1f ./combined.txt ./extracted_files

# Basic extraction (option-style arguments)
m1f-s1f -i ./combined.txt -d ./extracted_files

# List files without extracting
m1f-s1f --list ./combined.txt

# Force overwrite of existing files
m1f-s1f ./combined.txt ./extracted_files -f

# Verbose output to see detailed extraction progress
m1f-s1f ./combined.txt ./extracted_files -v

# Extract with specific encoding (new in v2.0.0)
m1f-s1f ./combined.txt ./extracted_files --target-encoding utf-16-le
```

## Architecture

S1F v2.0.0 features a modern, modular architecture:

```
tools/s1f/
├── __init__.py       # Package initialization
├── __main__.py       # Entry point for module execution
├── cli.py            # Command-line interface
├── config.py         # Configuration management
├── core.py           # Core extraction logic with async I/O
├── exceptions.py     # Custom exceptions
├── logging.py        # Structured logging
├── models.py         # Data models (ExtractedFile, etc.)
├── parsers.py        # Abstract parser framework
├── utils.py          # Utility functions
└── writers.py        # Output writers (file, stdout)
```

### Key Components

- **Async I/O**: Concurrent file operations for better performance
- **Parser Framework**: Extensible system for handling different file formats
- **Type Safety**: Full type hints and dataclass models
- **Clean Architecture**: Separation of concerns with dependency injection

## Command Line Options

s1f supports both positional and option-style arguments for flexibility:

### Positional Arguments (recommended)

```bash
s1f <input_file> <destination_directory>
```

### Option-Style Arguments (backward compatibility)

```bash
s1f -i <input_file> -d <destination_directory>
```

### All Options

| Option                        | Description                                                                                                                                                                                                   |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-i, --input-file`            | Path to the combined input file (can also be specified as first positional argument)                                                                                                                          |
| `-d, --destination-directory` | Directory where extracted files will be saved (can also be specified as second positional argument)                                                                                                           |
| `-l, --list`                  | List files in the archive without extracting them. When used, destination directory is not required                                                                                                           |
| `-f, --force`                 | Force overwrite of existing files without prompting                                                                                                                                                           |
| `-v, --verbose`               | Enable verbose output                                                                                                                                                                                         |
| `--version`                   | Show version information and exit                                                                                                                                                                             |
| `--timestamp-mode`            | How to set file timestamps (`original` or `current`). Original preserves timestamps from when files were combined, current uses the current time                                                              |
| `--ignore-checksum`           | Skip checksum verification for MachineReadable files. Useful when files were intentionally modified after being combined                                                                                      |
| `--respect-encoding`          | Try to use the original file encoding when writing extracted files. If enabled and original encoding information is available, files will be written using that encoding instead of UTF-8                     |
| `--target-encoding`           | Explicitly specify the character encoding to use for all extracted files (e.g., `utf-8`, `latin-1`, `utf-16-le`). This overrides the `--respect-encoding` option and any encoding information in the metadata |

## Usage Examples

### Basic Operations

```bash
# Basic command (positional arguments)
m1f-s1f /path/to/combined_output.txt /path/to/output_folder

# Basic command (option-style)
m1f-s1f --input-file /path/to/combined_output.txt \
  --destination-directory /path/to/output_folder

# List files in archive without extracting
m1f-s1f --list ./output/bundle.m1f.txt

# Splitting a MachineReadable file with force overwrite and verbose output
m1f-s1f ./output/bundle.m1f.txt ./extracted_project -f -v

# Check version
m1f-s1f --version
```

### Advanced Operations

```bash
# Using current system time for timestamps
m1f-s1f -i ./combined_file.txt -d ./extracted_files \
  --timestamp-mode current

# Preserving original file encodings
m1f-s1f -i ./with_encodings.txt -d ./extracted_files \
  --respect-encoding

# Using a specific encoding for all extracted files
m1f-s1f -i ./combined_file.txt -d ./extracted_files \
  --target-encoding utf-8

# Ignoring checksum verification (when files were intentionally modified)
m1f-s1f -i ./modified_bundle.m1f.txt -d ./extracted_files \
  --ignore-checksum
```

## Supported File Formats

The s1f tool can extract files from combined files created with any of the m1f
separator styles:

- **Standard Style** - Simple separators with file paths and checksums
- **Detailed Style** - Comprehensive separators with full metadata
- **Markdown Style** - Formatted with Markdown syntax for documentation
- **MachineReadable Style** - Structured format with JSON metadata and UUID
  boundaries
- **None Style** - Files combined without separators (limited extraction
  capability)

For the most reliable extraction, use files created with the MachineReadable
separator style, as these contain complete metadata and checksums for
verification.

## Common Workflows

### Extract and Verify

This workflow is useful when you want to ensure the integrity of extracted
files:

```bash
# Step 1: Extract the files with verification
m1f-s1f -i ./project_bundle.m1f.txt -d ./extracted_project -v

# Step 2: Check for any checksum errors in the output
# If any errors are reported, consider using --ignore-checksum if appropriate
```

### Multiple Extraction Targets

When you need to extract the same combined file to different locations:

```bash
# Extract for development
m1f-s1f -i ./project.m1f.txt -d ./dev_workspace

# Extract for backup with original timestamps
m1f-s1f -i ./project.m1f.txt -d ./backup --timestamp-mode original
```

## Performance

S1F v2.0.0 includes significant performance improvements:

- **Async I/O**: Concurrent file writing for 3-5x faster extraction on SSDs
- **Optimized Parsing**: Efficient line-by-line processing with minimal memory
  usage
- **Smart Buffering**: Adaptive buffer sizes based on file characteristics

## Error Handling

The tool provides comprehensive error handling:

- **Checksum Verification**: Automatic integrity checking with clear error
  messages
- **Encoding Fallbacks**: Graceful handling of encoding issues with multiple
  fallback strategies
- **Permission Errors**: Clear reporting of file system permission issues
- **Partial Recovery**: Continue extraction even if individual files fail

======= docs/03_html2md/30_html2md.md ======
# html2md (HTML to Markdown Converter)

A modern HTML to Markdown converter with HTML structure analysis, custom
extractors, async I/O, and parallel processing capabilities.

## Overview

The html2md tool (v3.4.0) provides a robust solution for converting HTML content
to Markdown format, with fine-grained control over the conversion process. Built
with Python 3.10+ and modern async architecture, it focuses on intelligent
content extraction and conversion.

**New in v3.4.0:** Custom extractor plugin system for site-specific content
extraction.

**Note:** Web scraping functionality has been moved to the separate `webscraper`
tool for better modularity. Use `webscraper` to download websites, then
`html2md` to convert the downloaded HTML files.

## Key Features

- **Custom Extractor System**: Create site-specific extractors for optimal
  content extraction
- **HTML Structure Analysis**: Analyze HTML files to find optimal content
  selectors
- **Intelligent Content Extraction**: Use CSS selectors to extract specific
  content
- **Async I/O**: High-performance concurrent file processing
- **API Mode**: Programmatic access for integration with other tools
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Clean modular design
- **Workflow Integration**: .scrapes directory structure for organized
  processing
- Recursive directory scanning for batch conversion
- Smart internal link handling (HTML → Markdown)
- Customizable element filtering and removal
- YAML frontmatter generation
- Heading level adjustment
- Code block language detection
- Character encoding detection and conversion
- Parallel processing for faster conversion

## Quick Start

```bash
# Basic conversion of all HTML files in a directory
m1f-html2md convert ./website -o ./docs

# Use a custom extractor for site-specific conversion
m1f-html2md convert ./website -o ./docs \
  --extractor ./extractors/custom_extractor.py

# Extract only main content from HTML files
m1f-html2md convert ./website -o ./docs \
  --content-selector "main.content" --ignore-selectors nav .sidebar footer

# Skip YAML frontmatter and adjust heading levels
m1f-html2md convert ./website -o ./docs \
  --no-frontmatter --heading-offset 1

# Analyze HTML structure to find best selectors
m1f-html2md analyze ./html/*.html --suggest-selectors

# Analyze with detailed structure output
m1f-html2md analyze ./html/*.html --show-structure --common-patterns

# Use Claude AI to intelligently analyze HTML structure
m1f-html2md analyze ./html/ --claude

# Analyze with Claude and specify number of files to analyze (1-20)
m1f-html2md analyze ./html/ --claude --analyze-files 10

# Convert HTML to Markdown using Claude AI (clean content extraction)
m1f-html2md convert ./html/ -o ./markdown/ --claude --model opus --sleep 2

# Generate a configuration file
m1f-html2md config -o config.yaml
```

### Complete Workflow Example with .scrapes Directory

```bash
# Step 1: Create project structure
mkdir -p .scrapes/my-project/{html,md,extractors}

# Step 2: Download website using webscraper
m1f-scrape https://example.com -o .scrapes/my-project/html

# Step 3: Analyze HTML structure (optional)
m1f-html2md analyze .scrapes/my-project/html/ --suggest-selectors

# Step 4: Create custom extractor (optional)
# Use Claude to analyze and create site-specific extractor:
claude -p "Analyze these HTML files and create a custom extractor for html2md" \
  --files .scrapes/my-project/html/*.html

# Step 5: Convert with custom extractor
m1f-html2md convert .scrapes/my-project/html -o .scrapes/my-project/md \
  --extractor .scrapes/my-project/extractors/custom_extractor.py
```

## Command Line Interface

The html2md tool uses subcommands for different operations:

### Convert Command

Convert local HTML files to Markdown:

```bash
m1f-html2md convert <source> -o <output> [options]
```

| Option               | Description                                                   |
| -------------------- | ------------------------------------------------------------- |
| `source`             | Source file or directory                                      |
| `-o, --output`       | Output file or directory (required)                           |
| `-c, --config`       | Configuration file path (YAML format)                         |
| `--format`           | Output format: markdown, m1f_bundle, json (default: markdown) |
| `--extractor`        | Path to custom extractor Python file                          |
| `--content-selector` | CSS selector for main content                                 |
| `--ignore-selectors` | CSS selectors to ignore (space-separated)                     |
| `--heading-offset`   | Offset heading levels (default: 0)                            |
| `--no-frontmatter`   | Don't add YAML frontmatter                                    |
| `--parallel`         | Enable parallel processing                                    |
| `--claude`           | Use Claude AI to convert HTML to Markdown (content only)      |
| `--model`            | Claude model to use: opus, sonnet (default: sonnet)           |
| `--sleep`            | Sleep time in seconds between Claude API calls (default: 1.0) |
| `-v, --verbose`      | Enable verbose output                                         |
| `-q, --quiet`        | Suppress all output except errors                             |

### Analyze Command

Analyze HTML structure for optimal content extraction:

```bash
m1f-html2md analyze <paths> [options]
```

| Option                | Description                                                          |
| --------------------- | -------------------------------------------------------------------- |
| `paths`               | HTML files or directories to analyze                                 |
| `--show-structure`    | Show detailed HTML structure                                         |
| `--common-patterns`   | Find common patterns across files                                    |
| `--suggest-selectors` | Suggest CSS selectors for content extraction (default if no options) |
| `--claude`            | Use Claude AI to intelligently select files and suggest selectors    |
| `--analyze-files`     | Number of files to analyze with Claude (1-20, default: 5)            |
| `-v, --verbose`       | Enable verbose output                                                |
| `-q, --quiet`         | Suppress all output except errors                                    |

### Config Command

Generate a configuration file template:

```bash
m1f-html2md config [options]
```

| Option         | Description                                            |
| -------------- | ------------------------------------------------------ |
| `-o, --output` | Output configuration file (default: config.yaml)       |
| `--format`     | Configuration format: yaml, toml, json (default: yaml) |

## Claude AI Integration

html2md offers optional Claude AI integration for intelligent HTML analysis and
conversion:

### Claude Command Detection

The tool automatically detects Claude Code installations in various locations:

- Standard PATH locations
- `~/.claude/local/claude` (common for local installations)
- `/usr/local/bin/claude` and `/usr/bin/claude`

If you have Claude Code installed but get a "command not found" error, the tool
will automatically find and use your Claude binary.

### AI-Powered Analysis

Use Claude to automatically select representative HTML files and suggest optimal
CSS selectors:

```bash
# Analyze a directory of HTML files with Claude
m1f-html2md analyze ./scraped-site/ --claude

# Analyze more files for better coverage (up to 20)
m1f-html2md analyze ./scraped-site/ --claude --analyze-files 10

# Claude will:
# 1. Prompt for project description and important files (if applicable)
# 2. Select representative files from the directory (default: 5)
# 3. Analyze each file's structure individually
# 4. Synthesize findings to suggest optimal selectors
# 5. Generate a YAML configuration (html2md_extract_config.yaml)
```

**Features of Claude Analysis:**

- **Project Context**: Provides project description to help Claude understand
  the content
- **Important File Priority**: Can specify important files for Claude to
  prioritize
- **Multi-phase Analysis**: Individual file analysis followed by synthesis
- **Transparent Process**: Creates temporary analysis files in m1f/ directory
- **Smart Subprocess Handling**: Uses subprocess.run() for reliable Claude CLI
  integration
- **Streaming Output**: Real-time progress display during Claude analysis
  (v3.4.0)
- **Robust Config Loading**: Handles Claude-generated configs with unknown
  fields gracefully (v3.4.0)

### AI-Powered Conversion

Use Claude to convert HTML to clean Markdown, extracting only the main content:

```bash
# Convert all HTML files using Claude AI
m1f-html2md convert ./html/ -o ./markdown/ --claude

# Use Opus model for higher quality (default is Sonnet)
m1f-html2md convert ./html/ -o ./markdown/ --claude --model opus

# Add delay between API calls to avoid rate limits
m1f-html2md convert ./html/ -o ./markdown/ --claude --sleep 3
```

The Claude conversion:

- Extracts only the main content (no navigation, ads, etc.)
- Preserves document structure and formatting
- Handles complex HTML layouts intelligently
- Generates clean, readable Markdown

## Usage Examples

### Basic Conversion

```bash
# Simple conversion of all HTML files in a directory
m1f-html2md convert ./website -o ./docs

# Convert files with verbose logging
m1f-html2md convert ./website -o ./docs --verbose

# Convert to m1f bundle format
m1f-html2md convert ./website -o ./docs.m1f --format m1f_bundle

# Convert to JSON format for processing
m1f-html2md convert ./website -o ./data.json --format json
```

### Content Selection

```bash
# Extract only the main content and ignore navigation elements
m1f-html2md convert ./website -o ./docs \
  --content-selector "main" --ignore-selectors nav .sidebar footer

# Extract article content from specific selectors
m1f-html2md convert ./website -o ./docs \
  --content-selector "article.content" \
  --ignore-selectors .author-bio .share-buttons .related-articles
```

### HTML Analysis

```bash
# Analyze HTML files to find optimal selectors
m1f-html2md analyze ./html/ --suggest-selectors

# Show detailed structure of HTML files
m1f-html2md analyze ./html/ --show-structure

# Find common patterns across multiple files
m1f-html2md analyze ./html/ --common-patterns

# Get all analysis options
m1f-html2md analyze ./html/ \
  --show-structure --common-patterns --suggest-selectors
```

### File Filtering

```bash
# Process only specific file types
m1f-html2md convert ./website -o ./docs \
  -c config.yaml  # Use a configuration file for file filtering
```

### Formatting Options

```bash
# Adjust heading levels (e.g., h1 → h2, h2 → h3)
m1f-html2md convert ./website -o ./docs \
  --heading-offset 1

# Skip frontmatter generation
m1f-html2md convert ./website -o ./docs \
  --no-frontmatter

# Use configuration file for advanced formatting options
m1f-html2md convert ./website -o ./docs -c config.yaml

# Log conversion process to file
m1f-html2md convert ./website -o ./docs \
  --log-file conversion.log
```

### Performance Optimization

```bash
# Use parallel processing for faster conversion of large sites
m1f-html2md convert ./website -o ./docs \
  --parallel
```

## Custom Extractors

The custom extractor system allows you to create site-specific content
extraction logic for optimal results. Extractors can be simple functions or full
classes.

### Creating a Custom Extractor

#### Function-based Extractor

```python
# extractors/simple_extractor.py
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    """Extract main content from HTML."""
    # Remove navigation elements
    for nav in soup.find_all(['nav', 'header', 'footer']):
        nav.decompose()

    # Find main content
    main = soup.find('main') or soup.find('article')
    if main:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    """Clean up the converted markdown."""
    # Remove duplicate newlines
    import re
    return re.sub(r'\n{3,}', '\n\n', markdown)
```

#### Class-based Extractor

```python
# extractors/advanced_extractor.py
from tools.html2md.extractors import BaseExtractor
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

class Extractor(BaseExtractor):
    """Custom extractor for specific website."""

    def extract(self, soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
        """Extract content with site-specific logic."""
        # Custom extraction logic
        return soup

    def preprocess(self, html: str, config: Optional[Dict[str, Any]] = None) -> str:
        """Preprocess raw HTML before parsing."""
        # Fix common HTML issues
        return html.replace('&nbsp;', ' ')

    def postprocess(self, markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
        """Post-process converted markdown."""
        # Clean up site-specific artifacts
        return markdown
```

### Using Custom Extractors

```bash
# Use with CLI
m1f-html2md convert ./html -o ./markdown \
  --extractor ./extractors/my_extractor.py

# Use with API
from tools.html2md.api import Html2mdConverter
from pathlib import Path

converter = Html2mdConverter(
    config,
    extractor=Path("./extractors/my_extractor.py")
)
```

### .scrapes Directory Structure

The recommended workflow uses a `.scrapes` directory (gitignored) for organizing
scraping projects:

```
.scrapes/
└── project-name/
    ├── html/         # Raw HTML files from scraping
    ├── md/           # Converted Markdown files
    └── extractors/   # Custom extraction scripts
        └── custom_extractor.py
```

This structure keeps scraped content organized and separate from your main
codebase.

## Advanced Features

### YAML Frontmatter

By default, the converter adds YAML frontmatter to each Markdown file,
including:

- Title extracted from HTML title tag or first h1 element
- Source filename
- Conversion date
- Original file modification date

To disable frontmatter generation, use the `--no-frontmatter` option:

```bash
m1f-html2md convert ./website -o ./docs --no-frontmatter
```

The generated frontmatter looks like:

```yaml
---
title: Extracted from HTML
source_file: original.html
date_converted: 2023-06-15T14:30:21
date_modified: 2023-06-12T10:15:33
---
```

### Heading Level Adjustment

The `--heading-offset` option allows you to adjust the hierarchical structure of
the document by incrementing or decrementing heading levels. This is useful
when:

- Integrating content into an existing document with its own heading hierarchy
- Making h1 headings become h2 headings for better document structure
- Ensuring proper nesting of headings for better semantics

Positive values increase heading levels (e.g., h1 → h2), while negative values
decrease them (e.g., h2 → h1).

### Code Block Language Detection

The converter can automatically detect language hints from HTML code blocks that
use language classes, such as:

```html
<pre><code class="language-python">def example():
    return "Hello, world!"
</code></pre>
```

This will be converted to a properly formatted Markdown code block with language
hint:

````markdown
```python
def example():
    return "Hello, world!"
```
````

### Character Encoding Handling

The converter provides robust character encoding detection and conversion:

1. Automatically detects the encoding of source HTML files
2. Properly handles UTF-8, UTF-16, and other encodings
3. All output files are written in UTF-8 encoding
4. Handles BOM (Byte Order Mark) detection for Unicode files

## Architecture

HTML2MD v3.4.0 features a modern, modular architecture:

```
tools/html2md/
├── __init__.py       # Package initialization
├── __main__.py       # Entry point for module execution
├── api.py            # Programmatic API for other tools
├── cli.py            # Command-line interface
├── config/           # Configuration management
│   ├── __init__.py
│   ├── loader.py     # Config file loader
│   └── models.py     # Config data models
├── core.py           # Core conversion logic
├── extractors.py     # Custom extractor system
├── preprocessors.py  # HTML preprocessing
├── analyze_html.py   # HTML structure analysis
└── utils.py          # Utility functions

.scrapes/             # Project scrapes directory (gitignored)
└── project-name/
    ├── html/         # Raw HTML files
    ├── md/           # Converted Markdown
    └── extractors/   # Custom extractors
```

### Key Components

- **API Mode**: Use as a library in other Python projects
- **Custom Extractors**: Pluggable extractor system for site-specific logic
- **Type Safety**: Full type hints and dataclass models
- **Clean Architecture**: Separation of concerns with dependency injection
- **Async Support**: Modern async/await for high performance
- **Workflow Integration**: Organized .scrapes directory structure

## Integration with m1f

The html2md tool works well with the m1f (Make One File) tool for comprehensive
documentation handling:

1. First convert HTML files to Markdown:

   ```bash
   m1f-html2md convert ./html-docs -o ./markdown-docs
   ```

2. Then use m1f to combine the Markdown files:
   ```bash
   m1f -s ./markdown-docs -o ./combined-docs.m1f.txt \
     --separator-style Markdown
   ```

This workflow is ideal for:

- Converting documentation from HTML to Markdown format
- Consolidating documentation from multiple sources
- Preparing content for LLM context windows
- Creating searchable knowledge bases

## Performance Considerations

- For large websites with many HTML files, use the `--parallel` option
- Conversion speed depends on file size, complexity, and number of files
- Memory usage scales with file sizes when parallel processing is enabled
- The tool uses async I/O for efficient file operations

## Programmatic API

Use html2md in your Python projects:

```python
from tools.html2md.api import Html2mdConverter
from tools.html2md.config import Config
from tools.html2md.extractors import BaseExtractor
from tools.shared.colors import info, success
from pathlib import Path

# Create converter with configuration
config = Config(
    source=Path("./html"),
    destination=Path("./markdown")
)
converter = Html2mdConverter(config)

# Convert with custom extractor
converter = Html2mdConverter(
    config,
    extractor=Path("./extractors/custom_extractor.py")
)

# Or with inline extractor
class MyExtractor(BaseExtractor):
    def extract(self, soup, config=None):
        # Custom logic
        return soup

converter = Html2mdConverter(config, extractor=MyExtractor())

# Convert a single file
output_path = converter.convert_file(Path("page.html"))
success(f"Converted to: {output_path}")

# Convert entire directory
results = converter.convert_directory()
info(f"Converted {len(results)} files")
```

## Requirements and Dependencies

- Python 3.10 or newer
- Required packages:
  - beautifulsoup4: For HTML parsing
  - markdownify: For HTML to Markdown conversion
  - aiofiles: For async file operations
  - rich: For console output
  - pydantic: For configuration models
- Optional packages:
  - chardet: For encoding detection
  - pyyaml: For YAML configuration files
  - toml: For TOML configuration files

Install dependencies:

```bash
pip install beautifulsoup4 markdownify chardet pyyaml aiofiles rich pydantic
```

**Note**: For web scraping functionality, use the separate `webscraper` tool
which provides multiple backend options including HTTrack.

======= docs/03_html2md/31_html2md_guide.md ======
# HTML to Markdown Converter Guide

The `html2md` tool (v3.1.0) is a modern, async converter designed to transform
HTML content into clean Markdown format. Built with Python 3.10+ and modern
async architecture, it focuses on intelligent content extraction and conversion.

**Note:** Web scraping functionality has been moved to the separate `webscraper`
tool. Use `webscraper` to download websites, then `html2md` to convert the
downloaded HTML files.

## Table of Contents

- [Installation](#installation)
- [Quick Start](#quick-start)
- [Command Line Usage](#command-line-usage)
- [Configuration](#configuration)
- [Python API](#python-api)
- [Custom Extractors](#custom-extractors)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Troubleshooting](#troubleshooting)

## Installation

### Python Dependencies

```bash
pip install beautifulsoup4 markdownify pydantic rich httpx chardet pyyaml aiofiles

# Optional dependencies
pip install toml      # For TOML configuration files
```

### Installation

```bash
pip install beautifulsoup4 markdownify pydantic rich chardet pyyaml aiofiles

# Optional dependencies
pip install toml      # For TOML configuration files
```

## Quick Start

### Convert a Single File

```bash
m1f-html2md convert index.html -o index.md
```

### Convert a Directory

```bash
m1f-html2md convert ./html_docs/ -o ./markdown_docs/
```

### Analyze HTML Structure

```bash
m1f-html2md analyze ./html/*.html --suggest-selectors
```

### Generate Configuration

```bash
m1f-html2md config -o config.yaml
```

## Command Line Usage

The tool provides three main commands:

### `convert` - Convert Files or Directories

```bash
m1f-html2md convert [source] -o [output] [options]

Options:
  -c, --config FILE         Configuration file (YAML format)
  --format FORMAT          Output format (markdown, m1f_bundle, json)
  --content-selector SEL    CSS selector for main content
  --ignore-selectors SEL    CSS selectors to ignore (space-separated)
  --heading-offset N        Offset heading levels by N
  --no-frontmatter         Don't add YAML frontmatter
  --parallel               Enable parallel processing
  --extractor FILE         Path to custom extractor Python file
  --log-file FILE          Log to file
  -v, --verbose            Enable verbose output
  -q, --quiet              Suppress all output except errors
```

### `analyze` - Analyze HTML Structure

```bash
m1f-html2md analyze [files] [options]

Options:
  --show-structure         Show detailed HTML structure
  --common-patterns        Find common patterns across files
  --suggest-selectors      Suggest CSS selectors (default)
  -v, --verbose            Enable verbose output
```

### `config` - Generate Configuration File

```bash
m1f-html2md config [options]

Options:
  -o, --output FILE        Output file (default: config.yaml)
  --format FORMAT          Config format (yaml, toml, json)
```

## Configuration

### Configuration File Structure

Create a `config.yaml` file:

```yaml
# Basic settings (v3.1.0 format)
source: ./html_docs
destination: ./markdown_docs
output_format: markdown

# Content extraction
extractor:
  content_selector: "article.content, main, .documentation"
  ignore_selectors:
    - nav
    - header
    - footer
    - .sidebar
    - .ads
    - "#comments"
  remove_elements:
    - script
    - style
    - iframe
  extract_metadata: true
  extract_opengraph: true

# Markdown processing
processor:
  heading_offset: 0
  add_frontmatter: true
  heading_style: atx
  link_handling: convert
  link_extensions:
    .html: .md
    .htm: .md
  normalize_whitespace: true
  fix_encoding: true

# Parallel processing
parallel: true

# Logging
verbose: false
quiet: false
log_file: ./conversion.log
```

### Configuration Options Explained

#### Extractor Configuration

- `content_selector`: CSS selector(s) to find main content
- `ignore_selectors`: Elements to remove before conversion
- `remove_elements`: HTML tags to completely remove
- `preserve_attributes`: HTML attributes to keep
- `extract_metadata`: Extract meta tags and title
- `extract_opengraph`: Extract OpenGraph metadata

#### Processor Configuration

- `heading_offset`: Adjust heading levels (e.g., h1→h2)
- `link_handling`: How to process links (convert/preserve/absolute/relative)
- `normalize_whitespace`: Clean up extra whitespace
- `fix_encoding`: Fix common encoding issues

#### Processing Configuration

- `parallel`: Enable parallel processing for multiple files
- `verbose`: Enable verbose logging
- `quiet`: Suppress all output except errors
- `log_file`: Path to log file

## Python API

### Basic Usage

```python
from tools.html2md.api import HTML2MDConverter
import asyncio

# Create converter with configuration
converter = HTML2MDConverter(
    outermost_selector="main",
    ignore_selectors=["nav", "footer"],
    add_frontmatter=True
)

# Convert a directory (async)
results = asyncio.run(converter.convert_directory("./html", "./markdown"))

# Convert a single file (async)
result = asyncio.run(converter.convert_file("index.html"))

# Convert with custom extractor
from pathlib import Path

converter = HTML2MDConverter(
    outermost_selector="main",
    extractor=Path("./extractors/custom_extractor.py")
)

result = asyncio.run(converter.convert_file("index.html"))
```

### Advanced Configuration

```python
from tools.html2md.config.models import HTML2MDConfig

# Create configuration with v3.1.0 models
config = HTML2MDConfig(
    source_dir="./html",
    destination_dir="./output",
    outermost_selector="div.documentation",
    ignore_selectors=[".nav-menu", ".footer"],
    strip_attributes=True,
    heading_offset=1,
    add_frontmatter=True,
    parallel=True,
    max_workers=4
)

converter = HTML2MDConverter.from_config(config)
```

### Convenience Functions

```python
from tools.html2md.api import convert_file, convert_directory
import asyncio

# Simple file conversion (async)
result = asyncio.run(convert_file("page.html", destination="page.md"))

# Directory conversion with options (async)
results = asyncio.run(convert_directory(
    source="./html",
    destination="./markdown",
    outermost_selector="article",
    parallel=True
))
```

## Custom Extractors

The custom extractor system allows you to create site-specific content
extraction logic:

### Function-based Extractor

```python
# extractors/my_extractor.py
from bs4 import BeautifulSoup

def extract(soup: BeautifulSoup, config=None):
    """Extract main content."""
    # Custom extraction logic
    main = soup.find('main')
    if main:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup
    return soup

def postprocess(markdown: str, config=None):
    """Clean up converted markdown."""
    import re
    return re.sub(r'\n{3,}', '\n\n', markdown)
```

### Using Custom Extractors

```bash
m1f-html2md convert ./html -o ./markdown \
  --extractor ./extractors/my_extractor.py
```

## Advanced Features

### Content Extraction with CSS Selectors

Target specific content areas:

```yaml
extractor:
  content_selector: |
    article.post-content,
    div.documentation-body,
    main[role="main"],
    #content:not(.sidebar)
```

### Link Handling Strategies

1. **Convert**: Change `.html` to `.md`

   ```yaml
   processor:
     link_handling: convert
     link_extensions:
       .html: .md
       .php: .md
   ```

2. **Preserve**: Keep original links

   ```yaml
   processor:
     link_handling: preserve
   ```

3. **Absolute**: Make all links absolute
   ```yaml
   processor:
     link_handling: absolute
   ```

### Metadata Extraction

The tool can extract and preserve:

- Page title
- Meta description
- OpenGraph data
- Schema.org structured data
- Custom meta tags

### m1f Bundle Creation

Generate m1f bundles directly:

```yaml
output_format: m1f_bundle
m1f:
  create_bundle: true
  bundle_name: my-documentation
  include_assets: true
  generate_index: true
  metadata:
    project: My Project Docs
    version: 1.0.0
```

## Examples

### Example 1: Convert Documentation Site

```bash
# Create configuration
cat > docs-config.yaml << EOF
source: ./python-docs-html
destination: ./python-docs-md
extractor:
  content_selector: "div.document"
  ignore_selectors:
    - ".sphinxsidebar"
    - ".related"
processor:
  heading_offset: 1
  add_frontmatter: true
parallel: true
EOF

# Run conversion
m1f-html2md convert ./python-docs-html -o ./python-docs-md -c docs-config.yaml
```

### Example 2: Convert Blog with Specific Content

```python
from tools.html2md.api import HTML2MDConverter
import asyncio

converter = HTML2MDConverter(
    outermost_selector="article.post",
    ignore_selectors=[
        ".post-navigation",
        ".comments-section",
        ".social-share"
    ],
    add_frontmatter=True,
    heading_offset=0
)

# Convert all blog posts (async)
results = asyncio.run(converter.convert_directory(
    "./blog-html",
    "./blog-markdown"
))
```

### Example 3: Create m1f Bundle from HTML

```bash
# First download the website using webscraper
m1f-scrape https://docs.example.com -o ./html

# Then convert to m1f bundle
m1f-html2md convert ./html \
  -o ./output.m1f \
  --format m1f_bundle \
  --content-selector "main.content" \
  --ignore-selectors nav footer
```

## Troubleshooting

### Common Issues

1. **Content selector not matching**

   ```
   WARNING: Content selector 'article' not found
   ```

   Solution: Use the analyze command to find the right selectors:

   ```bash
   m1f-html2md analyze ./html/*.html --suggest-selectors
   ```

2. **Encoding issues**

   ```
   UnicodeDecodeError: 'utf-8' codec can't decode
   ```

   Solution: The tool auto-detects encoding, but HTML files may have mixed
   encodings. All output is converted to UTF-8.

3. **Large directories timing out**

   Solution: Use parallel processing:

   ```bash
   m1f-html2md convert ./html -o ./md --parallel
   ```

4. **Missing content after conversion**

   Solution: Check your ignore selectors - they may be too broad:

   ```bash
   m1f-html2md convert ./html -o ./md \
     --content-selector "body" \
     --ignore-selectors .ads .cookie-notice
   ```

### Debug Mode

Enable verbose logging for debugging:

```bash
m1f-html2md convert ./html -o ./md -v --log-file debug.log
```

Or in configuration:

```yaml
verbose: true
log_file: ./conversion-debug.log
```

### Performance Tips

1. **Use parallel processing** for large directories:

   ```yaml
   parallel: true
   ```

2. **Target specific content** to reduce processing:

   ```yaml
   extractor:
     content_selector: "article.documentation"
   ```

3. **Use custom extractors** for complex sites to optimize extraction

## Integration with m1f

The converted Markdown files are optimized for m1f bundling:

1. Clean, consistent formatting
2. Preserved metadata in frontmatter
3. Proper link structure
4. UTF-8 encoding

To create an m1f bundle after conversion:

```bash
# Download website first
m1f-scrape https://docs.example.com -o ./html/

# Convert to Markdown
m1f-html2md convert ./html/ -o ./docs/

# Create m1f bundle
m1f -s ./docs/ -o documentation.m1f.txt
```

Or convert directly to m1f bundle format:

```bash
m1f-html2md convert ./html/ \
  -o ./docs.m1f \
  --format m1f_bundle
```

======= docs/03_html2md/32_html2md_workflow_guide.md ======
# HTML2MD Workflow Guide

This guide explains the recommended workflow for converting websites to Markdown
using html2md with custom extractors.

## Overview

The html2md tool now supports a flexible workflow that separates concerns:

1. HTML acquisition (scraping or external)
2. Content analysis and extractor development
3. Conversion with site-specific extraction

## Directory Structure

All scraping projects use the `.scrapes` directory (gitignored):

```
.scrapes/
└── project-name/
    ├── html/         # Raw HTML files
    ├── md/           # Converted Markdown files
    └── extractors/   # Custom extraction scripts
```

## Complete Workflow

### Step 1: Set Up Project Structure

```bash
# Create project directories
mkdir -p .scrapes/my-docs/{html,md,extractors}
```

### Step 2: Acquire HTML Content

You have several options:

#### Option A: Use webscraper tool

```bash
m1f-scrape https://example.com \
  -o .scrapes/my-docs/html \
  --max-pages 50 \
  --scraper playwright
```

#### Option B: Manual download

- Save HTML files directly to `.scrapes/my-docs/html/`
- Use browser "Save As" or wget/curl
- Any method that gets HTML files

#### Option C: External scraping

- Use any scraping tool you prefer
- Just ensure HTML files end up in the html/ directory

### Step 3: Analyze HTML Structure (Optional)

Understand the HTML structure before creating extractors:

```bash
# Analyze a few sample files
m1f-html2md analyze \
  .scrapes/my-docs/html/*.html \
  --suggest-selectors

# Get detailed structure analysis
m1f-html2md analyze \
  .scrapes/my-docs/html/*.html \
  --show-structure \
  --common-patterns
```

### Step 4: Create Custom Extractor (Optional)

#### Manual Creation

Create `.scrapes/my-docs/extractors/custom_extractor.py`:

```python
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    """Extract main content from HTML."""
    # Remove site-specific navigation
    for selector in ['nav', '.sidebar', '#header', '#footer']:
        for elem in soup.select(selector):
            elem.decompose()

    # Find main content area
    main = soup.find('main') or soup.find('article') or soup.find('.content')
    if main:
        # Create clean soup with just main content
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    """Clean up converted markdown."""
    lines = markdown.split('\n')
    cleaned = []

    for line in lines:
        # Remove "Copy" buttons before code blocks
        if line.strip() == 'Copy':
            continue
        cleaned.append(line)

    return '\n'.join(cleaned)
```

#### Claude-Assisted Creation

Use Claude to analyze HTML and create a custom extractor:

```bash
# Have Claude analyze the HTML structure
claude -p "Analyze these HTML files and create a custom extractor for html2md. \
The extractor should:
1. Remove all navigation, headers, footers, and sidebars
2. Extract only the main content
3. Clean up any site-specific artifacts in the markdown
4. Handle the specific structure of this website

Write the extractor to .scrapes/my-docs/extractors/custom_extractor.py" \
--files .scrapes/my-docs/html/*.html
```

### Step 5: Convert HTML to Markdown

#### With Custom Extractor

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md \
  --extractor extractors/custom_extractor.py
```

#### With Default Extractor

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md
```

#### With CSS Selectors Only

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md \
  --content-selector "main.content" \
  --ignore-selectors "nav" ".sidebar" ".ads"
```

### Step 6: Review and Refine

1. Check the converted Markdown files
2. If quality needs improvement:
   - Update the custom extractor
   - Re-run the conversion
   - Iterate until satisfied

## Example: Documentation Site

Here's a complete example for converting a documentation site:

```bash
# 1. Setup
mkdir -p .scrapes/docs-site/{html,md,extractors}

# 2. Download documentation
m1f-scrape https://docs.example.com \
  -o .scrapes/docs-site/html \
  --max-pages 100 \
  --scraper playwright

# 3. Analyze structure
m1f-html2md analyze \
  .scrapes/docs-site/html/*.html \
  --suggest-selectors

# 4. Create extractor for docs site
cat > .scrapes/docs-site/extractors/docs_extractor.py << 'EOF'
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Remove docs-specific elements
    for selector in [
        '.docs-nav', '.docs-sidebar', '.docs-header',
        '.docs-footer', '.edit-page', '.feedback',
        '[class*="navigation"]', '[id*="toc"]'
    ]:
        for elem in soup.select(selector):
            elem.decompose()

    # Extract article content
    article = soup.find('article') or soup.find('.docs-content')
    if article:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(article)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    # Clean up docs-specific patterns
    import re

    # Remove "Copy" buttons
    markdown = re.sub(r'^Copy\s*\n', '', markdown, flags=re.MULTILINE)

    # Remove "On this page" sections
    markdown = re.sub(r'^On this page.*?(?=^#|\Z)', '', markdown,
                      flags=re.MULTILINE | re.DOTALL)

    return markdown.strip()
EOF

# 5. Convert with custom extractor
cd .scrapes/docs-site
m1f-html2md convert html -o md \
  --extractor extractors/docs_extractor.py

# 6. Create m1f bundle (optional)
m1f -s md -o docs-bundle.txt
```

## Best Practices

### 1. Start Small

- Test with a few HTML files first
- Refine the extractor before processing everything

### 2. Iterative Development

- Create basic extractor
- Convert a sample
- Identify issues
- Update extractor
- Repeat until satisfied

### 3. Extractor Tips

- Use specific CSS selectors for the site
- Remove navigation early in extraction
- Handle site-specific patterns in postprocess
- Test with different page types

### 4. Organization

- Keep each project in its own directory
- Document site-specific quirks
- Save working extractors for reuse

### 5. Performance

- Use `--parallel` for large conversions
- Process in batches if needed
- Monitor memory usage

## Troubleshooting

### Common Issues

**Issue**: Navigation elements still appear in Markdown

- **Solution**: Add more specific selectors to the extractor
- Check for dynamic class names or IDs

**Issue**: Missing content

- **Solution**: Verify content selector is correct
- Check if content is loaded dynamically (use playwright scraper)

**Issue**: Broken formatting

- **Solution**: Adjust extraction logic
- Use postprocess to fix patterns

**Issue**: Encoding errors

- **Solution**: Ensure HTML files are UTF-8
- Use `--target-encoding utf-8` if needed

### Debug Tips

1. **Test extractor standalone**:

```python
from bs4 import BeautifulSoup
from pathlib import Path
from tools.shared.colors import info

# Load your extractor
import sys
sys.path.append('.scrapes/my-docs/extractors')
import custom_extractor

# Test on single file
html = Path('.scrapes/my-docs/html/sample.html').read_text()
soup = BeautifulSoup(html, 'html.parser')
result = custom_extractor.extract(soup)
info(result.prettify())
```

2. **Use verbose mode**:

```bash
m1f-html2md convert html -o md \
  --extractor extractors/custom_extractor.py \
  --verbose
```

3. **Process single file**:

```bash
m1f-html2md convert html/single-file.html \
  -o test.md \
  --extractor extractors/custom_extractor.py
```

## Advanced Techniques

### Multi-Stage Extraction

For complex sites, use multiple extraction stages:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Stage 1: Remove obvious non-content
    remove_selectors = ['script', 'style', 'nav', 'header', 'footer']
    for selector in remove_selectors:
        for elem in soup.select(selector):
            elem.decompose()

    # Stage 2: Find content container
    container = soup.select_one('.main-container') or soup.body

    # Stage 3: Clean within container
    for elem in container.select('.ads, .social-share, .related'):
        elem.decompose()

    # Stage 4: Extract final content
    content = container.select_one('article') or container

    new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
    new_soup.body.append(content)
    return new_soup
```

### Conditional Extraction

Handle different page types:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Detect page type
    if soup.find('article', class_='blog-post'):
        return extract_blog_post(soup)
    elif soup.find('div', class_='documentation'):
        return extract_documentation(soup)
    elif soup.find('div', class_='api-reference'):
        return extract_api_reference(soup)
    else:
        return extract_generic(soup)
```

### Metadata Preservation

Keep important metadata:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Preserve title
    title = soup.find('title')

    # Extract content
    content = soup.find('main')

    # Create new soup with metadata
    new_soup = BeautifulSoup('<html><head></head><body></body></html>', 'html.parser')
    if title:
        new_soup.head.append(title)
    if content:
        new_soup.body.append(content)

    return new_soup
```

## Conclusion

The html2md workflow provides maximum flexibility:

- Separate HTML acquisition from conversion
- Site-specific extractors for optimal results
- Iterative refinement process
- Integration with other tools (webscraper, m1f)

This approach ensures you can handle any website structure and produce clean,
readable Markdown output.

======= docs/03_html2md/33_html2md_test_suite.md ======
# HTML2MD Test Suite Documentation

A comprehensive test suite for validating the html2md converter (v2.0.0) with
challenging real-world HTML structures.

## Overview

The HTML2MD test suite provides a robust testing framework consisting of:

- A Flask-based web server serving complex HTML test pages
- Comprehensive pytest test cases covering all conversion features including
  async operations
- Real-world documentation examples with challenging HTML structures
- Automated test runner with coverage reporting
- Full support for testing async/await patterns and parallel processing

## Architecture

```
tests/
├── html2md_server/
│   ├── server.py              # Flask test server
│   ├── requirements.txt       # Test suite dependencies
│   ├── run_tests.sh          # Automated test runner
│   ├── README.md             # Test suite documentation
│   ├── static/
│   │   ├── css/
│   │   │   └── modern.css    # Modern CSS with dark mode
│   │   └── js/
│   │       └── main.js       # Interactive features
│   └── test_pages/
│       ├── index.html        # Test suite homepage
│       ├── m1f-documentation.html
│       ├── html2md-documentation.html
│       ├── complex-layout.html
│       ├── code-examples.html
│       └── ...               # Additional test pages
└── test_html2md_server.py    # Pytest test cases
```

## Test Server

### Features

- Modern Flask-based web server
- RESTful API endpoints for test page discovery
- CORS enabled for cross-origin testing
- Dynamic page generation support
- Static asset serving with proper MIME types

### Running the Server

```bash
# Start server on default port 8080
python tests/html2md_server/server.py

# Server provides:
# - http://localhost:8080/            # Test suite homepage
# - http://localhost:8080/page/{name} # Individual test pages
# - http://localhost:8080/api/test-pages # JSON API
```

## Test Pages

### 1. M1F Documentation (`m1f-documentation.html`)

Tests real documentation conversion with:

- Complex heading hierarchies
- Code examples in multiple languages
- Nested structures and feature grids
- Command-line documentation tables
- Advanced layout with inline styles

### 2. HTML2MD Documentation (`html2md-documentation.html`)

Comprehensive documentation page testing:

- Multi-level navigation structures
- API documentation with code examples
- Complex tables and option grids
- Details/Summary elements
- Sidebar navigation

### 3. Complex Layout Test (`complex-layout.html`)

CSS layout challenges:

- **Flexbox layouts**: Multi-item flex containers
- **CSS Grid**: Complex grid with spanning items
- **Nested structures**: Up to 4 levels deep
- **Positioning**: Absolute, relative, sticky elements
- **Multi-column layouts**: CSS columns with rules
- **Masonry layouts**: Pinterest-style card layouts
- **Overflow containers**: Scrollable areas

### 4. Code Examples Test (`code-examples.html`)

Programming language support:

- **Languages tested**: Python, TypeScript, JavaScript, Bash, SQL, Go, Rust
- **Inline code**: Mixed with regular text
- **Code with special characters**: HTML entities, Unicode
- **Configuration files**: YAML, JSON examples
- **Edge cases**: Empty blocks, long lines, whitespace-only

### 5. Additional Test Pages (Planned)

- **Edge Cases**: Malformed HTML, special characters
- **Modern Features**: HTML5 elements, web components
- **Tables and Lists**: Complex nested structures
- **Multimedia**: Images, videos, iframes

## Test Suite Features

### Content Selection Testing

```python
# Test CSS selector-based extraction (v2.0.0 async API)
from tools.html2md.api import HTML2MDConverter
import asyncio

converter = HTML2MDConverter(
    outermost_selector="article",
    ignore_selectors=["nav", ".sidebar", "footer"]
)

# Async conversion
result = asyncio.run(converter.convert_file("test.html"))
```

### Code Block Detection

- Automatic language detection from class names
- Preservation of syntax highlighting hints
- Special character handling in code

### Layout Preservation

- Nested structure maintenance
- List hierarchy preservation
- Table structure conversion
- Heading level consistency

### Edge Case Handling

- Empty HTML documents
- Malformed HTML structures
- Very long lines
- Unicode and special characters
- Missing closing tags

## Running Tests

### Quick Start

```bash
# Run all tests with the automated script
./tests/html2md_server/run_tests.sh

# This will:
# 1. Install dependencies
# 2. Start the test server
# 3. Run all pytest tests
# 4. Generate coverage report
# 5. Clean up processes
```

### Manual Testing

```bash
# Install dependencies
pip install -r tests/html2md_server/requirements.txt

# Start server in one terminal
python tests/html2md_server/server.py

# Run tests in another terminal
pytest tests/test_html2md_server.py -v

# Run with coverage
pytest tests/test_html2md_server.py --cov=tools.html2md_tool --cov-report=html
```

### Test Options

```bash
# Run specific test
pytest tests/test_html2md_server.py::TestHTML2MDConversion::test_code_examples -v

# Run with detailed output
pytest tests/test_html2md_server.py -vv -s

# Run only fast tests
pytest tests/test_html2md_server.py -m "not slow"
```

## Test Coverage

### Core Features Tested

- ✅ Basic HTML to Markdown conversion
- ✅ Async I/O operations with aiofiles
- ✅ CSS selector content extraction
- ✅ Element filtering with ignore selectors
- ✅ Complex nested HTML structures
- ✅ Code block language detection
- ✅ Table conversion (simple and complex)
- ✅ List conversion (ordered, unordered, nested)
- ✅ Special characters and HTML entities
- ✅ Unicode support
- ✅ YAML frontmatter generation
- ✅ Heading level offset adjustment
- ✅ Parallel processing with asyncio
- ✅ Configuration file loading (YAML/TOML)
- ✅ CLI argument parsing
- ✅ API mode for programmatic access
- ✅ HTTrack integration (when available)
- ✅ URL conversion from lists

### Performance Testing

- Parallel conversion of multiple files
- Large file handling
- Memory usage monitoring
- Conversion speed benchmarks

## Writing New Tests

### Adding Test Pages

1. Create HTML file in `tests/html2md_server/test_pages/`
2. Register in `server.py`:
   ```python
   TEST_PAGES = {
       'your-test': {
           'title': 'Your Test Title',
           'description': 'What this tests'
       }
   }
   ```
3. Add corresponding test case

### Test Case Structure

```python
class TestYourFeature:
    async def test_your_feature(self, test_server, temp_output_dir):
        """Test description."""
        from tools.html2md.api import HTML2MDConverter

        converter = HTML2MDConverter(
            outermost_selector="main",
            ignore_selectors=["nav", "footer"],
            add_frontmatter=True
        )

        # Perform async conversion
        results = await converter.convert_directory(
            f"{test_server.base_url}/page",
            temp_output_dir
        )

        # Assert expected results
        assert len(results) > 0
```

## Continuous Integration

### GitHub Actions Integration

```yaml
# .github/workflows/test.yml
- name: Run HTML2MD Tests
  run: |
    cd tests/html2md_server
    ./run_tests.sh
```

### Local Development

```bash
# Watch mode for development
pytest-watch tests/test_html2md_server.py

# Run with debugging
pytest tests/test_html2md_server.py --pdb
```

## Troubleshooting

### Common Issues

**Server won't start**

- Check if port 8080 is already in use
- Ensure Flask dependencies are installed
- Check Python version (3.9+ required)

**Tests fail with connection errors**

- Ensure server is running
- Check firewall settings
- Verify localhost resolution

**Coverage report issues**

- Install pytest-cov: `pip install pytest-cov`
- Ensure tools.html2md module is in Python path
- For async tests, use pytest-asyncio: `pip install pytest-asyncio`

## Future Enhancements

1. **Additional Test Pages**
   - SVG content handling
   - MathML equations
   - Microdata and structured data
   - Progressive web app features
   - WebAssembly integration tests
   - Shadow DOM content extraction

2. **Test Automation**
   - Visual regression testing
   - Performance benchmarking
   - Memory leak detection
   - Cross-platform testing

3. **Enhanced Reporting**
   - HTML test reports with screenshots
   - Conversion diff visualization
   - Performance metrics dashboard

## Contributing

To contribute to the test suite:

1. Identify untested scenarios
2. Create representative HTML test pages
3. Write comprehensive test cases
4. Document the test purpose
5. Submit PR with test results

The test suite aims to cover all real-world HTML conversion scenarios to ensure
robust and reliable Markdown output.

======= docs/04_scrape/40_webscraper.md ======
# webscraper (Website Downloader)

A modern web scraping tool for downloading websites with multiple backend
options, async I/O, and intelligent crawling capabilities.

## Overview

The webscraper tool provides a robust solution for downloading websites for
offline viewing and analysis. Built with Python 3.10+ and modern async
architecture, it features pluggable scraper backends for different use cases.

**Primary Use Case**: Download online documentation to make it available to LLMs
(like Claude) for analysis and reference. The downloaded HTML files can be
converted to Markdown with html2md, then bundled into a single file with m1f for
optimal LLM context usage.

## Key Features

- **Multiple Scraper Backends**: Choose from BeautifulSoup (default), HTTrack,
  Scrapy, Playwright, or Selectolax
- **Async I/O**: High-performance concurrent downloading
- **Intelligent Crawling**: Automatically respects robots.txt, follows
  redirects, handles encoding
- **Duplicate Prevention**: Three-layer deduplication system:
  - Canonical URL checking (enabled by default)
  - Content-based deduplication (enabled by default)
  - GET parameter normalization (optional with `--ignore-get-params`)
- **Metadata Preservation**: Saves HTTP headers and metadata alongside HTML
  files
- **Domain Restriction**: Automatically restricts crawling to the starting
  domain
- **Subdirectory Restriction**: When URL contains a path, only scrapes within
  that subdirectory
- **Rate Limiting**: Configurable delays between requests
- **Progress Tracking**: Real-time download progress with file listing
- **Resume Support**: Interrupt and resume scraping sessions with SQLite
  tracking

## Quick Start

```bash
# Basic website download
m1f-scrape https://example.com -o ./downloaded_html

# Download with specific depth and page limits
m1f-scrape https://example.com -o ./html \
  --max-pages 50 \
  --max-depth 3

# Use different scraper backend
m1f-scrape https://example.com -o ./html --scraper httrack

# List downloaded files after completion
m1f-scrape https://example.com -o ./html --list-files

# Resume interrupted scraping (with verbose mode to see progress)
m1f-scrape https://example.com -o ./html -v
```

## Command Line Interface

```bash
m1f-scrape <url> -o <output> [options]
```

### Required Arguments

| Option         | Description                |
| -------------- | -------------------------- |
| `url`          | URL to start scraping from |
| `-o, --output` | Output directory           |

### Optional Arguments

| Option                  | Description                                                   | Default       |
| ----------------------- | ------------------------------------------------------------- | ------------- |
| `--scraper`             | Scraper backend to use (choices: httrack, beautifulsoup, bs4, | beautifulsoup |
|                         | selectolax, httpx, scrapy, playwright)                        |               |
| `--scraper-config`      | Path to scraper-specific config file (YAML/JSON)              | None          |
| `--max-depth`           | Maximum crawl depth                                           | 5             |
| `--max-pages`           | Maximum pages to crawl                                        | 1000          |
| `--request-delay`       | Delay between requests in seconds (for Cloudflare protection) | 15.0          |
| `--concurrent-requests` | Number of concurrent requests (for Cloudflare protection)     | 2             |
| `--user-agent`          | Custom user agent string                                      | Mozilla/5.0   |
| `--ignore-get-params`   | Ignore GET parameters in URLs (e.g., ?tab=linux)              | False         |
| `--ignore-canonical`    | Ignore canonical URL tags (checking is enabled by default)    | False         |
| `--ignore-duplicates`   | Ignore duplicate content detection (enabled by default)       | False         |
| `--list-files`          | List all downloaded files after completion                    | False         |
| `-v, --verbose`         | Enable verbose output                                         | False         |
| `-q, --quiet`           | Suppress all output except errors                             | False         |
| `--show-db-stats`       | Show scraping statistics from the database                    | False         |
| `--show-errors`         | Show URLs that had errors during scraping                     | False         |
| `--show-scraped-urls`   | List all scraped URLs from the database                       | False         |
| `--version`             | Show version information and exit                             | -             |

## Scraper Backends

### BeautifulSoup (default)

- **Best for**: General purpose scraping, simple websites
- **Features**: Fast HTML parsing, good encoding detection
- **Limitations**: No JavaScript support

```bash
m1f-scrape https://example.com -o ./html --scraper beautifulsoup
```

### HTTrack

- **Best for**: Complete website mirroring, preserving structure
- **Features**: External links handling, advanced mirroring options
- **Limitations**: Requires HTTrack to be installed separately

```bash
m1f-scrape https://example.com -o ./html --scraper httrack
```

### Scrapy

- **Best for**: Large-scale crawling, complex scraping rules
- **Features**: Advanced crawling settings, middleware support
- **Limitations**: More complex configuration

```bash
m1f-scrape https://example.com -o ./html --scraper scrapy
```

### Playwright

- **Best for**: JavaScript-heavy sites, SPAs
- **Features**: Full browser automation, JavaScript execution
- **Limitations**: Slower, requires more resources

```bash
m1f-scrape https://example.com -o ./html --scraper playwright
```

### Selectolax

- **Best for**: Speed-critical applications
- **Features**: Fastest HTML parsing, minimal overhead
- **Limitations**: Basic feature set

```bash
m1f-scrape https://example.com -o ./html --scraper selectolax
```

## Usage Examples

### Basic Website Download

```bash
# Download a simple website
m1f-scrape https://docs.example.com -o ./docs_html

# Download with verbose output
m1f-scrape https://docs.example.com -o ./docs_html -v
```

### Canonical URL Checking

By default, the scraper checks for canonical URLs to avoid downloading duplicate
content:

```bash
# Pages with different canonical URLs are automatically skipped
m1f-scrape https://example.com -o ./html

# Ignore canonical tags if you want all page versions
m1f-scrape https://example.com -o ./html --ignore-canonical
```

When enabled (default), the scraper:

- Checks the `<link rel="canonical">` tag on each page
- Skips pages where the canonical URL differs from the current URL
- Prevents downloading duplicate content (e.g., print versions, mobile versions)
- Logs skipped pages with their canonical URLs for transparency

This is especially useful for sites that have multiple URLs pointing to the same
content.

### Content Deduplication

By default, the scraper detects and skips pages with duplicate content based on
text-only checksums:

```bash
# Content deduplication is enabled by default
m1f-scrape https://example.com -o ./html

# Disable content deduplication if needed
m1f-scrape https://example.com -o ./html --ignore-duplicates
```

This feature:

- Enabled by default to avoid downloading duplicate content
- Extracts plain text from HTML (removes all tags, scripts, styles)
- Calculates SHA-256 checksum of the normalized text
- Skips pages with identical text content
- Useful for sites with multiple URLs serving the same content
- Works together with canonical URL checking for thorough deduplication

The scraper now has three levels of duplicate prevention, applied in this order:

1. **GET parameter normalization** (default: disabled) - Use
   `--ignore-get-params` to enable
2. **Canonical URL checking** (default: enabled) - Respects
   `<link rel="canonical">`
3. **Content deduplication** (default: enabled) - Compares text content

**Important**: All deduplication data is stored in the SQLite database
(`scrape_tracker.db`), which means:

- Content checksums persist across resume operations
- Canonical URL information is saved for each page
- The deduplication works correctly even when resuming interrupted scrapes
- Memory-efficient: checksums are queried from database, not loaded into memory
- Scales to large websites without excessive memory usage

### Subdirectory Restriction

When you specify a URL with a path, the scraper automatically restricts crawling
to that subdirectory:

```bash
# Only scrape pages under /docs subdirectory
m1f-scrape https://example.com/docs -o ./docs_only

# Only scrape API documentation pages
m1f-scrape https://api.example.com/v2/reference -o ./api_docs

# This will NOT scrape /products, /blog, etc. - only /tutorials/*
m1f-scrape https://learn.example.com/tutorials -o ./tutorials_only
```

### Controlled Crawling

```bash
# Limit crawl depth for shallow scraping
m1f-scrape https://blog.example.com -o ./blog \
  --max-depth 2 \
  --max-pages 20

# Slow crawling to be respectful
m1f-scrape https://example.com -o ./html \
  --request-delay 2.0 \
  --concurrent-requests 2
```

### Custom Configuration

```bash
# Use custom user agent
m1f-scrape https://example.com -o ./html \
  --user-agent "MyBot/1.0 (Compatible)"

# Use scraper-specific configuration
m1f-scrape https://example.com -o ./html \
  --scraper scrapy \
  --scraper-config ./scrapy-settings.yaml
```

## Output Structure

Downloaded files are organized to mirror the website structure:

```
output_directory/
├── scrape_tracker.db         # SQLite database for resume functionality
├── example.com/
│   ├── index.html
│   ├── index.meta.json
│   ├── about/
│   │   ├── index.html
│   │   └── index.meta.json
│   ├── blog/
│   │   ├── post1/
│   │   │   ├── index.html
│   │   │   └── index.meta.json
│   │   └── post2/
│   │       ├── index.html
│   │       └── index.meta.json
│   └── contact/
│       ├── index.html
│       └── index.meta.json
```

### Metadata Files

Each HTML file has an accompanying `.meta.json` file containing:

```json
{
  "url": "https://example.com/about/",
  "title": "About Us - Example",
  "encoding": "utf-8",
  "status_code": 200,
  "headers": {
    "Content-Type": "text/html; charset=utf-8",
    "Last-Modified": "2024-01-15T10:30:00Z"
  },
  "metadata": {
    "description": "Learn more about Example company",
    "og:title": "About Us",
    "canonical": "https://example.com/about/"
  }
}
```

## Integration with m1f Workflow

webscraper is designed as the first step in a workflow to provide documentation
to LLMs:

```bash
# Step 1: Download documentation website
m1f-scrape https://docs.example.com -o ./html_files

# Step 2: Analyze HTML structure
m1f-html2md analyze ./html_files/*.html --suggest-selectors

# Step 3: Convert to Markdown
m1f-html2md convert ./html_files -o ./markdown \
  --content-selector "main.content" \
  --ignore-selectors "nav" ".sidebar"

# Step 4: Bundle for LLM consumption
m1f -s ./markdown -o ./docs_bundle.txt \
  --remove-scraped-metadata

# Now docs_bundle.txt contains all documentation in a single file
# that can be provided to Claude or other LLMs for analysis
```

### Complete Documentation Download Example

```bash
# Download React documentation for LLM analysis
m1f-scrape https://react.dev/learn -o ./react_docs \
  --max-pages 100 \
  --max-depth 3

# Convert to clean Markdown
m1f-html2md convert ./react_docs -o ./react_md \
  --content-selector "article" \
  --ignore-selectors "nav" "footer" ".sidebar"

# Create single file for LLM
m1f -s ./react_md -o ./react_documentation.txt

# Now you can provide react_documentation.txt to Claude:
# "Here is the React documentation: <contents of react_documentation.txt>"
```

## Resume Functionality

The scraper supports interrupting and resuming downloads, making it ideal for
large websites or unreliable connections.

### How It Works

- **SQLite Database**: Creates `scrape_tracker.db` in the output directory to
  track:
  - URL of each scraped page
  - HTTP status code and target filename
  - Timestamp and error messages (if any)
- **Progress Display**: Shows real-time progress in verbose mode:
  ```
  Processing: https://example.com/page1 (page 1)
  Processing: https://example.com/page2 (page 2)
  ```
- **Graceful Interruption**: Press Ctrl+C to interrupt cleanly:
  ```
  Press Ctrl+C to interrupt and resume later
  ^C
  ⚠️  Scraping interrupted by user
  Run the same command again to resume where you left off
  ```

### Resume Example

```bash
# Start scraping with verbose mode
m1f-scrape https://docs.example.com -o ./docs --max-pages 100 -v

# Interrupt with Ctrl+C when needed
# Resume by running the exact same command:
m1f-scrape https://docs.example.com -o ./docs --max-pages 100 -v

# You'll see:
# Resuming crawl - found 25 previously scraped URLs
# Populating queue from previously scraped pages...
# Found 187 URLs to visit after analyzing scraped pages
# Processing: https://docs.example.com/new-page (page 26)
```

### Database Inspection

```bash
# Show scraping statistics
m1f-scrape -o docs/ --show-db-stats

# View all scraped URLs with status codes
m1f-scrape -o docs/ --show-scraped-urls

# Check for errors
m1f-scrape -o docs/ --show-errors

# Combine multiple queries
m1f-scrape -o docs/ --show-db-stats --show-errors
```

## Best Practices

1. **Respect robots.txt**: The tool automatically respects robots.txt files
2. **Use appropriate delays**: Set `--request-delay` to avoid overwhelming
   servers (default: 15 seconds)
3. **Limit concurrent requests**: Use `--concurrent-requests` responsibly
   (default: 2 connections)
4. **Test with small crawls**: Start with `--max-pages 10` to test your settings
5. **Check output**: Use `--list-files` to verify what was downloaded
6. **Use verbose mode**: Add `-v` flag to see progress and resume information
7. **Keep commands consistent**: Use the exact same command to resume a session

## Dealing with Cloudflare Protection

Many websites use Cloudflare or similar services to protect against bots. The
scraper now includes conservative defaults to help avoid detection:

### Default Conservative Settings

- **Request delay**: 15 seconds between requests
- **Concurrent requests**: 2 simultaneous connections
- **HTTrack backend**: Limited to 0.5 connections/second max
- **Bandwidth limiting**: 100KB/s for HTTrack backend
- **Robots.txt**: Always respected (cannot be disabled)

### For Heavy Cloudflare Protection

For heavily protected sites, manually set very conservative values:

```bash
m1f-scrape https://protected-site.com -o ./output \
  --request-delay 30 \
  --concurrent-requests 1 \
  --max-pages 50 \
  --scraper httrack
```

### Cloudflare Avoidance Tips

1. **Start conservative**: Begin with 30-60 second delays
2. **Use realistic user agents**: The default is a current Chrome browser
3. **Limit scope**: Download only what you need with `--max-pages`
4. **Single connection**: Use `--concurrent-requests 1` for sensitive sites
5. **Respect robots.txt**: Always enabled by default
6. **Add randomness**: Consider adding random delays in custom scripts

### When Cloudflare Still Blocks

If conservative settings don't work:

1. **Try Playwright backend**: Uses real browser automation

   ```bash
   m1f-scrape https://site.com -o ./output --scraper playwright
   ```

2. **Manual download**: Some sites require manual browsing
3. **API access**: Check if the site offers an API
4. **Contact site owner**: Request permission or access

## Troubleshooting

### No files downloaded

- Check if the website blocks automated access
- Try a different scraper backend
- Verify the URL is accessible

### Incomplete downloads

- Increase `--max-depth` if pages are deeply nested
- Increase `--max-pages` if hitting the limit
- Check for JavaScript-rendered content (use Playwright)

### Encoding issues

- The tool automatically detects encoding
- Check `.meta.json` files for encoding information
- Use html2md with proper encoding settings for conversion

## See Also

- [html2md Documentation](../03_html2md/30_html2md.md) - For converting
  downloaded HTML to Markdown
- [m1f Documentation](../01_m1f/00_m1f.md) - For bundling converted content for
  LLMs

======= docs/04_scrape/41_html2md_scraper_backends.md ======
# Web Scraper Backends

The HTML2MD tool supports multiple web scraping backends, each optimized for
different use cases. Choose the right backend based on your specific needs for
optimal results.

## Overview

The HTML2MD scraper backend system provides flexibility to choose the most
appropriate tool for your web scraping needs:

- **Static websites**: BeautifulSoup4 (default) - Fast and lightweight
- **Complete mirroring**: HTTrack - Professional website copying
- **JavaScript-heavy sites**: Playwright (coming soon)
- **Large-scale scraping**: Scrapy (coming soon)
- **Performance-critical**: httpx + selectolax (coming soon)

## Available Backends

### BeautifulSoup4 (Default)

BeautifulSoup4 is the default backend, ideal for scraping static HTML websites.

**Pros:**

- Easy to use and lightweight
- Fast for simple websites
- Good encoding detection
- Excellent HTML parsing capabilities

**Cons:**

- No JavaScript support
- Basic crawling capabilities
- Single-threaded by default

**Usage:**

```bash
# Default backend (no need to specify)
m1f-scrape https://example.com -o output/

# Explicitly specify BeautifulSoup
m1f-scrape https://example.com -o output/ --scraper beautifulsoup

# With custom options
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --max-depth 3 \
  --max-pages 100 \
  --request-delay 1.0
```

### HTTrack

HTTrack is a professional website copier that creates complete offline mirrors.

**Pros:**

- Complete website mirroring
- Preserves directory structure
- Handles complex websites well
- Resume interrupted downloads
- Automatic robots.txt compliance

**Cons:**

- Requires system installation
- Less flexible for custom parsing
- Larger resource footprint

**Installation:**

```bash
# Ubuntu/Debian
sudo apt-get install httrack

# macOS
brew install httrack

# Windows
# Download from https://www.httrack.com/
```

**Usage:**

```bash
m1f-scrape https://example.com -o output/ --scraper httrack

# With HTTrack-specific options
m1f-scrape https://example.com -o output/ \
  --scraper httrack \
  --max-depth 5 \
  --concurrent-requests 8
```

## Configuration Options

### Command Line Options

Common options for all scrapers:

```bash
--scraper BACKEND           # Choose scraper backend (beautifulsoup, bs4, httrack,
                           # selectolax, httpx, scrapy, playwright)
--max-depth N               # Maximum crawl depth (default: 5)
--max-pages N               # Maximum pages to crawl (default: 1000)
--request-delay SECONDS     # Delay between requests (default: 15.0)
--concurrent-requests N     # Number of concurrent requests (default: 2)
--user-agent STRING         # Custom user agent
--scraper-config PATH       # Path to scraper-specific config file (YAML/JSON)
--list-files                # List all downloaded files after completion
-v, --verbose               # Enable verbose output
-q, --quiet                 # Suppress all output except errors
--version                   # Show version information
```

Note: robots.txt is always respected and cannot be disabled.

### Configuration File

You can specify scraper-specific settings in a YAML or JSON configuration file:

```yaml
# beautifulsoup-config.yaml
parser: "html.parser" # Options: "html.parser", "lxml", "html5lib"
features: "lxml"
encoding: "auto" # Or specific encoding like "utf-8"
```

```yaml
# httrack-config.yaml
mirror_options:
  - "--assume-insecure" # For HTTPS issues
  - "--robots=3" # Strict robots.txt compliance
extra_filters:
  - "+*.css"
  - "+*.js"
  - "-*.zip"
```

Use with:

```bash
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config beautifulsoup-config.yaml
```

### Backend-Specific Configuration

Each backend can have specific configuration options:

#### BeautifulSoup Configuration

Create a `beautifulsoup.yaml`:

```yaml
scraper_config:
  parser: "lxml" # Options: "html.parser", "lxml", "html5lib"
  features: "lxml"
  encoding: "auto" # Or specific encoding like "utf-8"
```

#### HTTrack Configuration

Create a `httrack.yaml`:

```yaml
scraper_config:
  mirror_options:
    - "--assume-insecure" # For HTTPS issues
    - "--robots=3" # Strict robots.txt compliance
  extra_filters:
    - "+*.css"
    - "+*.js"
    - "-*.zip"
```

## Use Cases and Recommendations

### Static Documentation Sites

For sites with mostly static HTML content:

```bash
m1f-scrape https://docs.example.com -o docs/ \
  --scraper beautifulsoup \
  --max-depth 10 \
  --request-delay 0.2
```

### Complete Website Backup

For creating a complete offline mirror:

```bash
m1f-scrape https://example.com -o backup/ \
  --scraper httrack \
  --max-pages 10000
```

### Rate-Limited APIs

For sites with strict rate limits:

```bash
m1f-scrape https://api.example.com/docs -o api-docs/ \
  --scraper beautifulsoup \
  --request-delay 2.0 \
  --concurrent-requests 1
```

## Troubleshooting

### BeautifulSoup Issues

**Encoding Problems:**

```bash
# Create a config file with UTF-8 encoding
echo 'encoding: utf-8' > bs-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config bs-config.yaml
```

**Parser Issues:**

```bash
# Create a config file with different parser
echo 'parser: html5lib' > bs-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config bs-config.yaml
```

### HTTrack Issues

**SSL Certificate Problems:**

```bash
# Create a config file to ignore SSL errors (use with caution)
echo 'mirror_options: ["--assume-insecure"]' > httrack-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper httrack \
  --scraper-config httrack-config.yaml
```

**Incomplete Downloads:** HTTrack creates a cache that allows resuming. Check
the `.httrack` directory in your output folder.

## Performance Comparison

| Backend       | Speed     | Memory Usage | JavaScript | Accuracy  |
| ------------- | --------- | ------------ | ---------- | --------- |
| BeautifulSoup | Fast      | Low          | No         | High      |
| HTTrack       | Medium    | Medium       | No         | Very High |
| Selectolax    | Fastest   | Very Low     | No         | Medium    |
| Scrapy        | Very Fast | Low-Medium   | No         | High      |
| Playwright    | Slow      | High         | Yes        | Very High |

## Additional Backends

### Selectolax (httpx + selectolax)

The fastest HTML parsing solution using httpx for networking and selectolax for
parsing.

**Pros:**

- Blazing fast performance (C-based parser)
- Minimal memory footprint
- Excellent for large-scale simple scraping
- Modern async HTTP/2 support

**Cons:**

- No JavaScript support
- Limited parsing features compared to BeautifulSoup
- Less mature ecosystem

**Installation:**

```bash
pip install httpx selectolax
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper selectolax

# With custom configuration
m1f-scrape https://example.com -o output/ \
  --scraper selectolax \
  --concurrent-requests 20 \
  --request-delay 0.1

# Using httpx alias
m1f-scrape https://example.com -o output/ --scraper httpx
```

### Scrapy

Industrial-strength web scraping framework with advanced features.

**Pros:**

- Battle-tested in production
- Built-in retry logic and error handling
- Auto-throttle based on server response
- Extensive middleware system
- Distributed crawling support
- Advanced caching and queuing

**Cons:**

- Steeper learning curve
- Heavier than simple scrapers
- Twisted-based (different async model)

**Installation:**

```bash
pip install scrapy
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper scrapy

# With auto-throttle and caching
m1f-scrape https://example.com -o output/ \
  --scraper scrapy \
  --scraper-config scrapy.yaml

# Large-scale crawling
m1f-scrape https://example.com -o output/ \
  --scraper scrapy \
  --max-pages 10000 \
  --concurrent-requests 16
```

### Playwright

Browser automation for JavaScript-heavy websites and SPAs.

**Pros:**

- Full JavaScript execution
- Handles SPAs and dynamic content
- Multiple browser engines (Chromium, Firefox, WebKit)
- Screenshot and PDF generation
- Mobile device emulation
- Network interception

**Cons:**

- High resource usage
- Slower than HTML-only scrapers
- Requires browser installation

**Installation:**

```bash
pip install playwright
playwright install  # Install browser binaries
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper playwright

# With custom browser settings
m1f-scrape https://example.com -o output/ \
  --scraper playwright \
  --scraper-config playwright.yaml

# For SPA with wait conditions
m1f-scrape https://spa-example.com -o output/ \
  --scraper playwright \
  --request-delay 2.0 \
  --concurrent-requests 2
```

## API Usage

You can also use the scraper backends programmatically:

```python
import asyncio
from tools.html2md.scrapers import create_scraper, ScraperConfig

async def scrape_example():
    # Configure scraper
    config = ScraperConfig(
        max_depth=5,
        max_pages=100,
        request_delay=0.5
    )

    # Create scraper instance
    scraper = create_scraper('beautifulsoup', config)

    # Scrape single page
    async with scraper:
        page = await scraper.scrape_url('https://example.com')
        print(f"Title: {page.title}")
        print(f"Content length: {len(page.content)}")

    # Scrape entire site
    async with scraper:
        async for page in scraper.scrape_site('https://example.com'):
            print(f"Scraped: {page.url}")

# Run the example
asyncio.run(scrape_example())
```

## Contributing

To add a new scraper backend:

1. Create a new file in `tools/html2md/scrapers/`
2. Inherit from `WebScraperBase`
3. Implement required methods: `scrape_url()` and `scrape_site()`
4. Register in `SCRAPER_REGISTRY` in `__init__.py`
5. Add tests in `tests/html2md/test_scrapers.py`
6. Update this documentation

See the BeautifulSoup implementation for a complete example.

======= docs/05_development/README.md ======
# Development Documentation

This section contains guides and references for developers working on or with
the m1f toolkit.

## Contents

- [**56_git_hooks_setup.md**](./56_git_hooks_setup.md) - Git hooks for automated
  bundling

## Quick Links

- [Main m1f Documentation](../01_m1f/)
- [s1f Documentation](../02_s1f/)
- [html2md Documentation](../03_html2md/)
- [Scraper Documentation](../04_scrape/)

======= docs/05_development/56_git_hooks_setup.md ======
# m1f Git Hooks Setup Guide

This guide explains how to set up Git hooks for automatic m1f bundle generation
and code formatting in your projects.

## Overview

m1f provides two types of Git pre-commit hooks:

1. **Internal Hook** - For m1f project development

   - Formats Python files with Black
   - Formats Markdown files with Prettier
   - Runs m1f auto-bundle

2. **External Hook** - For projects using m1f
   - Runs m1f auto-bundle when `.m1f.config.yml` exists

Both hooks support Linux, macOS, and Windows platforms.

## Features

- **Automatic bundle generation** - Bundles are regenerated on every commit
- **Code formatting** (internal hook only) - Python and Markdown files are
  auto-formatted
- **Cross-platform support** - Works on Linux, macOS, and Windows
- **Fail-safe commits** - Commits are blocked if bundle generation fails
- **Auto-staging** - Modified files are automatically staged
- **Smart detection** - Automatically detects project type and suggests
  appropriate hook

## Installation

### Prerequisites

You must have m1f installed locally before setting up Git hooks:

```bash
# Clone m1f repository
git clone https://github.com/franz-agency/m1f.git
cd m1f

# Install m1f using the installation script
# Linux/macOS:
./scripts/install.sh

# Windows PowerShell:
.\scripts\install.ps1
```

### Quick Installation

#### Linux/macOS

```bash
# Run from your project directory (not the m1f directory)
bash /path/to/m1f/scripts/install-git-hooks.sh
```

#### Windows (PowerShell)

```powershell
# Run from your project directory (not the m1f directory)
& C:\path\to\m1f\scripts\install-git-hooks.ps1
```

### Installation Process

The installer will:

1. **Detect your project type**:

   - If in the m1f project: Offers both internal and external hooks
   - If in another project: Installs external hook

2. **Choose the appropriate hook**:

   - Internal: For m1f contributors (includes formatters)
   - External: For m1f users (auto-bundle only)

3. **Install platform-specific version**:
   - Linux/macOS: Bash script
   - Windows: PowerShell script with Git wrapper

### Manual Installation

If you prefer manual installation:

#### External Hook (for projects using m1f)

```bash
# Create the hook file
cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
# m1f Git Pre-Commit Hook (External Projects)

if [ ! -f ".m1f.config.yml" ]; then
    echo "No .m1f.config.yml found. Skipping m1f auto-bundle."
    exit 0
fi

if command -v m1f-update &> /dev/null; then
    echo "Running m1f auto-bundle..."
    if m1f-update --quiet; then
        echo "✓ Auto-bundle completed"
        find . -path "*/m1f/*.txt" -type f | while read -r file; do
            git add "$file"
        done
    else
        echo "✗ Auto-bundle failed"
        exit 1
    fi
fi
exit 0
EOF

# Make it executable
chmod +x .git/hooks/pre-commit
```

## How It Works

### External Hook Workflow

1. Checks if `.m1f.config.yml` exists
2. Verifies m1f is available in PATH
3. Runs `m1f-update` to generate bundles
4. Automatically stages generated bundle files
5. Allows commit to proceed

### Internal Hook Workflow (m1f project only)

1. Formats staged Python files with Black
2. Formats staged Markdown files with Prettier
3. Runs m1f auto-bundle
4. Re-stages all modified files
5. Shows warning about modified files

## Usage Examples

### Normal Usage

```bash
# Make changes to your code
vim src/feature.py

# Stage changes
git add src/feature.py

# Commit - bundles are generated automatically
git commit -m "feat: add new feature"
```

### Skip Hook When Needed

```bash
# Skip all pre-commit hooks
git commit --no-verify -m "wip: quick save"
```

### Check What the Hook Does

```bash
# See hook output without committing
git add .
git commit --dry-run
```

## Platform-Specific Notes

### Windows

On Windows, the installer creates:

- `.git/hooks/pre-commit` - Bash wrapper for Git
- `.git/hooks/pre-commit.ps1` - PowerShell script with actual logic

Both files are needed for proper operation.

### Linux/macOS

The hook is a standard bash script that works with Git's hook system.

## Troubleshooting

### Hook Not Running

1. **Check if hook exists**:

   ```bash
   ls -la .git/hooks/pre-commit*
   ```

2. **Check if executable** (Linux/macOS):

   ```bash
   chmod +x .git/hooks/pre-commit
   ```

3. **Check Git version**:
   ```bash
   git --version  # Should be 2.9+
   ```

### m1f Command Not Found

m1f must be installed using the official installation scripts:

```bash
# Clone m1f if you haven't already
git clone https://github.com/franz-agency/m1f.git
cd m1f

# Install using the appropriate script
# Linux/macOS:
./scripts/install.sh

# Windows PowerShell:
.\scripts\install.ps1
```

The installation script will:

- Create a Python virtual environment
- Install all dependencies
- Add m1f to your PATH
- Set up command aliases

After installation, restart your terminal or reload your shell configuration:

```bash
# Linux/macOS
source ~/.bashrc  # or ~/.zshrc for zsh

# Windows PowerShell
. $PROFILE
```

### Bundle Generation Fails

1. **Run manually to see errors**:

   ```bash
   m1f-update
   ```

2. **Check config syntax**:

   ```bash
   # Validate YAML syntax
   python -c "import yaml; yaml.safe_load(open('.m1f.config.yml'))"
   ```

3. **Check file permissions**:
   ```bash
   # Ensure m1f can write to output directory
   ls -la m1f/
   ```

### Formatter Issues (Internal Hook)

**Black not found**:

```bash
pip install black
```

**Prettier not found**:

```bash
npm install -g prettier
```

## Uninstallation

### Linux/macOS

```bash
rm .git/hooks/pre-commit
```

### Windows

```powershell
Remove-Item .git\hooks\pre-commit
Remove-Item .git\hooks\pre-commit.ps1
```

## Best Practices

1. **Commit bundle files** - Include `m1f/` directory in version control
2. **Review changes** - Check bundle diffs before committing
3. **Keep bundles small** - Use focused bundles for better performance
4. **Use descriptive names** - Name bundles clearly (e.g., `api-docs`,
   `frontend-code`)
5. **Document dependencies** - Note formatter requirements in your README

## Configuration Examples

### Basic Project Setup

```yaml
# .m1f.config.yml
bundles:
  docs:
    description: "Project documentation"
    output: "m1f/docs.txt"
    sources:
      - path: "docs"
        include_extensions: [".md", ".rst"]

  code:
    description: "Source code"
    output: "m1f/code.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js"]
```

### Advanced Setup with Groups

```yaml
# .m1f.config.yml
bundles:
  api-docs:
    description: "API documentation"
    group: "documentation"
    output: "m1f/api-docs.txt"
    sources:
      - path: "docs/api"

  api-code:
    description: "API implementation"
    group: "backend"
    output: "m1f/api-code.txt"
    sources:
      - path: "src/api"
```

## Integration with Development Tools

### VS Code

Add to `.vscode/settings.json`:

```json
{
  "git.enableCommitSigning": true,
  "files.exclude": {
    "m1f/**/*.txt": false
  }
}
```

### Pre-commit Framework

If using [pre-commit](https://pre-commit.com/):

```yaml
# .pre-commit-config.yaml
repos:
  - repo: local
    hooks:
      - id: m1f-bundle
        name: m1f auto-bundle
        entry: m1f-update
        language: system
        pass_filenames: false
        always_run: true
```

## CI/CD Integration

While the Git hook handles local development, you should also run m1f in CI/CD:

### GitHub Actions

```yaml
- name: Setup Python
  uses: actions/setup-python@v4
  with:
    python-version: "3.10"

- name: Clone and install m1f
  run: |
    git clone https://github.com/franz-agency/m1f.git
    cd m1f
    source ./scripts/install.sh
    cd ..

- name: Generate bundles
  run: |
    source m1f/.venv/bin/activate
    m1f-update

- name: Check for changes
  run: |
    git diff --exit-code || (echo "Bundles out of sync!" && exit 1)
```

### GitLab CI

```yaml
bundle-check:
  stage: test
  before_script:
    - git clone https://github.com/franz-agency/m1f.git
    - cd m1f && source ./scripts/install.sh && cd ..
  script:
    - source m1f/.venv/bin/activate
    - m1f-update
    - git diff --exit-code
```

## See Also

- [Auto-Bundle Guide](../01_m1f/20_auto_bundle_guide.md) - Complete auto-bundle
  documentation
- [Configuration Reference](../01_m1f/10_m1f_presets.md) - Detailed
  configuration options
- [Quick Reference](../01_m1f/99_quick_reference.md) - Common m1f commands

======= docs/06_research/README.md ======
# m1f-research Documentation

AI-powered research tool that extends m1f with intelligent web research
capabilities.

## Documentation Files

- [60_research_overview.md](60_research_overview.md) - Overview and quick start
- [62_job_management.md](62_job_management.md) - Job persistence and filtering
- [63_cli_reference.md](63_cli_reference.md) - Complete command reference
- [64_api_reference.md](64_api_reference.md) - Developer documentation
- [65_architecture.md](65_architecture.md) - Technical architecture
- [66_examples.md](66_examples.md) - Real-world usage examples
- [67_cli_improvements.md](67_cli_improvements.md) - Enhanced CLI features and
  UX

## Quick Start

```bash
# Basic research
m1f-research "python async programming"

# List all jobs
m1f-research --list-jobs

# Resume a job
m1f-research --resume abc123
```

For detailed documentation, see the numbered files above.

======= docs/06_research/60_research_overview.md ======
# m1f-research

AI-powered research tool that automatically finds, scrapes, and bundles
information on any topic.

## Overview

m1f-research extends the m1f toolkit with intelligent research capabilities. It
uses LLMs to:

- Find relevant URLs for any research topic
- Scrape and convert web content to clean Markdown
- Analyze content for relevance and extract key insights
- Create organized research bundles

## Quick Start

```bash
# Basic research
m1f-research "microservices best practices"

# Research with more sources
m1f-research "react state management" --urls 30 --scrape 15

# List all research jobs
m1f-research --list-jobs

# Resume a job
m1f-research --resume abc123

# Filter jobs by date
m1f-research --list-jobs --date 2025-07

# Search for specific topics
m1f-research --list-jobs --search "python"
```

## Installation

m1f-research is included with the m1f toolkit. Ensure you have:

1. m1f installed with the research extension
2. An API key for your chosen LLM provider:
   - Claude: Set `ANTHROPIC_API_KEY`
   - Gemini: Set `GOOGLE_API_KEY`

## Features

### 🗄️ Job Management

- **Persistent Jobs**: All research tracked in SQLite database
- **Resume Support**: Continue interrupted research
- **Advanced Filtering**: Search by date, query term
- **Pagination**: Handle large job lists efficiently

### 🔍 Intelligent Search

- Uses LLMs to find high-quality, relevant URLs
- Manual URL support via `--urls-file`
- Focuses on authoritative sources
- Mixes different content types

### 📥 Smart Scraping

- **Per-host delays**: Only after 3+ requests to same host
- Concurrent scraping across different hosts
- Automatic HTML to Markdown conversion
- Content deduplication via checksums

### 🧠 Content Analysis

- Relevance scoring (0-10 scale)
- Key points extraction
- Content summarization
- Duplicate detection

### 📦 Organized Output

- **Hierarchical structure**: YYYY/MM/DD/job_id/
- Prominent bundle files (📚_RESEARCH_BUNDLE.md)
- Clean Markdown output
- Symlink to latest research

## Usage Examples

### Basic Research

```bash
# Research a programming topic
m1f-research "golang error handling"

# Output saved to: ./research-data/golang-error-handling-20240120-143022/
```

### Advanced Options

```bash
# Specify output location and name
m1f-research "kubernetes security" \
  --output ./research \
  --name k8s-security

# Use a specific template
m1f-research "react hooks" --template technical

# Skip analysis for faster results
m1f-research "python asyncio" --no-analysis

# Dry run to see what would happen
m1f-research "rust ownership" --dry-run
```

### Configuration File

```bash
# Use a custom configuration
m1f-research "database optimization" --config research.yml
```

## Configuration

### Key Command Line Options

| Option             | Description              | Default |
| ------------------ | ------------------------ | ------- |
| **Research**       |                          |         |
| `--urls`           | Number of URLs to find   | 20      |
| `--scrape`         | Number of URLs to scrape | 10      |
| `--urls-file`      | File with manual URLs    | None    |
| **Job Management** |                          |         |
| `--resume`         | Resume job by ID         | None    |
| `--list-jobs`      | List all jobs            | False   |
| `--status`         | Show job details         | None    |
| **Filtering**      |                          |         |
| `--search`         | Search jobs by query     | None    |
| `--date`           | Filter by date           | None    |
| `--limit`          | Pagination limit         | None    |
| `--offset`         | Pagination offset        | 0       |
| **Cleanup**        |                          |         |
| `--clean-raw`      | Clean job raw data       | None    |
| `--clean-all-raw`  | Clean all raw data       | False   |

See [63_cli_reference.md](63_cli_reference.md) for complete option list.

### Configuration File (.m1f.config.yml)

```yaml
research:
  # LLM settings
  llm:
    provider: claude
    model: claude-3-opus-20240229
    temperature: 0.7

  # Default counts
  defaults:
    url_count: 30
    scrape_count: 15

  # Scraping behavior
  scraping:
    timeout_range: "1-3"
    max_concurrent: 5
    retry_attempts: 2

  # Content analysis
  analysis:
    relevance_threshold: 7.0
    min_content_length: 100
    prefer_code_examples: true

  # Output settings
  output:
    directory: ./research-data
    create_summary: true
    create_index: true

  # Research templates
  templates:
    technical:
      description: "Technical documentation and code"
      url_count: 30
      analysis_focus: implementation

    academic:
      description: "Academic papers and theory"
      url_count: 20
      analysis_focus: theory
```

## Templates

Pre-configured templates optimize research for different needs:

### technical

- Focuses on implementation details
- Prioritizes code examples
- Higher URL count for comprehensive coverage

### academic

- Emphasizes theoretical content
- Looks for citations and references
- Filters for authoritative sources

### tutorial

- Searches for step-by-step guides
- Prioritizes beginner-friendly content
- Includes examples and exercises

### general (default)

- Balanced approach
- Mixes different content types
- Suitable for most topics

## Output Structure

Research data uses hierarchical date-based organization:

```
./research-data/
├── research_jobs.db              # Main job database
├── latest_research.md           # Symlink to latest bundle
└── 2025/
    └── 07/
        └── 23/
            └── abc123_topic-name/
                ├── research.db           # Job-specific database
                ├── 📚_RESEARCH_BUNDLE.md # Main bundle
                ├── 📊_EXECUTIVE_SUMMARY.md # Summary
                ├── metadata.json         # Job metadata
                └── search_results.json   # Found URLs
```

### Bundle Format

```markdown
# Research: [Your Topic]

Generated on: 2024-01-20 14:30:22 Total sources: 10

---

## Table of Contents

1. [Source Title 1](#1-source-title-1)
2. [Source Title 2](#2-source-title-2) ...

---

## Summary

[Research summary and top sources]

---

## 1. Source Title

**Source:** https://example.com/article **Relevance:** 8.5/10

### Key Points:

- Important point 1
- Important point 2

### Content:

[Full content in Markdown]

---
```

## Providers

### Claude (Anthropic)

- Default provider
- Best for: Comprehensive research, nuanced analysis
- Set: `ANTHROPIC_API_KEY`

### Gemini (Google)

- Fast and efficient
- Best for: Quick research, technical topics
- Set: `GOOGLE_API_KEY`

### CLI Tools

- Use local tools like `gemini-cli`
- Best for: Privacy, offline capability
- Example: `--provider gemini-cli`

## Tips

1. **Start broad, then narrow**: Use more URLs initially, let analysis filter
2. **Use templates**: Match template to your research goal
3. **Interactive mode**: Great for exploratory research
4. **Combine with m1f**: Feed research bundles into m1f for AI analysis

## Troubleshooting

### No API Key

```
Error: API key not set for ClaudeProvider
```

Solution: Set environment variable or pass in config

### Rate Limiting

```
Error: 429 Too Many Requests
```

Solution: Reduce `--concurrent` or increase timeout range

### Low Quality Results

- Increase `--urls` for more options
- Adjust `relevance_threshold` in config
- Try different `--template`

## Documentation

- [62_job_management.md](62_job_management.md) - Job persistence and filtering
  guide
- [63_cli_reference.md](63_cli_reference.md) - Complete CLI reference
- [64_api_reference.md](64_api_reference.md) - Developer API documentation
- [65_architecture.md](65_architecture.md) - Technical architecture details
- [66_examples.md](66_examples.md) - Real-world usage examples

## Future Features

- Multi-source research (GitHub, arXiv, YouTube)
- Knowledge graph building
- Research collaboration
- Export to various formats
- Job tagging system

## Contributing

m1f-research is part of the m1f project. Contributions welcome!

- Report issues: [GitHub Issues](https://github.com/m1f/m1f/issues)
- Submit PRs: Follow m1f contribution guidelines
- Request features: Open a discussion

======= docs/06_research/62_job_management.md ======
# Job Management in m1f-research

m1f-research uses a SQLite-based job management system that tracks all research
tasks, enabling persistence, resume functionality, and advanced filtering.

## Overview

Every research task creates a **job** with:

- Unique job ID
- SQLite databases for tracking
- Hierarchical directory structure
- Full resume capability
- Advanced search and filtering

## Job Structure

### Directory Layout

```
research-data/
├── research_jobs.db          # Main job tracking database
├── latest_research.md        # Symlink to most recent bundle
└── 2025/
    └── 07/
        └── 23/
            └── abc123_query-name/
                ├── research.db           # Job-specific database
                ├── 📚_RESEARCH_BUNDLE.md # Main research bundle
                ├── 📊_EXECUTIVE_SUMMARY.md # Executive summary
                └── metadata.json         # Job metadata
```

### Database Architecture

**Main Database (`research_jobs.db`)**

- Tracks all jobs across the system
- Stores job metadata and statistics
- Enables cross-job queries and filtering

**Per-Job Database (`research.db`)**

- URL tracking and status
- Content storage (markdown)
- Analysis results
- Filtering decisions

## Job Management Commands

### Listing Jobs

```bash
# List all jobs
m1f-research --list-jobs

# List with pagination
m1f-research --list-jobs --limit 10 --offset 20

# Filter by date
m1f-research --list-jobs --date 2025-07-23  # Specific day
m1f-research --list-jobs --date 2025-07     # Specific month
m1f-research --list-jobs --date 2025        # Specific year

# Search by query term
m1f-research --list-jobs --search "react"
m1f-research --list-jobs --search "tailwind"

# Combine filters
m1f-research --list-jobs --date 2025-07 --search "python" --limit 5
```

### Viewing Job Details

```bash
# Show detailed job status
m1f-research --status abc123
```

Output includes:

- Job ID and query
- Creation/update timestamps
- URL statistics
- Bundle availability
- Output directory

### Resuming Jobs

```bash
# Resume an interrupted job
m1f-research --resume abc123

# Add more URLs to existing job
m1f-research --resume abc123 --urls-file additional-urls.txt
```

## Advanced Filtering

### Pagination

Use `--limit` and `--offset` for large job lists:

```bash
# First page (10 items)
m1f-research --list-jobs --limit 10

# Second page
m1f-research --list-jobs --limit 10 --offset 10

# Third page
m1f-research --list-jobs --limit 10 --offset 20
```

### Date Filtering

Filter jobs by creation date:

```bash
# Jobs from today
m1f-research --list-jobs --date 2025-07-23

# Jobs from this month
m1f-research --list-jobs --date 2025-07

# Jobs from this year
m1f-research --list-jobs --date 2025
```

### Search Filtering

Find jobs by query content:

```bash
# Find all React-related research
m1f-research --list-jobs --search "react"

# Case-insensitive search
m1f-research --list-jobs --search "PYTHON"
```

Search terms are highlighted in the output for easy identification.

## Data Cleanup

### Cleaning Individual Jobs

Remove raw HTML data while preserving analysis:

```bash
# Clean specific job
m1f-research --clean-raw abc123
```

This removes:

- Raw HTML files
- Temporary download data

This preserves:

- Markdown content
- Analysis results
- Research bundles
- Job metadata

### Bulk Cleanup

Clean all jobs at once:

```bash
# Clean all raw data (with confirmation)
m1f-research --clean-all-raw
```

**Warning**: This action cannot be undone. You'll be prompted to confirm.

## Job Status

Jobs can have the following statuses:

| Status      | Description               |
| ----------- | ------------------------- |
| `active`    | Job is currently running  |
| `completed` | Job finished successfully |
| `failed`    | Job encountered errors    |

## Manual URL Management

Add URLs from a file:

```bash
# Create URL file
cat > my-urls.txt << EOF
https://example.com/article1
https://example.com/article2
EOF

# Start new job with URLs
m1f-research "my topic" --urls-file my-urls.txt

# Add to existing job
m1f-research --resume abc123 --urls-file more-urls.txt
```

## Smart Delay Management

The scraper implements intelligent per-host delays:

- **No delay** for first 3 requests to any host
- **1-3 second random delay** after 3 requests
- **Parallel scraping** across different hosts

This ensures:

- Fast scraping for diverse sources
- Respectful behavior for repeated requests
- Optimal performance

## Examples

### Research Workflow

```bash
# 1. Start research
m1f-research "python async best practices"
# Output: Job ID: abc123

# 2. Check progress
m1f-research --status abc123

# 3. Add more URLs if needed
m1f-research --resume abc123 --urls-file extra-urls.txt

# 4. View all Python research
m1f-research --list-jobs --search "python"

# 5. Clean up old data
m1f-research --clean-raw abc123
```

### Monthly Research Review

```bash
# List all research from July 2025
m1f-research --list-jobs --date 2025-07

# Page through results
m1f-research --list-jobs --date 2025-07 --limit 20
m1f-research --list-jobs --date 2025-07 --limit 20 --offset 20

# Find specific topic
m1f-research --list-jobs --date 2025-07 --search "react hooks"
```

### Disk Space Management

```bash
# Check job sizes (future feature)
# m1f-research --list-jobs --show-size

# Clean specific old job
m1f-research --clean-raw old-job-id

# Bulk cleanup
m1f-research --clean-all-raw
```

## Tips

1. **Use job IDs**: Save job IDs for easy resume/reference
2. **Regular cleanup**: Clean raw data after analysis is complete
3. **Combine filters**: Use multiple filters for precise searches
4. **Manual URLs**: Supplement LLM search with your own URLs
5. **Check status**: Monitor long-running jobs with --status

## Future Enhancements

- Export job lists to CSV/JSON
- Job size statistics
- Automatic cleanup policies
- Job tagging system
- Cross-job deduplication
- Job templates

======= docs/06_research/63_cli_reference.md ======
# m1f-research CLI Reference

Complete command-line interface reference for m1f-research.

## Synopsis

```bash
m1f-research [QUERY] [OPTIONS]
```

## Positional Arguments

### `query`

Research topic or query (required for new jobs, optional when using job
management commands)

## Options

### General Options

| Option            | Short | Description                            | Default |
| ----------------- | ----- | -------------------------------------- | ------- |
| `--help`          | `-h`  | Show help message and exit             | -       |
| `--version`       |       | Show program version                   | -       |
| `--verbose`       | `-v`  | Increase verbosity (use -vv for debug) | Warning |
| `--dry-run`       |       | Preview without executing              | False   |
| `--config CONFIG` | `-c`  | Path to configuration file             | None    |

### LLM Provider Options

| Option                | Short | Description                                                          | Default          |
| --------------------- | ----- | -------------------------------------------------------------------- | ---------------- |
| `--provider PROVIDER` | `-p`  | LLM provider: claude, claude-cli, gemini, gemini-cli, openai         | claude           |
| `--model MODEL`       | `-m`  | Specific model to use                                                | Provider default |
| `--template TEMPLATE` | `-t`  | Analysis template: general, technical, academic, tutorial, reference | general          |

### Research Options

| Option           | Short | Description                        | Default |
| ---------------- | ----- | ---------------------------------- | ------- |
| `--urls N`       |       | Number of URLs to search for       | 20      |
| `--scrape N`     |       | Maximum URLs to scrape             | 10      |
| `--concurrent N` |       | Max concurrent scraping operations | 5       |
| `--no-filter`    |       | Disable content filtering          | False   |
| `--no-analysis`  |       | Skip AI analysis (just scrape)     | False   |
| `--interactive`  | `-i`  | Start in interactive mode          | False   |

### Output Options

| Option         | Short | Description                     | Default         |
| -------------- | ----- | ------------------------------- | --------------- |
| `--output DIR` | `-o`  | Output directory                | ./research-data |
| `--name NAME`  | `-n`  | Custom name for research bundle | Auto-generated  |

### Job Management

| Option             | Description                                |
| ------------------ | ------------------------------------------ |
| `--resume JOB_ID`  | Resume an existing research job            |
| `--list-jobs`      | List all research jobs                     |
| `--status JOB_ID`  | Show detailed status of a specific job     |
| `--urls-file FILE` | File containing URLs to add (one per line) |

### List Filtering Options

| Option          | Description                 | Example             |
| --------------- | --------------------------- | ------------------- |
| `--limit N`     | Limit number of results     | `--limit 10`        |
| `--offset N`    | Skip N results (pagination) | `--offset 20`       |
| `--date DATE`   | Filter by date              | `--date 2025-07-23` |
| `--search TERM` | Search jobs by query term   | `--search "react"`  |

### Cleanup Options

| Option               | Description                          |
| -------------------- | ------------------------------------ |
| `--clean-raw JOB_ID` | Clean raw HTML data for specific job |
| `--clean-all-raw`    | Clean raw HTML data for all jobs     |

## Command Examples

### Basic Research

```bash
# Simple research
m1f-research "python async programming"

# With custom settings
m1f-research "react hooks" --urls 30 --scrape 15

# Using different provider
m1f-research "machine learning" --provider gemini --model gemini-1.5-pro

# Skip analysis for faster results
m1f-research "tailwind css" --no-analysis

# Custom output location
m1f-research "rust ownership" --output ~/research --name rust-guide
```

### Job Management

```bash
# List all jobs
m1f-research --list-jobs

# List with pagination
m1f-research --list-jobs --limit 10 --offset 0

# Filter by date
m1f-research --list-jobs --date 2025-07-23  # Specific day
m1f-research --list-jobs --date 2025-07     # Month
m1f-research --list-jobs --date 2025        # Year

# Search for jobs
m1f-research --list-jobs --search "python"

# Combined filters
m1f-research --list-jobs --date 2025-07 --search "async" --limit 5

# Check job status
m1f-research --status abc123

# Resume a job
m1f-research --resume abc123

# Add URLs to existing job
m1f-research --resume abc123 --urls-file additional-urls.txt
```

### Manual URL Management

```bash
# Start with manual URLs only
m1f-research "my topic" --urls 0 --urls-file my-urls.txt

# Combine LLM search with manual URLs
m1f-research "my topic" --urls 20 --urls-file my-urls.txt

# Add URLs to existing job
m1f-research --resume abc123 --urls-file more-urls.txt
```

### Data Cleanup

```bash
# Clean specific job
m1f-research --clean-raw abc123

# Clean all jobs (with confirmation)
m1f-research --clean-all-raw
```

### Advanced Workflows

```bash
# Dry run to preview
m1f-research "test query" --dry-run

# Very verbose output for debugging
m1f-research "test query" -vv

# Interactive mode
m1f-research --interactive

# Technical analysis with high URL count
m1f-research "kubernetes networking" --template technical --urls 50 --scrape 25
```

## Date Format Examples

The `--date` filter supports multiple formats:

| Format | Example      | Matches               |
| ------ | ------------ | --------------------- |
| Y-M-D  | `2025-07-23` | Specific day          |
| Y-M    | `2025-07`    | All jobs in July 2025 |
| Y      | `2025`       | All jobs in 2025      |

## Exit Codes

| Code | Meaning                      |
| ---- | ---------------------------- |
| 0    | Success                      |
| 1    | General error                |
| 130  | Interrupted by user (Ctrl+C) |

## Environment Variables

| Variable            | Description        |
| ------------------- | ------------------ |
| `ANTHROPIC_API_KEY` | API key for Claude |
| `GOOGLE_API_KEY`    | API key for Gemini |
| `OPENAI_API_KEY`    | API key for OpenAI |

## Configuration File

Create `.m1f.config.yml` for persistent settings:

```yaml
research:
  llm:
    provider: claude
    model: claude-3-opus-20240229

  defaults:
    url_count: 30
    scrape_count: 15

  output:
    directory: ~/research-data
```

## Tips

1. **Save Job IDs**: Copy job IDs for easy resume/reference
2. **Use Filters**: Combine date and search for precise results
3. **Pagination**: Use limit/offset for large job lists
4. **Cleanup**: Regularly clean raw data to save space
5. **Manual URLs**: Supplement with your own curated links

======= docs/06_research/64_api_reference.md ======
# m1f-research API Reference

## Command Line Interface

### Basic Usage

```bash
m1f-research [OPTIONS] <query>
```

### Options

#### Search Options

- `--urls <count>` - Number of URLs to find (default: 20)
- `--scrape <count>` - Number of URLs to scrape (default: 10)
- `--template <name>` - Research template to use (default: general)

#### LLM Options

- `--provider <name>` - LLM provider (claude, gemini, cli)
- `--model <name>` - Specific model to use
- `--temperature <float>` - LLM temperature (0.0-1.0)

#### Output Options

- `--output <dir>` - Output directory (default: ./m1f/research)
- `--name <name>` - Bundle name (default: auto-generated)
- `--format <format>` - Output format (markdown, json)

#### Processing Options

- `--concurrent <count>` - Max concurrent scrapes (default: 5)
- `--timeout <range>` - Timeout range in seconds (e.g., "1-3")
- `--no-filter` - Disable URL filtering
- `--no-analysis` - Skip content analysis
- `--no-summary` - Skip summary generation

#### Other Options

- `--config <file>` - Custom config file
- `--interactive` - Interactive mode
- `--dry-run` - Preview without execution
- `--verbose` - Verbose output
- `--quiet` - Minimal output

## Python API

### Basic Usage

```python
from tools.research import ResearchOrchestrator
from tools.shared.colors import info, success

# Create orchestrator
orchestrator = ResearchOrchestrator()

# Run research
results = await orchestrator.research(
    query="microservices best practices",
    url_count=30,
    scrape_count=15
)

# Access results
info(f"Found {len(results.urls)} URLs")
info(f"Scraped {len(results.content)} pages")
success(f"Bundle saved to: {results.bundle_path}")
```

### Configuration

```python
from tools.research import ResearchConfig

config = ResearchConfig(
    llm_provider="claude",
    model="claude-3-opus-20240229",
    temperature=0.7,
    url_count=30,
    scrape_count=15,
    output_dir="./research",
    concurrent_limit=5,
    timeout_range=(1, 3)
)

orchestrator = ResearchOrchestrator(config)
```

### Custom Templates

```python
from tools.research import ResearchTemplate

template = ResearchTemplate(
    name="custom",
    description="Custom research template",
    search_prompt="Find {query} focusing on...",
    analysis_focus="implementation details",
    relevance_criteria="practical examples"
)

results = await orchestrator.research(
    query="react hooks",
    template=template
)
```

### Providers

```python
from tools.research import ClaudeProvider, GeminiProvider

# Claude provider
claude = ClaudeProvider(
    api_key="your-api-key",
    model="claude-3-opus-20240229"
)

# Gemini provider
gemini = GeminiProvider(
    api_key="your-api-key",
    model="gemini-pro"
)

# Use custom provider
orchestrator = ResearchOrchestrator(
    config=config,
    llm_provider=claude
)
```

### Scraping

```python
from tools.research import Scraper

scraper = Scraper(
    concurrent_limit=5,
    timeout_range=(1, 3),
    retry_attempts=2
)

# Scrape single URL
content = await scraper.scrape_url("https://example.com")

# Scrape multiple URLs
urls = ["https://example1.com", "https://example2.com"]
results = await scraper.scrape_urls(urls)
```

### Analysis

```python
from tools.research import Analyzer
from tools.shared.colors import info

analyzer = Analyzer(llm_provider=claude)

# Analyze content
analysis = await analyzer.analyze_content(
    content="Article content...",
    query="microservices",
    template="technical"
)

info(f"Relevance: {analysis.relevance}/10")
info(f"Key points: {analysis.key_points}")
```

### Bundle Creation

```python
from tools.research import BundleCreator

creator = BundleCreator()

# Create bundle
bundle_path = await creator.create_bundle(
    query="microservices",
    scraped_content=results,
    analysis_results=analyses,
    output_dir="./research"
)
```

## Data Models

### ResearchResult

```python
@dataclass
class ResearchResult:
    query: str
    urls: List[str]
    content: List[ScrapedContent]
    analyses: List[ContentAnalysis]
    bundle_path: Path
    metadata: Dict[str, Any]
```

### ScrapedContent

```python
@dataclass
class ScrapedContent:
    url: str
    title: str
    content: str
    scraped_at: datetime
    success: bool
    error: Optional[str]
```

### ContentAnalysis

```python
@dataclass
class ContentAnalysis:
    url: str
    relevance: float
    key_points: List[str]
    summary: str
    metadata: Dict[str, Any]
```

## Error Handling

```python
from tools.research import ResearchError, ScrapingError, AnalysisError
from tools.shared.colors import error

try:
    results = await orchestrator.research("query")
except ResearchError as e:
    error(f"Research failed: {e}")
except ScrapingError as e:
    error(f"Scraping failed: {e}")
except AnalysisError as e:
    error(f"Analysis failed: {e}")
```

## Events and Callbacks

```python
from tools.shared.colors import info, error

# Progress callback
def on_progress(stage: str, current: int, total: int):
    info(f"{stage}: {current}/{total}")

# Error callback
def on_error(error: Exception, context: Dict):
    error(f"Error in {context['stage']}: {error}")

# Use callbacks
results = await orchestrator.research(
    query="microservices",
    on_progress=on_progress,
    on_error=on_error
)
```

## Advanced Usage

### Custom URL Filters

```python
def custom_filter(url: str) -> bool:
    # Only allow specific domains
    allowed = ["docs.python.org", "realpython.com"]
    return any(domain in url for domain in allowed)

orchestrator.add_url_filter(custom_filter)
```

### Content Processors

```python
def process_content(content: str) -> str:
    # Custom content processing
    return content.replace("old_term", "new_term")

orchestrator.add_content_processor(process_content)
```

### Result Transformers

```python
def transform_results(results: ResearchResult) -> Dict:
    # Custom result transformation
    return {
        "query": results.query,
        "sources": len(results.content),
        "top_relevance": max(a.relevance for a in results.analyses)
    }

transformed = transform_results(results)
```

======= docs/06_research/65_architecture.md ======
# m1f-research Architecture

## Overview

The m1f-research tool is built on a modular architecture that combines web
search, content scraping, and AI-powered analysis to create comprehensive
research bundles.

## Core Components

### 1. Orchestrator (`orchestrator.py`)

- Central coordination of the research workflow
- Manages the pipeline: search → scrape → analyze → bundle
- Handles configuration and state management

### 2. LLM Interface (`llm_interface.py`)

- Abstraction layer for different LLM providers
- Supports Claude, Gemini, and CLI tools
- Manages API calls and response parsing

### 3. Scraper (`scraper.py`)

- Concurrent web scraping with rate limiting
- Integrates with html2md for content conversion
- Handles failures gracefully with retry logic

### 4. Analyzer (`analyzer.py`)

- Content relevance scoring
- Key points extraction
- Duplicate detection
- Template-based analysis

### 5. Bundle Creator (`bundle_creator.py`)

- Organizes scraped content into structured bundles
- Creates table of contents and summaries
- Formats output in clean Markdown

## Data Flow

```
User Query
    ↓
Orchestrator
    ↓
LLM Search → URLs
    ↓
Concurrent Scraping → Raw Content
    ↓
HTML to Markdown → Clean Content
    ↓
Content Analysis → Scored Content
    ↓
Bundle Creation → Research Bundle
```

## Configuration System

The research tool uses a hierarchical configuration system:

1. **Default Config**: Built-in defaults
2. **User Config**: ~/.m1f.config.yml
3. **Project Config**: ./.m1f.config.yml
4. **CLI Arguments**: Command-line overrides

## Templates

Templates customize the research process for different use cases:

- **Search Prompts**: How to find URLs
- **Analysis Focus**: What to extract
- **Output Format**: How to structure results

### Template Structure

```yaml
template_name:
  description: "Purpose of this template"
  search:
    focus: "What to look for"
    source_types: ["tutorial", "documentation", "discussion"]
  analysis:
    relevance_prompt: "Custom relevance criteria"
    key_points_prompt: "What to extract"
  output:
    structure: "How to organize results"
```

## Concurrency Model

The tool uses asyncio for efficient concurrent operations:

- **URL Search**: Sequential (LLM rate limits)
- **Web Scraping**: Concurrent with semaphore (default: 5)
- **Content Analysis**: Batch processing
- **Bundle Creation**: Sequential

## Error Handling

- **Graceful Degradation**: Failed scrapes don't stop the process
- **Retry Logic**: Automatic retries for transient failures
- **Fallback Providers**: Switch providers on API errors
- **Detailed Logging**: Track issues for debugging

## Security Considerations

- **URL Validation**: Prevent SSRF attacks
- **Content Sanitization**: Remove potentially harmful content
- **Rate Limiting**: Respect server resources
- **API Key Management**: Secure credential handling

## Extension Points

The architecture supports several extension mechanisms:

1. **Custom Providers**: Add new LLM providers
2. **Scraper Backends**: Integrate new scraping tools
3. **Analysis Templates**: Create domain-specific templates
4. **Output Formats**: Add new bundle formats

## Performance Optimizations

- **Concurrent Scraping**: Parallel downloads
- **Streaming Processing**: Handle large content
- **Caching**: Avoid duplicate work
- **Lazy Loading**: Load components on demand

## Future Architecture Plans

- **Plugin System**: Dynamic loading of extensions
- **Distributed Scraping**: Scale across multiple machines
- **Knowledge Graph**: Build connections between research
- **Real-time Updates**: Monitor sources for changes

======= docs/06_research/66_examples.md ======
# m1f-research Examples

## Command Line Examples

### Basic Research

```bash
# Simple research on a topic
m1f-research "python async programming"

# Research with more sources
m1f-research "kubernetes networking" --urls 40 --scrape 20

# Use a specific template
m1f-research "react performance optimization" --template technical
```

### Different Providers

```bash
# Use Gemini instead of Claude
m1f-research "machine learning basics" --provider gemini

# Use a CLI tool
m1f-research "rust ownership" --provider gemini-cli

# Specify a particular model
m1f-research "quantum computing" --provider claude --model claude-3-opus-20240229
```

### Output Control

```bash
# Custom output location
m1f-research "microservices patterns" --output ~/research/microservices

# Named bundle
m1f-research "docker best practices" --name docker-guide

# JSON output format
m1f-research "api design" --format json
```

### Processing Options

```bash
# Faster scraping with more concurrency
m1f-research "golang concurrency" --concurrent 10

# Slower, more respectful scraping
m1f-research "web scraping ethics" --concurrent 2 --timeout "2-5"

# Skip analysis for raw content
m1f-research "css grid layouts" --no-analysis

# Skip filtering to get all URLs
m1f-research "obscure programming languages" --no-filter
```

### Interactive Mode

```bash
# Start interactive research session
m1f-research --interactive

# In interactive mode:
# > Enter research query: microservices vs monoliths
# > Number of URLs to find [20]: 30
# > Number to scrape [10]: 15
# > Template [general]: technical
# > Start research? [Y/n]: y
```

## Configuration File Examples

### Basic Configuration

```yaml
# .m1f.config.yml
research:
  llm:
    provider: claude
    temperature: 0.7

  defaults:
    url_count: 30
    scrape_count: 15

  output:
    directory: ./my-research
```

### Advanced Configuration

```yaml
# research-config.yml
research:
  llm:
    provider: gemini
    model: gemini-pro
    temperature: 0.8
    max_tokens: 4000

  defaults:
    url_count: 50
    scrape_count: 25

  scraping:
    timeout_range: "2-4"
    max_concurrent: 8
    retry_attempts: 3
    user_agent: "m1f-research/1.0"

  analysis:
    relevance_threshold: 7.5
    min_content_length: 200
    prefer_code_examples: true
    extract_metadata: true

  output:
    directory: ./research-output
    create_summary: true
    create_index: true
    include_metadata: true

  filters:
    allowed_domains:
      - "*.github.io"
      - "docs.*.com"
      - "*.readthedocs.io"
    blocked_domains:
      - "spam-site.com"
    url_patterns:
      - "*/api/*"
      - "*/reference/*"
```

### Template-Specific Config

```yaml
# technical-research.yml
research:
  templates:
    technical:
      description: "Deep technical documentation"
      url_count: 40
      scrape_count: 20

      search:
        focus: "implementation, architecture, code examples"
        prefer_sources:
          - "GitHub"
          - "official docs"
          - "technical blogs"

      analysis:
        relevance_prompt: |
          Rate based on:
          - Code examples
          - Technical depth
          - Practical applicability

        key_points_prompt: |
          Extract:
          - Core concepts
          - Implementation details
          - Best practices
          - Common pitfalls

      output:
        group_by: "subtopic"
        include_code_stats: true
```

## Python Script Examples

### Basic Research Script

```python
#!/usr/bin/env python3
import asyncio
from tools.research import ResearchOrchestrator
from tools.shared.colors import info, success

async def main():
    orchestrator = ResearchOrchestrator()

    results = await orchestrator.research(
        query="GraphQL best practices",
        url_count=30,
        scrape_count=15
    )

    success(f"Research complete!")
    info(f"Bundle saved to: {results.bundle_path}")
    info(f"Total sources: {len(results.content)}")
    info(f"Average relevance: {sum(a.relevance for a in results.analyses) / len(results.analyses):.1f}")

if __name__ == "__main__":
    asyncio.run(main())
```

### Custom Template Script

```python
#!/usr/bin/env python3
import asyncio
from tools.research import ResearchOrchestrator, ResearchTemplate
from tools.shared.colors import info

# Define custom template
security_template = ResearchTemplate(
    name="security",
    description="Security-focused research",
    search_prompt="""
    Find authoritative sources about {query} focusing on:
    - Security vulnerabilities
    - Best practices for security
    - OWASP guidelines
    - Security tools and scanning
    """,
    analysis_focus="security implications",
    relevance_criteria="security relevance and actionable advice"
)

async def main():
    orchestrator = ResearchOrchestrator()

    results = await orchestrator.research(
        query="API security",
        template=security_template,
        url_count=40,
        scrape_count=20
    )

    # Print security-specific summary
    info("\n=== Security Research Summary ===")
    for analysis in sorted(results.analyses, key=lambda a: a.relevance, reverse=True)[:5]:
        info(f"\n{analysis.url}")
        info(f"Relevance: {analysis.relevance}/10")
        info("Key Security Points:")
        for point in analysis.key_points[:3]:
            info(f"  - {point}")

if __name__ == "__main__":
    asyncio.run(main())
```

### Batch Research Script

```python
#!/usr/bin/env python3
import asyncio
from pathlib import Path
from tools.research import ResearchOrchestrator
from tools.shared.colors import info

async def research_topic(orchestrator, topic, output_dir):
    """Research a single topic"""
    info(f"\nResearching: {topic}")

    results = await orchestrator.research(
        query=topic,
        url_count=20,
        scrape_count=10,
        output_dir=output_dir / topic.replace(" ", "_")
    )

    return topic, results

async def main():
    topics = [
        "microservices architecture",
        "event-driven design",
        "domain-driven design",
        "CQRS pattern",
        "saga pattern"
    ]

    orchestrator = ResearchOrchestrator()
    output_dir = Path("./architecture-research")
    output_dir.mkdir(exist_ok=True)

    # Research all topics
    tasks = [research_topic(orchestrator, topic, output_dir) for topic in topics]
    results = await asyncio.gather(*tasks)

    # Create index
    with open(output_dir / "index.md", "w") as f:
        f.write("# Architecture Research\n\n")
        for topic, result in results:
            f.write(f"## {topic}\n")
            f.write(f"- Sources: {len(result.content)}\n")
            f.write(f"- Bundle: [{result.bundle_path.name}](./{result.bundle_path.relative_to(output_dir)})\n\n")

if __name__ == "__main__":
    asyncio.run(main())
```

### Research Pipeline Script

```python
#!/usr/bin/env python3
import asyncio
import json
from datetime import datetime
from tools.research import ResearchOrchestrator
from tools.m1f import bundle_files
from tools.shared.colors import info, success

async def research_and_bundle(query):
    """Research a topic and create an m1f bundle"""

    # Phase 1: Research
    info(f"Phase 1: Researching {query}")
    orchestrator = ResearchOrchestrator()

    research_results = await orchestrator.research(
        query=query,
        url_count=30,
        scrape_count=15,
        output_dir=f"./pipeline/{query.replace(' ', '_')}"
    )

    # Phase 2: Bundle with m1f
    info(f"Phase 2: Creating m1f bundle")
    bundle_path = bundle_files(
        paths=[str(research_results.bundle_path.parent)],
        output=f"./pipeline/{query.replace(' ', '_')}_complete.txt",
        preset="docs-bundle"
    )

    # Phase 3: Create report
    info(f"Phase 3: Generating report")
    report = {
        "query": query,
        "timestamp": datetime.now().isoformat(),
        "research": {
            "urls_found": len(research_results.urls),
            "urls_scraped": len(research_results.content),
            "avg_relevance": sum(a.relevance for a in research_results.analyses) / len(research_results.analyses)
        },
        "bundle": {
            "path": str(bundle_path),
            "size": bundle_path.stat().st_size
        }
    }

    report_path = f"./pipeline/{query.replace(' ', '_')}_report.json"
    with open(report_path, "w") as f:
        json.dump(report, f, indent=2)

    return report

async def main():
    queries = [
        "react state management",
        "vue composition api",
        "angular signals"
    ]

    # Process all queries
    results = []
    for query in queries:
        result = await research_and_bundle(query)
        results.append(result)
        success(f"Completed: {query}\n")

    # Summary
    info("\n=== Pipeline Summary ===")
    for result in results:
        info(f"\n{result['query']}:")
        info(f"  - URLs scraped: {result['research']['urls_scraped']}")
        info(f"  - Avg relevance: {result['research']['avg_relevance']:.1f}")
        info(f"  - Bundle size: {result['bundle']['size'] / 1024:.1f} KB")

if __name__ == "__main__":
    asyncio.run(main())
```

## Real-World Use Cases

### 1. Technology Evaluation

```bash
# Research multiple competing technologies
m1f-research "kafka vs rabbitmq vs redis streams" --urls 50 --scrape 30 --template technical

# Deep dive into one technology
m1f-research "apache kafka internals architecture" --urls 40 --scrape 25
```

### 2. Learning New Topics

```bash
# Beginner-friendly research
m1f-research "python for beginners" --template tutorial

# Advanced topics with academic sources
m1f-research "distributed consensus algorithms" --template academic
```

### 3. Problem Solving

```bash
# Debug specific issues
m1f-research "kubernetes pod stuck terminating" --urls 30

# Find best practices
m1f-research "postgresql performance tuning large tables" --template technical
```

### 4. Documentation Collection

```bash
# Gather API documentation
m1f-research "stripe api payment intents" --template reference

# Collect migration guides
m1f-research "migrate django 3 to 4" --urls 40
```

### 5. Security Research

```bash
# Security audit preparation
m1f-research "OWASP top 10 2023 examples" --urls 50 --scrape 30

# Vulnerability research
m1f-research "log4j vulnerability explanation CVE-2021-44228"
```

## Tips and Tricks

### 1. Optimize for Quality

```bash
# More URLs, selective scraping
m1f-research "complex topic" --urls 60 --scrape 20

# This finds many options but only scrapes the best
```

### 2. Domain-Specific Research

```bash
# Create custom config for specific domains
cat > medical-research.yml << EOF
research:
  filters:
    allowed_domains:
      - "*.nih.gov"
      - "pubmed.ncbi.nlm.nih.gov"
      - "*.nature.com"
EOF

m1f-research "covid vaccine efficacy" --config medical-research.yml
```

### 3. Combine with Other Tools

```bash
# Research → m1f bundle → AI analysis
m1f-research "topic" && \
m1f ./m1f/research/topic-*/ -o analysis.txt && \
cat analysis.txt | llm "Summarize the key findings"
```

### 4. Scheduled Research

```bash
# Daily research updates (cron job)
0 9 * * * /usr/local/bin/m1f-research "AI news today" --name "ai-news-$(date +%Y%m%d)"
```

### 5. Research Archive

```bash
# Organize research by date
m1f-research "topic" --output "./research/$(date +%Y)/$(date +%m)/$(date +%d)/"
```

======= docs/06_research/67_cli_improvements.md ======
# 67. CLI Improvements for m1f-research

## Overview

The m1f-research CLI has been enhanced with improved user experience features
including colored output, JSON format support, extended help system, and better
progress tracking.

## Key Improvements

### 1. Colored Output

- **Colorama integration** for cross-platform color support
- **Graceful fallback** when colorama is not available
- **Status indicators** with color coding:
  - ✅ Green for success/completed
  - ⚠️ Yellow for warnings/active
  - ❌ Red for errors/failed
  - ℹ️ Cyan for information
- **Formatted headers** with bold blue text
- **Progress bars** with real-time updates
- **Consistent with other m1f tools** using the same colorama pattern

### 2. Output Formats

```bash
# Default text output with colors
m1f-research --list-jobs

# JSON output for automation
m1f-research --list-jobs --format json

# Quiet mode (suppress non-error output)
m1f-research "query" --quiet

# Verbose mode for debugging
m1f-research "query" --verbose  # -v for info, -vv for debug
```

### 3. Extended Help System

```bash
# Standard help
m1f-research --help

# Extended examples
m1f-research --help-examples

# Filtering guide
m1f-research --help-filters

# Provider setup guide
m1f-research --help-providers
```

### 4. Enhanced Job Listing

```bash
# Pagination
m1f-research --list-jobs --limit 10 --offset 0

# Date filtering
m1f-research --list-jobs --date 2025-07-24  # Specific day
m1f-research --list-jobs --date 2025-07     # Specific month
m1f-research --list-jobs --date 2025        # Specific year

# Search filtering
m1f-research --list-jobs --search "python"

# Status filtering
m1f-research --list-jobs --status-filter completed

# Combined filters
m1f-research --list-jobs \
  --search "react" \
  --date 2025-07 \
  --status-filter completed \
  --limit 20
```

### 5. Progress Tracking

- **Real-time progress bars** for long operations
- **ETA calculation** for time estimates
- **Phase indicators**:
  - Searching for URLs
  - Scraping URLs
  - Analyzing content
- **Callbacks** integrated throughout the pipeline

### 6. Interactive Mode

```bash
# Start interactive mode
m1f-research --interactive

# Available commands:
research <query>     # Start new research
list                # List all jobs
status <job_id>     # Show job status
resume <job_id>     # Resume a job
help               # Show help
exit/quit          # Exit
```

### 7. Better Error Handling

- **Helpful error messages** with suggestions
- **Input validation** with clear feedback
- **Graceful handling** of interrupts (Ctrl+C)

## Implementation Details

### Output Formatter (`output.py`)

```python
class OutputFormatter:
    """Handles formatted output for m1f-research"""

    def __init__(self, format: str = 'text', verbose: int = 0, quiet: bool = False):
        self.format = format
        self.verbose = verbose
        self.quiet = quiet
```

Key methods:

- `success()`, `error()`, `warning()`, `info()` - Colored messages
- `table()` - Formatted tables with column alignment
- `progress()` - Progress bars with ETA
- `job_status()` - Formatted job information
- `confirm()` - User confirmation prompts

### Enhanced CLI (`cli.py`)

```python
class EnhancedResearchCommand:
    """Enhanced CLI with better user experience"""
```

Features:

- Argument validation
- Extended help generation
- Progress callback integration
- JSON/text output switching
- Interactive mode support

### Progress Tracking

Progress callbacks integrated at multiple levels:

- URL searching phase
- Web scraping phase
- Content analysis phase
- Bundle creation phase

## Usage Examples

### 1. Research with Progress

```bash
m1f-research "python async programming" --verbose
# Shows progress bars for each phase
```

### 2. Job Management

```bash
# List recent jobs with colors
m1f-research --list-jobs --limit 10

# Watch job progress
m1f-research --watch abc123

# Export job data
m1f-research --export abc123 > job-data.json
```

### 3. Automation

```bash
# Get completed jobs as JSON
jobs=$(m1f-research --list-jobs --status-filter completed --format json)

# Process each job
echo "$jobs" | jq -r '.[].job_id' | while read id; do
    m1f-research --export "$id" > "exports/$id.json"
done
```

### 4. Batch Operations

```bash
# Clean all raw data with confirmation
m1f-research --clean-all-raw

# Skip confirmation
m1f-research --clean-all-raw --yes
```

## Benefits

1. **Better User Experience**

   - Clear visual feedback
   - Progress tracking
   - Helpful error messages

2. **Automation Support**

   - JSON output format
   - Machine-readable responses
   - Scriptable interface

3. **Debugging Support**

   - Verbose logging levels
   - Detailed error traces
   - Dry-run mode

4. **Accessibility**
   - `--no-color` option for terminals without color support
   - Clear text alternatives for all visual elements
   - Consistent formatting

## Future Enhancements

1. **Terminal UI (TUI)**

   - Full-screen interface with panels
   - Real-time job monitoring dashboard
   - Interactive job management

2. **Additional Output Formats**

   - CSV export for job lists
   - YAML configuration export
   - HTML reports

3. **Advanced Filtering**

   - Regex support in search
   - Multiple status filters
   - Custom query builders

4. **Performance Metrics**
   - Timing information per phase
   - Resource usage tracking
   - Success rate statistics

======= docs/06_research/index.md ======
# Research Tool Documentation

The m1f research tool is an AI-powered research assistant that automatically
finds, scrapes, and bundles information on any topic.

## Documentation

- [README](./README.md) - Main documentation for the m1f-research tool
- [Architecture](./architecture.md) - Technical architecture and design
  decisions
- [API Reference](./api-reference.md) - Detailed API documentation
- [Examples](./examples.md) - Usage examples and recipes
- [Example Config](./example-config.yml) - Complete configuration example

## Quick Links

- **Getting Started**: See the [README](./README.md#quick-start)
- **Configuration**: See the [Configuration section](./README.md#configuration)
- **Templates**: See the [Templates section](./README.md#templates)
- **Troubleshooting**: See the
  [Troubleshooting section](./README.md#troubleshooting)

## Related Documentation

- [m1f Documentation](../01_m1f/) - Core bundler documentation
- [s1f Documentation](../02_s1f/) - File extraction tool
- [HTML2MD Documentation](../03_html2md/) - HTML to Markdown converter
- [Scraper Documentation](../04_scrape/) - Web scraping tools
- [Development Documentation](../05_development/) - Development guides and tools

======= docs/99_development/unified_colorama_guide.md ======
# Unified Colorama Guide

This document describes the unified colorama approach used across all m1f tools.

## Overview

All m1f tools use a centralized color handling module located at
`tools/shared/colors.py`. This provides:

- Consistent color output across all tools
- Automatic fallback when colorama is not available
- Unified helper functions for common message types
- Cross-platform terminal color support

## Using the Unified Colors Module

### Basic Import

```python
from tools.shared.colors import Colors, success, error, warning, info, header
```

For relative imports within tools:

```python
from ..shared.colors import Colors, success, error, warning, info, header
```

### Available Colors

The `Colors` class provides these color constants:

- `Colors.BLACK`, `Colors.RED`, `Colors.GREEN`, `Colors.YELLOW`
- `Colors.BLUE`, `Colors.MAGENTA`, `Colors.CYAN`, `Colors.WHITE`
- `Colors.BRIGHT_BLACK`, `Colors.BRIGHT_RED`, `Colors.BRIGHT_GREEN`, etc.
- `Colors.RESET` - Reset all formatting
- `Colors.BOLD`, `Colors.DIM` - Text styles

### Helper Functions

Instead of using `print()` directly, use these semantic helper functions:

```python
# Success messages (green with checkmark)
success("Operation completed successfully!")

# Error messages (red with X, goes to stderr)
error("Failed to process file")

# Warning messages (yellow with warning symbol)
warning("File size exceeds recommended limit")

# Info messages (normal color)
info("Processing 10 files...")

# Headers (cyan and bold)
header("Starting Conversion", "Converting HTML to Markdown")
```

### Colored Logging

For tools using Python's logging module:

```python
import logging
from tools.shared.colors import ColoredFormatter

# Create logger with colored output
logger = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(ColoredFormatter())
logger.addHandler(handler)
```

### Colored Argparse Help

For tools using argparse:

```python
import argparse
from tools.shared.colors import ColoredHelpFormatter

parser = argparse.ArgumentParser(
    formatter_class=ColoredHelpFormatter,
    description="Tool description"
)
```

## Migration from Rich

The m1f project has migrated from Rich to colorama for better compatibility. Key
changes:

1. Replace `from rich.console import Console` with imports from `shared.colors`
2. Replace `console.print()` with appropriate helper functions
3. Remove Rich from requirements.txt
4. Use colorama's simpler color syntax

## Best Practices

1. **Always use helper functions** - Don't use `print()` directly for
   user-facing messages
2. **Import from shared module** - Never define local Colors classes
3. **Handle missing colorama gracefully** - The shared module handles this
   automatically
4. **Use semantic functions** - Choose success/error/warning/info based on
   message type
5. **Keep it simple** - Avoid complex formatting; focus on readability

## Testing Color Output

To test with colors disabled:

```bash
export NO_COLOR=1
m1f --help
```

To force colors (even in pipes):

```bash
export FORCE_COLOR=1
m1f --help | less -R
```

## Common Patterns

### Status Messages

```python
info("Starting process...")
# ... do work ...
success("Process completed!")
```

### Error Handling

```python
try:
    # ... operation ...
except Exception as e:
    error(f"Operation failed: {e}")
```

### Progress Updates

```python
for i, file in enumerate(files):
    info(f"Processing file {i+1}/{len(files)}: {file.name}")
```

### Colored File Paths

```python
info(f"Reading from: {Colors.CYAN}{file_path}{Colors.RESET}")
```

## Troubleshooting

1. **Colors not showing on Windows**: Colorama should handle this automatically.
   If not, ensure colorama is installed.

2. **Colors in CI/CD logs**: Most CI systems support ANSI colors. The module
   respects NO_COLOR and CI environment variables.

3. **Import errors**: Ensure you're using the correct relative import path based
   on your tool's location.

## Module API Reference

### Colors Class

- Static class providing color constants
- All attributes return ANSI escape codes or empty strings
- Use `Colors.disable()` to turn off colors programmatically

### Helper Functions

- `success(msg: str)` - Print success message with green color
- `error(msg: str)` - Print error message with red color to stderr
- `warning(msg: str)` - Print warning message with yellow color
- `info(msg: str)` - Print info message with default color
- `header(title: str, subtitle: str = None)` - Print formatted header

### Formatters

- `ColoredFormatter` - Logging formatter with level-based colors
- `ColoredHelpFormatter` - Argparse formatter with colored help text

### Global Variables

- `COLORAMA_AVAILABLE` - Boolean indicating if colorama is installed
- Respects `NO_COLOR` and `FORCE_COLOR` environment variables

======= docs/99_misc/98_token_counter.md ======
# token_counter - Token Estimation Tool

The token_counter tool (v2.0.0) estimates token usage for LLM context planning,
helping you optimize your use of large language models by managing context
window limits.

## Overview

When working with LLMs like ChatGPT, Claude, or GPT-4, understanding token
consumption is essential for effective prompt engineering and context
management. Built with Python 3.10+, the token_counter tool allows you to
precisely measure how many tokens your combined files will use, helping you stay
within the context window limits of your chosen LLM.

## Key Features

- Uses OpenAI's tiktoken library for accurate estimates
- Supports different encoding schemes for various LLMs
- Helps optimize context usage for LLMs
- Simple command-line interface

## Quick Start

```bash
# Check token count of a file
m1f-token-counter ./combined.txt

# Use a specific encoding model
m1f-token-counter ./combined.txt -e p50k_base
```

## Command Line Options

| Option           | Description                                         |
| ---------------- | --------------------------------------------------- |
| `file_path`      | Path to the text file to analyze                    |
| `-e, --encoding` | The tiktoken encoding to use (default: cl100k_base) |

## Usage Examples

Basic usage with default encoding (cl100k_base, used by GPT-4 and ChatGPT):

```bash
m1f-token-counter combined_output.txt
```

Using a specific encoding:

```bash
m1f-token-counter myfile.txt -e p50k_base
```

## Encoding Models

The tool supports different encoding models depending on which LLM you're using:

- `cl100k_base` - Default, used by GPT-4, ChatGPT
- `p50k_base` - Used by GPT-3.5-Turbo, text-davinci-003
- `r50k_base` - Used by older GPT-3 models

## Token Limits by Model

Understanding token limits is crucial for effective usage:

| Model           | Token Limit | Recommended Encoding |
| --------------- | ----------- | -------------------- |
| GPT-4 Turbo     | 128,000     | cl100k_base          |
| GPT-4           | 8,192       | cl100k_base          |
| GPT-3.5-Turbo   | 16,385      | cl100k_base          |
| Claude 3.5 Opus | 200,000     | -                    |
| Claude 3 Opus   | 200,000     | -                    |
| Claude 3 Sonnet | 200,000     | -                    |
| Claude 3 Haiku  | 200,000     | -                    |

## Integration with m1f

The token_counter tool is particularly useful when used with m1f to check if
your combined files will fit within the token limit of your chosen LLM:

1. First, combine files with m1f:

   ```bash
   m1f -s ./project -o ./combined.txt --include-extensions .py .js
   ```

2. Then, check the token count:
   ```bash
   m1f-token-counter ./combined.txt
   ```

This workflow helps you adjust your file selection to stay within token limits
for your AI assistant.

## Optimizing Token Usage

To reduce token consumption while maintaining context quality:

1. **Be selective with files**: Include only the most relevant files for your
   prompt
2. **Use minimal separator style**: The `None` separator style uses fewer tokens
3. **Trim unnecessary content**: Remove comments, unused code, or redundant text
4. **Focus on key files**: Prioritize files that directly address your question
5. **Use file filtering**: Utilize m1f's filtering options to target specific
   files

## Architecture

Token counter v2.0.0 features a simple but effective design:

- **Module Structure**: Can be run as a module (`m1f-token-counter`)
- **Type Safety**: Full type hints for better IDE support
- **Error Handling**: Graceful handling of encoding errors and file issues
- **Performance**: Efficient token counting for large files

## Requirements

- Python 3.10 or newer
- The `tiktoken` Python package:

```bash
pip install tiktoken
```

This dependency is included in the project's requirements.txt file.

## Tips for Accurate Token Counting

1. **Model-Specific Encoding**: Always use the encoding that matches your target
   LLM
2. **Include Prompts**: Remember to count tokens in your prompts as well as the
   context
3. **Buffer Space**: Leave 10-20% buffer for model responses
4. **Regular Checks**: Re-check token counts after file modifications

======= tools/research/README.md ======
# m1f-research

> **Note**: This documentation has been moved to
> [docs/06_research/](../../docs/06_research/)

AI-powered research tool that automatically finds, scrapes, and bundles
information on any topic.

## Overview

m1f-research extends the m1f toolkit with intelligent research capabilities. It
uses LLMs to:

- Find relevant URLs for any research topic
- Scrape and convert web content to clean Markdown
- Analyze content for relevance and extract key insights
- Create organized research bundles

## Quick Start

```bash
# Basic research
m1f-research "microservices best practices"

# Research with more sources
m1f-research "react state management" --urls 30 --scrape 15

# Research with manual URL list
m1f-research "python async" --urls-file my-links.txt

# Resume an existing job
m1f-research --resume abc123

# Add more URLs to existing job
m1f-research --resume abc123 --urls-file more-links.txt

# List all research jobs
m1f-research --list-jobs

# Check job status
m1f-research --status abc123

# Use different LLM provider
m1f-research "machine learning" --provider gemini

# Interactive mode
m1f-research --interactive
```

## Installation

m1f-research is included with the m1f toolkit. Ensure you have:

1. m1f installed with the research extension
2. An API key for your chosen LLM provider:
   - Claude: Set `ANTHROPIC_API_KEY`
   - Gemini: Set `GOOGLE_API_KEY`

## Features

### 🗄️ Job Management

- **Persistent Jobs**: All research jobs are tracked in a SQLite database
- **Resume Support**: Continue interrupted research or add more URLs
- **Job History**: View all past research with statistics
- **Per-Job Database**: Each job has its own database for URL/content tracking

### 🔍 Intelligent Search

- Uses LLMs to find high-quality, relevant URLs
- Focuses on authoritative sources
- Mixes different content types (tutorials, docs, discussions)
- **Manual URL Support**: Add your own URLs via --urls-file

### 📥 Smart Scraping

- **Per-Host Delay Management**: Only delays after 3+ requests to same host
- Concurrent scraping with intelligent scheduling
- Automatic HTML to Markdown conversion
- Handles failures gracefully
- **Content Deduplication**: Tracks content by checksum

### 🧠 Content Analysis

- Relevance scoring (0-10 scale)
- Key points extraction
- Content summarization
- Duplicate detection

### 📦 Organized Bundles

- **Hierarchical Output**: YYYY/MM/DD directory structure
- **Prominent Bundle Files**: 📚_RESEARCH_BUNDLE.md and 📊_EXECUTIVE_SUMMARY.md
- Clean Markdown output
- Table of contents
- Source metadata
- Relevance-based ordering

## Usage Examples

### Basic Research

```bash
# Research a programming topic
m1f-research "golang error handling"

# Output saved to: ./research-data/golang-error-handling-20240120-143022/
```

### Advanced Options

```bash
# Specify output location and name
m1f-research "kubernetes security" \
  --output ./research \
  --name k8s-security

# Use a specific template
m1f-research "react hooks" --template technical

# Skip analysis for faster results
m1f-research "python asyncio" --no-analysis

# Dry run to see what would happen
m1f-research "rust ownership" --dry-run
```

### Configuration File

```bash
# Use a custom configuration
m1f-research "database optimization" --config research.yml
```

## Configuration

### Command Line Options

| Option             | Description                   | Default          |
| ------------------ | ----------------------------- | ---------------- |
| `--urls`           | Number of URLs to find        | 20               |
| `--scrape`         | Number of URLs to scrape      | 10               |
| `--output`         | Output directory              | ./research-data  |
| `--name`           | Bundle name                   | auto-generated   |
| `--provider`       | LLM provider                  | claude           |
| `--model`          | Specific model                | provider default |
| `--template`       | Research template             | general          |
| `--concurrent`     | Max concurrent scrapes        | 5                |
| `--no-filter`      | Disable filtering             | false            |
| `--no-analysis`    | Skip analysis                 | false            |
| `--interactive`    | Interactive mode              | false            |
| `--dry-run`        | Preview only                  | false            |
| **Job Management** |                               |                  |
| `--resume`         | Resume existing job by ID     | None             |
| `--list-jobs`      | List all research jobs        | false            |
| `--status`         | Show job status by ID         | None             |
| `--urls-file`      | File with URLs (one per line) | None             |

### Configuration File (.m1f.config.yml)

```yaml
research:
  # LLM settings
  llm:
    provider: claude
    model: claude-3-opus-20240229
    temperature: 0.7

  # Default counts
  defaults:
    url_count: 30
    scrape_count: 15

  # Scraping behavior
  scraping:
    timeout_range: "1-3"
    max_concurrent: 5
    retry_attempts: 2

  # Content analysis
  analysis:
    relevance_threshold: 7.0
    min_content_length: 100
    prefer_code_examples: true

  # Output settings
  output:
    directory: ./research-data
    create_summary: true
    create_index: true

  # Research templates
  templates:
    technical:
      description: "Technical documentation and code"
      url_count: 30
      analysis_focus: implementation

    academic:
      description: "Academic papers and theory"
      url_count: 20
      analysis_focus: theory
```

## Templates

Pre-configured templates optimize research for different needs:

### technical

- Focuses on implementation details
- Prioritizes code examples
- Higher URL count for comprehensive coverage

### academic

- Emphasizes theoretical content
- Looks for citations and references
- Filters for authoritative sources

### tutorial

- Searches for step-by-step guides
- Prioritizes beginner-friendly content
- Includes examples and exercises

### general (default)

- Balanced approach
- Mixes different content types
- Suitable for most topics

## Output Structure

Research bundles are organized with hierarchical date structure:

```
./research-data/
├── research_jobs.db              # Main job tracking database
├── latest_research.md           # Symlink to most recent bundle
└── 2025/
    └── 07/
        └── 22/
            └── abc123_topic-name/
                ├── research.db           # Job-specific database
                ├── 📚_RESEARCH_BUNDLE.md # Main research bundle
                ├── 📊_EXECUTIVE_SUMMARY.md # Executive summary
                ├── research-bundle.md    # Standard bundle
                ├── metadata.json         # Research metadata
                └── search_results.json   # Found URLs
```

### Bundle Format

```markdown
# Research: [Your Topic]

Generated on: 2024-01-20 14:30:22 Total sources: 10

---

## Table of Contents

1. [Source Title 1](#1-source-title-1)
2. [Source Title 2](#2-source-title-2) ...

---

## Summary

[Research summary and top sources]

---

## 1. Source Title

**Source:** https://example.com/article **Relevance:** 8.5/10

### Key Points:

- Important point 1
- Important point 2

### Content:

[Full content in Markdown]

---
```

## Providers

### Claude (Anthropic)

- Default provider
- Best for: Comprehensive research, nuanced analysis
- Set: `ANTHROPIC_API_KEY`

### Claude Code SDK

- Use `--provider claude-cli` for Claude Code SDK integration
- Provides proper session management and streaming
- No API key needed if using Claude Code authentication

### Gemini (Google)

- Fast and efficient
- Best for: Quick research, technical topics
- Set: `GOOGLE_API_KEY`

### CLI Tools

- Use local tools like `gemini-cli`
- Best for: Privacy, offline capability
- Example: `--provider gemini-cli`

## Tips

1. **Start broad, then narrow**: Use more URLs initially, let analysis filter
2. **Use templates**: Match template to your research goal
3. **Interactive mode**: Great for exploratory research
4. **Combine with m1f**: Feed research bundles into m1f for AI analysis

## Troubleshooting

### No API Key

```
Error: API key not set for ClaudeProvider
```

Solution: Set environment variable or pass in config

### Rate Limiting

```
Error: 429 Too Many Requests
```

Solution: Reduce `--concurrent` or increase timeout range

### Low Quality Results

- Increase `--urls` for more options
- Adjust `relevance_threshold` in config
- Try different `--template`

## Database Architecture

### Main Database (research_jobs.db)

Tracks all research jobs:

- Job ID, query, status, timestamps
- Configuration used
- Statistics (URLs found, scraped, analyzed)

### Per-Job Database (research.db)

Tracks job-specific data:

- URLs (source, status, checksums)
- Content (markdown, metadata)
- Analysis results (scores, key points)

### Smart Delay Management

The scraper implements intelligent per-host delays:

- No delay for first 3 requests to a host
- Random 1-3 second delay after threshold
- Allows fast parallel scraping of different hosts

## Future Features

- Multi-source research (GitHub, arXiv, YouTube)
- Knowledge graph building
- Research collaboration
- Custom source plugins
- Web UI
- Export to various formats (PDF, DOCX)
- Integration with note-taking tools

## Contributing

m1f-research is part of the m1f project. Contributions welcome!

- Report issues: [GitHub Issues](https://github.com/m1f/m1f/issues)
- Submit PRs: Follow m1f contribution guidelines
- Request features: Open a discussion

======= tools/shared/README.md ======
# Shared Utilities for m1f Tools

This module provides common functionality that can be used across all m1f tools.

## Overview

The `tools/shared` module contains reusable components for:

- Prompt loading and management
- Configuration file handling
- Path and text utilities

## Components

### Prompt Loader

Universal prompt loading system with caching and fallback support:

```python
from tools.shared.prompts import PromptLoader, load_prompt, format_prompt

# Create a loader with search paths
loader = PromptLoader([
    Path("my_tool/prompts"),
    Path("shared/prompts")
])

# Load a prompt
prompt = loader.load("analysis/synthesis.md")

# Load and format in one step
formatted = loader.format("analysis/synthesis.md",
    query="machine learning",
    summaries="..."
)

# Use the global loader
prompt = load_prompt("analysis/synthesis.md")
```

### Configuration Loader

Support for JSON, YAML, and TOML configuration files:

```python
from tools.shared.config import load_config_file, save_config_file, merge_configs

# Load configuration
config = load_config_file("config.yaml")

# Load with defaults and environment overrides
config = load_config_with_defaults(
    path="config.yaml",
    defaults={"timeout": 30},
    env_prefix="M1F_TOOL_"
)

# Merge multiple configs
final_config = merge_configs(defaults, file_config, cli_config)
```

### Path Utilities

Common path operations:

```python
from tools.shared.utils import ensure_path, get_project_root, find_files

# Ensure path exists and create parents
path = ensure_path("output/results.txt", create_parents=True)

# Find project root
root = get_project_root()

# Find all Python files
for py_file in find_files(root, "**/*.py", exclude_dirs=[".venv", "__pycache__"]):
    print(py_file)
```

### Text Utilities

Text processing helpers:

```python
from tools.shared.utils import truncate_text, clean_whitespace, extract_json_from_text

# Truncate with word boundaries
truncated = truncate_text(long_text, max_length=100, break_on_word=True)

# Clean whitespace while preserving paragraphs
cleaned = clean_whitespace(messy_text, preserve_paragraphs=True)

# Extract JSON from mixed content
json_str = extract_json_from_text(response_with_json)
```

## Adding to Your Tool

1. Import what you need:

```python
from tools.shared.prompts import PromptLoader
from tools.shared.config import load_config_file
from tools.shared.utils import ensure_path
```

2. Add your tool's prompt directory to the loader:

```python
loader = PromptLoader([
    Path(__file__).parent / "prompts",
    Path(__file__).parent.parent / "shared/prompts"
])
```

3. Use the utilities in your code:

```python
# Load and format a prompt
prompt = loader.format("my_prompt.md", variable="value")

# Load configuration
config = load_config_file("config.yaml")

# Ensure output path exists
output_path = ensure_path("output/result.txt", create_parents=True)
```

## Prompt Organization

Prompts should be organized by tool and category:

```
tools/shared/prompts/
├── research/           # Research tool prompts
│   ├── analysis/       # Analysis prompts
│   ├── bundle/         # Bundle creation prompts
│   └── llm/           # LLM interaction prompts
├── html2md/           # HTML to Markdown prompts
└── common/            # Shared prompts
```

## Best Practices

1. **Prompt Loading**: Always use the PromptLoader for consistency and caching
2. **Configuration**: Use `load_config_with_defaults()` for robust config
   handling
3. **Paths**: Use `ensure_path()` to avoid path-related errors
4. **Text Processing**: Use the provided utilities instead of reimplementing

## Contributing

When adding new shared functionality:

1. Place it in the appropriate submodule
2. Add comprehensive docstrings
3. Include type hints
4. Add unit tests
5. Update this README

======= tools/html2md_tool/prompts/analyze_individual_file.md ======
# Individual HTML File Analysis

You are analyzing a single HTML file to understand its structure for optimal
content extraction.

## Your Task

Read the HTML file: {filename}

Analyze this file's structure and write your findings to: {output_path}

## Analysis Criteria

For this HTML file, document:

### 1. Content Structure

```
Main Content Location:
- Primary container: [exact selector]
- Parent hierarchy: [body > ... > main]
- Semantic tags used: [main, article, section, etc.]
- Content-specific classes: [.content, .prose, .markdown-body, etc.]
- Content boundaries: [where content starts/ends]
```

### 2. Navigation & UI Elements

```
Elements to Exclude:
- Header/Navigation: [selectors]
- Sidebar: [selectors]
- Footer: [selectors]
- Breadcrumbs: [selectors]
- TOC/Page outline: [selectors]
- Meta information: [selectors]
- Interactive widgets: [selectors]
```

### 3. Special Content Types

```
Within Main Content:
- Code blocks: [how they're marked]
- Callout boxes: [info, warning, tip patterns]
- Tables: [table wrapper classes]
- Images/Media: [figure elements, wrappers]
- Examples/Demos: [interactive elements to preserve]
```

### 4. Page-Specific Observations

```
Page Type: [landing/guide/api/reference]
Unique Patterns: [anything specific to this page]
Potential Issues: [edge cases noticed]
```

## Output Format

Write your analysis to {output_path} in this exact format:

```
FILE: {filename}
URL PATH: [relative path]

CONTENT STRUCTURE:
- Main container: [selector]
- Backup selectors: [alternatives if main doesn't work]
- Content confidence: [High/Medium/Low]

EXCLUDE PATTERNS:
- Navigation: [selectors]
- UI Chrome: [selectors]
- Metadata: [selectors]

SPECIAL FINDINGS:
- [Any unique patterns]
- [Edge cases]
- [Warnings]

SUGGESTED SELECTORS:
content_selector: "[primary selector]"
alternative_selectors:
  - "[fallback 1]"
  - "[fallback 2]"
ignore_selectors:
  - "[exclude 1]"
  - "[exclude 2]"
  - "[exclude 3]"
```

**CRITICAL REQUIREMENTS**:

1. **NEVER use empty strings** ("") as selectors
2. **Remove any empty or whitespace-only selectors** from lists
3. **Validate all selectors** are non-empty and properly formatted CSS selectors
4. Focus on this ONE file only - don't generalize to other files
5. **IMPORTANT**: After writing the analysis file, print "ANALYSIS_COMPLETE_OK"
   on the last line to confirm completion

======= tools/html2md_tool/prompts/analyze_selected_files.md ======
# HTML Structure Analysis for Optimal Content Extraction

use deep thinking The user wants a more systematic approach:

1. Create a task list
2. Analyze each file individually and save results
3. Then synthesize all analyses into final config This will produce much better
   results than trying to analyze all files at once.

## Context

The file m1f/selected_html_files.txt contains representative HTML files from the
documentation site.

## Task List

### Phase 1: Individual File Analysis

For each HTML file listed in m1f/selected_html_files.txt:

1. **Read the file** using the Read tool
2. **Perform deep structural analysis** (see analysis criteria below)
3. **Write detailed findings** to a separate analysis file:
   - File 1 → Write analysis to m1f/analysis/html_analysis_1.txt
   - File 2 → Write analysis to m1f/analysis/html_analysis_2.txt
   - etc. (continue for all files in the list)

### Phase 2: Synthesis

4. **Read all analysis files** (m1f/analysis/html_analysis_1.txt through
   m1f/analysis/html_analysis_N.txt where N is the number of files analyzed)
5. **Identify common patterns** across all analyses
6. **Create final YAML configuration** based on the synthesized findings

## Deep Analysis Criteria for Each File

When analyzing each HTML file, document:

### 1. Content Structure

```
Main Content Location:
- Primary container: [exact selector]
- Parent hierarchy: [body > ... > main]
- Semantic tags used: [main, article, section, etc.]
- Content-specific classes: [.content, .prose, .markdown-body, etc.]
- Content boundaries: [where content starts/ends]
```

### 2. Navigation & UI Elements

```
Elements to Exclude:
- Header/Navigation: [selectors]
- Sidebar: [selectors]
- Footer: [selectors]
- Breadcrumbs: [selectors]
- TOC/Page outline: [selectors]
- Meta information: [selectors]
- Interactive widgets: [selectors]
```

### 3. Special Content Types

```
Within Main Content:
- Code blocks: [how they're marked]
- Callout boxes: [info, warning, tip patterns]
- Tables: [table wrapper classes]
- Images/Media: [figure elements, wrappers]
- Examples/Demos: [interactive elements to preserve]
```

### 4. Page-Specific Observations

```
Page Type: [landing/guide/api/reference]
Unique Patterns: [anything specific to this page]
Potential Issues: [edge cases noticed]
```

## Analysis File Format

Each analysis file (m1f/analysis/html_analysis_N.txt) should follow this format:

```
FILE: [filename]
URL PATH: [relative path]

CONTENT STRUCTURE:
- Main container: [selector]
- Backup selectors: [alternatives if main doesn't work]
- Content confidence: [High/Medium/Low]

EXCLUDE PATTERNS:
- Navigation: [selectors]
- UI Chrome: [selectors]
- Metadata: [selectors]

SPECIAL FINDINGS:
- [Any unique patterns]
- [Edge cases]
- [Warnings]

SUGGESTED SELECTORS:
content_selector: "[primary selector]"
alternative_selectors:
  - "[fallback 1]"
  - "[fallback 2]"
ignore_selectors:
  - "[exclude 1]"
  - "[exclude 2]"
  - "[exclude 3]"
```

## Final Output

After analyzing all files and reading the analysis results, create the file
m1f_extract.yml

The file should have the results of you analyses and have this structure:

````yaml
# Complete configuration file for m1f-html2md
# All sections are optional - only include what differs from defaults

# Source and destination paths (usually provided via CLI)
source: ./html
destination: ./markdown

# Extractor configuration - CSS selectors for content extraction
extractor:
  # Primary selector that works across most/all analyzed files
  content_selector: "main.content, article.documentation"

  # Fallback selectors in priority order
  alternative_selectors:
    - "[selector that works on most files]"
    - "[selector that works on some files]"
    - "[generic but safe fallback]"

  # Exclusions that apply across all files
  ignore_selectors:
    # Navigation (found in X/N files)
    - "nav"
    - ".navigation"

    # Headers/Footers (found in X/N files)
    - "header.site-header"
    - "footer.site-footer"

    # [Continue with all common exclusions]

# Conversion options - Markdown formatting preferences
conversion:
  strip_tags: ["script", "style", "noscript"]
  keep_html_tags: [] # HTML tags to preserve in output
  heading_style: "atx" # atx (###) or setext (underlines)
  bold_style: "**" # ** or __
  italic_style: "*" # * or _
  link_style: "inline" # inline or reference
  list_marker: "-" # -, *, or +
  code_block_style: "fenced" # fenced (```) or indented
  heading_offset: 0 # Adjust heading levels (e.g., 1 = h1→h2)
  generate_frontmatter: true # Add YAML frontmatter with metadata
  preserve_whitespace: false
  wrap_width: 0 # 0 = no wrapping

# Asset handling configuration
assets:
  download_images: false
  image_directory: "images"
  link_prefix: ""
  process_links: true

# File handling options
file_extensions: [".html", ".htm"]
exclude_patterns: [".*", "_*", "node_modules", "__pycache__"]
target_encoding: "utf-8"

# Processing options
parallel: true # Enable parallel processing
max_workers: 4
overwrite: false # Overwrite existing files

# Synthesis notes (not used by the tool, just for documentation)
notes: |
  Analysis Summary:
  - Analyzed N files representing different page types
  - Primary selector works on X/N files
  - Fallback selectors provide Y% coverage

  Key Findings:
  - [Main pattern discovered]
  - [Secondary pattern]
  - [Edge cases to watch]

  Confidence: [High/Medium/Low] based on consistency across files
````

**CRITICAL REQUIREMENTS**:

1. Complete ALL tasks in the task list sequentially
2. The individual analysis files are crucial for creating an accurate final
   configuration
3. **NEVER use empty strings** ("") as selectors - every selector must have
   actual content
4. **Remove any empty or whitespace-only selectors** from lists before
   outputting
5. **Validate all selectors** are non-empty and properly formatted CSS selectors

**FILE MANAGEMENT**:

- Use Write tool to create analysis files in m1f/analysis/ directory as
  specified
- You may create temporary files if needed for analysis
- **IMPORTANT**: Clean up ALL temporary files you have created
- Only keep the required analysis files: m1f/analysis/html_analysis_1.txt
  through m1f/analysis/html_analysis_N.txt (where N is the number of files
  analyzed)
- Delete any .py, .sh, or other temporary files you create during analysis

======= tools/html2md_tool/prompts/convert_html_to_md.md ======
# Convert HTML to Clean, High-Quality Markdown

## Context:

You are converting scraped documentation HTML to clean Markdown. The HTML may
contain navigation, ads, and other non-content elements that must be excluded.

## Content Extraction Rules:

### INCLUDE:

- Main article/documentation content
- Headings within the content area
- Code blocks and inline code
- Lists (ordered and unordered)
- Tables
- Images with their alt text
- Links (convert to Markdown format)
- Blockquotes
- Important callouts/alerts within content

### EXCLUDE:

- Site navigation (top nav, sidebars, breadcrumbs)
- Headers and footers outside main content
- "Edit this page" or "Improve this doc" links
- Social sharing buttons
- Comment sections
- Related articles/suggestions
- Newsletter signup forms
- Cookie notices
- JavaScript-rendered placeholders
- Meta information (unless part of the content flow)
- Table of contents (unless embedded in content)
- Page view counters
- Advertisements

## Markdown Quality Standards:

### 1. Structure Preservation

- Maintain the original heading hierarchy
- Don't skip heading levels
- Preserve the logical flow of information

### 2. Code Formatting

```markdown
# Inline code

Use `backticks` for inline code, commands, or file names

# Code blocks

​`language code here ​`

# Shell commands

​`bash $ command here ​`
```

### 3. Special Content Types

**API Endpoints:** Format as inline code: `GET /api/v1/users`

**File Paths:** Format as inline code: `/etc/config.yaml`

**Callout Boxes:** Convert to blockquotes with type indicators:

> **Note:** Important information **Warning:** Critical warning **Tip:** Helpful
> suggestion

**Tables:** Use clean Markdown table syntax with proper alignment

### 4. Link Handling

- Convert relative links to proper Markdown: `[text](url)`
- Preserve anchor links: `[Section](#section-id)`
- Remove dead or navigation-only links

### 5. Image Handling

- Use descriptive alt text: `![Description of image](image-url)`
- If no alt text exists, describe the image content
- Skip purely decorative images

## Final Quality Checklist:

- ✓ No HTML tags remaining
- ✓ No broken Markdown syntax
- ✓ Clean, readable formatting
- ✓ Proper spacing between sections
- ✓ Consistent code block language tags
- ✓ No duplicate content
- ✓ No navigation elements
- ✓ Logical content flow preserved

{html_content}

======= tools/html2md_tool/prompts/select_files_from_project.md ======
# Strategic HTML File Selection for CSS Selector Analysis

From the list of available HTML files provided above, select the most
representative files for CSS selector analysis.

## Your Mission:

Select exactly 5 representative HTML files that will give us the BEST insight
into the site's structure for creating robust CSS selectors.

## Selection Strategy:

### 1. Diversity is Key

Choose files that represent different:

- **Sections**: API docs, guides, tutorials, references, landing pages
- **Depths**: Root level, deeply nested, mid-level pages
- **Layouts**: Different page templates if identifiable from paths

### 2. Pattern Recognition

Look for URL patterns that suggest content types:

- `/api/` or `/reference/` → API documentation
- `/guide/` or `/tutorial/` → Step-by-step content
- `/docs/` → General documentation
- `/blog/` or `/changelog/` → Time-based content
- `index.html` → Section landing pages
- Long paths with multiple segments → Detailed topic pages

### 3. Avoid Redundancy

Skip:

- Multiple files from the same directory pattern
- Obviously auto-generated sequences (e.g., /api/v1/method1, /api/v1/method2)
- Redirect or error pages if identifiable

### 4. Prioritize High-Value Pages

Select files that likely have:

- Rich content structure (not just navigation pages)
- Different content layouts
- Representative examples of the site's documentation style

## Output Format:

Return EXACTLY 5 file paths, one per line. No explanations, no formatting, no
numbering. Do not include any text before or after the file paths. Just the file
paths, nothing else.

Example format: docs/getting-started/index.html
api/reference/authentication.html guides/advanced/performance-tuning.html
tutorials/quickstart.html concepts/architecture/overview.html

IMPORTANT: After listing the files, print "FILE_SELECTION_COMPLETE_OK" on the
last line to confirm completion.

======= tools/html2md_tool/prompts/synthesize_config.md ======
# Configuration Synthesis from Individual File Analyses

You have analyzed multiple HTML files individually. Now synthesize their
findings into a unified configuration that will be saved as
`html2md_config.yaml`.

## Your Task

Read the analysis files:

- m1f/analysis/html_analysis_1.txt
- m1f/analysis/html_analysis_2.txt
- m1f/analysis/html_analysis_3.txt
- m1f/analysis/html_analysis_4.txt
- m1f/analysis/html_analysis_5.txt

Based on these analyses, create an optimal YAML configuration that works across
all files.

## Analysis Process

1. **Read all 5 analysis files**
2. **Identify common patterns** across analyses
3. **Find selectors that work on multiple files**
4. **Create prioritized fallback selectors**
5. **Combine all exclusion patterns**

## Output YAML Configuration

Create a YAML configuration in this exact format:

````yaml
# Complete configuration file for m1f-html2md
# All sections are optional - only include what differs from defaults

# Source and destination paths (usually provided via CLI)
source: ./html
destination: ./markdown

# Extractor configuration - CSS selectors for content extraction
extractor:
  # Primary selector that works across most/all analyzed files
  content_selector: "main.content, article.documentation"

  # Fallback selectors in priority order
  alternative_selectors:
    - "[selector that works on most files]"
    - "[selector that works on some files]"
    - "[generic but safe fallback]"

  # Exclusions that apply across all files
  ignore_selectors:
    # Navigation (found in X/N files)
    - "nav"
    - ".navigation"

    # Headers/Footers (found in X/N files)
    - "header.site-header"
    - "footer.site-footer"

    # [Continue with all common exclusions]

# Conversion options - Markdown formatting preferences
conversion:
  strip_tags: ["script", "style", "noscript"]
  keep_html_tags: [] # HTML tags to preserve in output
  heading_style: "atx" # atx (###) or setext (underlines)
  bold_style: "**" # ** or __
  italic_style: "*" # * or _
  link_style: "inline" # inline or reference
  list_marker: "-" # -, *, or +
  code_block_style: "fenced" # fenced (```) or indented
  heading_offset: 0 # Adjust heading levels (e.g., 1 = h1→h2)
  generate_frontmatter: true # Add YAML frontmatter with metadata
  preserve_whitespace: false
  wrap_width: 0 # 0 = no wrapping

# Asset handling configuration
assets:
  download_images: false
  image_directory: "images"
  link_prefix: ""
  process_links: true

# File handling options
file_extensions: [".html", ".htm"]
exclude_patterns: [".*", "_*", "node_modules", "__pycache__"]
target_encoding: "utf-8"

# Processing options
parallel: false # Enable parallel processing
max_workers: 4
overwrite: false # Overwrite existing files

# Synthesis notes (not used by the tool, just for documentation)
notes: |
  Analysis Summary:
  - Analyzed N files representing different page types
  - Primary selector works on X/N files
  - Fallback selectors provide Y% coverage

  Key Findings:
  - [Main pattern discovered]
  - [Secondary pattern]
  - [Edge cases to watch]

  Confidence: [High/Medium/Low] based on consistency across files
````

## Selection Criteria

**Primary Content Selector**:

- Choose selector that works on most files (80%+ coverage)
- If no single selector works on most, combine multiple with commas
- Prefer semantic selectors (main, article) over class-based

**Alternative Selectors**:

- Order by coverage (most files first)
- Include at least one generic fallback
- Each should be valid CSS selector

**Ignore Selectors**:

- Include selectors found in majority of files
- Group by type (navigation, headers, footers, etc.)
- Add comments showing coverage (found in X/N files)

**Critical Requirements**:

1. **NEVER include empty strings** ("") in any selector list
2. **All selectors must be valid CSS selectors**
3. **Remove whitespace-only entries**
4. **Test that primary selector + alternatives provide good coverage**
5. **Ensure ignore selectors don't accidentally exclude wanted content**

Output only the YAML configuration - no additional explanation needed.

IMPORTANT: After outputting the YAML configuration, print
"SYNTHESIS_COMPLETE_OK" on the last line to confirm completion.

======= tools/m1f/prompts/perfect_bundle_prompt.md ======
# Perfect Bundle Creation Prompt for m1f-claude

## 🎯 CREATE PERFECT TOPIC-SPECIFIC BUNDLES FOR THIS PROJECT

============================================================

The basic bundles (complete.txt and docs.txt) have already been created. Now
create additional topic-specific bundles following BEST PRACTICES.

## 📚 REQUIRED READING (IN THIS ORDER):

1. READ: @m1f/m1f.txt for m1f documentation and bundle configuration syntax
2. READ: @m1f/project_analysis_dirlist.txt for directory structure
3. READ: @m1f/project_analysis_filelist.txt for complete file listing

⚠️ IMPORTANT: Read ALL three files above before proceeding!

## 🏆 BEST PRACTICES FOR PERFECT BUNDLES

### 1. MODULAR ARCHITECTURE PRINCIPLE

- Identify each logical module, tool, or subsystem in the project
- Create one bundle per module/tool (e.g., auth-module, payment-module,
  user-module)
- Each module bundle should be self-contained and meaningful

### 2. USE PRECISE INCLUDES, NOT BROAD EXCLUDES

Instead of excluding everything except what you want, use precise includes:

```yaml
# ❌ BAD - Too broad, relies on excludes
sources:
  - path: "."
    excludes: ["tests/", "docs/", "scripts/", "node_modules/"]

# ✅ GOOD - Precise includes
sources:
  - path: "tools/"
    include_extensions: [".py"]
    includes: ["auth/**", "auth.py", "utils.py", "__init__.py"]
```

### 3. BUNDLE GROUPING STRATEGY

Organize bundles into logical groups:

- `documentation` - All documentation bundles
- `source` - Source code bundles by module
- `tests` - Test code bundles
- `config` - Configuration bundles
- `complete` - Aggregated bundles

### 4. NUMBERED OUTPUT FILES

Use numbered prefixes for proper sorting:

```yaml
output: "m1f/project/87_module1_docs.txt"  # Documentation
output: "m1f/project/94_module1_code.txt"  # Source code
output: "m1f/project/95_module2_code.txt"  # Source code
output: "m1f/project/99_complete.txt"      # Complete bundle
```

### 5. HIERARCHICAL BUNDLES

Create aggregated bundles that combine related bundles:

- `all-docs` - Combines all documentation
- `all-tests` - Combines all tests
- `all-frontend` - Combines all frontend code
- `complete` - The ultimate bundle with everything

### 6. SHARED FILES STRATEGY

When files are used by multiple modules (like utils, constants, types):

- Include them in each relevant module bundle
- This ensures each bundle is self-contained

## 🔍 PROJECT ANALYSIS STEPS

### STEP 1: Identify Project Architecture

Analyze the directory structure to find:

- Monorepo with packages? → Create bundle per package
- Multiple apps/services? → Create bundle per app
- Modular architecture? → Create bundle per module
- Plugin/Extension system? → Create bundle per plugin
- Frontend/Backend split? → Create bundles for each

### STEP 2: Find Logical Boundaries

Look for natural boundaries in the code:

- Directory names that indicate modules (auth/, payment/, user/)
- File naming patterns (auth.service.ts, auth.controller.ts)
- Configuration files that define modules
- Import patterns that show dependencies

### STEP 3: Design Bundle Hierarchy

Plan your bundles in this order:

1. Module/tool-specific bundles (most granular)
2. Category bundles (tests, docs, config)
3. Aggregated bundles (all-docs, all-frontend)
4. Complete bundle (everything)

## 📝 BUNDLE CREATION RULES

### NAMING CONVENTIONS

- Use lowercase with hyphens: `user-service`, `auth-module`
- Be descriptive but concise
- Group prefix when applicable: `frontend-components`, `backend-api`

### OUTPUT FILE PATTERNS

```
m1f/{project_name}/
├── 80-89_*_docs.txt     # Documentation bundles
├── 90-93_*_config.txt   # Configuration bundles
├── 94-98_*_code.txt     # Source code bundles
└── 99_*_complete.txt    # Complete/aggregated bundles
```

### SOURCES CONFIGURATION

Always use the most specific configuration:

```yaml
sources:
  - path: "src/modules/auth"
    include_extensions: [".ts", ".js"]
    includes: ["**/*.service.ts", "**/*.controller.ts"]
  - path: "src/shared"
    includes: ["auth-utils.ts", "auth-types.ts"]
```

## 🚨 CRITICAL RULES - MUST FOLLOW

1. **NO DEFAULT EXCLUDES**: Don't exclude node_modules, .git, **pycache**, etc.
2. **NO BINARY/ASSET BUNDLES**: Skip images, fonts, compiled files
3. **MAX 20 BUNDLES**: Including existing complete and docs
4. **USE INCLUDES OVER EXCLUDES**: Be precise about what to include
5. **SELF-CONTAINED BUNDLES**: Each bundle should be useful standalone

## 🎯 IMPLEMENTATION CHECKLIST

□ Read all three required files completely □ Identify the project's modular
structure □ Plan bundle hierarchy (modules → categories → aggregated) □ Design
precise `includes` patterns for each bundle □ Use numbered output files for
sorting □ Group bundles logically □ Create aggregated bundles where valuable □
Keep total count under 20 bundles □ Use MultiEdit to add all bundles at once

## 💡 EXAMPLE PATTERNS TO RECOGNIZE

### For a Multi-Service Project:

```yaml
bundles:
  # Service-specific bundles
  auth-service:
    group: "services"
    output: "m1f/project/94_auth_service.txt"
    sources:
      - path: "services/auth"
        include_extensions: [".js", ".ts"]
      - path: "shared"
        includes: ["auth/**", "types/auth.ts"]

  user-service:
    group: "services"
    output: "m1f/project/95_user_service.txt"
    sources:
      - path: "services/user"
        include_extensions: [".js", ".ts"]
      - path: "shared"
        includes: ["user/**", "types/user.ts"]
```

### For a Plugin-Based System:

```yaml
bundles:
  plugin-core:
    group: "core"
    output: "m1f/project/94_plugin_core.txt"
    sources:
      - path: "core"
        include_extensions: [".py"]
      - path: "plugins"
        includes: ["__init__.py", "base.py"]

  plugin-auth:
    group: "plugins"
    output: "m1f/project/95_plugin_auth.txt"
    sources:
      - path: "plugins/auth"
      - path: "core"
        includes: ["plugin_utils.py"]
```

## ⚡ FINAL STEPS

1. Analyze the project structure deeply
2. Design bundles that reflect the project's architecture
3. Use precise includes to create focused bundles
4. Test your mental model: "Would each bundle be useful alone?"
5. Create the configuration with MultiEdit

Remember: The goal is bundles that are **modular**, **focused**, and
**self-contained**!

======= tools/m1f/prompts/segmentation_prompt.md ======
# 🎯 CREATE PERFECT TOPIC-SPECIFIC BUNDLES FOR THIS PROJECT

The basic bundles (complete.txt and docs.txt) have already been created. Now
create additional topic-specific bundles following BEST PRACTICES.

📚 REQUIRED READING (IN THIS ORDER):

1. READ: @m1f/m1f.txt for m1f documentation and bundle configuration syntax
2. READ: @m1f/project_analysis_dirlist.txt for directory structure
3. READ: @m1f/project_analysis_filelist.txt for complete file listing

⚠️ IMPORTANT: Read ALL three files above before proceeding!

🏆 BEST PRACTICES FOR PERFECT BUNDLES:

1. **SIZE GUIDELINES** - Optimize for different use cases!
   - Claude Code: Ideally under 180KB per bundle for best performance
   - Claude AI: Ideally under 5MB per bundle
   - Complete/full bundles can be larger (even 40MB+) for comprehensive analysis
   - Split large topics into focused bundles when targeting specific tasks

2. **MODULAR ARCHITECTURE** - One bundle per logical module/tool/service

3. **USE PRECISE INCLUDES** - Don't exclude everything except what you want!
   Instead, use precise 'includes' patterns:

   ```yaml
   sources:
     - path: "src/auth"
       include_extensions: [".ts", ".js"]
     - path: "shared"
       includes: ["auth-utils.ts", "auth-types.ts"]
   ```

   For documentation chapters/sections:

   ```yaml
   sources:
     - path: "src" # Use "src" not "src/"
       includes: ["ch04-*.md", "chapter-04/*.md"]
     - path: "." # Use "." for root directory
       includes: ["README.md", "CONTRIBUTING.md"]
   ```

4. **HIERARCHICAL NAMING** - Use category-number-topic pattern:
   - api-01-core-basics
   - api-02-core-advanced
   - guide-01-getting-started

5. **ESSENTIAL BUNDLES** - Always include:
   - quick-reference (< 180KB)
   - common-errors (< 180KB)
   - best-practices (< 180KB)

🚨 CRITICAL RULES:

1. FOLLOW SIZE GUIDELINES - Create focused bundles under 180KB for Claude Code
   when possible
2. NO DEFAULT EXCLUDES (node_modules, .git, **pycache**, vendor/ already
   excluded)
3. NO IMAGE/BINARY BUNDLES
4. MAXIMUM 30-40 bundles (more granular = better for targeted AI assistance)
5. Each bundle should be SELF-CONTAINED and appropriately sized for its purpose
6. ALWAYS TEST YOUR PATHS - Verify directories exist before adding to config
7. USE RELATIVE PATHS from project root (not absolute paths)

📋 ALREADY CREATED BUNDLES:

- complete: Full project bundle
- docs: All documentation files

🔍 PROJECT ANALYSIS STEPS:

STEP 1: Identify Architecture Type

- Monorepo? → Bundle per package
- Multi-app? → Bundle per app + shared bundles
- Plugin system? → Bundle per plugin + core
- Modular? → Bundle per module

STEP 2: Find Natural Boundaries Look for:

- Directory names indicating modules (auth/, user/, payment/)
- Plugin/theme directories (wp-content/plugins/_, wp-content/themes/_)
- Feature boundaries (admin/, public/, includes/)

STEP 3: Design Bundle Hierarchy

1. Module-specific bundles (most granular)
2. Category bundles (all-tests, all-docs)
3. Aggregated bundles (all-frontend, all-backend)
4. Complete bundle (everything)

📊 PROJECT ANALYSIS SUMMARY:

- Project Type: {project_type}
- Languages: {languages}
- Total Files: {total_files}

**Main Code Directories:** {main_code_dirs}

📝 **User-Provided Project Information:**

- **Description:** {user_project_description}
- **Priorities:** {user_project_priorities}

Please take the user's description and priorities into account when creating
bundles. For example:

- If performance is a priority, create focused performance-critical code bundles
- If security is important, create security-related bundles (auth, validation,
  etc.)
- If documentation is key, create more granular documentation bundles
- If maintainability matters, organize bundles by architectural layers

📝 IMPLEMENTATION APPROACH:

Example for optimal bundle sizes:

```yaml
# For API documentation (split to stay under 180KB)
api-01-core-options:
  description: "Core API - Options API"
  output: "m1f/api-01-core-options.txt"
  sources:
    - path: "src/api"
      includes: ["options-*.md"]

api-02-core-reactivity:
  description: "Core API - Reactivity system"
  output: "m1f/api-02-core-reactivity.txt"
  sources:
    - path: "src/api"
      includes: ["reactivity-*.md"]

# Quick reference bundle
quick-reference:
  description: "Quick reference and cheat sheet"
  output: "m1f/quick-reference.txt"
  sources:
    - path: "docs"
      includes: ["cheatsheet.md", "quick-*.md"]
    - path: "."
      includes: ["README.md"]

# Common errors bundle
common-errors:
  description: "Common errors and solutions"
  output: "m1f/common-errors.txt"
  sources:
    - path: "docs"
      includes: ["errors/*.md", "troubleshooting.md"]
```

⚡ ACTION PLAN:

1. Read all required files thoroughly
2. VERIFY PATHS: Check project_analysis_dirlist.txt to ensure all paths exist
3. Estimate content sizes and plan bundles based on purpose
4. Design bundles with PRECISE INCLUDES (not broad excludes)
5. Use hierarchical naming (category-number-topic)
6. Create essential bundles (quick-ref, errors, best-practices)
7. Keep focused task bundles under 180KB for Claude Code when practical
8. Add all bundles with MultiEdit in one operation

⚠️ COMMON MISTAKES TO AVOID:

- Don't use paths like "dot" when you mean "."
- Don't create bundles for non-existent directories
- Don't forget to check if files actually exist in the paths
- Don't use absolute paths like "/home/user/project"
- Don't create bundles smaller than 10KB (they likely have path errors)

Remember: Each bundle should answer "What would I need to understand this
module?" - size appropriately based on the use case!

======= tools/m1f/prompts/verification_prompt.md ======
# 🔍 VERIFY AND IMPROVE M1F CONFIGURATION

Your task is to verify the .m1f.config.yml that was just created and improve it
if needed.

📋 VERIFICATION CHECKLIST:

1. **Read .m1f.config.yml** - Check the current configuration
2. **Check Generated Bundles** - Look in m1f/ directory for .txt files
3. **Verify Bundle Quality**:
   - Are focused/task bundles ideally under 180KB for Claude Code usage?
   - Are larger reference bundles under 5MB for Claude AI?
   - Complete/full bundles can be larger - that's OK!
   - Do they contain the expected content?
   - Are there any errors or warnings?
4. **Test a Bundle** - Read at least one generated bundle (e.g.,
   @m1f/{project_name}\_complete.txt)
5. **Check for Common Issues**:
   - Redundant excludes (node_modules, .git, etc. are auto-excluded)
   - Missing important files
   - Bundles that are too large or too small
   - Incorrect separator_style (should be Standard or omitted)
   - Wrong sources format (should use 'sources:' array, not 'source_directory:')

🛠️ IMPROVEMENT ACTIONS:

If you find issues:

1. **Fix Configuration Errors** - Update .m1f.config.yml
2. **Optimize Bundle Organization** - Better grouping or splitting
3. **Add Missing Bundles** - If important areas aren't covered
4. **Remove Redundant Bundles** - If there's too much overlap
5. **Fix Size Issues** - Split large bundles or combine small ones

📝 SPECIFIC CHECKS:

1. Run: `ls -lah m1f/` to see all generated bundles and their sizes
2. SIZE GUIDELINES:
   - Task-focused bundles: Ideally < 180KB for Claude Code
   - Reference bundles: Ideally < 5MB for Claude AI
   - Complete/full bundles: Can be much larger (40MB+ is fine)
   - TOO SMALL: Bundles under 10KB likely have configuration errors
3. Check for m1f-update errors in the output above
4. Read the complete bundle (e.g., @m1f/{project_name}\_complete.txt) to verify
   content inclusion
5. Ensure each bundle serves a clear, distinct purpose
6. CRITICAL: Check for bundles under 10KB - these often indicate:
   - Wrong file paths in includes
   - Non-existent directories
   - Incorrect glob patterns Action: Remove these bundle sections from the
     config!

⚠️ SIZE OPTIMIZATION GUIDELINES: For bundles intended for Claude Code that
exceed 180KB:

1. Consider splitting into smaller, more focused bundles
2. Use more specific includes patterns
3. Create sub-bundles for large topics (e.g., api-core-1, api-core-2) Note: This
   is a guideline - some bundles naturally need to be larger!

📊 PROJECT CONTEXT:

- Type: {project_type}
- Languages: {languages}
- Total Files: {total_files}

🎯 EXPECTED OUTCOME:

After verification:

1. The .m1f.config.yml should be optimal for this project
2. All bundles should generate without errors
3. Each bundle should be appropriately sized for its purpose:
   - Task-focused bundles: Ideally < 180KB for Claude Code
   - Reference bundles: Ideally < 5MB for Claude AI
   - Complete bundles: Any size that captures the full scope
4. The configuration should follow all best practices

If everything looks good, just confirm. If improvements are needed, make them!

📈 SIZE OPTIMIZATION STRATEGIES:

For bundles that are too large:

```yaml
# Instead of this (too large):
api-documentation:
  sources:
    - path: "docs/api"

# Do this (split by topic):
api-01-authentication:
  sources:
    - path: "docs/api"
      includes: ["auth*.md", "login*.md", "session*.md"]

api-02-data-models:
  sources:
    - path: "docs/api"
      includes: ["models/*.md", "schema*.md"]

api-03-endpoints:
  sources:
    - path: "docs/api"
      includes: ["endpoints/*.md", "routes*.md"]
```

For bundles that are too small (<10KB):

```yaml
# If you see this in ls -lah output:
# 108   m1f/some-bundle.txt
# 2.1K  m1f/another-bundle.txt

# Check the bundle content:
cat m1f/some-bundle.txt
# Output: "# No files processed from /path/to/nowhere"

# ACTION: Remove the bundle from config:
# DELETE this entire section:
some-bundle:
  description: "..."
  sources:
    - path: "nonexistent/path"  # <-- This path doesn't exist!
```

🔍 FINAL VERIFICATION: After making any changes, run `m1f-update` again and
verify:

1. All bundles generate without errors
2. No bundles are under 10KB (unless intentionally small)
3. Task-focused bundles are ideally under 180KB
4. The configuration follows best practices

⚠️ PATH VERIFICATION CHECKLIST: Before finalizing, double-check:

- All paths in sources exist in the project
- Paths use relative format (e.g., "src/api" not "/home/user/src/api")
- Include patterns match actual files (check with `ls` command)
- No typos in directory names (e.g., "dot" vs ".")

======= tools/scrape_tool/scrapers/README.md ======
# HTML2MD Web Scrapers

This module provides a pluggable architecture for web scraping backends in the
HTML2MD tool.

## Architecture

The scraper system is built around:

- `WebScraperBase`: Abstract base class defining the scraper interface
- `ScraperConfig`: Configuration dataclass for all scrapers
- `create_scraper()`: Factory function to instantiate scrapers
- `SCRAPER_REGISTRY`: Registry of available backends

## Available Scrapers

### BeautifulSoup (`beautifulsoup`, `bs4`)

- **Purpose**: General-purpose web scraping for static sites
- **Features**: Async support, encoding detection, metadata extraction
- **Best for**: Most websites without JavaScript requirements

### HTTrack (`httrack`)

- **Purpose**: Complete website mirroring
- **Features**: Professional mirroring, preserves structure
- **Best for**: Creating offline copies of entire websites
- **Requires**: System installation of HTTrack

## Usage

```python
from tools.html2md.scrapers import create_scraper, ScraperConfig

# Configure scraper
config = ScraperConfig(
    max_depth=5,
    max_pages=100,
    request_delay=0.5,
    user_agent="Mozilla/5.0 ..."
)

# Create scraper instance
scraper = create_scraper('beautifulsoup', config)

# Use scraper
async with scraper:
    # Scrape single page
    page = await scraper.scrape_url('https://example.com')

    # Scrape entire site
    async for page in scraper.scrape_site('https://example.com'):
        print(f"Scraped: {page.url}")
```

## Adding New Scrapers

To add a new scraper backend:

1. Create a new file in this directory (e.g., `playwright.py`)
2. Create a class inheriting from `WebScraperBase`
3. Implement required methods:
   - `scrape_url()`: Scrape a single URL
   - `scrape_site()`: Scrape an entire website
4. Register in `__init__.py`:

   ```python
   from .playwright import PlaywrightScraper

   SCRAPER_REGISTRY['playwright'] = PlaywrightScraper
   ```

## Configuration

All scrapers share common configuration options through `ScraperConfig`:

- `max_depth`: Maximum crawl depth
- `max_pages`: Maximum pages to scrape
- `allowed_domains`: List of allowed domains
- `exclude_patterns`: URL patterns to exclude
- `request_delay`: Delay between requests
- `concurrent_requests`: Number of concurrent requests
- `user_agent`: User agent string
- `timeout`: Request timeout in seconds

Backend-specific options can be added as needed in the scraper implementation.

======= tools/shared/prompts/research/analysis/academic_key_points.md ======
# Academic Analysis - Key Points Prompt

Extract key academic insights from this content.
Focus on:
- Theoretical concepts and frameworks
- Research findings and conclusions
- Methodological approaches
- Limitations and future work
- Connections to existing literature

======= tools/shared/prompts/research/analysis/academic_relevance.md ======
# Academic Analysis - Relevance Prompt

Analyze this content for academic relevance to "{query}".
Focus on:
1. Theoretical contributions and frameworks
2. Quality of citations and references
3. Research methodology and rigor
4. Empirical evidence and validation
5. Novelty and significance of findings

======= tools/shared/prompts/research/analysis/default_analysis.md ======
# Default Content Analysis Prompt

Analyze the following content in the context of this research query: "{query}"

URL: {url}

Content:
{content}

Provide a comprehensive analysis in JSON format with the following fields:
1. relevance_score: Rate relevance to the research query from 0-10 (float)
2. summary: A concise 2-3 sentence summary of the content
3. key_points: Array of 3-5 key points or takeaways
4. content_type: Type of content (tutorial, documentation, blog, discussion, code, reference, news)
5. topics: Array of main topics covered
6. technical_level: beginner, intermediate, or advanced
7. strengths: What makes this content valuable
8. limitations: Any limitations or caveats

Return ONLY valid JSON, no other text.

======= tools/shared/prompts/research/analysis/general_key_points.md ======
# General Analysis - Key Points Prompt

Extract key insights from this content.
Focus on:
- Main concepts and ideas
- Practical applications
- Important examples
- Advantages and limitations
- Connections to related topics

======= tools/shared/prompts/research/analysis/general_relevance.md ======
# General Analysis - Relevance Prompt

Analyze this content for relevance to "{query}".
Provide a balanced assessment considering:
1. How well it addresses the research query
2. Quality and depth of information
3. Practical value and applications
4. Clarity and accessibility
5. Unique insights or perspectives

======= tools/shared/prompts/research/analysis/reference_key_points.md ======
# Reference Analysis - Key Points Prompt

Extract key reference information from this content.
Focus on:
- API endpoints or function signatures
- Required and optional parameters
- Return values and data structures
- Error codes and handling
- Usage examples and patterns

======= tools/shared/prompts/research/analysis/reference_relevance.md ======
# Reference Analysis - Relevance Prompt

Analyze this content for reference relevance to "{query}".
Focus on:
1. Completeness of API/interface documentation
2. Accuracy of parameter and return value descriptions
3. Quality of usage examples
4. Coverage of error cases and edge conditions
5. Organization and searchability

======= tools/shared/prompts/research/analysis/synthesis.md ======
# Research Synthesis Prompt

Based on the following research results for "{query}", provide a brief synthesis:

{summaries}

Write a 2-3 paragraph synthesis that:
1. Identifies common themes and patterns
2. Highlights the most important findings
3. Notes any conflicting information
4. Suggests areas that might need more research

======= tools/shared/prompts/research/analysis/technical_key_points.md ======
# Technical Analysis - Key Points Prompt

Extract key technical insights from this content.
Focus on:
- Implementation patterns and techniques
- Performance optimizations
- Security considerations
- Testing strategies
- Common mistakes to avoid

======= tools/shared/prompts/research/analysis/technical_relevance.md ======
# Technical Analysis - Relevance Prompt

Analyze this content for technical relevance to "{query}".
Focus on:
1. Quality and relevance of code examples
2. Depth of implementation details
3. Practical applicability
4. Technical accuracy
5. Coverage of edge cases and error handling

======= tools/shared/prompts/research/analysis/tutorial_key_points.md ======
# Tutorial Analysis - Key Points Prompt

Extract key learning points from this tutorial.
Focus on:
- Main concepts being taught
- Step-by-step procedures
- Important prerequisites
- Common mistakes and how to avoid them
- Practice exercises and challenges

======= tools/shared/prompts/research/analysis/tutorial_relevance.md ======
# Tutorial Analysis - Relevance Prompt

Analyze this content for tutorial relevance to "{query}".
Focus on:
1. Clarity of step-by-step instructions
2. Completeness of the tutorial
3. Quality of examples and exercises
4. Appropriate difficulty progression
5. Coverage of prerequisites and setup

======= tools/shared/prompts/research/bundle/subtopic_grouping.md ======
# Subtopic Grouping Prompt

Analyze these research results for "{query}" and group them into logical
subtopics.

Content items: {summaries}

Provide a JSON response with this structure: {{
    "subtopics": [
        {{
            "name": "Subtopic Name",
            "description": "Brief description",
            "item_indices": [0, 2, 5]  // indices of items belonging to this subtopic
        }} ] }}

Create 3-7 subtopics that logically organize the content. Each item should
belong to exactly one subtopic. Return ONLY valid JSON, no other text.

======= tools/shared/prompts/research/bundle/topic_summary.md ======
# Topic Summary Prompt

Generate a 1-2 sentence overview of the following resources about "{topic}":

{summaries}

Write a concise summary that captures what these resources collectively offer
about this topic.

======= tools/shared/prompts/research/llm/content_analysis.md ======
# Content Analysis Prompt

Analyze the following content for: "{analysis_type}"

Content: {content}

Provide your analysis in JSON format with appropriate fields based on the
analysis type. For relevance analysis, include a score from 0-10. For other
types, provide structured insights.

Return ONLY valid JSON, no other text.

======= tools/shared/prompts/research/llm/web_search.md ======
# Web Search Prompt

Search for the {num_results} most relevant and high-quality URLs for the
following research query: "{query}"

Requirements:

1. Focus on authoritative sources (documentation, tutorials, research papers,
   reputable blogs)
2. Prioritize recent content when relevant
3. Include a mix of content types (tutorials, references, discussions)
4. Avoid low-quality sources (spam, content farms, outdated information)

Return the results as a JSON array with this format: [ {{ "url":
"https://example.com/article", "title": "Article Title", "description": "Brief
description of the content and why it's relevant" }} ]

Return ONLY the JSON array, no other text.
