======= README.md ======
# m1f Documentation

Welcome to the m1f (Make One File) documentation. This tool combines multiple
text files into a single output file, perfect for providing context to Large
Language Models (LLMs) and creating bundled documentation.

## What's New in v3.2

- **Enhanced Security**: Path traversal protection, SSRF prevention, automatic
  robots.txt compliance
- **Performance**: Parallel file processing enabled by default (3-5x faster)
- **Flexibility**: Control content deduplication and UTF-8 encoding preferences
- **Reliability**: Improved error handling and security scanning

See the [v3.2 Features Guide](./41_version_3_2_features.md) for details.

## Table of Contents

### Getting Started

- [**00_m1f.md**](00_m1f.md) - Main documentation with features, usage examples,
  and architecture
- [**01_quick_reference.md**](./01_quick_reference.md) - Quick command reference
  and common patterns
- [**02_cli_reference.md**](./02_cli_reference.md) - Complete command-line
  parameter reference
- [**03_troubleshooting.md**](./03_troubleshooting.md) - Common issues and
  solutions

### Preset System

- [**10_m1f_presets.md**](./10_m1f_presets.md) - Comprehensive preset system
  guide
- [**11_preset_per_file_settings.md**](./11_preset_per_file_settings.md) -
  Advanced per-file processing configuration
- [**12_preset_reference.md**](./12_preset_reference.md) - Complete preset
  reference with all settings, features, and clarifications

### Features & Tools

- [**20_auto_bundle_guide.md**](./20_auto_bundle_guide.md) - Automated bundling
  with configuration files
- [**21_development_workflow.md**](./21_development_workflow.md) - Best
  practices for development workflows
- [**25_m1f_config_examples.md**](./25_m1f_config_examples.md) - Comprehensive
  configuration examples for different project types

### AI Integration

- [**30_claude_workflows.md**](./30_claude_workflows.md) - Working with Claude
  and LLMs
- [**31_claude_code_integration.md**](./31_claude_code_integration.md) -
  Integration with Claude Code for AI-assisted development

### Advanced Topics

- [**40_security_best_practices.md**](./40_security_best_practices.md) -
  Security guidelines and protective measures
- [**41_version_3_2_features.md**](./41_version_3_2_features.md) - Comprehensive
  v3.2 feature documentation and migration guide

## Quick Start

```bash
# Basic usage (parallel processing is automatic in v3.2)
m1f -s ./your_project -o ./combined.txt

# With file type filtering
m1f -s ./src -o code.txt --include-extensions .py .js

# Using presets
m1f -s . -o bundle.txt --preset wordpress.m1f-presets.yml

# v3.2 features: Allow duplicate files + custom encoding
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Security scanning with warning mode
m1f -s ./src -o bundle.txt --security-check warn
```

For detailed information, start with the [main documentation](00_m1f.md) or jump
to the [quick reference](./01_quick_reference.md) for common commands.

======= 00_m1f.md ======
# m1f (Make One File)

A modern, high-performance tool that combines multiple files into a single file
with rich metadata, content deduplication, and async I/O support.

## Overview

The m1f tool (v3.2.0) solves a common challenge when working with LLMs:
providing sufficient context without exceeding token limits. Built with Python
3.10+ and modern architecture patterns, it creates optimized reference files
from multiple sources while automatically handling duplicates and providing
comprehensive metadata.

## Key Features

- **Content Deduplication**: Automatically detects and skips duplicate files
  based on SHA256 checksums
- **Async I/O**: High-performance file operations with concurrent processing
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Modular package structure with clean separation of
  concerns
- **Smart Filtering**: Advanced file filtering with size limits, extensions, and
  patterns
- **Symlink Support**: Intelligent symlink handling with cycle detection
- **Professional Security**: Integration with detect-secrets for sensitive data
  detection
- **Colorized Output**: Beautiful console output with progress indicators

## Quick Start

### Initialize m1f in Your Project

```bash
# Quick setup for any project
cd /your/project
m1f-init

# This creates in the m1f/ directory:
# - <project>_complete.txt          # Full project bundle
# - <project>_complete_filelist.txt # List of all included files
# - <project>_complete_dirlist.txt  # List of all directories
# - <project>_docs.txt              # Documentation bundle
# - <project>_docs_filelist.txt    # List of documentation files
# - <project>_docs_dirlist.txt     # Documentation directories
# - .m1f.config.yml                # Configuration file
```

### Basic m1f Commands

```bash
# Basic usage with a source directory
m1f -s ./your_project -o ./combined.txt

# Include only specific file types
m1f -s ./your_project -o ./combined.txt --include-extensions .py .js .md

# Include only documentation files (62 extensions)
m1f -s ./your_project -o ./docs_bundle.txt --docs-only

# Exclude specific directories
m1f -s ./your_project -o ./combined.txt --excludes "node_modules/" "build/" "dist/"

# Filter by file size (new in v2.0.0)
m1f -s ./your_project -o ./combined.txt --max-file-size 50KB
```

> **Note**: For a complete reference of all available options, see the
> [CLI Reference](./07_cli_reference.md). For troubleshooting, see the
> [Troubleshooting Guide](./08_troubleshooting.md).

## Command Line Options

| Option                      | Description                                                                                                                                                                                                                                                      |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-s, --source-directory`    | Path to the directory containing files to process                                                                                                                                                                                                                |
| `-i, --input-file`          | Path to a file containing a list of files/directories to process. Can be used together with --source-directory to resolve relative paths in the input file against the source directory                                                                          |
| `-o, --output-file`         | Path for the combined output file                                                                                                                                                                                                                                |
| `-f, --force`               | Force overwrite of existing output file without prompting                                                                                                                                                                                                        |
| `-t, --add-timestamp`       | Add a timestamp (\_YYYYMMDD_HHMMSS) to the output filename. Useful for versioning and preventing accidental overwrite of previous output files                                                                                                                   |
| `--filename-mtime-hash`     | Append a hash of file modification timestamps to the filename. The hash is created using all filenames and their modification dates, enabling caching mechanisms. Hash only changes when files are added/removed or their content changes                        |
| `--include-extensions`      | Space-separated list of file extensions to include (e.g., `--include-extensions .py .js .html` will only process files with these extensions)                                                                                                                    |
| `--exclude-extensions`      | Space-separated list of file extensions to exclude (e.g., `--exclude-extensions .log .tmp .bak` will skip these file types)                                                                                                                                      |
| `--docs-only`               | Include only documentation files (62 extensions including .md, .txt, .rst, .org, .tex, .info, etc.). Overrides include-extensions.                                                                                                                               |
| `--max-file-size`           | Skip files larger than the specified size (e.g., `--max-file-size 50KB` will exclude files over 50 kilobytes). Supports units: B, KB, MB, GB, TB. Useful for filtering out large generated files, logs, or binary data when merging text files for LLM context   |
| `--exclude-paths-file`      | Path to file containing paths or patterns to exclude. Supports both exact path lists and gitignore-style pattern formats. Can use a .gitignore file directly                                                                                                     |
| `--no-default-excludes`     | Disable default directory exclusions. By default, the following directories are excluded: vendor, node_modules, build, dist, cache, .git, .svn, .hg, \***\*pycache\*\*** (see [Default Excludes Guide](./26_default_excludes_guide.md) for complete list)        |
| `--excludes`                | Space-separated list of paths to exclude. Supports directory names, exact file paths, and gitignore-style patterns (e.g., `--excludes logs "config/settings.json" "*.log" "build/" "!important.log"`)                                                            |
| `--include-dot-paths`       | Include files and directories that start with a dot (e.g., .gitignore, .hidden/). By default, all dot files and directories are excluded.                                                                                                                        |
| `--include-binary-files`    | Attempt to include files with binary extensions                                                                                                                                                                                                                  |
| `--remove-scraped-metadata` | Remove scraped metadata (URL, timestamp) from HTML2MD files during processing. Automatically detects and removes metadata blocks at the end of markdown files created by HTML scraping tools                                                                     |
| `--separator-style`         | Style of separators between files (`Standard`, `Detailed`, `Markdown`, `MachineReadable`, `None`)                                                                                                                                                                |
| `--line-ending`             | Line ending for script-generated separators (`lf` or `crlf`)                                                                                                                                                                                                     |
| `--convert-to-charset`      | Convert all files to the specified character encoding (`utf-8` [default], `utf-16`, `utf-16-le`, `utf-16-be`, `ascii`, `latin-1`, `cp1252`). The original encoding is automatically detected and included in the metadata when using compatible separator styles |
| `--abort-on-encoding-error` | Abort processing if encoding conversion errors occur. Without this flag, characters that cannot be represented will be replaced                                                                                                                                  |
| `-v, --verbose`             | Enable verbose logging. Without this flag, only summary information is shown, and detailed file-by-file logs are written to the log file instead of the console                                                                                                  |
| `--minimal-output`          | Generate only the combined output file (no auxiliary files)                                                                                                                                                                                                      |
| `--skip-output-file`        | Execute operations but skip writing the final output file                                                                                                                                                                                                        |
| `-q, --quiet`               | Suppress all console output                                                                                                                                                                                                                                      |
| `--create-archive`          | Create a backup archive of all processed files                                                                                                                                                                                                                   |
| `--archive-type`            | Type of archive to create (`zip` or `tar.gz`)                                                                                                                                                                                                                    |
| `--security-check`          | Scan files for secrets before merging (`abort`, `skip`, `warn`)                                                                                                                                                                                                  |
| `--preset`                  | One or more preset configuration files for file-specific processing. Files are loaded in order with later files overriding earlier ones                                                                                                                          |
| `--preset-group`            | Specific preset group to use from the configuration. If not specified, all matching presets from all groups are considered                                                                                                                                       |
| `--disable-presets`         | Disable all preset processing even if preset files are loaded                                                                                                                                                                                                    |

## Preset System

The preset system allows you to define file-specific processing rules for
different file types within the same bundle. This is particularly useful for
projects with mixed content types.

### Preset Hierarchy

Presets are loaded in the following order (highest priority wins):

1. **Global Presets** (~/.m1f/global-presets.yml) - Lowest priority
2. **User Presets** (~/.m1f/presets/\*.yml) - Medium priority
3. **Project Presets** (via --preset parameter) - Highest priority

### Quick Preset Examples

```bash
# Use built-in WordPress preset
m1f -s ./wp-site -o bundle.txt --preset presets/wordpress.m1f-presets.yml

# Use specific preset group
m1f -s ./project -o bundle.txt --preset my-presets.yml --preset-group production

# Load multiple preset files (merged in order)
m1f -s . -o out.txt --preset defaults.yml project.yml overrides.yml
```

### Available Processing Actions

- **minify** - Remove unnecessary whitespace (HTML, CSS, JS)
- **strip_tags** - Remove specified HTML tags
- **strip_comments** - Remove comments based on file type
- **compress_whitespace** - Normalize whitespace
- **remove_empty_lines** - Remove all empty lines
- **custom** - Apply custom processors

For detailed preset documentation, see:

- [Preset System Guide](02_m1f_presets.md) - Complete preset documentation
- [Per-File-Type Settings](03_m1f_preset_per_file_settings.md) - File-specific
  overrides

## Usage Examples

### Basic Operations

```bash
# Basic command using a source directory
m1f --source-directory /path/to/your/code \
  --output-file /path/to/combined_output.txt

# Using an input file containing paths to process (one per line)
m1f -i filelist.txt -o combined_output.txt

# Using both source directory and input file together
m1f -s ./source_code -i ./file_list.txt -o ./combined.txt

# Remove scraped metadata from HTML2MD files (new in v2.0.0)
m1f -s ./scraped_docs -o ./clean_docs.txt \
  --include-extensions .md --remove-scraped-metadata
```

### Advanced Operations

```bash
# Using MachineReadable style with verbose logging
m1f -s ./my_project -o ./output/bundle.m1f.txt \
  --separator-style MachineReadable --force --verbose

# Creating a combined file and a backup zip archive
m1f -s ./source_code -o ./dist/combined.txt \
  --create-archive --archive-type zip

# Only include text files under 50KB to avoid large generated files
m1f -s ./project -o ./text_only.txt \
  --max-file-size 50KB --include-extensions .py .js .md .txt .json

# Handle symlinks with cycle detection (new in v2.0.0)
m1f -s ./project -o ./output.txt \
  --include-symlinks --verbose
```

## Security Check

The `--security-check` option scans files for potential secrets using
`detect-secrets` if the library is installed. When secrets are detected you can
decide how the script proceeds:

- `abort` – stop processing immediately and do not create the output file.
- `skip` – omit files that contain secrets from the final output.
- `warn` – include all files but print a summary warning at the end.

If `detect-secrets` is not available, a simplified pattern-based scan is used as
a fallback.

## Output Files

By default, `m1f.py` creates several output files to provide comprehensive
information about the processed files:

1. **Primary output file** - The combined file specified by `--output-file`
   containing all processed files with separators
2. **Log file** - A `.log` file with the same base name as the output file,
   containing detailed processing information
3. **File list** - A `_filelist.txt` file containing the paths of all included
   files
4. **Directory list** - A `_dirlist.txt` file containing all unique directories
   from the included files
5. **Archive file** - An optional backup archive (zip or tar.gz) if
   `--create-archive` is specified

To create only the primary output file and skip the auxiliary files, use the
`--minimal-output` option:

```bash
# Create only the combined output file without any auxiliary files
m1f -s ./src -o ./combined.txt --minimal-output
```

## Common Use Cases

### Documentation Compilation

```bash
# Create a complete documentation bundle from all markdown files
m1f -s ./docs -o ./doc_bundle.m1f.txt --include-extensions .md
```

### Code Review Preparation

```bash
# Bundle specific components for code review
m1f -i code_review_files.txt -o ./review_bundle.m1f.txt
```

### WordPress Development

```bash
# Combine theme or plugin files for AI analysis
m1f -s ./wp-content/themes/my-theme -o ./theme_context.m1f.txt \
  --include-extensions .php .js .css --exclude-paths-file ./exclude_build_files.txt
```

### Project Knowledge Base

```bash
# Create a searchable knowledge base from project documentation
m1f -s ./project -o ./knowledge_base.m1f.txt \
  --include-extensions .md .txt .rst --minimal-output
```

### Documentation Bundles

```bash
# Create a documentation-only bundle using --docs-only
m1f -s ./project -o ./docs_bundle.txt --docs-only

# Equivalent using include-extensions (more verbose)
m1f -s ./project -o ./docs_bundle.txt --include-extensions \
  .1 .1st .2 .3 .4 .5 .6 .7 .8 .adoc .asciidoc .changelog .changes \
  .creole .faq .feature .help .history .info .lhs .litcoffee .ltx \
  .man .markdown .markdown2 .md .mdown .mdtxt .mdtext .mdwn .mdx \
  .me .mkd .mkdn .mkdown .ms .news .nfo .notes .org .pod .pod6 \
  .qmd .rd .rdoc .readme .release .rmd .roff .rst .rtf .story \
  .t .tex .texi .texinfo .text .textile .todo .tr .txt .wiki
```

### HTML2MD Integration

```bash
# Combine scraped markdown files and remove metadata
m1f -s ./scraped_content -o ./clean_content.m1f.txt \
  --include-extensions .md --remove-scraped-metadata

# Merge multiple scraped websites into a clean documentation bundle
m1f -s ./web_content -o ./web_docs.m1f.txt \
  --include-extensions .md --remove-scraped-metadata --separator-style Markdown
```

### Project Analysis and Overview

```bash
# Generate complete project file and directory lists for analysis
m1f -s . -o m1f/project_analysis.txt --skip-output-file \
  --exclude-paths-file .gitignore --excludes m1f/

# This creates (without the main output file):
# - m1f/project_analysis_filelist.txt  # All project files
# - m1f/project_analysis_dirlist.txt   # All directories
# - m1f/project_analysis.log           # Processing log
```

Use this when you need:

- A complete overview of your project structure
- To understand what files m1f will process
- To verify your exclusion patterns are working correctly
- To analyze project composition before creating bundles
- Input for m1f-claude --init to create optimal configurations

The file lists respect all m1f defaults (excluding .git, node_modules, etc.)
plus your .gitignore patterns.

## Output Files

### Main Output File

The primary output specified with `-o` contains the combined content of all
processed files.

### Auxiliary Files (Automatically Generated)

For each m1f operation, auxiliary files are automatically created alongside the
main output file:

1. **File List** (`<output>_filelist.txt`)

   - Complete list of all files included in the bundle
   - One file path per line
   - Useful for:
     - Understanding what's in your bundle
     - Creating custom file lists for specific m1f operations
     - Input for other tools or scripts
     - Selective inclusion/exclusion in future bundles

2. **Directory List** (`<output>_dirlist.txt`)

   - Complete list of all directories containing processed files
   - One directory path per line
   - Useful for:
     - Understanding project structure
     - Identifying which directories to include/exclude
     - Creating directory-specific bundles

3. **Processing Log** (`<output>.log`)
   - Detailed processing information
   - Includes timing, errors, and statistics

### Working with File Lists

The generated file lists can be edited and used as input for subsequent m1f
operations:

```bash
# Initial project analysis
m1f-init
# Creates: m1f/<project>_complete_filelist.txt and m1f/<project>_docs_filelist.txt

# Edit the file list to remove unwanted files
vi m1f/myproject_complete_filelist.txt

# Use the edited list for a custom bundle
m1f -i m1f/myproject_complete_filelist.txt -o m1f/custom_bundle.txt

# Combine multiple file lists
cat m1f/*_filelist.txt | sort -u > m1f/all_files.txt
m1f -i m1f/all_files.txt -o m1f/combined.txt
```

### Disabling Auxiliary Files

Use `--minimal-output` to create only the main output file without auxiliary
files:

```bash
m1f -s . -o output.txt --minimal-output
```

## Separator Styles

The `--separator-style` option allows you to choose how files are separated in
the combined output file. Each style is designed for specific use cases, from
human readability to automated parsing.

### Standard Style

A simple, concise separator that shows only the file path:

```
======= path/to/file.py ======
```

### Detailed Style (Default)

A more comprehensive separator that includes file metadata:

```
========================================================================================
== FILE: path/to/file.py
== DATE: 2025-05-15 14:30:21 | SIZE: 2.50 KB | TYPE: .py
== CHECKSUM_SHA256: abcdef1234567890...
========================================================================================
```

### Markdown Style

Formats the metadata as Markdown with proper code blocks, using the file
extension to set syntax highlighting:

````markdown
## path/to/file.py

**Date Modified:** 2025-05-15 14:30:21 | **Size:** 2.50 KB | **Type:** .py |
**Checksum (SHA256):** abcdef1234567890...

```python
# File content starts here
def example():
    return "Hello, world!"
```
````

### MachineReadable Style

A robust format designed for reliable automated parsing and processing:

```text
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
METADATA_JSON:
{
    "original_filepath": "path/to/file.py",
    "original_filename": "file.py",
    "timestamp_utc_iso": "2025-05-15T14:30:21Z",
    "type": ".py",
    "size_bytes": 2560,
    "checksum_sha256": "abcdef1234567890..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---

# File content here

--- PYMK1F_END_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---
```

### None Style

Files are concatenated directly without any separators between them.

## Additional Notes

### Binary File Handling

While the script can include binary files using the `--include-binary-files`
option, these are read as text (UTF-8 with error ignoring). This can result in
garbled/unreadable content in the output and significantly increase file size.

### Encoding Behavior

The script uses UTF-8 as the default encoding for reading and writing files.
When using `--convert-to-charset`, the original encoding of each file is
automatically detected and recorded in the file metadata.

### Documentation File Extensions

m1f recognizes the following extensions as documentation files:

- Man pages: .1, .1st, .2, .3, .4, .5, .6, .7, .8
- Markup formats: .adoc, .asciidoc, .md, .markdown, .mdx, .rst, .org, .textile,
  .wiki
- Text formats: .txt, .text, .readme, .changelog, .changes, .todo, .notes
- Developer docs: .pod, .rdoc, .yard, .lhs, .litcoffee
- LaTeX/TeX: .tex, .ltx, .texi, .texinfo
- Other: .rtf, .nfo, .faq, .help, .history, .info, .news, .release, .story

When `--prefer-utf8-for-text-files` is enabled (default), m1f prefers UTF-8
encoding for:

- All Markdown variants (.md, .markdown, .mdx, .rmd, .qmd, etc.)
- Plain text files (.txt, .text, .readme, .changelog, .todo, etc.)
- Structured text formats (.rst, .org, .textile, .wiki, etc.)
- Developer documentation (.pod, .rdoc, .lhs, .litcoffee, etc.)

### Line Ending Behavior

The `--line-ending` option only affects the line endings generated by the script
(in separators and blank lines), not those in the original files. The line
endings of original files remain unchanged.

### Archive Creation

When `--create-archive` is used, the archive will contain all files selected for
inclusion in the main output file, using their relative paths within the
archive.

### Architecture

The m1f tool has been completely rewritten as a modular Python package:

```
tools/m1f/
├── __init__.py          # Package initialization
├── cli.py               # Command-line interface
├── core.py              # Main orchestration logic
├── config.py            # Configuration management
├── constants.py         # Constants and enums
├── exceptions.py        # Custom exceptions
├── file_processor.py    # File handling with async I/O
├── encoding_handler.py  # Smart encoding detection
├── security_scanner.py  # Secret detection integration
├── output_writer.py     # Output generation
├── archive_creator.py   # Archive functionality
├── separator_generator.py # Separator formatting
├── logging.py           # Structured logging
└── utils.py             # Utility functions
```

### Performance Considerations

With the new async I/O architecture, m1f can handle large projects more
efficiently:

- Concurrent file reading and processing
- Memory-efficient streaming for large files
- Smart caching to avoid redundant operations
- Content deduplication saves space and processing time

For extremely large directories with tens of thousands of files or very large
individual files, the script might take some time to process.

## Preset System

The preset system provides powerful file-specific processing capabilities:

### Key Features

- **Hierarchical Configuration**: Settings cascade from global → project → CLI
- **File-Type Processing**: Apply different rules to different file extensions
- **Processing Actions**:
  - `minify` - Reduce file size by removing unnecessary characters
  - `strip_tags` - Remove HTML tags
  - `strip_comments` - Remove code comments
  - `compress_whitespace` - Reduce multiple spaces/newlines
  - `remove_empty_lines` - Clean up empty lines
- **Per-File Settings**: Override security, size limits, and filters per file
  type
- **Custom Processors**: Extend with your own processing functions

### Quick Start

1. Create a preset file in your project (`.m1f-presets.yml`):

```yaml
globals:
  global_settings:
    include_extensions: [.js, .css, .html, .php]
    security_check: warn
    max_file_size: 1MB

  presets:
    frontend:
      extensions: [.js, .css, .html]
      actions: [minify]

    backend:
      extensions: [.php]
      security_check: fail
      max_file_size: 500KB
```

2. Use the preset:

```bash
m1f -s ./src -o output.txt --preset .m1f-presets.yml
```

### Documentation

**Core Documentation:**

- [Quick Reference](./09_quick_reference.md) - Common commands and patterns
- [CLI Reference](./07_cli_reference.md) - Complete command-line reference
- [Default Excludes Guide](./26_default_excludes_guide.md) - What's excluded
  automatically
- [Troubleshooting Guide](./08_troubleshooting.md) - Common issues and solutions

**Preset System:**

- [Complete Preset Guide](02_m1f_presets.md) - Full preset system documentation
- [Per-File Settings](03_m1f_preset_per_file_settings.md) - Advanced file-type
  overrides
- [Example Presets](../presets/) - Ready-to-use preset templates

**Workflows and Integration:**

- [Development Workflow](./21_development_workflow.md) - Best practices
- [Claude Code Integration](./31_claude_code_integration.md) - AI-assisted
  development
- [Auto Bundle Guide](./20_auto_bundle_guide.md) - Automated bundling

======= 01_quick_reference.md ======
# m1f Quick Reference

## Most Common Commands

### Basic File Combination

```bash
# Combine all files in current directory
m1f -s . -o output.txt

# Combine specific directory
m1f -s ./src -o bundle.txt

# Force overwrite existing output
m1f -s . -o output.txt -f
```

### Using Presets (v3.2.0+)

```bash
# Use a preset file (can define ALL parameters)
m1f --preset production.yml -o output.txt

# Preset can even define source and output
m1f --preset full-config.yml

# Override preset values with CLI
m1f --preset prod.yml -o custom-output.txt -v
```

### File Type Filtering

```bash
# Only Python files
m1f -s . -o code.txt --include-extensions .py

# Multiple file types
m1f -s . -o docs.txt --include-extensions .md .txt .rst

# Exclude certain types
m1f -s . -o output.txt --exclude-extensions .pyc .log
```

### Directory and Pattern Exclusions

```bash
# Exclude specific directories
m1f -s . -o output.txt --excludes "tests/" "docs/"

# Exclude patterns
m1f -s . -o output.txt --excludes "*.test.js" "*/tmp/*"

# Use gitignore file
m1f -s . -o output.txt --exclude-paths-file .gitignore
```

### Output Formatting

```bash
# Markdown format
m1f -s . -o output.md --separator-style Markdown

# Machine-readable JSON metadata
m1f -s . -o output.txt --separator-style MachineReadable

# No separators
m1f -s . -o output.txt --separator-style None
```

### Size Management

```bash
# Skip large files
m1f -s . -o output.txt --max-file-size 100KB

# Include only small text files
m1f -s . -o small.txt --max-file-size 50KB --include-extensions .txt .md
```

### Archive Creation

```bash
# Create zip backup
m1f -s . -o output.txt --create-archive

# Create tar.gz backup
m1f -s . -o output.txt --create-archive --archive-type tar.gz
```

### Using Presets

```bash
# Use single preset
m1f -s . -o output.txt --preset wordpress.m1f-presets.yml

# Use preset group
m1f -s . -o output.txt --preset web.yml --preset-group frontend

# Multiple presets (merged in order)
m1f -s . -o output.txt --preset base.yml project.yml
```

## Common Patterns

### Documentation Bundle

```bash
m1f -s ./docs -o documentation.txt \
    --include-extensions .md .rst .txt \
    --separator-style Markdown
```

### Source Code Bundle

```bash
m1f -s ./src -o source-code.txt \
    --include-extensions .py .js .ts .jsx .tsx \
    --excludes "*.test.*" "*.spec.*" \
    --max-file-size 500KB
```

### WordPress Theme/Plugin

```bash
m1f -s ./wp-content/themes/mytheme -o theme.txt \
    --include-extensions .php .js .css \
    --excludes "node_modules/" "vendor/" \
    --preset presets/wordpress.m1f-presets.yml
```

### Clean Documentation Export

```bash
m1f -s ./scraped_docs -o clean-docs.txt \
    --include-extensions .md \
    --remove-scraped-metadata \
    --separator-style Markdown
```

### Multiple Exclude/Include Files

```bash
# Multiple exclude files (merged)
m1f -s . -o output.txt \
    --exclude-paths-file .gitignore .dockerignore custom-excludes.txt

# Whitelist mode with include files
m1f -s . -o api-bundle.txt \
    --include-paths-file api-files.txt core-files.txt \
    --exclude-paths-file .gitignore
```

### Working with File Lists (-i)

```bash
# Single input file
m1f -s . -i files.txt -o output.txt

# Merge multiple file lists (Bash)
m1f -s . -i <(cat critical.txt important.txt nice-to-have.txt) -o output.txt

# Combine with filters (input files bypass filters)
m1f -s . -i must-include.txt -o output.txt \
    --exclude-paths-file .gitignore
```

### CI/CD Integration

```bash
# Create timestamped output
m1f -s . -o build.txt -t

# Minimal output for automation
m1f -s . -o output.txt --minimal-output --quiet

# With security check
m1f -s . -o output.txt --security-check abort
```

## Quick Option Reference

| Short | Long                 | Purpose                   |
| ----- | -------------------- | ------------------------- |
| `-s`  | `--source-directory` | Source directory          |
| `-i`  | `--input-file`       | File list input           |
| `-o`  | `--output-file`      | Output file (required)    |
| `-f`  | `--force`            | Overwrite existing        |
| `-t`  | `--add-timestamp`    | Add timestamp to filename |
| `-v`  | `--verbose`          | Detailed output           |
| `-q`  | `--quiet`            | Suppress output           |

## Separator Styles

- **Standard**: Simple filename separator
- **Detailed**: Full metadata (default)
- **Markdown**: Markdown formatting
- **MachineReadable**: JSON metadata
- **None**: No separators

## Size Units

- `B`: Bytes
- `KB`: Kilobytes (1024 bytes)
- `MB`: Megabytes
- `GB`: Gigabytes

Example: `--max-file-size 1.5MB`

## Exit on Success

```bash
m1f -s . -o output.txt && echo "Success!"
```

## Aliases Setup

Add to your shell profile:

```bash
alias m1f='python /path/to/m1f/tools/m1f.py'
alias m1f-docs='m1f -s . -o docs.txt --include-extensions .md .txt'
alias m1f-code='m1f -s . -o code.txt --include-extensions .py .js'
```

## Need Help?

- Full options: `m1f --help`
- [Complete CLI Reference](./02_cli_reference.md)
- [Troubleshooting Guide](./03_troubleshooting.md)
- [Preset Documentation](./10_m1f_presets.md)

======= 02_cli_reference.md ======
# m1f CLI Reference

This is a comprehensive reference for all command-line parameters and flags
available in m1f v3.2.0.

## Synopsis

```bash
m1f [-h] [--version] [-s DIR] [-i FILE] -o FILE
    [--input-include-files [FILE ...]]
    [--separator-style {Standard,Detailed,Markdown,MachineReadable,None}]
    [--line-ending {lf,crlf}] [-t] [--filename-mtime-hash]
    [--excludes [PATTERN ...]] [--exclude-paths-file FILE ...]
    [--include-paths-file FILE ...]
    [--include-extensions [EXT ...]] [--exclude-extensions [EXT ...]]
    [--include-dot-paths] [--include-binary-files] [--include-symlinks]
    [--max-file-size SIZE] [--no-default-excludes]
    [--remove-scraped-metadata]
    [--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}]
    [--abort-on-encoding-error] [--no-prefer-utf8-for-text-files]
    [--security-check {error,warn,skip}]
    [--create-archive] [--archive-type {zip,tar.gz}] [-f]
    [--minimal-output] [--skip-output-file] [--allow-duplicate-files]
    [-v] [-q]
    [--preset FILE [FILE ...]] [--preset-group GROUP]
    [--disable-presets]
```

## General Options

### `--help`, `-h`

Show help message and exit.

### `--version`

Show program version and exit. Current version: v3.2.0

## Input/Output Options

### `--source-directory DIR`, `-s DIR`

Path to the directory containing files to combine. Can be used multiple times to
process multiple directories.

### `--input-file FILE`, `-i FILE`

Path to a text file containing a list of files/directories to process, one per
line. These files are explicitly included and bypass all filter rules.

**Note**: At least one of `-s` (source directory) or `-i` (input file) must be
specified. When using `-i` alone, relative paths in the input file are resolved
relative to the current working directory. When both `-s` and `-i` are used,
relative paths in the input file are resolved relative to the source directory.

Example input file:

```
# Comments are supported
src/main.py          # Relative to source directory
/absolute/path.txt   # Absolute path
docs/**/*.md         # Glob patterns supported
```

**Merging multiple file lists with Bash**:

```bash
# Create temporary merged file
cat files1.txt files2.txt files3.txt > merged_files.txt
m1f -s . -i merged_files.txt -o output.txt

# Or use process substitution (Linux/Mac)
m1f -s . -i <(cat files1.txt files2.txt files3.txt) -o output.txt

# Remove duplicates while merging
m1f -s . -i <(cat files1.txt files2.txt | sort -u) -o output.txt
```

### `--output-file FILE`, `-o FILE` (REQUIRED)

Path where the combined output file will be created. This is the only required
parameter.

### `--input-include-files [FILE ...]`

Files to include at the beginning of the output. The first file is treated as an
introduction/header.

## Output Formatting

### `--separator-style {Standard,Detailed,Markdown,MachineReadable,None}`

Format of the separator between files. Default: `Detailed`

- **Standard**: Simple separator with filename
- **Detailed**: Includes file metadata (date, size, type, checksum)
- **Markdown**: Markdown-formatted headers and metadata
- **MachineReadable**: JSON metadata blocks for programmatic parsing
- **None**: No separators (files concatenated directly)

### `--line-ending {lf,crlf}`

Line ending style for generated content. Default: `lf`

- **lf**: Unix/Linux/Mac style (\n)
- **crlf**: Windows style (\r\n)

### `--add-timestamp`, `-t`

Add timestamp to output filename in format `_YYYYMMDD_HHMMSS`.

### `--filename-mtime-hash`

Add hash of file modification times to output filename. Useful for
cache-busting.

## File Filtering

### `--excludes [PATTERN ...]`

Paths, directories, or glob patterns to exclude. Supports wildcards.

Example: `--excludes "*/tests/*" "*.pyc" "node_modules/"`

### `--exclude-paths-file FILE ...`

File(s) containing paths to exclude (supports gitignore format). Each pattern on
a new line. Multiple files can be specified and will be merged. Non-existent
files are skipped gracefully.

Examples:

```bash
# Single file
m1f -s . -o output.txt --exclude-paths-file .gitignore

# Multiple files
m1f -s . -o output.txt --exclude-paths-file .gitignore .m1fignore custom-excludes.txt
```

### `--include-paths-file FILE ...`

File(s) containing patterns to include (supports gitignore format). When
specified, only files matching these patterns will be included (whitelist mode).
Multiple files can be specified and will be merged. Non-existent files are
skipped gracefully.

**Processing Order**:

1. Files from `-i` (input-file) are always included, bypassing all filters
2. Files from `-s` (source directory) are filtered by include patterns first
3. Then exclude patterns are applied

**Path Resolution**: Same as `-i` - relative paths are resolved relative to the
source directory (`-s`).

Example include file:

```
# Include all Python files
*.py
# Include specific directories
src/**/*
api/**/*
# Exclude tests even if they match above
!test_*.py
```

Examples:

```bash
# Single file
m1f -s . -o output.txt --include-paths-file important-files.txt

# Multiple files
m1f -s . -o output.txt --include-paths-file core-files.txt api-files.txt

# Combined with input file (input file takes precedence)
m1f -s . -i explicit-files.txt -o output.txt --include-paths-file patterns.txt
```

### `--include-extensions [EXT ...]`

Only include files with these extensions. Extensions should include the dot.

Example: `--include-extensions .py .js .md`

### `--exclude-extensions [EXT ...]`

Exclude files with these extensions.

Example: `--exclude-extensions .pyc .pyo`

### `--include-dot-paths`

Include files and directories starting with a dot (hidden files). By default,
these are excluded.

### `--include-binary-files`

Attempt to include binary files. Use with caution as this may produce unreadable
output.

### `--include-symlinks`

Follow symbolic links. Be careful of infinite loops!

### `--max-file-size SIZE`

Skip files larger than specified size. Supports KB, MB, GB suffixes.

Examples: `10KB`, `1.5MB`, `2GB`

### `--no-default-excludes`

Disable default exclusions. By default, m1f excludes:

- `.git/`, `.svn/`, `.hg/`
- `node_modules/`, `venv/`, `.venv/`
- `__pycache__/`, `*.pyc`
- `.DS_Store`, `Thumbs.db`

### `--remove-scraped-metadata`

Remove scraped metadata (URL, timestamp) from HTML2MD files during processing.
Useful when processing scraped content.

## Character Encoding

### `--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}`

Convert all files to specified encoding. Default behavior is to detect and
preserve original encoding.

### `--abort-on-encoding-error`

Abort if encoding conversion fails. By default, files with encoding errors are
skipped with a warning.

### `--no-prefer-utf8-for-text-files`

Disable UTF-8 preference for text files (.md, .txt, .rst) when encoding is
ambiguous. By default, m1f prefers UTF-8 encoding for these file types when
chardet detects windows-1252 with less than 95% confidence, as these files often
contain UTF-8 emojis or special characters.

## Security Options

### `--security-check {error,warn,skip}`

Check for sensitive information in files using detect-secrets.

- **error**: Stop processing if secrets are found (default in v3.2)
- **warn**: Include files but show warnings
- **skip**: Disable security scanning (not recommended)

## Archive Options

### `--create-archive`

Create backup archive of processed files in addition to the combined output.

### `--archive-type {zip,tar.gz}`

Type of archive to create. Default: `zip`

## Output Control

### `--force`, `-f`

Force overwrite of existing output file without prompting.

### `--minimal-output`

Only create the combined file (no auxiliary files like file lists or directory
structure).

### `--skip-output-file`

Skip creating the main output file. Useful when only creating an archive.

### `--allow-duplicate-files`

Allow files with identical content to be included in the output. By default, m1f
deduplicates files based on their content checksum to save space and tokens.
With this flag, all files are included even if they have identical content.

### `--verbose`, `-v`

Enable verbose output with detailed processing information.

### `--quiet`, `-q`

Suppress all console output except errors.

## Preset Configuration

### `--preset FILE [FILE ...]`

Load preset configuration file(s) for file-specific processing. Multiple files
are merged in order.

### `--preset-group GROUP`

Use a specific preset group from the configuration file.

### `--disable-presets`

Disable all preset processing, even if preset files are specified.

## Exit Codes

- **0**: Success
- **1**: General error (M1FError base)
- **2**: File not found (FileNotFoundError)
- **3**: Permission denied (PermissionError)
- **4**: Encoding error (EncodingError)
- **5**: Configuration error (ConfigurationError)
- **6**: Validation error (ValidationError)
- **7**: Security check failed (SecurityError)
- **8**: Archive creation failed (ArchiveError)
- **130**: Operation cancelled by user (Ctrl+C)

## Environment Variables

**Note**: The following environment variables are documented for future
implementation but are not currently supported in v3.2.0:

- `M1F_DEFAULT_PRESET` - Path to default preset file (not implemented)
- `M1F_SECURITY_CHECK` - Default security check mode (not implemented)
- `M1F_MAX_FILE_SIZE` - Default maximum file size limit (not implemented)

## Subcommands

### `auto-bundle`

Create multiple m1f bundles based on a YAML configuration file
(`.m1f.config.yml`).

```bash
# Create all bundles
m1f auto-bundle

# Create specific bundle
m1f auto-bundle BUNDLE_NAME

# List available bundles
m1f auto-bundle --list

# With options
m1f auto-bundle --verbose
m1f auto-bundle --quiet
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle`
that can be used interchangeably:

```bash
# These are equivalent:
m1f auto-bundle
m1f-update

# With specific bundle:
m1f auto-bundle code
m1f-update code
```

**Options:**

- `BUNDLE_NAME`: Name of specific bundle to create (optional)
- `--list`: List available bundles from configuration
- `--verbose`, `-v`: Enable verbose output
- `--quiet`, `-q`: Suppress all console output

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for detailed configuration
instructions.

## Notes

1. **Module Invocation**: You can use either `m1f` or `python -m tools.m1f`, or
   set up the `m1f` alias as described in the development workflow.

2. **Input Requirements**: At least one of `-s` (source directory) or `-i`
   (input file) must be specified. If neither is provided, m1f will show an
   error message.

3. **Gitignore**: m1f respects .gitignore files by default unless
   `--no-default-excludes` is used.

4. **Performance**: For large projects, use `--include-extensions` to limit
   processing to specific file types.

======= 03_troubleshooting.md ======
# Troubleshooting Guide

This guide covers common issues and error messages you might encounter when
using m1f.

## Common Issues

### Module Import Error

**Problem**: Running `m1f` results in:

```
ModuleNotFoundError: No module named 'm1f'
```

**Solution**: Use the direct script invocation instead:

```bash
m1f [options]
```

Or set up the alias as described in the
[Development Workflow](./21_development_workflow.md).

### Permission Denied

**Problem**: Error when trying to write output file:

```
PermissionError: [Errno 13] Permission denied: '/path/to/output.txt'
```

**Solutions**:

1. Check write permissions in the output directory
2. Use a different output location
3. Run with appropriate permissions (avoid using sudo unless necessary)

### File Not Found

**Problem**: Source directory or input file not found.

**Solutions**:

1. Verify the path exists: `ls -la /path/to/source`
2. Use absolute paths to avoid confusion
3. Check for typos in the path

### Encoding Errors

**Problem**: `UnicodeDecodeError` when processing files.

**Solutions**:

1. Use `--convert-to-charset utf-8` to force UTF-8 encoding
2. Skip problematic files with proper exclusion patterns
3. Use `--abort-on-encoding-error` to identify problematic files

Example:

```bash
m1f -s . -o output.txt --convert-to-charset utf-8
```

### Memory Issues with Large Projects

**Problem**: Memory usage is too high or process is killed.

**Solutions**:

1. Use `--max-file-size` to limit individual file sizes
2. Process specific directories instead of entire project
3. Use `--include-extensions` to limit file types
4. Enable minimal output mode: `--minimal-output`

Example:

```bash
m1f -s . -o output.txt --max-file-size 1MB --include-extensions .py .md
```

### Symlink Cycles

**Problem**: Infinite loop when following symlinks.

**Solutions**:

1. Don't use `--include-symlinks` unless necessary
2. Exclude directories with circular symlinks
3. m1f has built-in cycle detection, but it's better to avoid the issue

### Security Check Failures

**Problem**: Files contain sensitive information.

**Solutions**:

1. Review the detected secrets
2. Use `--security-check skip` to skip files with secrets
3. Use `--security-check warn` to include but get warnings
4. Add sensitive files to exclusions

Example:

```bash
m1f -s . -o output.txt --security-check warn --excludes ".env" "config/secrets.yml"
```

## Error Messages

### "Output file already exists"

**Meaning**: The specified output file exists and would be overwritten.

**Solution**: Use `-f` or `--force` to overwrite, or choose a different output
filename.

### "No files found to process"

**Meaning**: No files matched the inclusion criteria.

**Solutions**:

1. Check your source directory contains files
2. Verify extension filters aren't too restrictive
3. Check exclusion patterns aren't excluding everything
4. Use `--verbose` to see what's being processed

### "File size exceeds maximum allowed"

**Meaning**: A file is larger than the specified `--max-file-size`.

**Solution**: The file is automatically skipped. Adjust `--max-file-size` if
needed.

### "Failed to create archive"

**Meaning**: Archive creation failed (disk space, permissions, etc.).

**Solutions**:

1. Check available disk space
2. Verify write permissions
3. Try a different archive format
4. Skip archive creation and create output file only

### "Preset file not found"

**Meaning**: The specified preset configuration file doesn't exist.

**Solutions**:

1. Check the preset file path
2. Use absolute paths for preset files
3. Verify preset file exists: `ls -la presets/`

## Performance Optimization

### Slow Processing

**Solutions**:

1. Use `--include-extensions` to limit file types
2. Exclude large directories like `node_modules`
3. Use `--max-file-size` to skip large files
4. Enable minimal output: `--minimal-output`
5. Disable security checks if not needed

### High Memory Usage

**Solutions**:

1. Process smaller directory trees
2. Use file size limits
3. Exclude binary files
4. Process in batches using input file lists

## Debug Mode

For detailed debugging information:

```bash
m1f -s . -o output.txt --verbose
```

This will show:

- Files being processed
- Files being skipped and why
- Processing times
- Detailed error messages

## Getting Help

1. Check the [CLI Reference](./02_cli_reference.md) for parameter details
2. Review [examples in the main documentation](00_m1f.md#common-use-cases)
3. Check the [preset documentation](./10_m1f_presets.md) for configuration
   issues
4. Report issues at the project repository

## Exit Codes

Understanding exit codes can help in scripting:

- `0`: Success
- `1`: General error
- `2`: Invalid arguments
- `3`: File not found
- `4`: Permission denied
- `5`: Security check failed

Use in scripts:

```bash
if m1f -s . -o output.txt; then
    echo "Success"
else
    echo "Failed with exit code: $?"
fi
```

======= 10_m1f_presets.md ======
# m1f Preset System Documentation

The m1f preset system allows you to define file-specific processing rules,
enabling different handling for different file types within the same bundle.

## Overview

Instead of applying the same settings to all files, presets let you:

- Minify HTML files while preserving source code formatting
- Strip comments from production code but keep them in documentation
- Apply different separator styles for different file types
- Truncate large data files while keeping full source code
- **NEW**: Override security checks and size limits per file type
- **NEW**: Integrate with auto-bundling for intelligent project organization

## Quick Start

1. **Use a built-in preset**:

   ```bash
   m1f -s ./my-project -o bundle.txt --preset presets/wordpress.m1f-presets.yml
   ```

2. **Specify a preset group**:

   ```bash
   m1f -s ./site -o bundle.txt --preset presets/web-project.m1f-presets.yml --preset-group frontend
   ```

3. **Use multiple preset files**:
   ```bash
   m1f -s . -o bundle.txt --preset company-presets.yml project-presets.yml
   ```

## Preset Configuration File

Preset files are YAML documents that define processing rules:

```yaml
# Group name
my_project:
  description: "Processing rules for my project"
  enabled: true
  priority: 10 # Higher priority groups are checked first
  base_path: "src" # Optional base path for patterns

  presets:
    # Preset for Python files
    python:
      extensions: [".py"]
      patterns:
        - "*.py"
        - "lib/**/*.py"
      actions:
        - strip_comments
        - remove_empty_lines
      separator_style: "Detailed"
      include_metadata: true

    # Preset for HTML files
    html:
      extensions: [".html", ".htm"]
      actions:
        - minify
        - strip_tags
      strip_tags: ["script", "style"]
      preserve_tags: ["pre", "code"]
      max_lines: 500 # Truncate after 500 lines

    # Default preset for unmatched files
    default:
      actions: []
      include_metadata: true
```

## Available Actions

### Built-in Actions

1. **`minify`** - Reduces file size by removing unnecessary whitespace

   - HTML: Removes comments, compresses whitespace
   - CSS: Removes comments, compresses rules
   - JS: Basic minification (removes comments and newlines)

2. **`strip_tags`** - Removes HTML tags

   - Use `strip_tags` to list tags to remove
   - Use `preserve_tags` to protect specific tags

3. **`strip_comments`** - Removes comments based on file type

   - Python: Removes # comments (preserves docstrings)
   - JS/Java/C/C++: Removes // and /\* \*/ comments

4. **`compress_whitespace`** - Normalizes whitespace

   - Replaces multiple spaces with single space
   - Reduces multiple newlines to double newline

5. **`remove_empty_lines`** - Removes all empty lines

6. **`custom`** - Apply custom processor
   - Specify processor with `custom_processor`
   - Pass arguments with `processor_args`

### Built-in Custom Processors

1. **`truncate`** - Limit content length

   ```yaml
   actions:
     - custom
   custom_processor: "truncate"
   processor_args:
     max_chars: 1000
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   actions:
     - custom
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)api[_-]?key\s*[:=]\s*["\']?[\w-]+["\']?'
   ```

3. **`extract_functions`** - Extract only function definitions (Python)
   ```yaml
   actions:
     - custom
   custom_processor: "extract_functions"
   ```

## Preset Options

### File Matching

- **`extensions`**: List of file extensions (e.g., `[".py", ".js"]`)
- **`patterns`**: Glob patterns for matching files (e.g., `["src/**/*.py"]`)

### Processing Options

- **`actions`**: List of processing actions to apply
- **`strip_tags`**: HTML tags to remove
- **`preserve_tags`**: HTML tags to keep when stripping
- **`separator_style`**: Override default separator ("Standard", "Detailed",
  "Markdown", "None")
- **`include_metadata`**: Whether to include file metadata (default: true)
- **`max_lines`**: Truncate file after N lines

### Custom Processing

- **`custom_processor`**: Name of custom processor
- **`processor_args`**: Arguments for custom processor

## Examples

### WordPress Project

```yaml
wordpress:
  description: "WordPress project processing"

  presets:
    php:
      extensions: [".php"]
      actions:
        - strip_comments
        - remove_empty_lines

    config:
      patterns: ["wp-config*.php", ".env*"]
      actions:
        - custom
      custom_processor: "redact_secrets"

    sql:
      extensions: [".sql"]
      actions:
        - strip_comments
      max_lines: 1000 # Truncate large dumps
```

### Frontend Project

```yaml
frontend:
  description: "React/Vue/Angular project"

  presets:
    components:
      extensions: [".jsx", ".tsx", ".vue"]
      actions:
        - strip_comments
        - compress_whitespace

    styles:
      extensions: [".css", ".scss"]
      actions:
        - minify
      # Note: exclude_patterns is available in global_settings, not in presets

    images:
      extensions: [".png", ".jpg", ".svg"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 50 # Just filename
```

### Documentation Project

```yaml
documentation:
  description: "Documentation processing"

  presets:
    markdown:
      extensions: [".md", ".mdx"]
      actions:
        - remove_empty_lines
      separator_style: "Markdown"

    code_examples:
      patterns: ["examples/**/*"]
      actions:
        - strip_comments
      max_lines: 50 # Keep examples concise
```

## Priority and Selection

When multiple preset groups are loaded:

1. Groups are checked by priority (highest first)
2. Within a group, presets are checked in order:
   - Extension matches
   - Pattern matches
   - Default preset
3. First matching preset is used
4. If no preset matches, standard m1f processing applies

## Command Line Usage

```bash
# Use single preset file
m1f -s . -o out.txt --preset my-presets.yml

# Use specific group
m1f -s . -o out.txt --preset presets.yml --preset-group backend

# Multiple preset files (merged in order)
m1f -s . -o out.txt --preset base.yml project.yml

# Disable all presets
m1f -s . -o out.txt --preset presets.yml --disable-presets
```

## Complete List of Supported Settings

### Global Settings

These apply to all files unless overridden:

```yaml
global_settings:
  # Encoding and formatting
  encoding: "utf-8"
  separator_style: "Detailed"
  line_ending: "lf"

  # Include/exclude patterns
  include_patterns: ["src/**/*", "lib/**/*"]
  exclude_patterns: ["*.min.js", "*.map"]
  include_extensions: [".py", ".js", ".md"]
  exclude_extensions: [".log", ".tmp"]

  # File filtering
  include_dot_paths: false
  include_binary_files: false
  include_symlinks: false
  no_default_excludes: false
  max_file_size: "10MB"

  # Exclude/include file(s) - can be single file or list
  exclude_paths_file: ".gitignore"
  # Or multiple files:
  # exclude_paths_file:
  #   - ".gitignore"
  #   - ".m1fignore"
  #   - "custom-excludes.txt"

  # Include file(s) for whitelist mode
  # include_paths_file: "important-files.txt"
  # Or multiple files:
  # include_paths_file:
  #   - "core-files.txt"
  #   - "api-files.txt"

  # Processing options
  remove_scraped_metadata: true
  abort_on_encoding_error: false

  # Security
  security_check: "warn" # abort, skip, warn
```

### Extension-Specific Settings

All file-specific settings can now be overridden per extension in
global_settings or in individual presets:

```yaml
global_settings:
  extensions:
    .md:
      actions: [remove_empty_lines]
      security_check: null # Disable security checks for markdown
      remove_scraped_metadata: true
    .php:
      actions: [strip_comments]
      security_check: "abort" # Strict security for PHP
      max_file_size: "5MB"
    .css:
      actions: [minify]
      max_file_size: "50KB" # Stricter size limit for CSS
    .log:
      include_dot_paths: true # Include hidden log files
      max_file_size: "100KB"

presets:
  sensitive_code:
    extensions: [".env", ".key", ".pem"]
    security_check: "abort"
    include_binary_files: false

  documentation:
    extensions: [".md", ".txt", ".rst"]
    security_check: null # No security check for docs
    remove_scraped_metadata: true
```

## Advanced Examples

### Security Check per File Type

Disable security checks for documentation but keep them for code:

```yaml
security_example:
  global_settings:
    security_check: "abort" # Default: strict

    extensions:
      .md:
        security_check: null # Disable for markdown
      .txt:
        security_check: null # Disable for text
      .rst:
        security_check: null # Disable for reStructuredText
      .php:
        security_check: "abort" # Keep strict for PHP
      .js:
        security_check: "warn" # Warn only for JS
      .env:
        security_check: "abort" # Very strict for env files
```

### Size Limits per File Type

Different size limits for different file types:

```yaml
size_limits:
  global_settings:
    max_file_size: "1MB" # Default limit

    extensions:
      .css:
        max_file_size: "50KB" # Stricter for CSS
      .js:
        max_file_size: "100KB" # JavaScript limit
      .php:
        max_file_size: "5MB" # More lenient for PHP
      .sql:
        max_file_size: "10MB" # Large SQL dumps allowed
      .log:
        max_file_size: "500KB" # Log file limit

  presets:
    # Override for specific patterns
    vendor_files:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      max_file_size: "10KB" # Very small for vendor files
```

### Different Processing by Location

Process files differently based on their location:

```yaml
conditional:
  presets:
    # Production files - minify and strip
    production:
      patterns: ["dist/**/*", "build/**/*"]
      actions: [minify, strip_comments]

    # Development files - keep readable
    development:
      patterns: ["src/**/*", "dev/**/*"]
      actions: [remove_empty_lines]

    # Vendor files - skip processing
    vendor:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      actions: [] # No processing
```

### Combining Multiple Presets

You can load multiple preset files that build on each other:

```bash
m1f -s . -o bundle.txt \
  --preset base-rules.yml \
  --preset project-specific.yml \
  --preset production-overrides.yml
```

## Creating Custom Presets

1. **Start with a template**:

   ```bash
   # Use the comprehensive template with all available settings
   cp presets/template-all-settings.m1f-presets.yml my-project.m1f-presets.yml

   # Or start from a simpler example
   cp presets/web-project.m1f-presets.yml my-project.m1f-presets.yml
   ```

2. **Customize for your project**:

   - Identify file types needing special handling
   - Choose appropriate actions
   - Test with a small subset first

3. **Tips**:
   - Use `max_lines` for generated or data files
   - Apply `minify` only to production builds
   - Keep `preserve_tags` for code examples in HTML
   - Use high priority for project-specific rules

## Integration with CI/CD

```yaml
# GitHub Actions example
- name: Create bundle with presets
  run: |
    m1f \
      -s . \
      -o release-bundle.txt \
      --preset .github/release-presets.yml \
      --preset-group production
```

## Troubleshooting

### Preset not applying

- Check file extension includes the dot (`.py` not `py`)
- Verify pattern matches with `--verbose` flag
- Ensure preset group is enabled

### Wrong preset selected

- Check priority values (higher = checked first)
- Use specific patterns over broad extensions
- Use `--preset-group` to target specific group

### Processing errors

- Some actions may not work on all file types
- Binary files skip most processing
- Use `--verbose` to see which presets are applied

## Auto-Bundling Integration

The preset system integrates seamlessly with the auto-bundling scripts:

### Using Presets with Auto-Bundle

1. **With VS Code Tasks**:

   - Use the "Auto Bundle: With Preset" task
   - Select your preset file and optional group
   - The bundle will apply file-specific processing

2. **With m1f-update Command**:

   ```bash
   # Create all bundles with auto-bundle
   m1f-update

   # Create specific bundle
   m1f-update wordpress

   # List available bundles
   m1f-update --list
   ```

3. **Available Preset Bundles**:
   - `wordpress` - Theme and plugin development
   - `web-project` - Frontend/backend web projects
   - `documentation` - Documentation-focused bundles
   - Custom presets in `presets/` directory

### Benefits

- **Intelligent Filtering**: Each preset knows which files to include
- **Optimized Processing**: Apply minification only where beneficial
- **Security Control**: Different security levels for different file types
- **Size Management**: Appropriate size limits per file type

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for more details on the
bundling system.

## See Also

- [**Preset System Complete Reference**](./10_preset_reference.md) -
  Comprehensive reference with all settings, undocumented features, and advanced
  patterns
- [**Per-File Settings Guide**](./11_preset_per_file_settings.md) - Deep dive
  into per-file processing
- [**Auto Bundle Guide**](./20_auto_bundle_guide.md) - Automated bundling with
  presets

======= 11_preset_per_file_settings.md ======
# Per-File-Type Settings in m1f Presets

The m1f preset system supports fine-grained control over processing settings on
a per-file-type basis. This allows you to apply different rules to different
file types within the same bundle.

## Overview

You can override almost any m1f setting for specific file extensions or
patterns. This is particularly useful for:

- Disabling security checks for documentation while keeping them for code
- Setting different size limits for CSS vs PHP files
- Applying different processing rules based on file type
- Handling sensitive files differently from public files

## Supported Per-File Settings

The following settings can be overridden on a per-file basis:

### Processing Settings

- `actions` - List of processing actions (minify, strip_comments, etc.)
- `strip_tags` - HTML tags to remove
- `preserve_tags` - HTML tags to preserve
- `separator_style` - Override separator style for specific files
- `include_metadata` - Whether to include file metadata
- `max_lines` - Truncate after N lines

### Security & Filtering

- `security_check` - Override security scanning (`"abort"`, `"skip"`, `"warn"`,
  `null`)
- `max_file_size` - File-specific size limit (e.g., `"50KB"`, `"5MB"`)
- `remove_scraped_metadata` - Remove HTML2MD metadata for specific files
- `include_dot_paths` - Include hidden files for this type
- `include_binary_files` - Include binary files for this type

### Custom Processing

- `custom_processor` - Name of custom processor to use
- `processor_args` - Arguments for the custom processor

## Configuration Methods

### Method 1: Global Extension Settings

Define defaults for all files of a specific extension:

```yaml
my_project:
  global_settings:
    # Default settings for all files
    security_check: "abort"
    max_file_size: "1MB"

    # Extension-specific overrides
    extensions:
      .md:
        security_check: null # Disable for markdown
        remove_scraped_metadata: true
        max_file_size: "500KB"

      .php:
        security_check: "abort" # Keep strict for PHP
        max_file_size: "5MB"
        actions: [strip_comments]

      .css:
        max_file_size: "50KB" # Strict limit for CSS
        actions: [minify, strip_comments]

      .env:
        security_check: "abort"
        include_dot_paths: true # Include .env files
        max_file_size: "10KB"
```

### Method 2: Preset-Specific Settings

Define settings for files matching specific patterns:

```yaml
my_project:
  presets:
    documentation:
      extensions: [".md", ".rst", ".txt"]
      patterns: ["docs/**/*", "README*"]
      security_check: null # No security check
      remove_scraped_metadata: true
      max_file_size: "1MB"

    sensitive_files:
      extensions: [".env", ".key", ".pem"]
      patterns: ["config/**/*", "secrets/**/*"]
      security_check: "abort"
      max_file_size: "50KB"
      include_dot_paths: true

    vendor_code:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      security_check: null # Don't check third-party code
      max_file_size: "100KB" # Only include small files
      actions: [] # No processing
```

## Real-World Examples

### Example 1: Web Project with Mixed Content

```yaml
web_project:
  global_settings:
    # Defaults
    security_check: "warn"
    max_file_size: "2MB"

    extensions:
      # Documentation - relaxed rules
      .md:
        security_check: null
        remove_scraped_metadata: true
        actions: [remove_empty_lines]

      # Frontend - strict size limits
      .css:
        max_file_size: "50KB"
        security_check: "skip"
        actions: [minify]

      .js:
        max_file_size: "100KB"
        security_check: "warn"
        actions: [strip_comments, compress_whitespace]

      # Backend - larger files, strict security
      .php:
        max_file_size: "5MB"
        security_check: "abort"
        actions: [strip_comments]

      # Data files - very different handling
      .sql:
        max_file_size: "10MB"
        security_check: null
        max_lines: 1000 # Truncate large dumps
```

### Example 2: Documentation Project

```yaml
documentation:
  global_settings:
    # Default: include everything for docs
    security_check: null
    remove_scraped_metadata: true

    extensions:
      # Markdown files
      .md:
        actions: [remove_empty_lines]
        separator_style: "Markdown"

      # Code examples in docs
      .py:
        max_lines: 50 # Keep examples short
        actions: [strip_comments]

      # Config examples
      .json:
        actions: [compress_whitespace]
        max_lines: 30

      # Log file examples
      .log:
        max_file_size: "100KB"
        max_lines: 100
```

### Example 3: Security-Focused Configuration

```yaml
secure_project:
  global_settings:
    # Very strict by default
    security_check: "abort"
    abort_on_encoding_error: true

    extensions:
      # Public documentation - can be relaxed
      .md:
        security_check: null

      # Code files - different levels
      .js:
        security_check: "warn" # Client-side code

      .php:
        security_check: "abort" # Server-side code

      .env:
        security_check: "abort"
        max_file_size: "10KB" # Env files should be small

      # Config files - careful handling
      .json:
        security_check: "warn"
        actions: [custom]
        custom_processor: "redact_secrets"
```

## Priority and Precedence

When multiple settings could apply to a file, they are resolved in this order:

1. **File-specific preset settings** (highest priority)
   - Settings in a preset that matches the file
2. **Global extension settings**
   - Settings in `global_settings.extensions`
3. **Global defaults** (lowest priority)
   - Settings in `global_settings`

Example:

```yaml
my_project:
  global_settings:
    max_file_size: "1MB" # Default for all

    extensions:
      .js:
        max_file_size: "500KB" # Override for JS files

  presets:
    vendor_js:
      patterns: ["vendor/**/*.js"]
      max_file_size: "2MB" # Override for vendor JS (highest priority)
```

## Best Practices

1. **Start with sensible defaults** in `global_settings`
2. **Use extension settings** for broad file-type rules
3. **Use presets** for location or context-specific overrides
4. **Document your choices** with comments
5. **Test incrementally** with `--verbose` to see which rules apply

## Limitations

- Settings cascade down but don't merge collections (e.g., `actions` lists
  replace, not extend)
- Some settings only make sense for certain file types
- Binary file detection happens before preset processing

## See Also

- [Preset System Guide](10_m1f_presets.md) - General preset documentation
- [Preset Template](../../presets/template-all-settings.m1f-presets.yml) -
  Complete example with all settings
- [Use Case Examples](../../presets/example-use-cases.m1f-presets.yml) -
  Real-world scenarios

======= 12_preset_reference.md ======
# m1f Preset System Complete Reference

This document provides a comprehensive reference for the m1f preset system,
including all available settings, clarifications, and advanced usage patterns.

## Table of Contents

- [Quick Start](#quick-start)
- [Preset File Format](#preset-file-format)
- [All Available Settings](#all-available-settings)
- [Available Actions](#available-actions)
- [Pattern Matching](#pattern-matching)
- [Processing Order](#processing-order)
- [Important Clarifications](#important-clarifications)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Debugging and Best Practices](#debugging-and-best-practices)

## Quick Start

The m1f preset system allows you to define file-specific processing rules and
configurations. Here's a minimal example:

```yaml
# my-preset.yml
web_assets:
  description: "Process web assets"
  presets:
    javascript:
      extensions: [".js", ".jsx"]
      actions: ["minify", "strip_comments"]
```

Use it with:

```bash
# Module invocation (recommended)
m1f -s ./src -o bundle.txt --preset my-preset.yml

# Direct command invocation (if installed)
m1f -s ./src -o bundle.txt --preset my-preset.yml
```

## Preset File Format

### Modern Format (Recommended)

```yaml
# Group name - can be selected with --preset-group
group_name:
  description: "Optional description of this preset group"
  enabled: true # Can disable entire group
  priority: 10 # Higher numbers are processed first (default: 0)
  base_path: "src" # Optional base path for all patterns in this group

  presets:
    # Preset name (for internal reference)
    preset_name:
      patterns: ["*.js", "*.jsx"] # Glob patterns
      extensions: [".js", ".jsx"] # Extension matching (with or without dot)
      actions:
        - minify
        - strip_comments
        - compress_whitespace

      # Per-file overrides
      security_check: "warn" # error, skip, warn
      max_file_size: "500KB"
      include_dot_paths: true
      include_binary_files: false
      remove_scraped_metadata: true

      # Custom processor with arguments
      custom_processor: "truncate"
      processor_args:
        max_lines: 100
        add_marker: true

# Global settings (apply to all groups)
globals:
  global_settings:
    # Input/Output settings (NEW in v3.2.0)
    source_directory: "./src"
    input_file: "files_to_process.txt"
    output_file: "bundle.txt"
    input_include_files:
      - "README.md"
      - "INTRO.txt"

    # Output control (NEW in v3.2.0)
    add_timestamp: true
    filename_mtime_hash: false
    force: false
    minimal_output: false
    skip_output_file: false

    # Archive settings (NEW in v3.2.0)
    create_archive: false
    archive_type: "zip" # zip or tar.gz

    # Runtime behavior (NEW in v3.2.0)
    verbose: false
    quiet: false

    # Default file processing
    security_check: "warn"
    max_file_size: "1MB"

    # Per-extension settings
    extensions:
      .py:
        security_check: "error"
        max_file_size: "2MB"
      .env:
        security_check: "skip"
        actions: ["redact_secrets"]
```

## All Available Settings

### Group-Level Settings

| Setting             | Type    | Default | Description                     |
| ------------------- | ------- | ------- | ------------------------------- |
| `description`       | string  | none    | Human-readable description      |
| `enabled`           | boolean | true    | Enable/disable this group       |
| `priority`          | integer | 0       | Processing order (higher first) |
| `base_path`         | string  | none    | Base path for pattern matching  |
| `enabled_if_exists` | string  | none    | Only enable if this path exists |

### Global Settings (NEW in v3.2.0)

These settings can be specified in the `global_settings` section and override
CLI defaults:

#### Input/Output Settings

| Setting               | Type        | Default | Description                                 |
| --------------------- | ----------- | ------- | ------------------------------------------- |
| `source_directory`    | string      | none    | Source directory path                       |
| `input_file`          | string      | none    | Input file listing paths to process         |
| `output_file`         | string      | none    | Output file path                            |
| `input_include_files` | string/list | []      | Files to include at beginning (intro files) |

#### Output Control Settings

| Setting                 | Type    | Default | Description                          |
| ----------------------- | ------- | ------- | ------------------------------------ |
| `add_timestamp`         | boolean | false   | Add timestamp to output filename     |
| `filename_mtime_hash`   | boolean | false   | Add hash of file mtimes to filename  |
| `force`                 | boolean | false   | Force overwrite existing output file |
| `minimal_output`        | boolean | false   | Only create main output file         |
| `skip_output_file`      | boolean | false   | Skip creating main output file       |
| `allow_duplicate_files` | boolean | false   | Allow duplicate content (v3.2)       |

#### Archive Settings

| Setting          | Type    | Default | Description                       |
| ---------------- | ------- | ------- | --------------------------------- |
| `create_archive` | boolean | false   | Create backup archive of files    |
| `archive_type`   | string  | "zip"   | Archive format: "zip" or "tar.gz" |

#### Runtime Settings

| Setting   | Type    | Default | Description                 |
| --------- | ------- | ------- | --------------------------- |
| `verbose` | boolean | false   | Enable verbose output       |
| `quiet`   | boolean | false   | Suppress all console output |

#### File Processing Settings

| Setting                        | Type    | Default | Description                         |
| ------------------------------ | ------- | ------- | ----------------------------------- |
| `encoding`                     | string  | "utf-8" | Target encoding for all files       |
| `separator_style`              | string  | none    | File separator style                |
| `line_ending`                  | string  | "lf"    | Line ending style (lf/crlf)         |
| `security_check`               | string  | "warn"  | How to handle secrets               |
| `max_file_size`                | string  | none    | Maximum file size to process        |
| `enable_content_deduplication` | boolean | true    | Enable content deduplication (v3.2) |
| `prefer_utf8_for_text_files`   | boolean | true    | Prefer UTF-8 for text files (v3.2)  |

### Preset-Level Settings

| Setting                   | Type    | Default | Description                                 |
| ------------------------- | ------- | ------- | ------------------------------------------- |
| `patterns`                | list    | []      | Glob patterns to match files                |
| `extensions`              | list    | []      | File extensions to match                    |
| `actions`                 | list    | []      | Processing actions to apply                 |
| `security_check`          | string  | "warn"  | How to handle secrets                       |
| `max_file_size`           | string  | none    | Maximum file size to process                |
| `include_dot_paths`       | boolean | false   | Include hidden files                        |
| `include_binary_files`    | boolean | false   | Process binary files                        |
| `remove_scraped_metadata` | boolean | false   | Remove HTML2MD metadata                     |
| `custom_processor`        | string  | none    | Name of custom processor                    |
| `processor_args`          | dict    | {}      | Arguments for custom processor              |
| `line_ending`             | string  | "lf"    | Convert line endings (lf, crlf)             |
| `separator_style`         | string  | none    | Override default separator style            |
| `include_metadata`        | boolean | true    | Include file metadata in output             |
| `max_lines`               | integer | none    | Truncate file after N lines                 |
| `strip_tags`              | list    | []      | HTML tags to remove (for strip_tags action) |
| `preserve_tags`           | list    | []      | HTML tags to preserve when stripping        |

## Available Actions

### Built-in Actions

1. **`minify`** - Remove unnecessary whitespace and formatting

   - Reduces file size
   - Maintains functionality
   - Best for: JS, CSS, HTML

2. **`strip_tags`** - Remove HTML/XML tags

   - Extracts text content only
   - Preserves text between tags
   - Best for: HTML, XML, Markdown with HTML

3. **`strip_comments`** - Remove code comments

   - Removes single and multi-line comments
   - Language-aware (JS, Python, CSS, etc.)
   - Best for: Production code bundles

4. **`compress_whitespace`** - Reduce multiple spaces/newlines

   - Converts multiple spaces to single space
   - Reduces multiple newlines to double newline
   - Best for: Documentation, logs

5. **`remove_empty_lines`** - Remove blank lines
   - Removes lines with only whitespace
   - Keeps single blank lines between sections
   - Best for: Clean documentation

### Custom Processors

Currently implemented:

1. **`truncate`** - Limit file length

   ```yaml
   custom_processor: "truncate"
   processor_args:
     max_lines: 100
     max_chars: 10000
     add_marker: true # Add "... truncated ..." marker
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)(api[_-]?key|secret|password|token)\\s*[:=]\\s*["\\']?[\\w-]+["\\']?'
       - '(?i)bearer\\s+[\\w-]+'
     replacement: "[REDACTED]"
   ```

3. **`extract_functions`** - Extract function definitions
   ```yaml
   custom_processor: "extract_functions"
   processor_args:
     languages: ["python", "javascript"]
     include_docstrings: true
   ```

Note: Other processors mentioned in examples (like `extract_code_cells`) are
illustrative and would need to be implemented.

## Pattern Matching

### Pattern Types

1. **Extension Matching**

   ```yaml
   extensions: [".py", ".pyx", "py"] # All are equivalent
   ```

2. **Glob Patterns**

   ```yaml
   patterns:
     - "*.test.js" # All test files
     - "src/**/*.js" # All JS in src/
   ```

3. **Combined Matching**
   ```yaml
   # File must match BOTH extension AND pattern
   extensions: [".js"]
   patterns: ["src/**/*"]
   ```

### Base Path Behavior

```yaml
group_name:
  base_path: "src"
  presets:
    example:
      patterns: ["components/*.js"] # Actually matches: src/components/*.js
```

## Processing Order

1. **Group Priority** - Higher priority groups are checked first
2. **Preset Order** - Within a group, presets are checked in definition order
3. **First Match Wins** - First matching preset is applied
4. **Action Order** - Actions are applied in the order listed

### Setting Precedence

1. CLI arguments (highest priority)
2. Preset-specific settings
3. Global per-extension settings
4. Global default settings
5. m1f defaults (lowest priority)

**Note**: CLI arguments ALWAYS override preset values.

## Important Clarifications

### Pattern Matching Limitations

**Exclude patterns with `!` prefix are not supported in preset patterns**. To
exclude files:

1. **Use Global Settings** (Recommended):

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js", "*.map", "dist/**/*"]
   ```

2. **Use CLI Arguments**:
   ```bash
   m1f -s . -o out.txt --exclude-patterns "*.min.js" "*.map"
   ```

### Settings Hierarchy

Understanding where settings can be applied:

1. **Global Settings Level** (`globals.global_settings`):

   - `include_patterns` / `exclude_patterns`
   - `include_extensions` / `exclude_extensions`
   - All general m1f settings

2. **Preset Level** (individual presets):

   - `patterns` and `extensions` (for matching)
   - `actions` (processing actions)
   - Override settings like `security_check`

3. **Extension-Specific Global Settings**
   (`globals.global_settings.extensions.{ext}`):
   - All preset-level settings per extension

### Common Misconceptions

1. **Exclude Patterns in Presets**

   ❌ **Incorrect**:

   ```yaml
   presets:
     my_preset:
       exclude_patterns: ["*.min.js"] # Doesn't work here
   ```

   ✅ **Correct**:

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js"] # Works here
   ```

2. **Actions vs Settings**

   **Actions** (go in `actions` list):

   - `minify`, `strip_tags`, `strip_comments`, etc.

   **Settings** (separate fields):

   - `strip_tags: ["script", "style"]` (configuration)
   - `max_lines: 100` (configuration)

## Advanced Features

### Conditional Presets

```yaml
production:
  enabled_if_exists: ".env.production" # Only active in production
  presets:
    minify_all:
      extensions: [".js", ".css", ".html"]
      actions: ["minify", "strip_comments"]
```

### Multiple Preset Files

```bash
# Files are merged in order (later files override earlier ones)
m1f -s . -o out.txt \
  --preset base.yml \
  --preset project.yml \
  --preset overrides.yml
```

### Preset Locations

1. **Project presets**: `./presets/*.m1f-presets.yml`
2. **Local preset**: `./.m1f-presets.yml`
3. **User presets**: `~/m1f/*.m1f-presets.yml`
4. **Specified presets**: Via `--preset` flag

### Complete Parameter Control (v3.2.0+)

Starting with v3.2.0, ALL m1f parameters can be controlled via presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production build configuration"

  global_settings:
    # Define all inputs/outputs
    source_directory: "./src"
    output_file: "dist/bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Enable production features
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true

    # Production optimizations
    minimal_output: true
    quiet: true

    # File processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    security_check: "error"
```

Usage comparison:

**Before v3.2.0** (long command):

```bash
m1f -s ./src -o dist/bundle.txt \
  --input-include-files README.md LICENSE \
  --add-timestamp --create-archive --archive-type tar.gz \
  --force --minimal-output --quiet \
  --separator-style MachineReadable \
  --security-check error
```

**After v3.2.0** (simple command):

```bash
m1f --preset production.m1f-presets.yml -o output.txt
```

## Examples

### Web Development Preset

```yaml
web_development:
  description: "Modern web development bundle"

  presets:
    # Minify production assets
    production_assets:
      patterns: ["dist/**/*", "build/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]

    # Source code - keep readable
    source_code:
      patterns: ["src/**/*"]
      extensions: [".js", ".jsx", ".ts", ".tsx"]
      actions: ["strip_comments"]
      security_check: "error"

    # Documentation
    docs:
      extensions: [".md", ".mdx"]
      actions: ["compress_whitespace", "remove_empty_lines"]

    # Configuration files
    config:
      patterns: ["*.json", "*.yml", "*.yaml"]
      security_check: "error"
      custom_processor: "redact_secrets"
```

### Data Science Preset

```yaml
data_science:
  presets:
    # Large data files - truncate
    data_files:
      extensions: [".csv", ".json", ".parquet"]
      max_file_size: "100KB"
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000

    # Scripts - full content
    scripts:
      extensions: [".py", ".r", ".jl"]
      actions: ["strip_comments"]
```

### Multiple Environment Presets

```yaml
# environments.m1f-presets.yml
development:
  priority: 10
  global_settings:
    source_directory: "./src"
    output_file: "dev-bundle.txt"
    verbose: true
    include_dot_paths: true
    security_check: "warn"

staging:
  priority: 20
  global_settings:
    source_directory: "./src"
    output_file: "stage-bundle.txt"
    create_archive: true
    security_check: "error"

production:
  priority: 30
  global_settings:
    source_directory: "./dist"
    output_file: "prod-bundle.txt"
    minimal_output: true
    quiet: true
    create_archive: true
    archive_type: "tar.gz"
```

Use with `--preset-group`:

```bash
# Development build
m1f --preset environments.yml --preset-group development

# Production build
m1f --preset environments.yml --preset-group production
```

## Debugging and Best Practices

### Debugging Tips

1. **Verbose Mode**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose
   ```

   Shows which preset is applied to each file and processing details.

2. **Check What's Applied**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose 2>&1 | grep "Applying preset"
   ```

3. **Validate YAML**

   ```bash
   python -c "import yaml; yaml.safe_load(open('my-preset.yml'))"
   ```

4. **Test Small First** Create a test directory with a few files to verify
   preset behavior before running on large codebases.

### Best Practices

1. **Start Simple** - Begin with basic actions, add complexity as needed
2. **Test Thoroughly** - Use verbose mode to verify behavior
3. **Layer Presets** - Use multiple files for base + overrides
4. **Document Presets** - Add descriptions to groups and complex presets
5. **Version Control** - Keep presets in your repository
6. **Performance First** - Apply expensive actions only where needed
7. **Use Priority Wisely** - Higher priority groups are checked first

### Common Issues

1. **Preset not applied**

   - Check pattern matching
   - Verify preset group is enabled
   - Use verbose mode to debug

2. **Wrong action order**

   - Actions are applied sequentially
   - Order matters (e.g., minify before strip_comments)

3. **Performance issues**
   - Limit expensive actions to necessary files
   - Use `max_file_size` to skip large files
   - Consider `minimal_output` mode

## Version Information

This documentation is accurate as of m1f version 3.2.0.

======= 20_auto_bundle_guide.md ======
# Auto-Bundle Guide

The m1f auto-bundle feature allows you to automatically generate predefined
bundles of files based on configuration. This is especially useful for
maintaining consistent documentation bundles, creating project snapshots, and
managing multiple projects on a server.

## Configuration File

Auto-bundle looks for a `.m1f.config.yml` file in your project. The tool
searches from the current directory upward to the root, allowing flexible
project organization.

### Basic Configuration Structure

```yaml
# .m1f.config.yml

# Global settings that apply to all bundles
global:
  global_excludes:
    - "**/*.pyc"
    - "**/*.log"
    - "**/tmp/**"

# Bundle definitions
bundles:
  docs:
    description: "Project documentation"
    output: "m1f/docs/manual.txt"
    sources:
      - path: "docs"
        include_extensions: [".md", ".txt"]

  code:
    description: "Source code bundle"
    output: "m1f/src/code.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts"]
```

## Command Usage

### Create All Bundles

```bash
m1f auto-bundle
# Or use the convenient alias:
m1f-update
```

### Create Specific Bundle

```bash
m1f auto-bundle docs
# Or use the convenient alias:
m1f-update docs
```

### List Available Bundles

```bash
m1f auto-bundle --list
```

### Create Bundles by Group

```bash
m1f auto-bundle --group documentation
# Or use the convenient alias:
m1f-update --group documentation
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle`
that provides a simpler way to regenerate bundles.

## Bundle Groups

You can organize bundles into groups for easier management:

```yaml
bundles:
  user-docs:
    description: "User documentation"
    group: "documentation"
    output: "m1f/docs/user.txt"
    sources:
      - path: "docs/user"

  api-docs:
    description: "API documentation"
    group: "documentation"
    output: "m1f/docs/api.txt"
    sources:
      - path: "docs/api"

  frontend-code:
    description: "Frontend source code"
    group: "source"
    output: "m1f/src/frontend.txt"
    sources:
      - path: "frontend"
```

Then create all documentation bundles:

```bash
m1f auto-bundle --group documentation
```

## Server-Wide Usage

### Managing Multiple Projects

For server environments with multiple projects, you can create a management
script:

```bash
#!/bin/bash
# update-all-bundles.sh

# Find all projects with .m1f.config.yml
for config in $(find /home/projects -name ".m1f.config.yml" -type f); do
    project_dir=$(dirname "$config")
    echo "Updating bundles in: $project_dir"

    cd "$project_dir"
    m1f-update --quiet
done
```

### Project-Specific Bundles

Create project-specific configurations by using groups:

```yaml
# Project A - .m1f.config.yml
bundles:
  all:
    description: "Complete project bundle"
    group: "project-a"
    output: "m1f/project-a-complete.txt"
    sources:
      - path: "."
```

Then update only specific projects:

```bash
cd /path/to/project-a
m1f-update --group project-a
```

### Automated Bundle Updates

Set up a cron job for automatic updates:

```bash
# Update all project bundles daily at 2 AM
0 2 * * * /usr/local/bin/update-all-bundles.sh
```

### Centralized Bundle Storage

Configure bundles to output to a central location:

```yaml
bundles:
  project-bundle:
    description: "Project bundle for central storage"
    output: "/var/m1f-bundles/myproject/latest.txt"
    sources:
      - path: "."
```

## Advanced Features

### Conditional Bundles

Enable bundles only when specific files exist:

```yaml
bundles:
  python-docs:
    description: "Python documentation"
    enabled_if_exists: "setup.py"
    output: "m1f/python-docs.txt"
    sources:
      - path: "."
        include_extensions: [".py"]
```

### Multiple Source Configurations

Combine files from different locations with different settings:

```yaml
bundles:
  complete:
    description: "Complete project documentation"
    output: "m1f/complete.txt"
    sources:
      - path: "docs"
        include_extensions: [".md"]
      - path: "src"
        include_extensions: [".py"]
        excludes: ["**/test_*.py"]
      - path: "."
        include_files: ["README.md", "CHANGELOG.md"]
```

### Using Presets

Apply presets for advanced file processing:

```yaml
bundles:
  web-bundle:
    description: "Web project bundle"
    output: "m1f/web.txt"
    preset: "presets/web-project.m1f-presets.yml"
    preset_group: "production"
    sources:
      - path: "."
```

## Automatic Bundle Generation with Git Hooks

m1f provides a Git pre-commit hook that automatically runs auto-bundle before
each commit. This ensures your bundles are always in sync with your source code.

### Installing the Git Hook

```bash
# Run from your project root (where .m1f.config.yml is located)
bash /path/to/m1f/scripts/install-git-hooks.sh
```

The hook will:

- Run `m1f-update` before each commit
- Add generated bundles to the commit automatically
- Block commits if bundle generation fails

For detailed setup instructions, see the
[Git Hooks Setup Guide](../05_development/56_git_hooks_setup.md).

## Best Practices

1. **Organize with Groups**: Use groups to categorize bundles logically
2. **Version Control**: Include `.m1f.config.yml` in version control
3. **Include m1f/ Directory**: Keep generated bundles in version control for AI
   tool access
4. **Use Descriptive Names**: Make bundle names self-explanatory
5. **Regular Updates**: Use Git hooks or schedule automatic updates for
   frequently changing projects
6. **Review Bundle Changes**: Check generated bundle diffs before committing

## Troubleshooting

### Config Not Found

If you see "No .m1f.config.yml configuration found!", the tool couldn't find a
config file searching from the current directory up to the root. Create a
`.m1f.config.yml` in your project root.

### Bundle Not Created

Check the verbose output:

```bash
m1f-update --verbose
```

Common issues:

- Incorrect file paths
- Missing source directories
- Invalid YAML syntax
- Disabled bundles

### Group Not Found

If using `--group` and no bundles are found:

1. Check that bundles have the `group` field
2. Verify the group name matches exactly
3. Use `--list` to see available groups

## Examples

### Documentation Site Bundle

```yaml
bundles:
  docs-site:
    description: "Documentation site content"
    group: "documentation"
    output: "m1f/docs-site.txt"
    sources:
      - path: "content"
        include_extensions: [".md", ".mdx"]
      - path: "src/components"
        include_extensions: [".jsx", ".tsx"]
    excludes:
      - "**/node_modules/**"
      - "**/.next/**"
```

### Multi-Language Project

```yaml
bundles:
  python-code:
    description: "Python backend code"
    group: "backend"
    output: "m1f/backend/python.txt"
    sources:
      - path: "backend"
        include_extensions: [".py"]

  javascript-code:
    description: "JavaScript frontend code"
    group: "frontend"
    output: "m1f/frontend/javascript.txt"
    sources:
      - path: "frontend"
        include_extensions: [".js", ".jsx", ".ts", ".tsx"]

  all-code:
    description: "All source code"
    output: "m1f/all-code.txt"
    sources:
      - path: "."
        include_extensions: [".py", ".js", ".jsx", ".ts", ".tsx"]
```

### WordPress Plugin Bundle

```yaml
bundles:
  wp-plugin:
    description: "WordPress plugin files"
    group: "wordpress"
    output: "m1f/wp-plugin.txt"
    preset: "presets/wordpress.m1f-presets.yml"
    sources:
      - path: "."
        include_extensions: [".php", ".js", ".css"]
    excludes:
      - "**/vendor/**"
      - "**/node_modules/**"
```

======= 21_development_workflow.md ======
# m1f Development Workflow

This document describes the recommended workflow for developing with m1f and
using it in other projects.

## Overview

The m1f project provides a self-contained development environment with:

- Pre-generated m1f bundles of its own source code
- Shell aliases for convenient access from anywhere
- Symlink system for using m1f documentation in other projects

## Prerequisites

For initial setup instructions, see the [SETUP.md](../../SETUP.md) guide.

## Using m1f in Other Projects

### Method 1: Using Aliases (Recommended)

From any directory, you can use m1f directly:

```bash
cd /path/to/your/project
m1f -s . -o combined.txt
```

### Method 2: Quick Project Setup with m1f-init

When starting a new project with m1f, use `m1f-init` for quick setup:

```bash
cd /path/to/your/project
m1f-init
```

#### What m1f-init does:

1. **Links m1f documentation** (creates `m1f/m1f.txt`)

   - Makes m1f docs available to AI tools
   - Creates symlink on Linux/macOS, copies on Windows

2. **Analyzes your project**

   - Detects project type and languages
   - Creates file and directory listings

3. **Generates initial bundles with auxiliary files**

   - `m1f/<project>_complete.txt` - Full project bundle
   - `m1f/<project>_complete_filelist.txt` - List of all included files
   - `m1f/<project>_complete_dirlist.txt` - List of all directories
   - `m1f/<project>_docs.txt` - Documentation only bundle
   - `m1f/<project>_docs_filelist.txt` - List of documentation files
   - `m1f/<project>_docs_dirlist.txt` - Documentation directories

4. **Creates basic configuration**
   - Generates `.m1f.config.yml` if not present
   - Sets up sensible defaults

#### Using with AI Tools:

After running `m1f-init`, reference the documentation in your AI tool:

```bash
# For Claude Code, Cursor, or similar AI assistants:
@m1f/m1f.txt

# Example prompts:
"Please read @m1f/m1f.txt and help me create custom bundles
for my Python web application"

"Based on @m1f/m1f.txt, how can I exclude test files
while keeping fixture data?"

"Using @m1f/m1f.txt as reference, help me optimize
my .m1f.config.yml for a React project"
```

#### Advanced Setup (Linux/macOS only):

For topic-specific bundles and Claude-assisted configuration:

```bash
m1f-claude --advanced-setup
```

#### Working with File Lists:

The generated file lists are valuable for customizing bundles:

```bash
# View what files are included
cat m1f/*_filelist.txt | wc -l  # Count total files

# Edit file lists to customize bundles
vi m1f/myproject_complete_filelist.txt
# Remove lines for files you don't want
# Add paths for files you do want

# Create a custom bundle from edited list
m1f -i m1f/myproject_complete_filelist.txt -o m1f/custom.txt

# Combine multiple file lists
cat m1f/*_docs_filelist.txt m1f/api_filelist.txt | sort -u > m1f/combined_list.txt
m1f -i m1f/combined_list.txt -o m1f/docs_and_api.txt
```

This single documentation file contains:

- Complete m1f usage guide and all parameters
- Examples and best practices
- Preset system documentation
- Auto-bundle configuration guide
- All tool documentation (m1f, s1f, html2md, webscraper)

The AI can then:

- Understand all m1f parameters and options
- Help create custom `.m1f.config.yml` configurations
- Suggest appropriate presets for your project type
- Generate complex m1f commands with correct syntax
- Troubleshoot issues based on error messages

## Development Workflow

### When Developing m1f

1. Always work in the development environment:

   ```bash
   cd /path/to/m1f
   source .venv/bin/activate
   ```

2. Test changes directly:

   ```bash
   python -m tools.m1f -s test_dir -o output.txt
   ```

3. Run tests:

   ```bash
   pytest tests/
   ```

4. Update bundle files after significant changes:
   ```bash
   m1f-update
   ```

### When Using m1f in Projects

1. Use the global aliases:

   ```bash
   m1f -s src -o bundle.txt --preset documentation
   ```

2. Or create project-specific configuration:

   ```bash
   # Create .m1f directory in your project
   mkdir .m1f

   # Create m1f preset
   cat > .m1f/project.m1f-presets.yml << 'EOF'
   presets:
     my-bundle:
       source_directory: "."
       include_extensions: [".py", ".md", ".txt"]
       excludes: ["*/node_modules/*", "*/__pycache__/*"]
   EOF

   # Use preset
   m1f --preset .m1f/project.m1f-presets.yml --preset-group my-bundle -o bundle.txt
   ```

## Directory Structure

```
m1f/
├── .m1f/                      # Pre-generated m1f bundles
│   ├── m1f/                   # Tool bundles
│   └── m1f-doc/
│       └── 99_m1fdocs.txt    # Complete documentation
├── bin/                       # Executable commands
│   ├── m1f
│   ├── m1f-s1f
│   ├── m1f-html2md
│   ├── scrape_tool
│   └── ...
├── scripts/
│   ├── install.sh            # Installation script
│   └── watch_and_bundle.sh   # File watcher for auto-bundling
└── tools/                    # m1f source code
    ├── m1f/
    ├── s1f/
    └── html2md/

your-project/
└── .m1f/
    └── m1f -> /path/to/m1f/.m1f/  # Symlink to m1f bundles
```

## Best Practices

1. **Keep Bundles Updated**: Run `m1f-update` after significant changes to m1f
2. **Use Aliases**: The shell aliases handle virtual environment activation
   automatically
3. **Project Organization**: Keep project-specific m1f configurations in `.m1f/`
   directory
4. **Version Control**: The `.m1f/` directory is already in `.gitignore`

## Troubleshooting

### Aliases Not Working

If aliases don't work after setup:

1. Make sure you've reloaded your shell configuration
2. Check that the aliases were added to your shell config file
3. Verify the m1f project path is correct in the aliases

### Virtual Environment Issues

The aliases automatically activate the virtual environment. If you encounter
issues:

1. Ensure the virtual environment exists at `/path/to/m1f/.venv`
2. Check that all dependencies are installed

### Symlink Issues

If `m1f-link` fails:

1. Ensure you have write permissions in the current directory
2. Check that the m1f project path is accessible
3. Remove any existing `.m1f/m1f` symlink and try again

## Advanced Usage

### Custom Bundle Generation

Create custom bundles for specific use cases:

```bash
# Bundle only specific file types
m1f -s /path/to/project -o api-docs.txt \
    --include-extensions .py .yaml \
    --excludes "*/tests/*" \
    --separator-style Markdown

# Create compressed archive
m1f -s . -o project.txt --create-archive --archive-type tar.gz
```

### Integration with CI/CD

Add m1f to your CI pipeline:

```yaml
# Example GitHub Actions
- name: Generate Documentation Bundle
  run: |
    python -m tools.m1f -s docs -o docs-bundle.txt

- name: Upload Bundle
  uses: actions/upload-artifact@v2
  with:
    name: documentation
    path: docs-bundle.txt
```

======= 25_m1f_config_examples.md ======
# m1f Configuration Examples

This guide provides comprehensive examples of `.m1f.config.yml` files for
different project types. Each example includes detailed comments explaining the
configuration choices.

> **‚ö†Ô∏è IMPORTANT**: m1f automatically excludes many common directories
> (node_modules, .git, **pycache**, etc.). See the
> [Default Excludes Guide](./26_default_excludes_guide.md) for the complete
> list. **Only add project-specific excludes to keep your configs minimal!**

## üö® IMPORTANT: Use Standard Separator for AI Bundles!

**The primary purpose of m1f bundles is to provide context to AI assistants like
Claude, NOT for human reading in Markdown!**

- ‚úÖ **ALWAYS use**: `separator_style: Standard` (or omit it - Standard is the
  default)
- ‚ùå **AVOID**: `separator_style: Markdown` (this adds unnecessary ```language
  blocks)
- üéØ **Why**: Standard format is clean and optimal for AI consumption

```yaml
# CORRECT - For AI consumption:
bundles:
  - name: my-bundle
    separator_style: Standard  # ‚Üê This is optimal (or just omit it)

# AVOID - Adds unnecessary markdown formatting:
bundles:
  - name: my-bundle
    separator_style: Markdown  # ‚Üê Don't use for AI bundles!
```

**Note**: `MachineReadable` is only needed when you plan to use `s1f` to split
the bundle back into individual files.

## Minimal vs Verbose Configurations

### ‚ùå BAD Example - Overly Verbose (Don't Do This!)

```yaml
global:
  global_excludes:
    # ‚ùå ALL of these are already excluded by default!
    - "**/node_modules/**" # Auto-excluded
    - "**/vendor/**" # Auto-excluded
    - "**/__pycache__/**" # Auto-excluded
    - "**/build/**" # Auto-excluded
    - "**/dist/**" # Auto-excluded
    - "**/.git/**" # Auto-excluded
    - "**/cache/**" # Auto-excluded
    - "**/.vscode/**" # Auto-excluded
    - "**/.idea/**" # Auto-excluded

    # ‚úÖ Only these are needed (project-specific)
    - "**/logs/**"
    - "**/tmp/**"
    - "/m1f/**"
```

### ‚úÖ GOOD Example - Minimal Configuration

```yaml
global:
  global_excludes:
    # Only project-specific excludes
    - "**/logs/**" # Your log files
    - "**/tmp/**" # Your temp files
    - "/m1f/**" # Output directory

  global_settings:
    # Let .gitignore handle most excludes
    exclude_paths_file: ".gitignore"
```

## Table of Contents

1. [m1f Tool Project (Current)](#m1f-tool-project-current)
2. [Node.js/React Project](#nodejsreact-project)
3. [Python/Django Project](#pythondjango-project)
4. [WordPress Theme](#wordpress-theme)
5. [Documentation Site](#documentation-site)
6. [Mixed Language Project](#mixed-language-project)
7. [Microservices Architecture](#microservices-architecture)
8. [Mobile App Project](#mobile-app-project)

## m1f Tool Project (Current)

This is the actual configuration used by the m1f project itself - a Python-based
tool with comprehensive documentation.

```yaml
# m1f Auto-Bundle Configuration

# Global settings
global:
  # Exclusions that apply to all bundles
  global_excludes:
    - "/m1f/**" # Exclude output directory
    - "**/*.pyc" # Python bytecode
    - "**/*.log" # Log files
    - "**/tmp/**" # Temporary directories
    - "**/dev/**" # Development files
    - "**/tests/**/source/**" # Test input data
    - "**/tests/**/output/**" # Test output data
    - "**/tests/**/expected/**" # Expected test results
    - "**/tests/**/scraped_examples/**" # Scraped test examples

  global_settings:
    # Default security setting for all files
    security_check: "warn" # Strict by default
    # Use .gitignore as exclude file (can be single file or list)
    exclude_paths_file:
      - ".gitignore"
      - ".m1fignore"

    # Per-extension overrides
    extensions:
      .py:
        security_check: "abort" # Strict for Python files

  # Default settings for all bundles
  defaults:
    force_overwrite: true
    max_file_size: "1MB"
    minimal_output: false

  # File watcher settings for auto-update
  watcher:
    enabled: true
    debounce_seconds: 2
    ignored_paths:
      - "/m1f"
      - ".git/"
      - ".venv/"
      - "tmp/"
      - ".scrapes/"

# Bundle definitions
bundles:
  # Documentation bundles - separate by tool
  m1f-docs:
    description: "m1f docs"
    group: "documentation"
    output: "m1f/m1f/87_m1f_only_docs.txt"
    sources:
      - path: "docs/01_m1f"

  html2md-docs:
    description: "html2md docs"
    group: "documentation"
    output: "m1f/m1f/88_html2md_docs.txt"
    sources:
      - path: "docs/03_html2md"

  # Source code bundles - modular approach
  m1f-code:
    description: "m1f complete code"
    group: "source"
    output: "m1f/m1f/94_code.txt"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "SETUP.md",
            "requirements.txt",
            "tools/**",
            "scripts/**",
          ]
      - path: "tests/"
        excludes:
          [
            "**/tests/**/source/**",
            "**/tests/**/extracted/**",
            "**/tests/**/output/**",
          ]

  # Complete project bundle
  all:
    description: "All 1 One"
    group: "complete"
    output: "m1f/m1f/99_m1f_complete.txt"
    sources:
      - path: "."
```

## Node.js/React Project

Configuration for a modern React application with TypeScript and testing.

```yaml
# React Application m1f Configuration

global:
  global_excludes:
    # ‚ö†Ô∏è MINIMAL CONFIG - Only project-specific excludes!
    # DON'T add node_modules, dist, build - they're auto-excluded!

    # Next.js specific (not in defaults)
    - "**/.next/**" # Next.js build cache
    - "**/coverage/**" # Test coverage reports

    # Log and temp files
    - "**/*.log"
    - "**/*.map" # Source maps
    - "**/.DS_Store"
    - "**/Thumbs.db"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".eslintignore"]

    # JavaScript/TypeScript specific processing
    extensions:
      .js:
        minify: true # Minify for AI context
        remove_comments: true # Clean comments
      .jsx:
        minify: true
        remove_comments: true
      .ts:
        minify: true
        remove_comments: true
      .tsx:
        minify: true
        remove_comments: true
      .json:
        minify: true # Compact JSON
      .env:
        security_check: "abort" # Never include env files

  defaults:
    force_overwrite: true
    max_file_size: "500KB" # Smaller for JS files
    minimal_output: true # Compact output

bundles:
  # Application source code
  app-components:
    description: "React components"
    group: "frontend"
    output: "m1f/01_components.txt"
    sources:
      - path: "src/components"
        include_extensions: [".tsx", ".ts", ".css", ".scss"]
      - path: "src/hooks"
        include_extensions: [".ts", ".tsx"]

  app-pages:
    description: "Application pages/routes"
    group: "frontend"
    output: "m1f/02_pages.txt"
    sources:
      - path: "src/pages"
      - path: "src/routes"
      - path: "src/layouts"

  app-state:
    description: "State management (Redux/Context)"
    group: "frontend"
    output: "m1f/03_state.txt"
    sources:
      - path: "src/store"
      - path: "src/redux"
      - path: "src/context"
      - path: "src/reducers"
      - path: "src/actions"

  # API and services
  app-api:
    description: "API integration layer"
    group: "integration"
    output: "m1f/10_api.txt"
    sources:
      - path: "src/api"
      - path: "src/services"
      - path: "src/graphql"
        include_extensions: [".ts", ".graphql", ".gql"]

  # Configuration and setup
  app-config:
    description: "Build configuration"
    group: "config"
    output: "m1f/20_config.txt"
    sources:
      - path: "."
        includes:
          [
            "package.json",
            "tsconfig.json",
            "webpack.config.js",
            "vite.config.js",
            ".eslintrc.*",
            ".prettierrc.*",
            "babel.config.*",
          ]

  # Tests
  app-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/30_tests.txt"
    sources:
      - path: "src"
        includes:
          ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
      - path: "__tests__"
      - path: "cypress/integration"
        include_extensions: [".js", ".ts"]

  # Documentation
  app-docs:
    description: "Project documentation"
    group: "docs"
    output: "m1f/40_docs.txt"
    sources:
      - path: "."
        includes: ["README.md", "CONTRIBUTING.md", "docs/**/*.md"]
      - path: "src"
        includes: ["**/*.md"]

  # Quick reference bundle for AI assistance
  app-quick-reference:
    description: "Key files for quick AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB" # Keep small for quick loading
    sources:
      - path: "."
        includes: ["package.json", "README.md", "src/App.tsx", "src/index.tsx"]
      - path: "src/types" # TypeScript types
```

## Python/Django Project

Configuration for a Django web application with REST API.

```yaml
# Django Project m1f Configuration

global:
  global_excludes:
    # ‚ö†Ô∏è MINIMAL CONFIG - __pycache__, .pytest_cache, etc. are auto-excluded!

    # Python bytecode (not in defaults)
    - "**/*.pyc"
    - "**/*.pyo"
    - "**/*.pyd"

    # Virtual environments (common names)
    - "**/venv/**"
    - "**/.venv/**"
    - "**/env/**"

    # Django specific
    - "**/migrations/**" # Database migrations
    - "**/media/**" # User uploads
    - "**/static/**" # Collected static files
    - "**/staticfiles/**"
    - "**/*.sqlite3" # SQLite database
    - "**/celerybeat-schedule"

  global_settings:
    security_check: "abort" # Strict for web apps
    exclude_paths_file: ".gitignore"

    extensions:
      .py:
        remove_docstrings: false # Keep docstrings for API
        remove_comments: true # Remove inline comments
      .html:
        minify: true # Minify templates
      .env:
        security_check: "abort" # Never include
      .yml:
        security_check: "warn" # Check for secrets

  defaults:
    force_overwrite: true
    max_file_size: "1MB"

bundles:
  # Django apps - one bundle per app
  app-accounts:
    description: "User accounts and authentication"
    group: "apps"
    output: "m1f/apps/01_accounts.txt"
    sources:
      - path: "accounts/"
        excludes: ["migrations/", "__pycache__/", "*.pyc"]

  app-api:
    description: "REST API implementation"
    group: "apps"
    output: "m1f/apps/02_api.txt"
    sources:
      - path: "api/"
        excludes: ["migrations/", "__pycache__/"]
      - path: "."
        includes: ["**/serializers.py", "**/viewsets.py"]

  app-core:
    description: "Core business logic"
    group: "apps"
    output: "m1f/apps/03_core.txt"
    sources:
      - path: "core/"
        excludes: ["migrations/", "__pycache__/"]

  # Project configuration
  django-settings:
    description: "Django settings and configuration"
    group: "config"
    output: "m1f/10_settings.txt"
    sources:
      - path: "config/" # Settings module
      - path: "."
        includes:
          ["manage.py", "requirements*.txt", "Dockerfile", "docker-compose.yml"]

  # Models across all apps
  django-models:
    description: "All database models"
    group: "database"
    output: "m1f/20_models.txt"
    sources:
      - path: "."
        includes: ["**/models.py", "**/models/*.py"]

  # Views and URLs
  django-views:
    description: "Views and URL patterns"
    group: "views"
    output: "m1f/21_views.txt"
    sources:
      - path: "."
        includes: ["**/views.py", "**/views/*.py", "**/urls.py"]

  # Templates
  django-templates:
    description: "HTML templates"
    group: "frontend"
    output: "m1f/30_templates.txt"
    sources:
      - path: "templates/"
      - path: "."
        includes: ["**/templates/**/*.html"]

  # Tests
  django-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/40_tests.txt"
    sources:
      - path: "."
        includes: ["**/tests.py", "**/tests/*.py", "**/test_*.py"]

  # Management commands
  django-commands:
    description: "Custom management commands"
    group: "utilities"
    output: "m1f/50_commands.txt"
    sources:
      - path: "."
        includes: ["**/management/commands/*.py"]

  # Quick AI reference
  django-quick-ref:
    description: "Essential files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "requirements.txt",
            "config/settings/base.py",
            "config/urls.py",
          ]
```

## WordPress Theme

Configuration for a custom WordPress theme with modern build tools.

```yaml
# WordPress Theme m1f Configuration

global:
  global_excludes:
    # ‚ö†Ô∏è MINIMAL CONFIG - node_modules, vendor, build, dist are auto-excluded!

    # WordPress specific (not in defaults)
    - "wp-admin/**" # Core files
    - "wp-includes/**" # Core files
    - "wp-content/uploads/**" # User uploads
    - "wp-content/cache/**" # Cache plugins
    - "wp-content/backup/**" # Backup files
    - "wp-content/upgrade/**" # Updates

    # Sass cache (not in defaults)
    - "**/.sass-cache/**"
    - "**/*.map" # Source maps
    - "**/*.log" # Log files

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".wpignore"]

    # Use WordPress preset for optimal processing
    preset: "wordpress"

    extensions:
      .php:
        remove_comments: true # Clean PHP comments
      .js:
        minify: true
      .css:
        minify: true
      .scss:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "500KB"

bundles:
  # Theme core files
  theme-core:
    description: "Theme core functionality"
    group: "theme"
    output: "m1f/01_theme_core.txt"
    sources:
      - path: "."
        includes: [
            "style.css", # Theme header
            "functions.php",
            "index.php",
            "header.php",
            "footer.php",
            "sidebar.php",
            "searchform.php",
            "404.php",
          ]

  # Template files
  theme-templates:
    description: "Page and post templates"
    group: "theme"
    output: "m1f/02_templates.txt"
    sources:
      - path: "."
        includes:
          [
            "single*.php",
            "page*.php",
            "archive*.php",
            "category*.php",
            "tag*.php",
            "taxonomy*.php",
            "front-page.php",
            "home.php",
          ]
      - path: "template-parts/"
      - path: "templates/"

  # Theme includes/components
  theme-includes:
    description: "Theme includes and components"
    group: "theme"
    output: "m1f/03_includes.txt"
    sources:
      - path: "inc/"
      - path: "includes/"
      - path: "lib/"
      - path: "components/"

  # Custom post types and taxonomies
  theme-cpt:
    description: "Custom post types and taxonomies"
    group: "functionality"
    output: "m1f/10_custom_types.txt"
    sources:
      - path: "."
        includes: ["**/post-types/*.php", "**/taxonomies/*.php"]
      - path: "inc/"
        includes: ["*cpt*.php", "*custom-post*.php", "*taxonom*.php"]

  # ACF field groups
  theme-acf:
    description: "Advanced Custom Fields configuration"
    group: "functionality"
    output: "m1f/11_acf_fields.txt"
    sources:
      - path: "acf-json/" # ACF JSON exports
      - path: "."
        includes: ["**/acf-fields/*.php", "**/acf/*.php"]

  # JavaScript and build files
  theme-assets:
    description: "Theme assets and build configuration"
    group: "assets"
    output: "m1f/20_assets.txt"
    sources:
      - path: "src/"
        include_extensions: [".js", ".jsx", ".scss", ".css"]
      - path: "assets/src/"
      - path: "."
        includes:
          [
            "webpack.config.js",
            "gulpfile.js",
            "package.json",
            ".babelrc",
            "postcss.config.js",
          ]

  # WooCommerce integration
  theme-woocommerce:
    description: "WooCommerce customizations"
    group: "integrations"
    output: "m1f/30_woocommerce.txt"
    sources:
      - path: "woocommerce/"
      - path: "inc/"
        includes: ["*woocommerce*.php", "*wc-*.php"]

  # Documentation and setup
  theme-docs:
    description: "Theme documentation"
    group: "docs"
    output: "m1f/40_documentation.txt"
    sources:
      - path: "."
        includes: ["README.md", "CHANGELOG.md", "style.css"]
      - path: "docs/"

  # Quick reference for AI
  theme-quick-ref:
    description: "Essential theme files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: ["style.css", "functions.php", "README.md", "package.json"]
```

## Documentation Site

Configuration for a documentation website using Markdown and static site
generators.

```yaml
# Documentation Site m1f Configuration

global:
  global_excludes:
    # Build outputs
    - "_site/**"
    - "public/**"
    - "dist/**"
    - ".cache/**"

    # Development
    - "**/node_modules/**"
    - "**/.sass-cache/**"
    - "**/tmp/**"

  global_settings:
    security_check: "skip" # Docs are public
    exclude_paths_file: ".gitignore"

    # Optimize for documentation
    extensions:
      .md:
        preserve_formatting: true # Keep Markdown formatting
        max_file_size: "2MB" # Allow larger docs
      .mdx:
        preserve_formatting: true
      .yml:
        minify: false # Keep YAML readable
      .json:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "1MB"
    include_empty_dirs: false

bundles:
  # Documentation by section
  docs-getting-started:
    description: "Getting started guides"
    group: "content"
    output: "m1f/01_getting_started.txt"
    sources:
      - path: "docs/getting-started/"
      - path: "content/getting-started/"
      - path: "src/pages/docs/getting-started/"

  docs-tutorials:
    description: "Tutorial content"
    group: "content"
    output: "m1f/02_tutorials.txt"
    sources:
      - path: "docs/tutorials/"
      - path: "content/tutorials/"
      - path: "examples/"
        include_extensions: [".md", ".mdx"]

  docs-api-reference:
    description: "API documentation"
    group: "content"
    output: "m1f/03_api_reference.txt"
    sources:
      - path: "docs/api/"
      - path: "content/api/"
      - path: "reference/"

  docs-guides:
    description: "How-to guides"
    group: "content"
    output: "m1f/04_guides.txt"
    sources:
      - path: "docs/guides/"
      - path: "content/guides/"
      - path: "content/how-to/"

  # Site configuration and theming
  site-config:
    description: "Site configuration and theme"
    group: "config"
    output: "m1f/10_site_config.txt"
    sources:
      - path: "."
        includes: [
            "config*.yml",
            "config*.yaml",
            "config*.toml",
            "config*.json",
            "_config.yml", # Jekyll
            "docusaurus.config.js", # Docusaurus
            "gatsby-config.js", # Gatsby
            "mkdocs.yml", # MkDocs
            ".vuepress/config.js", # VuePress
          ]
      - path: "data/" # Data files
        include_extensions: [".yml", ".yaml", ".json"]

  # Theme and layouts
  site-theme:
    description: "Theme and layout files"
    group: "theme"
    output: "m1f/11_theme.txt"
    sources:
      - path: "_layouts/" # Jekyll
      - path: "_includes/"
      - path: "layouts/" # Hugo
      - path: "themes/"
      - path: "src/theme/"
      - path: "src/components/"
        include_extensions: [".jsx", ".tsx", ".vue", ".css", ".scss"]

  # Code examples
  docs-examples:
    description: "Code examples and snippets"
    group: "examples"
    output: "m1f/20_examples.txt"
    sources:
      - path: "examples/"
      - path: "snippets/"
      - path: "code-examples/"
      - path: "."
        includes: ["**/*.example.*", "**/examples/**"]

  # Search index and data
  site-search:
    description: "Search configuration and index"
    group: "search"
    output: "m1f/30_search.txt"
    sources:
      - path: "."
        includes: ["**/search-index.json", "**/algolia*.js", "**/lunr*.js"]
      - path: "search/"

  # Complete documentation bundle
  docs-complete:
    description: "All documentation content"
    group: "complete"
    output: "m1f/99_all_docs.txt"
    sources:
      - path: "."
        include_extensions: [".md", ".mdx"]
        excludes: ["node_modules/", "_site/", "public/"]

  # Quick reference
  docs-quick-ref:
    description: "Key documentation for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: ["README.md", "index.md", "docs/index.md"]
      - path: "docs/"
        includes: ["quick-start.md", "overview.md", "introduction.md"]
```

## Mixed Language Project

Configuration for a project with multiple programming languages (e.g., Python
backend, React frontend, Go microservices).

```yaml
# Mixed Language Project m1f Configuration

global:
  global_excludes:
    # Language-specific build artifacts
    - "**/node_modules/**" # JavaScript
    - "**/__pycache__/**" # Python
    - "**/venv/**"
    - "**/vendor/**" # Go/PHP
    - "**/target/**" # Rust/Java
    - "**/bin/**" # Binaries
    - "**/obj/**" # .NET

    # Common excludes
    - "**/dist/**"
    - "**/build/**"
    - "**/*.log"
    - "**/.cache/**"
    - "**/tmp/**"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".dockerignore"]

    # Language-specific processing
    extensions:
      # Frontend
      .js:
        minify: true
        remove_comments: true
      .ts:
        minify: true
        remove_comments: true
      .jsx:
        minify: true
      .tsx:
        minify: true

      # Backend
      .py:
        remove_comments: true
        remove_docstrings: false
      .go:
        remove_comments: true
      .java:
        remove_comments: true
      .rs:
        remove_comments: true

      # Config files
      .env:
        security_check: "abort"
      .yml:
        security_check: "warn"

  defaults:
    force_overwrite: true
    max_file_size: "1MB"

bundles:
  # Frontend - React/TypeScript
  frontend-components:
    description: "Frontend React components"
    group: "frontend"
    output: "m1f/frontend/01_components.txt"
    sources:
      - path: "frontend/src/components/"
      - path: "frontend/src/hooks/"
      - path: "frontend/src/utils/"

  frontend-config:
    description: "Frontend configuration"
    group: "frontend"
    output: "m1f/frontend/02_config.txt"
    sources:
      - path: "frontend/"
        includes:
          ["package.json", "tsconfig.json", "webpack.config.js", ".eslintrc.*"]

  # Backend - Python/FastAPI
  backend-api:
    description: "Python API endpoints"
    group: "backend"
    output: "m1f/backend/01_api.txt"
    sources:
      - path: "backend/app/api/"
      - path: "backend/app/routers/"

  backend-models:
    description: "Database models and schemas"
    group: "backend"
    output: "m1f/backend/02_models.txt"
    sources:
      - path: "backend/app/models/"
      - path: "backend/app/schemas/"
      - path: "backend/app/database/"

  backend-services:
    description: "Business logic services"
    group: "backend"
    output: "m1f/backend/03_services.txt"
    sources:
      - path: "backend/app/services/"
      - path: "backend/app/core/"

  # Microservices - Go
  service-auth:
    description: "Authentication service (Go)"
    group: "microservices"
    output: "m1f/services/01_auth.txt"
    sources:
      - path: "services/auth/"
        include_extensions: [".go"]
        excludes: ["vendor/", "*_test.go"]

  service-notifications:
    description: "Notification service (Go)"
    group: "microservices"
    output: "m1f/services/02_notifications.txt"
    sources:
      - path: "services/notifications/"
        include_extensions: [".go"]
        excludes: ["vendor/", "*_test.go"]

  # Shared libraries
  shared-proto:
    description: "Protocol Buffers definitions"
    group: "shared"
    output: "m1f/shared/01_protobuf.txt"
    sources:
      - path: "proto/"
        include_extensions: [".proto"]

  shared-utils:
    description: "Shared utilities across languages"
    group: "shared"
    output: "m1f/shared/02_utils.txt"
    sources:
      - path: "shared/"
      - path: "common/"

  # Infrastructure as Code
  infrastructure:
    description: "Infrastructure configuration"
    group: "infrastructure"
    output: "m1f/infra/01_infrastructure.txt"
    sources:
      - path: "infrastructure/"
        include_extensions: [".tf", ".yml", ".yaml"]
      - path: "."
        includes: ["docker-compose*.yml", "Dockerfile*", ".dockerignore"]

  # Testing
  tests-frontend:
    description: "Frontend tests"
    group: "testing"
    output: "m1f/tests/01_frontend.txt"
    sources:
      - path: "frontend/"
        includes: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts"]

  tests-backend:
    description: "Backend tests"
    group: "testing"
    output: "m1f/tests/02_backend.txt"
    sources:
      - path: "backend/"
        includes: ["**/test_*.py", "**/*_test.py"]

  tests-integration:
    description: "Integration tests"
    group: "testing"
    output: "m1f/tests/03_integration.txt"
    sources:
      - path: "tests/integration/"
      - path: "e2e/"

  # Documentation
  project-docs:
    description: "Project documentation"
    group: "docs"
    output: "m1f/docs/01_documentation.txt"
    sources:
      - path: "."
        includes: ["README.md", "CONTRIBUTING.md", "ARCHITECTURE.md"]
      - path: "docs/"
      - path: "frontend/README.md"
      - path: "backend/README.md"
      - path: "services/*/README.md"

  # Quick reference bundle
  project-overview:
    description: "Project overview for AI context"
    group: "reference"
    output: "m1f/00_overview.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "docker-compose.yml",
            "frontend/package.json",
            "backend/requirements.txt",
            "services/auth/go.mod",
          ]
```

## Microservices Architecture

Configuration for a microservices-based application with multiple services.

```yaml
# Microservices Architecture m1f Configuration

global:
  global_excludes:
    # Common excludes across all services
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/target/**"
    - "**/build/**"
    - "**/dist/**"
    - "**/.cache/**"
    - "**/logs/**"
    - "**/*.log"

  global_settings:
    security_check: "abort" # Strict for microservices
    exclude_paths_file: [".gitignore", ".dockerignore"]

    # Process by file type
    extensions:
      .env:
        security_check: "abort"
      .yml:
        security_check: "warn"
      .json:
        minify: true
      .proto:
        preserve_formatting: true # Keep protobuf readable

  defaults:
    force_overwrite: true
    max_file_size: "500KB" # Smaller for services

  # Watch for changes in all services
  watcher:
    enabled: true
    debounce_seconds: 3
    ignored_paths:
      - "**/node_modules"
      - "**/vendor"
      - "**/logs"

bundles:
  # API Gateway
  gateway-main:
    description: "API Gateway service"
    group: "gateway"
    output: "m1f/gateway/01_main.txt"
    sources:
      - path: "services/gateway/"
        excludes: ["node_modules/", "dist/", "coverage/"]

  # Individual microservices
  service-users:
    description: "User management service"
    group: "services"
    output: "m1f/services/01_users.txt"
    sources:
      - path: "services/users/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-orders:
    description: "Order processing service"
    group: "services"
    output: "m1f/services/02_orders.txt"
    sources:
      - path: "services/orders/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-inventory:
    description: "Inventory management service"
    group: "services"
    output: "m1f/services/03_inventory.txt"
    sources:
      - path: "services/inventory/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-payments:
    description: "Payment processing service"
    group: "services"
    output: "m1f/services/04_payments.txt"
    sources:
      - path: "services/payments/"
        excludes: ["vendor/", "bin/", "logs/"]

  # Shared configurations and contracts
  shared-contracts:
    description: "Service contracts and interfaces"
    group: "shared"
    output: "m1f/shared/01_contracts.txt"
    sources:
      - path: "contracts/"
        include_extensions: [".proto", ".graphql", ".openapi.yml"]
      - path: "schemas/"

  shared-libs:
    description: "Shared libraries and utilities"
    group: "shared"
    output: "m1f/shared/02_libraries.txt"
    sources:
      - path: "libs/"
      - path: "packages/"
      - path: "common/"

  # Infrastructure and deployment
  k8s-configs:
    description: "Kubernetes configurations"
    group: "infrastructure"
    output: "m1f/k8s/01_configs.txt"
    sources:
      - path: "k8s/"
        include_extensions: [".yml", ".yaml"]
      - path: "helm/"

  docker-configs:
    description: "Docker configurations"
    group: "infrastructure"
    output: "m1f/docker/01_configs.txt"
    sources:
      - path: "."
        includes: ["**/Dockerfile*", "**/.dockerignore", "docker-compose*.yml"]

  # Monitoring and observability
  monitoring:
    description: "Monitoring and alerting configs"
    group: "observability"
    output: "m1f/monitoring/01_configs.txt"
    sources:
      - path: "monitoring/"
      - path: "grafana/"
      - path: "prometheus/"

  # CI/CD pipelines
  cicd:
    description: "CI/CD pipeline definitions"
    group: "devops"
    output: "m1f/cicd/01_pipelines.txt"
    sources:
      - path: ".github/workflows/"
      - path: ".gitlab-ci.yml"
      - path: "jenkins/"
      - path: ".circleci/"

  # Service mesh configuration
  service-mesh:
    description: "Service mesh configurations"
    group: "infrastructure"
    output: "m1f/mesh/01_configs.txt"
    sources:
      - path: "istio/"
      - path: "linkerd/"
      - path: "consul/"

  # Quick overview for new developers
  architecture-overview:
    description: "Architecture overview"
    group: "reference"
    output: "m1f/00_architecture.txt"
    max_file_size: "150KB"
    sources:
      - path: "."
        includes:
          [
            "README.md",
            "ARCHITECTURE.md",
            "docker-compose.yml",
            "services/*/README.md",
          ]
```

## Mobile App Project

Configuration for a React Native or Flutter mobile application.

```yaml
# Mobile App m1f Configuration

global:
  global_excludes:
    # Platform-specific builds
    - "**/ios/build/**"
    - "**/ios/Pods/**"
    - "**/android/build/**"
    - "**/android/.gradle/**"
    - "**/android/app/build/**"

    # React Native / Flutter
    - "**/node_modules/**"
    - "**/.dart_tool/**"
    - "**/pubspec.lock"
    - "**/package-lock.json"
    - "**/yarn.lock"

    # IDE and temp files
    - "**/.idea/**"
    - "**/.vscode/**"
    - "**/tmp/**"
    - "**/*.log"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".npmignore"]

    extensions:
      # Mobile-specific
      .swift:
        remove_comments: true
      .kt:
        remove_comments: true
      .dart:
        remove_comments: true
      .java:
        remove_comments: true
      # JavaScript/TypeScript
      .js:
        minify: true
      .jsx:
        minify: true
      .ts:
        minify: true
      .tsx:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "500KB"

bundles:
  # Core application code
  app-screens:
    description: "App screens and navigation"
    group: "app"
    output: "m1f/app/01_screens.txt"
    sources:
      - path: "src/screens/" # React Native
      - path: "lib/screens/" # Flutter
      - path: "src/pages/"
      - path: "src/navigation/"

  app-components:
    description: "Reusable UI components"
    group: "app"
    output: "m1f/app/02_components.txt"
    sources:
      - path: "src/components/"
      - path: "lib/widgets/" # Flutter
      - path: "src/ui/"

  app-state:
    description: "State management"
    group: "app"
    output: "m1f/app/03_state.txt"
    sources:
      - path: "src/store/" # Redux/MobX
      - path: "src/context/" # React Context
      - path: "lib/providers/" # Flutter Provider
      - path: "lib/blocs/" # Flutter BLoC

  app-services:
    description: "API and service layer"
    group: "app"
    output: "m1f/app/04_services.txt"
    sources:
      - path: "src/services/"
      - path: "src/api/"
      - path: "lib/services/"
      - path: "src/utils/"

  # Platform-specific code
  platform-ios:
    description: "iOS specific code"
    group: "platform"
    output: "m1f/platform/01_ios.txt"
    sources:
      - path: "ios/"
        include_extensions: [".swift", ".m", ".h", ".plist"]
        excludes: ["Pods/", "build/"]

  platform-android:
    description: "Android specific code"
    group: "platform"
    output: "m1f/platform/02_android.txt"
    sources:
      - path: "android/"
        include_extensions: [".java", ".kt", ".xml", ".gradle"]
        excludes: ["build/", ".gradle/"]

  # Assets and resources
  app-assets:
    description: "App assets and resources"
    group: "assets"
    output: "m1f/assets/01_resources.txt"
    sources:
      - path: "assets/"
        includes: ["**/*.json", "**/*.xml", "**/strings.xml"]
      - path: "src/assets/"
      - path: "resources/"

  # Configuration
  app-config:
    description: "App configuration"
    group: "config"
    output: "m1f/config/01_configuration.txt"
    sources:
      - path: "."
        includes: [
            "package.json",
            "app.json", # React Native
            "metro.config.js", # React Native
            "babel.config.js",
            "tsconfig.json",
            "pubspec.yaml", # Flutter
            ".env.example",
          ]

  # Tests
  app-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/tests/01_tests.txt"
    sources:
      - path: "__tests__/"
      - path: "test/"
      - path: "src/"
        includes: ["**/*.test.js", "**/*.test.ts", "**/*.spec.js"]

  # Native modules
  native-modules:
    description: "Native modules and bridges"
    group: "native"
    output: "m1f/native/01_modules.txt"
    sources:
      - path: "src/native/"
      - path: "native-modules/"
      - path: "."
        includes: ["**/RN*.swift", "**/RN*.java", "**/RN*.kt"]

  # Quick reference
  app-quick-ref:
    description: "Key files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes:
          ["README.md", "package.json", "app.json", "src/App.js", "index.js"]
```

## Best Practices

When creating your `.m1f.config.yml`:

1. **Group Related Files**: Create focused bundles that group related
   functionality
2. **Use Meaningful Names**: Choose descriptive bundle names that indicate
   content
3. **Set Size Limits**: Keep bundles under 100KB for optimal AI performance
4. **Security First**: Always configure proper security checks for sensitive
   files
5. **Leverage Presets**: Use built-in presets for common project types
6. **Exclude Wisely**: Don't bundle generated files, dependencies, or build
   artifacts
7. **Document Purpose**: Add descriptions to help others understand each bundle
8. **Test Configuration**: Run `m1f-update` and check bundle sizes with
   `m1f-token-counter`

## Common Patterns

### Pattern 1: Separate by Layer

```yaml
bundles:
  frontend: # UI components
  backend: # Server logic
  database: # Models and migrations
  api: # API endpoints
  tests: # Test suites
```

### Pattern 2: Separate by Feature

```yaml
bundles:
  feature-auth: # Authentication
  feature-payment: # Payment processing
  feature-search: # Search functionality
  feature-admin: # Admin panel
```

### Pattern 3: Separate by Purpose

```yaml
bundles:
  quick-reference: # Essential files for context
  documentation: # All docs
  source-code: # Implementation
  configuration: # Config files
  deployment: # Deploy scripts
```

### Pattern 4: Progressive Detail

```yaml
bundles:
  overview: # High-level summary (10KB)
  core-logic: # Main functionality (50KB)
  full-source: # Complete code (100KB)
  everything: # All files (500KB)
```

Remember: The best configuration depends on your specific project needs and how
you plan to use the bundles with AI assistants.

======= 26_default_excludes_guide.md ======
# m1f Default Excludes Guide

This guide explains the files and directories that m1f excludes by default,
helping you write minimal and efficient `.m1f.config.yml` configurations.

## üö® CRITICAL: Correct Bundle Format

**ALWAYS use the `sources:` array format, NOT `source_directory:`!**

```yaml
# ‚úÖ CORRECT FORMAT:
bundles:
  - name: my-bundle
    sources:
      - "./src"
    output_file: "m1f/my-bundle.txt"
    separator_style: Standard  # Or omit - Standard is default

# ‚ùå WRONG FORMAT (will cause errors):
bundles:
  my-bundle:
    source_directory: "./src"  # This format causes "ERROR: At least one of -s/--source-directory..."
    output_file: "m1f/my-bundle.txt"
    separator_style: Detailed  # Don't use for AI bundles!
```

**ALWAYS test with `m1f-update` immediately after creating/editing
.m1f.config.yml!**

## Understanding Default Excludes

**IMPORTANT**: m1f automatically excludes many common directories and files. You
DON'T need to repeat these in your configuration - only add project-specific
exclusions!

## Default Excluded Directories

The following directories are ALWAYS excluded unless you explicitly use
`--no-default-excludes`:

```yaml
# These are excluded automatically - no need to add them to your config!
- vendor/ # Composer dependencies (PHP)
- node_modules/ # NPM dependencies (JavaScript)
- build/ # Common build output directory
- dist/ # Distribution/compiled files
- cache/ # Cache directories
- .git/ # Git repository data
- .svn/ # Subversion data
- .hg/ # Mercurial data
- __pycache__/ # Python bytecode cache
- .pytest_cache/ # Pytest cache
- .mypy_cache/ # MyPy type checker cache
- .tox/ # Tox testing cache
- .coverage/ # Coverage.py data
- .eggs/ # Python eggs
- htmlcov/ # HTML coverage reports
- .idea/ # IntelliJ IDEA settings
- .vscode/ # Visual Studio Code settings
```

## Default Excluded Files

These specific files are also excluded automatically:

```yaml
# These files are excluded by default:
- LICENSE # License files (usually not needed in bundles)
- package-lock.json # NPM lock file
- composer.lock # Composer lock file
- poetry.lock # Poetry lock file
- Pipfile.lock # Pipenv lock file
- yarn.lock # Yarn lock file
```

## Writing Minimal Configurations

### ‚ùå BAD - Overly Verbose Configuration

```yaml
# DON'T DO THIS - repeating default excludes unnecessarily!
global:
  global_excludes:
    - "**/node_modules/**" # Already excluded by default!
    - "**/vendor/**" # Already excluded by default!
    - "**/__pycache__/**" # Already excluded by default!
    - "**/build/**" # Already excluded by default!
    - "**/dist/**" # Already excluded by default!
    - "**/.git/**" # Already excluded by default!
    - "**/cache/**" # Already excluded by default!
    - "**/.vscode/**" # Already excluded by default!
    - "**/*.pyc" # Project-specific - OK
    - "**/logs/**" # Project-specific - OK
```

### ‚úÖ GOOD - Minimal Configuration

```yaml
# Only add project-specific exclusions!
global:
  global_excludes:
    - "**/*.pyc" # Python bytecode
    - "**/logs/**" # Your project's log files
    - "**/tmp/**" # Your temporary directories
    - "/m1f/**" # Output directory
    - "**/secrets/**" # Sensitive data
```

## Common Patterns by Project Type

### Python Projects

```yaml
# Only add what's NOT in default excludes
global:
  global_excludes:
    - "**/*.pyc" # Bytecode files
    - "**/*.pyo" # Optimized bytecode
    - "**/*.pyd" # Python DLL files
    - "**/venv/**" # Virtual environments
    - "**/.venv/**" # Alternative venv naming
    - "**/env/**" # Another venv naming
```

### Node.js Projects

```yaml
# node_modules is already excluded!
global:
  global_excludes:
    - "**/.next/**" # Next.js build cache
    - "**/.nuxt/**" # Nuxt.js build cache
    - "**/coverage/**" # Test coverage reports
    - "**/*.log" # Log files
```

### WordPress Projects

```yaml
# Only WordPress-specific excludes needed
global:
  global_excludes:
    - "**/wp-content/uploads/**" # User uploads
    - "**/wp-content/cache/**" # Cache plugins
    - "**/wp-content/backup/**" # Backup files
    - "wp-admin/**" # Core files
    - "wp-includes/**" # Core files
```

## Using .gitignore as Exclude File

Instead of manually listing excludes, use your existing .gitignore:

```yaml
global:
  global_settings:
    # This automatically uses your .gitignore patterns!
    exclude_paths_file: ".gitignore"
```

Or use multiple exclude files:

```yaml
global:
  global_settings:
    exclude_paths_file:
      - ".gitignore" # Version control ignores
      - ".m1fignore" # m1f-specific ignores
```

## Checking What's Excluded

To see all excluded paths (including defaults), use verbose mode:

```bash
m1f -s . -o test.txt --verbose
```

This will show:

- Default excluded directories
- Patterns from your config
- Files matched by your exclude patterns

## Disabling Default Excludes

If you need to include normally excluded directories:

```bash
# Include everything, even node_modules, .git, etc.
m1f -s . -o complete.txt --no-default-excludes
```

‚ö†Ô∏è **WARNING**: This can create HUGE bundles and include sensitive data!

## Best Practices

1. **Start Simple**: Begin with no excludes and add only as needed
2. **Use .gitignore**: Leverage existing ignore patterns
3. **Test First**: Run with `--verbose` to see what's excluded
4. **Document Why**: Add comments explaining non-obvious excludes

```yaml
global:
  global_excludes:
    # Project-specific build artifacts
    - "**/generated/**" # Auto-generated code
    - "**/reports/**" # Test/coverage reports

    # Large data files
    - "**/*.sqlite" # Database files
    - "**/*.csv" # Data exports

    # Sensitive information
    - "**/.env*" # Environment files
    - "**/secrets/**" # API keys, certs
```

## Quick Reference

### Already Excluded (Don't Repeat)

- `node_modules/`, `vendor/`, `build/`, `dist/`
- `.git/`, `.svn/`, `.hg/`
- `__pycache__/`, `.pytest_cache/`, `.mypy_cache/`
- `.idea/`, `.vscode/`
- Lock files: `*.lock`, `package-lock.json`

### Commonly Added (Project-Specific)

- Virtual envs: `venv/`, `.venv/`, `env/`
- Logs: `*.log`, `logs/`
- Temp files: `tmp/`, `temp/`, `*.tmp`
- Database: `*.sqlite`, `*.db`
- Environment: `.env`, `.env.*`
- Output: `/m1f/` (your bundle directory)

## Summary

Keep your `.m1f.config.yml` files clean and minimal by:

1. NOT repeating default excludes
2. Only adding project-specific patterns
3. Using `.gitignore` when possible
4. Documenting non-obvious exclusions

This makes your configurations easier to read, maintain, and share with others!

======= 30_claude_workflows.md ======
# Claude + m1f: Your AI-Powered Project Assistant 🤖

Ever wished you had an AI buddy who actually understands your project structure?
That's what happens when you combine Claude with m1f. This guide shows you how
to turn Claude into your personal project assistant who knows exactly how to
bundle, organize, and process your code.

## The Power of m1f v3.2 + Claude ✨

With m1f v3.2's enhanced features, Claude can help you:

- Configure comprehensive security scanning
- Set up parallel processing for faster bundling
- Create sophisticated preset configurations
- Manage content deduplication strategies
- Handle complex encoding scenarios

## Getting Started with Claude

### Step 1: Give Claude the Power

First, let's get Claude up to speed on what m1f can do:

```bash
cd /your/awesome/project
m1f-init  # Quick setup: links docs, analyzes project, creates bundles
```

Boom! 💥 This command:

- Creates m1f/m1f.txt symlink to the complete documentation
- Analyzes your project structure
- Generates initial bundles (complete and docs)
- Creates a basic .m1f.config.yml

For advanced setup with topic-specific bundles (Linux/macOS only):

```bash
m1f-claude --advanced-setup
```

### Step 2: Start the Conversation

Here's where it gets fun. Just tell Claude what you need:

```
Hey Claude, I need help setting up m1f for my project.
Check out @m1f/m1f.txt to see what m1f can do.

My project is a Python web app with:
- Backend API in /api
- Frontend React code in /frontend
- Tests scattered around
- Some docs in /docs

Can you create a .m1f.config.yml that bundles these intelligently?
```

Claude will read the docs and create a perfect config for your project
structure. No more guessing at parameters!

## Real-World Workflows That Actually Work 🚀

### The "Security-First Bundle" Workflow

```
Claude, I need to create bundles for external review.
Using m1f v3.2's security features:

1. Create a config that scans for secrets (security_check: error)
2. Exclude any files with sensitive data
3. Set up proper path validation
4. Ensure no internal IPs or credentials leak through

Focus on making it safe to share with contractors.
```

### The "Performance Optimization" Workflow

```
Claude, my project has 5000+ files and bundling is slow.
Help me optimize using m1f v3.2's features:

1. Leverage parallel processing (enabled by default)
2. Set up smart file size limits
3. Use content deduplication to reduce bundle size
4. Create targeted bundles instead of one massive file

The goal is sub-10 second bundle generation.
```

### The "Multi-Environment Setup" Workflow

```
Claude, I need different bundles for dev/staging/prod.
Using m1f v3.2's preset system:

1. Create environment-specific presets
2. Use conditional presets (enabled_if_exists)
3. Set different security levels per environment
4. Configure appropriate output formats

Make it so I can just run: m1f --preset env.yml --preset-group production
```

## Using m1f-claude: Advanced Project Setup 🧠

For advanced project-specific configuration, use m1f-claude (Linux/macOS only):

```bash
# First, run the quick setup
m1f-init

# Then for advanced configuration with Claude's help
m1f-claude --advanced-setup
```

### What Makes m1f-claude Special?

When you use `m1f-claude --advanced-setup`, it:

- Analyzes your project in detail with Claude's assistance
- Creates topic-specific bundles (components, API, tests, etc.)
- Optimizes configuration for your specific project type
- Provides intelligent suggestions based on your codebase

**Note**: m1f-claude requires Claude Code SDK and is not available on Windows.
Windows users can manually customize their .m1f.config.yml after running
m1f-init.

### 💡 Important: Claude Code Subscription Recommended

**We strongly recommend using Claude Code with a subscription plan** when using
m1f-claude for project setup. Setting up m1f with Claude's assistance can
involve:

- Multiple file reads to analyze your project structure
- Creating and editing configuration files
- Running various commands to test configurations
- Iterative refinement of bundles

Since we don't know exactly how many tokens this process will consume, a
subscription ensures you won't run into usage limits during critical setup
phases. The investment pays off quickly through the time saved in properly
configuring your project.

## Working with Claude Code

If you're using Claude Code (claude.ai/code), you can leverage its file reading
capabilities:

```
# In Claude Code, you can directly reference files
Claude, please read my current .m1f.config.yml and suggest improvements
based on m1f v3.2 features like:
- Better security scanning
- Optimized performance settings
- Advanced preset configurations
```

## Advanced v3.2 Patterns 🎯

### The "Complete Configuration via Presets"

With v3.2, you can control everything through presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production-ready bundles with full security"

  global_settings:
    # Input/Output
    source_directory: "./src"
    output_file: "dist/prod-bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Security (v3.2)
    security_check: "error" # Stop on any secrets

    # Performance (v3.2)
    enable_content_deduplication: true
    prefer_utf8_for_text_files: true

    # Output control
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true
    minimal_output: true
    quiet: true

    # Processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    max_file_size: "1MB"

    # Exclusions
    exclude_patterns:
      - "**/*.test.js"
      - "**/*.spec.ts"
      - "**/node_modules/**"
      - "**/.env*"

  presets:
    minify_production:
      patterns: ["dist/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]
```

### The "AI Context Optimization" Pattern

```yaml
bundles:
  ai-context:
    description: "Optimized for Claude and other LLMs"
    output: "m1f/ai-context.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts", ".jsx", ".tsx"]
        exclude_patterns:
          - "**/*.test.*"
          - "**/*.spec.*"
          - "**/test/**"

    # v3.2 optimizations
    global_settings:
      # Security first
      security_check: "warn"

      # Performance
      enable_content_deduplication: true # Reduce token usage

      # AI-friendly format
      separator_style: "Markdown"
      max_file_size: "100KB" # Keep context focused

      # Clean output
      remove_scraped_metadata: true
      allow_duplicate_files: false
```

### The "Encoding-Aware Bundle" Pattern

```yaml
bundles:
  legacy-code:
    description: "Handle mixed encoding legacy code"
    output: "m1f/legacy-bundle.txt"

    global_settings:
      # v3.2 encoding features
      prefer_utf8_for_text_files: false # Respect original encoding
      convert_to_charset: "utf-8" # But convert output
      abort_on_encoding_error: false # Continue on errors

      # Include everything
      include_binary_files: false
      include_dot_paths: true
```

## Pro Tips for Claude Interactions 💪

### 1. Let Claude Learn Your Project

First time? Let Claude explore:

```
Claude, analyze my project structure and suggest
how to organize it with m1f bundles. Consider:
- What files change together
- Logical groupings for different use cases
- Size limits for AI context windows

Use @m1f/m1f.txt to understand all available options.
```

### 2. Provide Clear Context

```
Claude, here's my project structure from m1f:
- Total files: 500
- Main languages: Python (60%), JavaScript (30%), Docs (10%)
- Special requirements: HIPAA compliance, no credential exposure
- Target use: Sharing with external auditors

Create a secure bundling strategy using m1f v3.2's security features.
Check @m1f/m1f.txt for security parameters.
```

### 3. Iterative Refinement

```
Claude, the bundle is too large (50MB). Help me:
1. Use content deduplication more aggressively
2. Set up file size limits
3. Create multiple smaller bundles by component
4. Exclude generated files and build artifacts
```

### 4. Preset Composition

```
Claude, I want layered presets:
1. base.yml - Company-wide standards
2. project.yml - Project-specific rules
3. personal.yml - My personal preferences

Show me how to use them together with proper override behavior.
```

## Security-First Workflows 🔒

### Preparing Code for Review

```
Claude, I need to share code with a contractor. Create a config that:
1. Runs strict security scanning (security_check: error)
2. Validates all file paths
3. Excludes .env files and secrets
4. Redacts any hardcoded credentials
5. Creates an audit trail

Use m1f v3.2's security features to make this bulletproof.
```

### Automated Security Checks

```
Claude, write a Git pre-commit hook that:
1. Runs m1f with security scanning
2. Blocks commits if secrets are found
3. Auto-generates safe bundles
4. Updates the m1f/ directory

Make it work with m1f v3.2's git hooks setup.
```

## Performance Optimization Strategies 🚀

### Large Codebase Handling

```
Claude, optimize m1f for our monorepo (10K+ files):

1. Set up smart exclusion patterns
2. Use size-based filtering
3. Create focused bundles per team
4. Leverage parallel processing
5. Implement caching strategies

Goal: Bundle generation under 30 seconds.
```

### Memory-Efficient Processing

```yaml
# Claude might suggest this for large files
large_files:
  description: "Handle massive log files"

  global_settings:
    max_file_size: "10MB" # Skip huge files
    enable_content_deduplication: true

  presets:
    truncate_logs:
      extensions: [".log", ".txt"]
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000
        add_marker: true
```

## Troubleshooting with Claude 🔧

### Common Issues and Solutions

```
Claude, m1f is flagging false positives for secrets. Help me:
1. Configure security_check levels appropriately
2. Create patterns to exclude test fixtures
3. Set up per-file security overrides
4. Document why certain warnings are acceptable
```

### Performance Debugging

```
Claude, bundling takes 5 minutes. Analyze this verbose output
and suggest optimizations:
[paste m1f --verbose output]

Consider:
- File count and sizes
- Duplicate detection overhead
- Encoding detection delays
- Security scanning bottlenecks
```

## Integration Patterns 🔌

### CI/CD Integration

```
Claude, create a GitHub Action that:
1. Triggers on PR creation
2. Generates comparison bundles (before/after)
3. Posts bundle statistics as PR comment
4. Fails if bundle size increases >10%
5. Runs security scanning on changed files

Use m1f v3.2's features for efficiency.
```

### Documentation Automation

```
Claude, automate our documentation workflow:
1. Scrape our docs site weekly
2. Convert HTML to Markdown
3. Bundle by section with m1f
4. Remove outdated metadata
5. Create versioned archives

Leverage m1f's web scraping and processing features.
```

## Quick Reference Commands 🎪

Some powerful one-liners for common tasks:

```bash
# Give Claude m1f superpowers
m1f-link

# Quick m1f setup for your project
m1f-claude "Setup m1f for a typical Python project with tests and docs"

# Interactive Claude session
m1f-claude -i

# Security audit bundle
m1f -s . -o audit.txt --security-check error --minimal-output

# Fast development bundle (no security checks)
m1f -s ./src -o dev.txt --security-check skip

# Documentation bundle with metadata
m1f -s ./docs -o docs.txt --separator-style Detailed

# Clean bundle for AI consumption
m1f -s . -o ai-context.txt --allow-duplicate-files false

# Help me understand this codebase
m1f-claude "Create bundles to help a new developer understand this project"

# Prep for the AI apocalypse
m1f-claude "Optimize my project for AI assistants with proper context windows"
```

## Your Turn! 🎮

Now you're ready to turn Claude into your personal m1f expert. Remember:

1. Always start with `m1f-link` to give Claude the docs
2. Be specific about what you want to achieve
3. Let Claude suggest optimal configurations based on the documentation
4. Iterate and refine based on results
5. Test security settings thoroughly before sharing

The best part? Claude remembers your conversations, so it gets better at
understanding your project over time.

Happy bundling! 🚀

---

_P.S. - If Claude suggests something that seems off, just ask "Are you sure
about that? Check @m1f/m1f.txt again." Works every time! 😉_

======= 31_claude_code_integration.md ======
# Claude Code Integration Guide

This guide explains how to integrate Claude Code as an optional AI assistant for
the m1f tools project.

## Overview

Claude Code can help automate complex workflows by understanding natural
language prompts and executing the appropriate tools with correct parameters.

## Installation

### Prerequisites

- Node.js installed on your system
- An Anthropic API key (get one at https://console.anthropic.com)

### Install Claude Code

```bash
npm install -g @anthropic-ai/claude-code
```

### Initial Setup

1. Start Claude Code:

   ```bash
   claude
   ```

2. Login with your API key:

   ```
   /login
   ```

3. Configure Claude Code for this project:
   ```bash
   cd /path/to/m1f
   claude config
   ```

## Project Configuration

Create `.claude/settings.json` in the project root:

```json
{
  "model": "claude-opus-4",
  "customInstructions": "You are helping with the m1f tools project. Key tools available: m1f.py (file bundler), s1f.py (file splitter), mf1-html2md (HTML to Markdown converter), wp_export_md.py (WordPress exporter).",
  "permissions": {
    "write": true,
    "execute": true
  }
}
```

## m1f Project Setup

### Quick Setup with m1f-init

The `m1f-init` command provides cross-platform project initialization:

```bash
# Run in your project directory
m1f-init

# With verbose output
m1f-init --verbose
```

#### What m1f-init Does:

1. **Links m1f Documentation**

   - Creates m1f/m1f.txt symlink (or copies on Windows)
   - Makes documentation accessible to AI tools

2. **Project Analysis**

   - Detects git repository boundaries
   - Analyzes project structure and languages
   - Creates file and directory lists in `m1f/` directory

3. **Creates Initial Bundles with Auxiliary Files**

   - `<project>_complete.txt` - Full project bundle
   - `<project>_complete_filelist.txt` - List of all included files
   - `<project>_complete_dirlist.txt` - List of all directories
   - `<project>_docs.txt` - Documentation only bundle
   - `<project>_docs_filelist.txt` - List of documentation files
   - `<project>_docs_dirlist.txt` - Documentation directories

4. **Generates Configuration**
   - Creates basic .m1f.config.yml if not present
   - Respects .gitignore patterns
   - Excludes m1f/ directory automatically

### Advanced Setup with m1f-claude (Linux/macOS only)

For topic-specific bundles and advanced configuration:

```bash
# First run m1f-init
m1f-init

# Then run advanced setup
m1f-claude --advanced-setup
```

#### What --advanced-setup Does:

- Claude analyzes your project structure in detail
- Creates topic-specific bundles (models, views, tests, etc.)
- Customizes configuration for your project type
- Optimizes bundle organization for AI consumption
- Requires Claude Code SDK installation

**Note**: Windows users can achieve similar results by manually editing
.m1f.config.yml after running m1f-init.

### Working with Generated File Lists

The file lists generated by m1f-init are powerful tools for customization:

```bash
# View statistics
wc -l m1f/*_filelist.txt  # Count files in each bundle

# Create a custom bundle by editing file lists
cp m1f/myproject_complete_filelist.txt m1f/api_only_filelist.txt
vi m1f/api_only_filelist.txt  # Keep only API-related files
m1f -i m1f/api_only_filelist.txt -o m1f/api_bundle.txt

# Combine multiple lists
cat m1f/*_docs_filelist.txt m1f/tests_filelist.txt | sort -u > m1f/docs_and_tests.txt
m1f -i m1f/docs_and_tests.txt -o m1f/combined.txt

# Use directory lists to focus on specific areas
grep "src/components" m1f/myproject_complete_dirlist.txt
m1f -s src/components -o m1f/components_only.txt
```

3. **Configuration File**

   - Creates `.m1f.config.yml` with complete and docs bundles
   - Uses `docs_only: true` for documentation bundle
   - No global file size limits
   - Proper meta file exclusions (LICENSE*, CLAUDE.md, *.lock)

4. **Advanced Segmentation (Optional)**
   - If Claude Code is installed and advanced mode selected
   - Analyzes project structure for components, API, styles, etc.
   - Adds topic-specific bundles to existing configuration
   - Uses `--allowedTools Read,Write,Edit,MultiEdit` for file operations

#### Example Output:

```
🚀 Initializing m1f for your project...
==================================================
✅ Git repository detected: /home/user/my-project
✅ m1f documentation already available
⚠️  No m1f configuration found - will help you create one
✅ Claude Code is available

📊 Project Analysis
==============================
Analyzing project structure with m1f...
📄 Created file list: project_analysis_filelist.txt
📁 Created directory list: project_analysis_dirlist.txt
✅ Found 127 files in 59 directories
📁 Project Type: Next.js Application
💻 Languages: JavaScript (37 files), TypeScript (30 files)
📂 Code Dirs: src/app, src/components, src/lib

📦 Creating Initial Bundles
==============================
Creating complete project bundle...
✅ Created: m1f/complete.txt
Creating documentation bundle...
✅ Created: m1f/docs.txt

📝 Creating .m1f.config.yml with basic bundles...
✅ Configuration created with complete and docs bundles

🤖 Claude Code for Advanced Segmentation
──────────────────────────────────────────────────
Basic bundles created! Now Claude can help you create topic-specific bundles.

[Claude analyzes and adds topic-specific bundles]

✅ Advanced segmentation complete!
📝 Claude has analyzed your project and added topic-specific bundles.

🚀 Next steps:
• Your basic bundles are ready in m1f/
  - complete.txt: Full project bundle
  - docs.txt: All documentation files
• Run 'm1f-update' to regenerate bundles after config changes
• Use Claude to create topic-specific bundles as needed
```

#### Troubleshooting:

- **Use --verbose** to see the full prompt and command parameters
- **Check file permissions** if config isn't being modified
- **Ensure Claude Code is installed**:
  `npm install -g @anthropic-ai/claude-code`
- **Analysis files are kept** in m1f/ directory for reference

## Using Claude Code with m1f Tools

### Basic Commands

1. **Bundle files into m1f**:

   ```bash
   claude -p "Bundle all Python files in the tools directory into a single m1f file"
   ```

2. **Convert HTML to Markdown**:

   ```bash
   claude -p "Convert all HTML files in ~/docs to Markdown with preprocessing"
   ```

3. **Analyze and preprocess HTML**:
   ```bash
   claude -p "Analyze the HTML files in the docs folder and create a preprocessing config"
   ```

### Advanced Workflows

1. **Complete documentation conversion workflow**:

   ```bash
   claude -p "I have scraped HTML documentation in ~/docs/html. Please:
   1. Analyze a few sample files to understand the structure
   2. Create a preprocessing configuration
   3. Convert all HTML to Markdown
   4. Create thematic m1f bundles (concepts, reference, installation, etc.)"
   ```

2. **Export WordPress site**:
   ```bash
   claude -p "Export my WordPress site at example.com to Markdown, organizing by categories"
   ```

## Programmatic Usage

### Using Claude Code in Scripts

```python
#!/usr/bin/env python3
import subprocess
import json

def claude_command(prompt):
    """Execute a Claude Code command and return the result."""
    result = subprocess.run(
        ['claude', '-p', prompt, '--output-format', 'json'],
        capture_output=True,
        text=True
    )
    return json.loads(result.stdout)

# Example: Get optimal m1f parameters
response = claude_command(
    "What are the optimal m1f parameters for bundling a Python project with tests?"
)
print(response)
```

### Integration with m1f Tools

Create `tools/claude_orchestrator.py`:

```python
#!/usr/bin/env python3
"""Orchestrate m1f tools using Claude Code."""

import subprocess
import json
from pathlib import Path

class ClaudeOrchestrator:
    def __init__(self):
        self.tools = {
            'm1f': 'tools/m1f.py',
            's1f': 'tools/s1f.py',
            'mf1-html2md': 'tools/mf1-html2md',
            'wp_export': 'tools/wp_export_md.py'
        }

    def analyze_request(self, user_prompt):
        """Use Claude to analyze user request and determine actions."""
        analysis_prompt = f"""
        Analyze this request and return a JSON with:
        1. tool: which tool to use ({', '.join(self.tools.keys())})
        2. parameters: dict of parameters for the tool
        3. steps: list of steps to execute

        Request: {user_prompt}
        """

        result = subprocess.run(
            ['claude', '-p', analysis_prompt, '--output-format', 'json'],
            capture_output=True,
            text=True
        )
        return json.loads(result.stdout)

    def execute_workflow(self, user_prompt):
        """Execute a complete workflow based on user prompt."""
        plan = self.analyze_request(user_prompt)

        for step in plan['steps']:
            print(f"Executing: {step['description']}")
            # Execute the actual command
            subprocess.run(step['command'], shell=True)
```

## Best Practices

1. **Create project-specific instructions** in `.claude/settings.json`
2. **Use Claude for complex workflows** that require multiple steps
3. **Leverage Claude's understanding** of file patterns and project structure
4. **Combine with shell pipes** for powerful automation

## Example Workflows

### 1. Documentation Processing Pipeline

```bash
# Complete pipeline with Claude
claude -p "Process the scraped documentation in ~/scraped-docs:
1. Analyze HTML structure
2. Create preprocessing config
3. Convert to Markdown preserving structure
4. Create m1f bundles by topic
5. Generate a summary report"
```

### 2. Project Analysis

```bash
# Analyze project for bundling
claude -p "Analyze this Python project and suggest:
1. Which files should be bundled together
2. Optimal m1f parameters
3. Any files that should be excluded"
```

### 3. Automated Testing

```bash
# Run tests and fix issues
claude -p "Run the test suite, identify any failures, and fix them"
```

## Environment Variables

Set these in your shell profile for persistent configuration:

```bash
export ANTHROPIC_MODEL="claude-sonnet-4-20250514"
export CLAUDE_CODE_PROJECT_ROOT="/path/to/m1f"
```

## Troubleshooting

1. **Permission errors**: Ensure Claude Code has write permissions in settings
2. **Model selection**: Use Claude Opus 4 for the most complex analysis, Claude
   Sonnet 4 for balanced performance
3. **Rate limits**: Be mindful of API usage limits

## Security Considerations

1. **Never commit API keys** to version control
2. **Use `.claude/settings.local.json`** for personal settings
3. **Review Claude's actions** before executing in production

## Further Resources

- [Claude Code Documentation](https://docs.anthropic.com/en/docs/claude-code)
- [m1f Tools Documentation](00_m1f.md)
- [html2md Documentation](../03_html2md/30_html2md.md)

======= 40_security_best_practices.md ======
# Security Best Practices Guide for m1f Toolkit

## Overview

This guide documents security best practices and protective measures implemented
in the m1f toolkit v3.2. Following these practices ensures safe operation and
prevents common security vulnerabilities.

## Path Validation and Traversal Protection

### Why It Matters

Path traversal attacks can allow malicious actors to access files outside
intended directories, potentially exposing sensitive system files or overwriting
critical data.

### Best Practices

1. **Always validate resolved paths**:

   ```python
   # Good practice - validate after resolving
   from tools.m1f.utils import validate_safe_path

   target_path = Path(user_input).resolve()
   validate_safe_path(target_path, base_path)
   ```

2. **Use the provided validation utilities**:

   - `validate_safe_path()` in `tools/m1f/utils.py` ensures paths stay within
     allowed boundaries
   - All user-provided paths should be validated before use

3. **Symlink safety**:
   - Symlinks are resolved and validated to prevent escaping directories
   - Target of symlinks must be within the allowed base path

### Common Pitfalls to Avoid

- Never use user input directly in file paths without validation
- Don't trust relative paths without resolving and validating them
- Always validate paths from configuration files and presets

## Web Scraping Security

### SSRF (Server-Side Request Forgery) Protection

The toolkit blocks access to:

- Private IP ranges (10.x.x.x, 172.16.x.x, 192.168.x.x)
- Localhost and loopback addresses (127.0.0.1, ::1)
- Link-local addresses (169.254.x.x)
- Cloud metadata endpoints (169.254.169.254)

### SSL/TLS Validation

1. **Default behavior**: SSL certificates are validated by default
2. **Disabling validation** (use with caution):

   ```bash
   # Only for trusted internal sites or testing
   m1f-scrape --ignore-https-errors https://internal-site.com
   ```

   ⚠️ **Warning**: Disabling SSL validation exposes you to man-in-the-middle
   attacks. Only use for trusted internal resources.

### robots.txt Compliance

All scrapers automatically respect robots.txt files:

- Automatically fetched and parsed for each domain
- Scraping is blocked for disallowed paths
- User-agent specific rules are respected
- This is always enabled - no configuration option to disable

### JavaScript Execution Safety

When using Playwright with custom scripts:

- Scripts are validated for dangerous patterns
- Avoid executing untrusted JavaScript code
- Use built-in actions instead of custom scripts when possible

## Command Injection Prevention

### Safe Command Execution

The toolkit uses proper escaping for all system commands:

```python
# Good - using shlex.quote()
import shlex
command = f"httrack {shlex.quote(url)} -O {shlex.quote(output_dir)}"

# Bad - direct string interpolation
command = f"httrack {url} -O {output_dir}"  # DON'T DO THIS
```

## Preset System Security

### File Size Limits

- Preset files are limited to 10MB to prevent memory exhaustion
- Large preset files are rejected with an error

### Path Validation in Presets

- All paths in preset files are validated
- Paths cannot escape the project directory
- Absolute paths outside the project are blocked

### Custom Processor Validation

- Processor names must be alphanumeric with underscores only
- Special characters that could enable code injection are blocked

## Secure Temporary File Handling

The toolkit uses Python's `tempfile` module for all temporary files:

- Temporary directories are created with restricted permissions
- All temporary files are cleaned up after use
- No sensitive data is left in temporary locations

## Security Scanning for Sensitive Data

### Built-in Secret Detection

m1f includes automatic scanning for:

- API keys and tokens
- Passwords and credentials
- Private keys
- High-entropy strings that might be secrets

### Security Check Modes

1. **Error mode** (default): Stops processing if secrets are found

   ```bash
   m1f -s ./src -o output.txt --security-check error
   ```

2. **Warn mode**: Logs warnings but continues processing

   ```bash
   m1f -s ./src -o output.txt --security-check warn
   ```

3. **Skip mode**: Disables security scanning (not recommended)
   ```bash
   m1f -s ./src -o output.txt --security-check skip
   ```

### Handling False Positives

If legitimate content is flagged as sensitive:

1. Review the warnings carefully
2. Use `--security-check warn` if you're certain the content is safe
3. Consider refactoring code to avoid patterns that trigger detection

## Input Validation Best Practices

### File Type Validation

- Use include/exclude patterns to limit processed file types
- Be explicit about allowed file extensions
- Validate file contents match expected formats

### Size and Resource Limits

- Set appropriate limits for file sizes
- Use `--max-file-size` to prevent processing huge files
- Monitor memory usage for large file sets

### Encoding Safety

- The toolkit automatically detects file encodings
- UTF-8 is preferred for text files by default
- Binary files are handled safely without interpretation

## Deployment Security Recommendations

### Environment Configuration

1. Run with minimal required permissions
2. Use dedicated service accounts when possible
3. Avoid running as root/administrator

### Network Security

1. Use HTTPS for all web scraping when possible
2. Configure firewall rules to limit outbound connections
3. Monitor for unusual network activity

### Logging and Monitoring

1. Enable verbose logging for security-sensitive operations
2. Review logs regularly for suspicious patterns
3. Set up alerts for security check failures

## Reporting Security Issues

If you discover a security vulnerability in m1f:

1. Do NOT open a public issue
2. Email security details to the maintainers
3. Include steps to reproduce the issue
4. Allow time for a fix before public disclosure

## Security Checklist for Users

Before running m1f in production:

- [ ] Validate all input paths and patterns
- [ ] Review security check mode settings
- [ ] Enable SSL validation for web scraping
- [ ] Set appropriate file size limits
- [ ] Use minimal required permissions
- [ ] Review preset files for suspicious content
- [ ] Test security scanning on sample data
- [ ] Configure proper logging and monitoring
- [ ] Keep the toolkit updated to the latest version

## Updates and Security Patches

Stay informed about security updates:

- Check the CHANGELOG for security-related fixes
- Update to new versions promptly
- Review breaking changes that might affect security

Remember: Security is a shared responsibility. While m1f implements many
protective measures, proper configuration and usage are essential for
maintaining a secure environment.

======= 41_version_3_2_features.md ======
# m1f v3.2 Feature Documentation

## Overview

Version 3.2 of the m1f toolkit introduces significant security enhancements,
performance improvements, and new configuration options. This document provides
a comprehensive overview of all v3.2 features and changes.

## Major Security Enhancements

### 1. Path Traversal Protection

- **What's New**: Comprehensive validation of all file paths to prevent
  directory traversal attacks
- **Impact**: Prevents malicious actors from accessing files outside intended
  directories
- **Implementation**:
  - New `validate_safe_path()` utility function
  - Applied to all user inputs, preset paths, and configuration files
  - Symlink targets are now validated

### 2. SSRF Protection in Web Scrapers

- **What's New**: Blocks access to private IP ranges and cloud metadata
  endpoints
- **Protected Ranges**:
  - Private networks (10.x.x.x, 172.16.x.x, 192.168.x.x)
  - Localhost (127.0.0.1, ::1)
  - Link-local (169.254.x.x)
  - Cloud metadata (169.254.169.254)
- **Applies to**: All web scraping tools (BeautifulSoup, Playwright, Scrapy,
  Selectolax)

### 3. robots.txt Compliance

- **What's New**: All scrapers now automatically respect robots.txt files
- **Features**:
  - Automatic robots.txt fetching and parsing
  - Per-path access validation
  - User-agent specific rule support
  - No configuration needed - always enabled
- **Previously**: Only HTTrack respected robots.txt

### 4. SSL/TLS Certificate Validation

- **What's New**: SSL validation is now enabled by default
- **Configuration**:
  - New `--ignore-https-errors` flag for exceptions
  - Per-scraper SSL configuration
- **Security**: Prevents man-in-the-middle attacks

### 5. Command Injection Prevention

- **What's New**: Proper escaping of all shell commands
- **Implementation**: Uses `shlex.quote()` for all user inputs in commands
- **Affected Tools**: HTTrack scraper, git operations

### 6. JavaScript Execution Safety

- **What's New**: Validation of custom JavaScript in Playwright scraper
- **Features**:
  - Detects dangerous patterns (eval, Function constructor)
  - Warns about custom script execution
  - Encourages use of built-in actions

### 7. Custom Processor Validation

- **What's New**: Validates processor names to prevent injection attacks
- **Rules**: Only alphanumeric characters and underscores allowed
- **Impact**: Prevents code injection through preset files

## Performance Improvements

### 1. Parallel File Processing

- **Enabled by Default**: Parallel processing is now always active
- **Features**:
  - Concurrent file reading with automatic batch size optimization
  - Thread-safe checksum deduplication
  - Maintains deterministic file order in output
- **Performance**: Up to 3-5x faster for large file sets

### 2. Optimized Checksum Verification

- **What's Changed**: Stream-based file reading for checksums
- **Benefits**:
  - Reduced memory usage for large files
  - Prevents out-of-memory errors
  - 8KB chunk processing

### 3. Concurrent Write Limits in s1f

- **What's New**: Semaphore-based write limiting
- **Default**: 10 concurrent file operations
- **Benefits**: Prevents "too many open files" errors

### 4. Async I/O Improvements

- **Updates**:
  - Uses `aiofiles` for truly async file operations
  - Modern async patterns (asyncio.run())
  - Proper exception handling in async contexts

## Configuration Enhancements

### 1. Content Deduplication Control

- **New CLI Option**: `--allow-duplicate-files`
- **Preset Setting**: `enable_content_deduplication`
- **Default**: Deduplication enabled (False for allow-duplicate)
- **Use Case**: When you need to preserve duplicate content

### 2. UTF-8 Preference Control

- **New CLI Option**: `--no-prefer-utf8-for-text-files`
- **Preset Setting**: `prefer_utf8_for_text_files`
- **Default**: UTF-8 preferred (True)
- **Use Case**: Working with legacy encodings like windows-1252

### 3. Security Check Modes

- **Options**:
  - `error` (default): Stop on security issues
  - `warn`: Log warnings but continue
  - `skip`: Disable security scanning
- **CLI**: `--security-check {error|warn|skip}`
- **Preset**: `security_check` setting

### 4. File Size Limits

- **Preset Files**: Limited to 10MB
- **Benefits**: Prevents memory exhaustion attacks
- **Error Handling**: Clear error messages for oversized files

## Improved Patterns and Flexibility

### 1. Flexible Metadata Stripping

- **What's New**: More flexible regex for scraped content metadata
- **Supports**:
  - Various horizontal rule styles (`---`, `___`, `***`)
  - Different emphasis markers
  - Multiple formatting variations

### 2. Code Block Detection in s1f

- **What's New**: Ignores separators inside code blocks
- **Benefits**: Prevents false positive file detection
- **Applies to**: Markdown code blocks (```)

### 3. Timezone-Aware Timestamps

- **What's Changed**: All timestamps now use UTC
- **Implementation**: `datetime.now(timezone.utc)`
- **Benefits**: Consistent timestamps across timezones

## CLI Updates

### New Options Summary

```bash
# Performance
--allow-duplicate-files         # Disable content deduplication

# Encoding
--no-prefer-utf8-for-text-files # Disable UTF-8 preference

# Security
--security-check {error|warn|skip}  # Security scanning mode
--ignore-https-errors              # Disable SSL validation (scraping)

# Existing options work as before
--source-directory, -s          # Source directory
--output-file, -o              # Output file
--preset                       # Use preset configuration
```

## Breaking Changes

### 1. Standard Separator Format

- **Change**: File separators no longer include checksums
- **Before**: `=== path/to/file.txt === SHA256: abc123...`
- **After**: `=== path/to/file.txt ===`
- **Impact**: s1f can still read old format files

### 2. SSL Validation Default

- **Change**: SSL validation now enabled by default
- **Impact**: May break scraping of sites with invalid certificates
- **Migration**: Use `--ignore-https-errors` if needed

### 3. Security Scanning Default

- **Change**: Security scanning in error mode by default
- **Impact**: Processing stops on sensitive data detection
- **Migration**: Use `--security-check warn` for old behavior

## Preset System Enhancements

### New Preset Settings

```yaml
# Performance
enable_content_deduplication: false # Allow duplicate files

# Encoding
prefer_utf8_for_text_files: false # Disable UTF-8 preference

# Security
security_check: warn # Security check mode

# Per-file settings still work
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Test Suite Improvements

- Fixed test isolation issues
- Added proper async test support
- Improved test server connectivity handling
- Enhanced security test coverage

## Migration Guide

### From v3.1 to v3.2

1. **Review Security Settings**:

   - Default security scanning may flag legitimate content
   - Use `--security-check warn` during migration

2. **Check SSL Requirements**:

   - Sites with self-signed certificates need `--ignore-https-errors`
   - Review and update scraping scripts

3. **Update Separator Parsing**:

   - If you parse m1f output, update to handle new separator format
   - s1f handles both formats automatically

4. **Performance Tuning**:
   - Parallel processing is automatic - no configuration needed
   - Monitor memory usage with large file sets

## Examples

### Using New Features

```bash
# Security in warn mode (parallel processing is automatic)
m1f -s ./src -o bundle.txt --security-check warn

# Allow duplicates with custom encoding handling
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Secure web scraping (robots.txt compliance is automatic)
m1f-scrape https://example.com -o ./scraped

# Using new features in presets
m1f -s . -o bundle.txt --preset my-preset.yml
```

### Sample v3.2 Preset

```yaml
name: "Modern Web Project v3.2"
version: "3.2"

# Global settings with v3.2 features
settings:
  enable_content_deduplication: true
  prefer_utf8_for_text_files: true
  security_check: error

# File patterns remain the same
include_patterns:
  - "src/**/*.{js,ts,jsx,tsx}"
  - "**/*.md"

exclude_patterns:
  - "**/node_modules/**"
  - "**/.git/**"

# Per-file settings with processors
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Performance Benchmarks

Typical improvements with v3.2:

- **Parallel Processing**: 3-5x faster for 1000+ files
- **Memory Usage**: 50% reduction for large files
- **s1f Extraction**: 2x faster with concurrent writes
- **Checksum Calculation**: Constant memory usage regardless of file size

## Security Audit Results

v3.2 addresses all HIGH and MEDIUM priority security issues:

- ✅ Path traversal vulnerabilities fixed
- ✅ SSRF protection implemented
- ✅ Command injection prevented
- ✅ SSL validation enforced
- ✅ robots.txt compliance added
- ✅ JavaScript execution validated
- ✅ Race conditions eliminated

## Support and Resources

- [Security Best Practices Guide](./40_security_best_practices.md)
- [CLI Reference](./02_cli_reference.md)
- [Preset System Guide](./10_m1f_presets.md)
- [Troubleshooting Guide](./03_troubleshooting.md)

For questions or issues, please refer to the project repository.
