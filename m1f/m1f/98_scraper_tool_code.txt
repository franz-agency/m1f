======= path_utils.py ======
# Copyright 2025 Franz und Franz GmbH
# SPDX-License-Identifier: Apache-2.0

from pathlib import Path, PureWindowsPath


def convert_to_posix_path(path_val: str) -> str:
    """Convert a path string to POSIX style."""
    return PureWindowsPath(path_val).as_posix()


def normalize_path(path: Path | str) -> str:
    """Normalize a Path or path-like object to POSIX style."""
    return PureWindowsPath(str(path)).as_posix()

======= scrape.py ======
#!/usr/bin/env python3
# Copyright 2025 Franz und Franz GmbH
# SPDX-License-Identifier: Apache-2.0

"""Wrapper script for m1f-scrape module."""

import sys

# Try absolute imports first (for module execution), fall back to relative
try:
    from tools.scrape_tool.cli import main
except ImportError:
    # Fallback for direct script execution
    from scrape_tool.cli import main

if __name__ == "__main__":
    sys.exit(main())

======= scrape_tool/__init__.py ======
"""Web scraper tool for downloading websites."""

from .._version import __version__, __version_info__

======= scrape_tool/__main__.py ======
# Copyright 2025 Franz und Franz GmbH
# SPDX-License-Identifier: Apache-2.0

"""Entry point for m1f-scrape module."""

from .cli import main

if __name__ == "__main__":
    main()

======= scrape_tool/cli.py ======
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Command-line interface for m1f-scrape."""

import argparse
import logging
import sqlite3
import sys
from pathlib import Path
from typing import Optional

# Use unified colorama module
try:
    from ..shared.colors import Colors, success, error, warning, info, header, COLORAMA_AVAILABLE
except ImportError:
    # Fallback to no colors
    COLORAMA_AVAILABLE = False
    class Colors:
        GREEN = ""
        RED = ""
        YELLOW = ""
        BLUE = ""
        CYAN = ""
        BOLD = ""
        RESET = ""
    
    def success(msg): print(f"✅ {msg}")
    def error(msg): print(f"❌ {msg}", file=sys.stderr)
    def warning(msg): print(f"⚠️  {msg}")
    def info(msg): print(msg)
    def header(title, subtitle=None):
        print(f"\n{title}")
        if subtitle:
            print(subtitle)

from . import __version__
from .config import Config, ScraperBackend
from .crawlers import WebCrawler


def show_database_info(db_path: Path, args: argparse.Namespace) -> None:
    """Show information from the scrape tracker database.

    Args:
        db_path: Path to the SQLite database
        args: Command line arguments
    """
    if not db_path.exists():
        warning(
            "No database found. Have you scraped anything yet?"
        )
        return

    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        if args.show_db_stats:
            # Show statistics
            cursor.execute("SELECT COUNT(*) FROM scraped_urls")
            total = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM scraped_urls WHERE error IS NULL")
            successful = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM scraped_urls WHERE error IS NOT NULL")
            errors = cursor.fetchone()[0]

            header("Scraping Statistics:")
            info(f"Total URLs processed: {total}")
            info(f"Successfully scraped: {successful}")
            info(f"Errors encountered: {errors}")

            if total > 0:
                success_rate = (successful / total) * 100
                info(f"Success rate: {success_rate:.1f}%")

        if args.show_errors:
            # Show URLs with errors
            cursor.execute(
                "SELECT url, error FROM scraped_urls WHERE error IS NOT NULL"
            )
            errors = cursor.fetchall()

            if errors:
                header("URLs with Errors:")
                for url, error in errors:
                    info(f"{Colors.RED}✗{Colors.RESET} {url}")
                    info(f"    Error: {error}")
            else:
                success("No errors found!")

        if args.show_scraped_urls:
            # Show all scraped URLs
            cursor.execute(
                "SELECT url, status_code FROM scraped_urls ORDER BY scraped_at"
            )
            urls = cursor.fetchall()

            if urls:
                header("Scraped URLs:")
                for url, status_code in urls:
                    status_icon = (
                        "[green]✓[/green]"
                        if status_code == 200
                        else f"[yellow]{status_code}[/yellow]"
                    )
                    info(f"{status_icon} {url}")
            else:
                warning("No URLs found in database")

        conn.close()

    except sqlite3.Error as e:
        error(f"Database error: {e}")
    except Exception as e:
        error(f"Error reading database: {e}")


def create_parser() -> argparse.ArgumentParser:
    """Create the argument parser."""
    parser = argparse.ArgumentParser(
        prog="m1f-scrape",
        description="Download websites for offline viewing",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--version", action="version", version=f"%(prog)s {__version__}"
    )

    # Global options
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Enable verbose output"
    )
    parser.add_argument(
        "-q", "--quiet", action="store_true", help="Suppress all output except errors"
    )

    # Main arguments
    parser.add_argument(
        "url", nargs="?", help="URL to scrape (not needed for database queries)"
    )
    parser.add_argument(
        "-o", "--output", type=Path, required=True, help="Output directory"
    )

    # Scraper options
    parser.add_argument(
        "--scraper",
        type=str,
        choices=[
            "httrack",
            "beautifulsoup",
            "bs4",
            "selectolax",
            "httpx",
            "scrapy",
            "playwright",
        ],
        default="beautifulsoup",
        help="Web scraper backend to use (default: beautifulsoup)",
    )

    parser.add_argument(
        "--scraper-config",
        type=Path,
        help="Path to scraper-specific configuration file (YAML/JSON)",
    )

    # Crawl options
    parser.add_argument("--max-depth", type=int, default=5, help="Maximum crawl depth")
    parser.add_argument(
        "--max-pages", type=int, default=1000, help="Maximum pages to crawl"
    )

    # Request options
    parser.add_argument(
        "--request-delay",
        type=float,
        default=15.0,
        help="Delay between requests in seconds (default: 15.0 for Cloudflare protection)",
    )

    parser.add_argument(
        "--concurrent-requests",
        type=int,
        default=2,
        help="Number of concurrent requests (default: 2 for Cloudflare protection)",
    )

    parser.add_argument("--user-agent", type=str, help="Custom user agent string")

    parser.add_argument(
        "--ignore-get-params",
        action="store_true",
        help="Ignore GET parameters in URLs (e.g., ?tab=linux) to avoid duplicate content",
    )

    parser.add_argument(
        "--ignore-canonical",
        action="store_true",
        help="Ignore canonical URL tags (by default, pages with different canonical URLs are skipped)",
    )

    parser.add_argument(
        "--ignore-duplicates",
        action="store_true",
        help="Ignore duplicate content detection (by default, pages with identical text are skipped)",
    )

    # Output options
    parser.add_argument(
        "--list-files",
        action="store_true",
        help="List all downloaded files after completion",
    )

    # Database query options
    parser.add_argument(
        "--show-db-stats",
        action="store_true",
        help="Show scraping statistics from the database",
    )
    parser.add_argument(
        "--show-errors",
        action="store_true",
        help="Show URLs that had errors during scraping",
    )
    parser.add_argument(
        "--show-scraped-urls",
        action="store_true",
        help="List all scraped URLs from the database",
    )

    return parser


def main() -> None:
    """Main entry point."""
    parser = create_parser()
    args = parser.parse_args()

    # Create configuration
    config = Config()
    config.crawler.max_depth = args.max_depth
    config.crawler.max_pages = args.max_pages
    config.crawler.scraper_backend = ScraperBackend(args.scraper)
    config.crawler.request_delay = args.request_delay
    config.crawler.concurrent_requests = args.concurrent_requests
    config.crawler.respect_robots_txt = True  # Always respect robots.txt

    if args.user_agent:
        config.crawler.user_agent = args.user_agent

    config.crawler.ignore_get_params = args.ignore_get_params
    config.crawler.check_canonical = not args.ignore_canonical
    config.crawler.check_content_duplicates = not args.ignore_duplicates

    # Load scraper-specific config if provided
    if args.scraper_config:
        import yaml
        import json

        if args.scraper_config.suffix == ".json":
            with open(args.scraper_config) as f:
                config.crawler.scraper_config = json.load(f)
        else:  # Assume YAML
            with open(args.scraper_config) as f:
                config.crawler.scraper_config = yaml.safe_load(f)

    config.verbose = args.verbose
    config.quiet = args.quiet

    # Set up logging
    if args.verbose:
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        )
    elif not args.quiet:
        logging.basicConfig(
            level=logging.WARNING, format="%(asctime)s - %(levelname)s - %(message)s"
        )

    # Check if only database query options are requested
    if args.show_db_stats or args.show_errors or args.show_scraped_urls:
        # Just show database info and exit
        db_path = args.output / "scrape_tracker.db"
        show_database_info(db_path, args)
        return

    # URL is required for scraping
    if not args.url:
        parser.error("URL is required for scraping")

    # Create output directory
    args.output.mkdir(parents=True, exist_ok=True)

    info(f"Scraping website: {args.url}")
    info(f"Using scraper backend: {args.scraper}")
    info("This may take a while...")
    info("Press Ctrl+C to interrupt and resume later\n")

    try:
        # Create crawler and download the website
        crawler = WebCrawler(config.crawler)
        site_dir = crawler.crawl_sync(args.url, args.output)

        # Find all downloaded HTML files
        html_files = crawler.find_downloaded_files(site_dir)

        success(
            f"Successfully downloaded {len(html_files)} HTML files"
        )
        info(f"Output directory: {site_dir}")

        # List downloaded files if requested
        if args.list_files or config.verbose:
            info("\nDownloaded files:")
            for html_file in sorted(html_files):
                rel_path = html_file.relative_to(site_dir)
                info(f"  - {rel_path}")

    except KeyboardInterrupt:
        warning("⚠️  Scraping interrupted by user")
        info(
            "Run the same command again to resume where you left off"
        )
        sys.exit(0)
    except Exception as e:
        error(f"Error during scraping: {e}")
        if config.verbose:
            import traceback

            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

======= scrape_tool/config.py ======
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Configuration models for m1f-scrape."""

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class ScraperBackend(str, Enum):
    """Available scraper backends."""

    HTTRACK = "httrack"
    BEAUTIFULSOUP = "beautifulsoup"
    BS4 = "bs4"  # Alias for beautifulsoup
    SELECTOLAX = "selectolax"
    HTTPX = "httpx"
    SCRAPY = "scrapy"
    PLAYWRIGHT = "playwright"


class CrawlerConfig(BaseModel):
    """Configuration for web crawler."""

    max_depth: int = Field(default=5, ge=1, le=20, description="Maximum crawl depth")
    max_pages: int = Field(
        default=1000, ge=1, le=10000, description="Maximum pages to crawl"
    )
    follow_external_links: bool = Field(
        default=False, description="Follow links to external domains"
    )
    allowed_domains: Optional[list[str]] = Field(
        default=None, description="List of allowed domains to crawl"
    )
    excluded_paths: list[str] = Field(
        default_factory=list, description="URL paths to exclude from crawling"
    )
    scraper_backend: ScraperBackend = Field(
        default=ScraperBackend.BEAUTIFULSOUP, description="Web scraper backend to use"
    )
    scraper_config: Dict[str, Any] = Field(
        default_factory=dict, description="Backend-specific configuration"
    )
    request_delay: float = Field(
        default=15.0,
        ge=0,
        le=60,
        description="Delay between requests in seconds (default: 15s for Cloudflare)",
    )
    concurrent_requests: int = Field(
        default=2,
        ge=1,
        le=20,
        description="Number of concurrent requests (default: 2 for Cloudflare)",
    )
    user_agent: Optional[str] = Field(
        default=None, description="Custom user agent string"
    )
    respect_robots_txt: bool = Field(
        default=True, description="Respect robots.txt rules"
    )
    timeout: int = Field(
        default=30, ge=1, le=300, description="Request timeout in seconds"
    )
    retry_count: int = Field(
        default=3, ge=0, le=10, description="Number of retries for failed requests"
    )
    ignore_get_params: bool = Field(
        default=False,
        description="Ignore GET parameters in URLs to avoid duplicate content",
    )
    check_canonical: bool = Field(
        default=True, description="Skip pages if canonical URL differs from current URL"
    )
    check_content_duplicates: bool = Field(
        default=True,
        description="Skip pages with duplicate content (based on text-only checksum)",
    )


class Config(BaseModel):
    """Main configuration for m1f-scrape."""

    crawler: CrawlerConfig = Field(
        default_factory=CrawlerConfig, description="Crawler configuration"
    )
    verbose: bool = Field(default=False, description="Enable verbose output")
    quiet: bool = Field(default=False, description="Suppress output except errors")

======= scrape_tool/crawlers.py ======
#!/usr/bin/env python3
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Web crawling functionality using configurable scraper backends."""

import asyncio
import logging
import sqlite3
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional, Set
from urllib.parse import urlparse

from .scrapers import create_scraper, ScraperConfig, ScrapedPage
from .config import CrawlerConfig, ScraperBackend

logger = logging.getLogger(__name__)


class WebCrawler:
    """Web crawler that uses configurable scraper backends."""

    def __init__(self, config: CrawlerConfig):
        """Initialize crawler with configuration.

        Args:
            config: CrawlerConfig instance with crawling settings
        """
        self.config = config
        self._scraper_config = self._create_scraper_config()
        self._db_path: Optional[Path] = None
        self._db_conn: Optional[sqlite3.Connection] = None

    def _create_scraper_config(self) -> ScraperConfig:
        """Create scraper configuration from crawler config.

        Returns:
            ScraperConfig instance
        """
        # Convert allowed_domains from set to list
        allowed_domains = (
            list(self.config.allowed_domains) if self.config.allowed_domains else []
        )

        # Convert excluded_paths to exclude_patterns
        exclude_patterns = (
            list(self.config.excluded_paths) if self.config.excluded_paths else []
        )

        # Create scraper config
        scraper_kwargs = {
            "max_depth": self.config.max_depth,
            "max_pages": self.config.max_pages,
            "allowed_domains": allowed_domains,
            "exclude_patterns": exclude_patterns,
            "respect_robots_txt": self.config.respect_robots_txt,
            "concurrent_requests": self.config.concurrent_requests,
            "request_delay": self.config.request_delay,
            "timeout": float(self.config.timeout),
            "follow_redirects": True,  # Always follow redirects
            "ignore_get_params": self.config.ignore_get_params,
            "check_canonical": self.config.check_canonical,
            "check_content_duplicates": self.config.check_content_duplicates,
        }

        # Only add user_agent if it's not None
        if self.config.user_agent is not None:
            scraper_kwargs["user_agent"] = self.config.user_agent

        scraper_config = ScraperConfig(**scraper_kwargs)

        # Apply any backend-specific configuration
        if self.config.scraper_config:
            for key, value in self.config.scraper_config.items():
                if hasattr(scraper_config, key):
                    # Special handling for custom_headers to ensure it's a dict
                    if key == "custom_headers":
                        if value is None:
                            value = {}
                        elif not isinstance(value, dict):
                            logger.warning(
                                f"Invalid custom_headers type: {type(value)}, using empty dict"
                            )
                            value = {}
                    setattr(scraper_config, key, value)

        return scraper_config

    def _init_database(self, output_dir: Path) -> None:
        """Initialize SQLite database for tracking scraped URLs.

        Args:
            output_dir: Directory where the database will be created
        """
        self._db_path = output_dir / "scrape_tracker.db"
        self._db_conn = sqlite3.connect(str(self._db_path))

        # Create table if it doesn't exist
        cursor = self._db_conn.cursor()
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS scraped_urls (
                url TEXT PRIMARY KEY,
                normalized_url TEXT,
                canonical_url TEXT,
                content_checksum TEXT,
                status_code INTEGER,
                target_filename TEXT,
                scraped_at TIMESTAMP,
                error TEXT
            )
        """
        )

        # Create table for content checksums
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS content_checksums (
                checksum TEXT PRIMARY KEY,
                first_url TEXT,
                first_seen TIMESTAMP
            )
        """
        )
        self._db_conn.commit()
        cursor.close()

    def _close_database(self) -> None:
        """Close the database connection."""
        if self._db_conn:
            self._db_conn.close()
            self._db_conn = None

    def _is_url_scraped(self, url: str) -> bool:
        """Check if a URL has already been scraped.

        Args:
            url: URL to check

        Returns:
            True if URL has been scraped, False otherwise
        """
        if not self._db_conn:
            return False

        cursor = self._db_conn.cursor()
        cursor.execute("SELECT 1 FROM scraped_urls WHERE url = ?", (url,))
        result = cursor.fetchone()
        cursor.close()
        return result is not None

    def _get_scraped_urls(self) -> Set[str]:
        """Get all URLs that have been scraped.

        Returns:
            Set of scraped URLs
        """
        if not self._db_conn:
            return set()

        cursor = self._db_conn.cursor()
        cursor.execute("SELECT url FROM scraped_urls")
        urls = {row[0] for row in cursor.fetchall()}
        cursor.close()
        return urls

    def _get_content_checksums(self) -> Set[str]:
        """Get all content checksums from previous scraping.

        Returns:
            Set of content checksums
        """
        if not self._db_conn:
            return set()

        cursor = self._db_conn.cursor()
        cursor.execute("SELECT checksum FROM content_checksums")
        checksums = {row[0] for row in cursor.fetchall()}
        cursor.close()
        return checksums

    def _record_content_checksum(self, checksum: str, url: str) -> None:
        """Record a content checksum in the database.

        Args:
            checksum: Content checksum
            url: First URL where this content was seen
        """
        if not self._db_conn:
            return

        cursor = self._db_conn.cursor()
        try:
            cursor.execute(
                """
                INSERT INTO content_checksums (checksum, first_url, first_seen)
                VALUES (?, ?, ?)
            """,
                (checksum, url, datetime.now()),
            )
            self._db_conn.commit()
        except sqlite3.IntegrityError:
            # Checksum already exists
            pass
        cursor.close()

    def _is_content_checksum_exists(self, checksum: str) -> bool:
        """Check if a content checksum already exists in the database.

        Args:
            checksum: Content checksum to check

        Returns:
            True if checksum exists, False otherwise
        """
        if not self._db_conn:
            return False

        cursor = self._db_conn.cursor()
        cursor.execute(
            "SELECT 1 FROM content_checksums WHERE checksum = ?", (checksum,)
        )
        result = cursor.fetchone()
        cursor.close()
        return result is not None

    def _record_scraped_url(
        self,
        url: str,
        status_code: Optional[int],
        target_filename: str,
        error: Optional[str] = None,
        normalized_url: Optional[str] = None,
        canonical_url: Optional[str] = None,
        content_checksum: Optional[str] = None,
    ) -> None:
        """Record a scraped URL in the database.

        Args:
            url: URL that was scraped
            status_code: HTTP status code
            target_filename: Path to the saved file
            error: Error message if scraping failed
            normalized_url: URL after GET parameter normalization
            canonical_url: Canonical URL from the page
            content_checksum: SHA-256 checksum of text content
        """
        if not self._db_conn:
            return

        cursor = self._db_conn.cursor()
        cursor.execute(
            """
            INSERT OR REPLACE INTO scraped_urls 
            (url, normalized_url, canonical_url, content_checksum, 
             status_code, target_filename, scraped_at, error)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """,
            (
                url,
                normalized_url,
                canonical_url,
                content_checksum,
                status_code,
                target_filename,
                datetime.now(),
                error,
            ),
        )
        self._db_conn.commit()
        cursor.close()

    def _get_scraped_pages_info(self) -> List[Dict[str, Any]]:
        """Get information about previously scraped pages.

        Returns:
            List of dictionaries with url and target_filename
        """
        if not self._db_conn:
            return []

        cursor = self._db_conn.cursor()
        cursor.execute(
            """
            SELECT url, target_filename 
            FROM scraped_urls 
            WHERE error IS NULL AND target_filename != ''
        """
        )
        pages = [{"url": row[0], "filename": row[1]} for row in cursor.fetchall()]
        cursor.close()
        return pages

    async def crawl(self, start_url: str, output_dir: Path) -> Dict[str, Any]:
        """Crawl a website using the configured scraper backend.

        Args:
            start_url: Starting URL for crawling
            output_dir: Directory to store downloaded files

        Returns:
            Dictionary with crawl results including:
            - pages: List of scraped pages
            - total_pages: Total number of pages scraped
            - errors: List of any errors encountered

        Raises:
            Exception: If crawling fails
        """
        logger.info(
            f"Starting crawl of {start_url} using {self.config.scraper_backend} backend"
        )

        # Create output directory
        output_dir.mkdir(parents=True, exist_ok=True)

        # Parse URL to get domain for output structure
        parsed_url = urlparse(start_url)
        domain = parsed_url.netloc
        site_dir = output_dir / domain
        site_dir.mkdir(exist_ok=True)

        # Initialize database for tracking
        self._init_database(output_dir)

        # Check if this is a resume operation
        scraped_urls = self._get_scraped_urls()
        if scraped_urls:
            logger.info(
                f"Resuming crawl - found {len(scraped_urls)} previously scraped URLs"
            )

        # Create scraper instance
        backend_name = self.config.scraper_backend.value
        scraper = create_scraper(backend_name, self._scraper_config)

        pages = []
        errors = []

        try:
            async with scraper:
                # Pass already scraped URLs to the scraper if it supports it
                if hasattr(scraper, "_visited_urls"):
                    scraper._visited_urls.update(scraped_urls)

                # Set up checksum callback if deduplication is enabled
                if self._scraper_config.check_content_duplicates:
                    # Pass the database connection to the scraper for checksum queries
                    if hasattr(scraper, "set_checksum_callback"):
                        scraper.set_checksum_callback(self._is_content_checksum_exists)
                        logger.info("Enabled database-backed content deduplication")

                # Pass information about scraped pages for resume functionality
                if scraped_urls and hasattr(scraper, "set_resume_info"):
                    pages_info = self._get_scraped_pages_info()
                    resume_info = []
                    for page_info in pages_info[:20]:  # Read first 20 pages for links
                        try:
                            file_path = output_dir / page_info["filename"]
                            if file_path.exists():
                                content = file_path.read_text(encoding="utf-8")
                                resume_info.append(
                                    {"url": page_info["url"], "content": content}
                                )
                        except Exception as e:
                            logger.warning(
                                f"Failed to read {page_info['filename']}: {e}"
                            )

                    if resume_info:
                        scraper.set_resume_info(resume_info)

                async for page in scraper.scrape_site(start_url):
                    # Skip if already scraped
                    if self._is_url_scraped(page.url):
                        logger.info(f"Skipping already scraped URL: {page.url}")
                        continue

                    # Log progress - show current URL being scraped
                    logger.info(f"Processing: {page.url} (page {len(pages) + 1})")
                    pages.append(page)

                    # Save page to disk
                    try:
                        file_path = await self._save_page(page, site_dir)
                        # Record successful scrape with all metadata
                        self._record_scraped_url(
                            page.url,
                            page.status_code,
                            str(file_path.relative_to(output_dir)),
                            error=None,
                            normalized_url=page.normalized_url,
                            canonical_url=page.canonical_url,
                            content_checksum=page.content_checksum,
                        )
                        # Record content checksum if present
                        if (
                            page.content_checksum
                            and self._scraper_config.check_content_duplicates
                        ):
                            self._record_content_checksum(
                                page.content_checksum, page.url
                            )
                    except Exception as e:
                        logger.error(f"Failed to save page {page.url}: {e}")
                        errors.append({"url": page.url, "error": str(e)})
                        # Record failed scrape
                        self._record_scraped_url(
                            page.url,
                            page.status_code if hasattr(page, "status_code") else None,
                            "",
                            str(e),
                        )
                        # Continue with other pages despite the error

        except Exception as e:
            logger.error(f"Crawl failed: {e}")
            raise
        finally:
            # Always close database connection
            self._close_database()

        logger.info(
            f"Crawl completed. Scraped {len(pages)} pages with {len(errors)} errors"
        )

        return {
            "pages": pages,
            "total_pages": len(pages),
            "errors": errors,
            "output_dir": site_dir,
        }

    async def _save_page(self, page: ScrapedPage, output_dir: Path) -> Path:
        """Save a scraped page to disk.

        Args:
            page: ScrapedPage instance
            output_dir: Directory to save the page

        Returns:
            Path to saved file
        """
        # Parse URL to create file path
        parsed = urlparse(page.url)

        # Create subdirectories based on URL path
        if parsed.path and parsed.path != "/":
            # Remove leading slash and split path
            path_parts = parsed.path.lstrip("/").split("/")

            # Handle file extension
            if path_parts[-1].endswith(".html") or "." in path_parts[-1]:
                filename = path_parts[-1]
                subdirs = path_parts[:-1]
            else:
                # Assume it's a directory, create index.html
                filename = "index.html"
                subdirs = path_parts

            # Create subdirectories with path validation
            if subdirs:
                # Sanitize subdirectory names to prevent path traversal
                safe_subdirs = []
                for part in subdirs:
                    # Remove any path traversal attempts
                    safe_part = (
                        part.replace("..", "").replace("./", "").replace("\\", "")
                    )
                    if safe_part and safe_part not in (".", ".."):
                        safe_subdirs.append(safe_part)

                if safe_subdirs:
                    subdir = output_dir / Path(*safe_subdirs)
                    subdir.mkdir(parents=True, exist_ok=True)
                    file_path = subdir / filename
                else:
                    file_path = output_dir / filename
            else:
                file_path = output_dir / filename
        else:
            # Root page
            file_path = output_dir / "index.html"

        # Ensure .html extension
        if not file_path.suffix:
            file_path = file_path.with_suffix(".html")
        elif file_path.suffix not in (".html", ".htm"):
            file_path = file_path.with_name(f"{file_path.name}.html")

        # Write content
        file_path.parent.mkdir(parents=True, exist_ok=True)
        file_path.write_text(page.content, encoding=page.encoding)

        logger.debug(f"Saved {page.url} to {file_path}")

        # Save metadata if available
        try:
            metadata_path = file_path.with_suffix(".meta.json")
            import json

            metadata = {
                "url": page.url,
                "title": page.title,
                "encoding": page.encoding,
                "status_code": page.status_code,
                "headers": page.headers if page.headers else {},
                "metadata": page.metadata if page.metadata else {},
            }
            # Filter out None values and ensure all keys are strings
            clean_metadata = {}
            for k, v in metadata.items():
                if v is not None:
                    if isinstance(v, dict):
                        # Clean nested dictionaries - ensure no None keys
                        clean_v = {}
                        for sub_k, sub_v in v.items():
                            if sub_k is not None:
                                clean_v[str(sub_k)] = sub_v
                        clean_metadata[k] = clean_v
                    else:
                        clean_metadata[k] = v

            metadata_path.write_text(json.dumps(clean_metadata, indent=2, default=str))
        except Exception as e:
            logger.warning(f"Failed to save metadata for {page.url}: {e}")
            # Don't fail the entire page save just because metadata failed

        return file_path

    def find_downloaded_files(self, site_dir: Path) -> List[Path]:
        """Find all HTML files in the output directory.

        Args:
            site_dir: Directory containing downloaded files

        Returns:
            List of HTML file paths
        """
        if not site_dir.exists():
            logger.warning(f"Site directory does not exist: {site_dir}")
            return []

        html_files = []

        # Find all HTML files
        patterns = ["*.html", "*.htm"]
        for pattern in patterns:
            files = list(site_dir.rglob(pattern))
            html_files.extend(files)

        # Filter out metadata files
        filtered_files = [f for f in html_files if not f.name.endswith(".meta.json")]

        logger.info(f"Found {len(filtered_files)} HTML files in {site_dir}")
        return sorted(filtered_files)

    def crawl_sync(self, start_url: str, output_dir: Path) -> Path:
        """Synchronous version of crawl method.

        Args:
            start_url: Starting URL for crawling
            output_dir: Directory to store downloaded files

        Returns:
            Path to site directory
        """
        try:
            # Run async crawl using asyncio.run()
            result = asyncio.run(self.crawl(start_url, output_dir))
            return result["output_dir"]
        except KeyboardInterrupt:
            # Re-raise to let CLI handle it gracefully
            raise

======= scrape_tool/utils.py ======
#!/usr/bin/env python3
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utility functions for webscraper."""

import hashlib
import re
from typing import Optional


def extract_text_from_html(html_content: str) -> str:
    """Extract plain text from HTML content for deduplication.

    This strips all HTML tags and normalizes whitespace to create
    a content fingerprint for duplicate detection.

    Args:
        html_content: HTML content to extract text from

    Returns:
        Plain text with normalized whitespace
    """
    # Remove script and style content first
    text = re.sub(
        r"<script[^>]*>.*?</script>", "", html_content, flags=re.DOTALL | re.IGNORECASE
    )
    text = re.sub(r"<style[^>]*>.*?</style>", "", text, flags=re.DOTALL | re.IGNORECASE)

    # Remove all HTML tags
    text = re.sub(r"<[^>]+>", " ", text)

    # Decode HTML entities
    text = re.sub(r"&nbsp;", " ", text)
    text = re.sub(r"&lt;", "<", text)
    text = re.sub(r"&gt;", ">", text)
    text = re.sub(r"&amp;", "&", text)
    text = re.sub(r"&quot;", '"', text)
    text = re.sub(r"&#39;", "'", text)

    # Normalize whitespace
    text = re.sub(r"\s+", " ", text)

    # Remove leading/trailing whitespace
    text = text.strip()

    return text


def calculate_content_checksum(html_content: str) -> str:
    """Calculate checksum of HTML content based on text only.

    Args:
        html_content: HTML content to calculate checksum for

    Returns:
        SHA-256 checksum of the text content
    """
    text = extract_text_from_html(html_content)
    return hashlib.sha256(text.encode("utf-8")).hexdigest()

======= scrape_tool/scrapers/__init__.py ======
"""Web scraper backends for HTML2MD."""

from typing import Dict, Type, Optional
from .base import WebScraperBase, ScraperConfig, ScrapedPage
from .beautifulsoup import BeautifulSoupScraper
from .httrack import HTTrackScraper

# Import new scrapers with error handling for optional dependencies
try:
    from .selectolax import SelectolaxScraper

    SELECTOLAX_AVAILABLE = True
except ImportError:
    SELECTOLAX_AVAILABLE = False
    SelectolaxScraper = None

try:
    from .scrapy_scraper import ScrapyScraper

    SCRAPY_AVAILABLE = True
except ImportError:
    SCRAPY_AVAILABLE = False
    ScrapyScraper = None

try:
    from .playwright import PlaywrightScraper

    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    PlaywrightScraper = None

__all__ = [
    "WebScraperBase",
    "ScraperConfig",
    "ScrapedPage",
    "create_scraper",
    "SCRAPER_REGISTRY",
    "BeautifulSoupScraper",
    "HTTrackScraper",
    "SelectolaxScraper",
    "ScrapyScraper",
    "PlaywrightScraper",
]

# Registry of available scraper backends
SCRAPER_REGISTRY: Dict[str, Type[WebScraperBase]] = {
    "beautifulsoup": BeautifulSoupScraper,
    "bs4": BeautifulSoupScraper,  # Alias
    "httrack": HTTrackScraper,
}

# Add optional scrapers if available
if SELECTOLAX_AVAILABLE:
    SCRAPER_REGISTRY["selectolax"] = SelectolaxScraper
    SCRAPER_REGISTRY["httpx"] = SelectolaxScraper  # Alias

if SCRAPY_AVAILABLE:
    SCRAPER_REGISTRY["scrapy"] = ScrapyScraper

if PLAYWRIGHT_AVAILABLE:
    SCRAPER_REGISTRY["playwright"] = PlaywrightScraper


def create_scraper(
    backend: str, config: Optional[ScraperConfig] = None
) -> WebScraperBase:
    """Factory function to create appropriate scraper instance.

    Args:
        backend: Name of the scraper backend to use
        config: Configuration for the scraper (uses defaults if not provided)

    Returns:
        Instance of the requested scraper backend

    Raises:
        ValueError: If the backend is not registered
    """
    if backend not in SCRAPER_REGISTRY:
        available = ", ".join(SCRAPER_REGISTRY.keys()) if SCRAPER_REGISTRY else "none"
        raise ValueError(
            f"Unknown scraper backend: {backend}. " f"Available backends: {available}"
        )

    if config is None:
        config = ScraperConfig()

    scraper_class = SCRAPER_REGISTRY[backend]
    return scraper_class(config)

======= scrape_tool/scrapers/base.py ======
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Abstract base class for web scrapers."""

from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import List, Dict, Optional, AsyncGenerator, Set
from pathlib import Path
import logging
from urllib.parse import urlparse, urljoin
from urllib.robotparser import RobotFileParser
import asyncio
import aiohttp

logger = logging.getLogger(__name__)


@dataclass
class ScraperConfig:
    """Configuration for web scrapers."""

    max_depth: int = 10
    max_pages: int = 1000
    allowed_domains: Optional[List[str]] = None
    exclude_patterns: Optional[List[str]] = None
    respect_robots_txt: bool = True
    concurrent_requests: int = 5
    request_delay: float = 0.5
    user_agent: str = (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    )
    custom_headers: Optional[Dict[str, str]] = None
    timeout: float = 30.0
    follow_redirects: bool = True
    verify_ssl: bool = True
    ignore_get_params: bool = False
    check_canonical: bool = True
    check_content_duplicates: bool = True

    def __post_init__(self):
        """Initialize mutable defaults."""
        if self.allowed_domains is None:
            self.allowed_domains = []
        if self.exclude_patterns is None:
            self.exclude_patterns = []
        if self.custom_headers is None:
            self.custom_headers = {}


@dataclass
class ScrapedPage:
    """Represents a scraped web page."""

    url: str
    content: str
    title: Optional[str] = None
    metadata: Optional[Dict[str, str]] = None
    encoding: str = "utf-8"
    status_code: Optional[int] = None
    headers: Optional[Dict[str, str]] = None
    normalized_url: Optional[str] = None
    canonical_url: Optional[str] = None
    content_checksum: Optional[str] = None

    def __post_init__(self):
        """Initialize mutable defaults."""
        if self.metadata is None:
            self.metadata = {}
        if self.headers is None:
            self.headers = {}


class WebScraperBase(ABC):
    """Abstract base class for web scrapers."""

    def __init__(self, config: ScraperConfig):
        """Initialize the scraper with configuration.

        Args:
            config: Scraper configuration
        """
        self.config = config
        self._visited_urls: Set[str] = set()
        self._robots_parsers: Dict[str, RobotFileParser] = {}
        self._robots_fetch_lock = asyncio.Lock()
        self._checksum_callback = None  # Callback to check if checksum exists

    @abstractmethod
    async def scrape_url(self, url: str) -> ScrapedPage:
        """Scrape a single URL.

        Args:
            url: URL to scrape

        Returns:
            ScrapedPage object containing the scraped content

        Raises:
            Exception: If scraping fails
        """
        pass

    @abstractmethod
    async def scrape_site(self, start_url: str) -> AsyncGenerator[ScrapedPage, None]:
        """Scrape an entire website starting from a URL.

        Args:
            start_url: URL to start crawling from

        Yields:
            ScrapedPage objects as they are scraped
        """
        pass

    def _is_private_ip(self, hostname: str) -> bool:
        """Check if hostname resolves to a private IP address.

        Args:
            hostname: Hostname or IP address to check

        Returns:
            True if the hostname resolves to a private IP, False otherwise
        """
        import socket
        import ipaddress

        try:
            # Get IP address from hostname
            ip = socket.gethostbyname(hostname)
            ip_obj = ipaddress.ip_address(ip)

            # Check for private networks
            if ip_obj.is_private:
                return True

            # Check for loopback
            if ip_obj.is_loopback:
                return True

            # Check for link-local
            if ip_obj.is_link_local:
                return True

            # Check for multicast
            if ip_obj.is_multicast:
                return True

            # Check for cloud metadata endpoint
            if str(ip_obj).startswith("169.254."):
                return True

            return False

        except (socket.gaierror, ValueError):
            # If we can't resolve the hostname, err on the side of caution
            return True

    async def validate_url(self, url: str) -> bool:
        """Validate if a URL should be scraped based on configuration and robots.txt.

        Args:
            url: URL to validate

        Returns:
            True if URL should be scraped, False otherwise
        """
        from urllib.parse import urlparse

        try:
            parsed = urlparse(url)

            # Check if URL has valid scheme
            if parsed.scheme not in ("http", "https"):
                return False

            # Extract hostname (remove port if present)
            hostname = parsed.hostname or parsed.netloc.split(":")[0]

            # Check for SSRF - block private IPs
            if self._is_private_ip(hostname):
                logger.warning(f"Blocked URL {url} - private IP address detected")
                return False

            # Check allowed domains
            if self.config.allowed_domains:
                domain_allowed = False
                for domain in self.config.allowed_domains:
                    if domain in parsed.netloc:
                        domain_allowed = True
                        break
                if not domain_allowed:
                    return False

            # Check exclude patterns
            if self.config.exclude_patterns:
                for pattern in self.config.exclude_patterns:
                    if pattern in url:
                        logger.debug(f"URL {url} excluded by pattern: {pattern}")
                        return False

            return True

        except Exception as e:
            logger.error(f"Error validating URL {url}: {e}")
            return False

    async def _fetch_robots_txt(self, base_url: str) -> Optional[RobotFileParser]:
        """Fetch and parse robots.txt for a given base URL.

        Args:
            base_url: Base URL of the website

        Returns:
            RobotFileParser object or None if fetch fails
        """
        robots_url = urljoin(base_url, "/robots.txt")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    robots_url,
                    timeout=aiohttp.ClientTimeout(total=10),
                    headers={"User-Agent": self.config.user_agent},
                ) as response:
                    if response.status == 200:
                        content = await response.text()
                        parser = RobotFileParser()
                        parser.parse(content.splitlines())
                        return parser
                    else:
                        logger.debug(
                            f"No robots.txt found at {robots_url} (status: {response.status})"
                        )
                        return None
        except Exception as e:
            logger.debug(f"Error fetching robots.txt from {robots_url}: {e}")
            return None

    async def can_fetch(self, url: str) -> bool:
        """Check if URL can be fetched according to robots.txt.

        Args:
            url: URL to check

        Returns:
            True if URL can be fetched, False otherwise
        """
        if not self.config.respect_robots_txt:
            return True

        parsed = urlparse(url)
        base_url = f"{parsed.scheme}://{parsed.netloc}"

        # Check if we already have the robots.txt for this domain
        if base_url not in self._robots_parsers:
            async with self._robots_fetch_lock:
                # Double-check after acquiring lock
                if base_url not in self._robots_parsers:
                    parser = await self._fetch_robots_txt(base_url)
                    self._robots_parsers[base_url] = parser

        parser = self._robots_parsers.get(base_url)
        if parser is None:
            # No robots.txt or fetch failed - allow by default
            return True

        # Check if the URL is allowed for our user agent
        return parser.can_fetch(self.config.user_agent, url)

    def is_visited(self, url: str) -> bool:
        """Check if URL has already been visited.

        Args:
            url: URL to check

        Returns:
            True if URL has been visited, False otherwise
        """
        return url in self._visited_urls

    def mark_visited(self, url: str) -> None:
        """Mark URL as visited.

        Args:
            url: URL to mark as visited
        """
        self._visited_urls.add(url)

    def set_checksum_callback(self, callback):
        """Set callback function to check if content checksum exists.

        Args:
            callback: Function that takes a checksum string and returns bool
        """
        self._checksum_callback = callback

    async def __aenter__(self):
        """Async context manager entry."""
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit."""
        pass

======= scrape_tool/scrapers/beautifulsoup.py ======
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""BeautifulSoup4-based web scraper implementation."""

import asyncio
import logging
from typing import Set, AsyncGenerator, Optional, Dict, List
from urllib.parse import urljoin, urlparse, unquote
import aiohttp
from bs4 import BeautifulSoup
import chardet

from .base import WebScraperBase, ScrapedPage, ScraperConfig

logger = logging.getLogger(__name__)


class BeautifulSoupScraper(WebScraperBase):
    """BeautifulSoup4-based web scraper for simple HTML extraction."""

    def __init__(self, config: ScraperConfig):
        """Initialize the BeautifulSoup scraper.

        Args:
            config: Scraper configuration
        """
        super().__init__(config)
        self.session: Optional[aiohttp.ClientSession] = None
        self._semaphore = asyncio.Semaphore(config.concurrent_requests)
        self._resume_info: List[Dict[str, str]] = []

    def _normalize_url(self, url: str) -> str:
        """Normalize URL by removing GET parameters if configured.

        Args:
            url: URL to normalize

        Returns:
            Normalized URL
        """
        if self.config.ignore_get_params and "?" in url:
            return url.split("?")[0]
        return url

    async def __aenter__(self):
        """Create aiohttp session on entry."""
        headers = {}

        # Only add User-Agent if it's not None
        if self.config.user_agent:
            headers["User-Agent"] = self.config.user_agent

        if self.config.custom_headers:
            # Filter out None keys when updating headers
            for k, v in self.config.custom_headers.items():
                if k is not None and v is not None:
                    headers[k] = v

        # Final validation to ensure no None values
        headers = {k: v for k, v in headers.items() if k is not None and v is not None}

        timeout = aiohttp.ClientTimeout(total=self.config.timeout)
        connector = aiohttp.TCPConnector(
            ssl=self.config.verify_ssl, limit=self.config.concurrent_requests * 2
        )

        self.session = aiohttp.ClientSession(
            headers=headers, timeout=timeout, connector=connector
        )
        return self

    async def __aexit__(self, *args):
        """Close aiohttp session on exit."""
        if self.session and not self.session.closed:
            await self.session.close()
            # Small delay to allow connections to close properly
            await asyncio.sleep(0.25)

    async def scrape_url(self, url: str) -> ScrapedPage:
        """Scrape a single URL using BeautifulSoup.

        Args:
            url: URL to scrape

        Returns:
            ScrapedPage object containing the scraped content

        Raises:
            Exception: If scraping fails
        """
        if not self.session:
            raise RuntimeError("Scraper must be used as async context manager")

        async with self._semaphore:  # Limit concurrent requests
            try:
                logger.info(f"Scraping URL: {url}")

                async with self.session.get(
                    url, allow_redirects=self.config.follow_redirects
                ) as response:
                    # Get response info
                    status_code = response.status
                    # Convert headers to dict with string keys, skip None keys
                    headers = {}
                    for k, v in response.headers.items():
                        if k is not None:
                            headers[str(k)] = str(v)

                    # Handle encoding
                    content_bytes = await response.read()

                    # Try to detect encoding if not specified
                    encoding = response.charset
                    if not encoding:
                        detected = chardet.detect(content_bytes)
                        encoding = detected.get("encoding", "utf-8")
                        logger.debug(f"Detected encoding for {url}: {encoding}")

                    # Decode content
                    try:
                        content = content_bytes.decode(encoding or "utf-8")
                    except (UnicodeDecodeError, LookupError):
                        # Fallback to utf-8 with error handling
                        content = content_bytes.decode("utf-8", errors="replace")
                        encoding = "utf-8"

                    # Parse with BeautifulSoup
                    soup = BeautifulSoup(content, "html.parser")

                    # Store metadata for database
                    normalized_url = self._normalize_url(str(response.url))
                    canonical_url = None
                    content_checksum = None

                    # Order: 1. GET parameter normalization (already done in _normalize_url)
                    # 2. Canonical URL check
                    if self.config.check_canonical:
                        canonical_link = soup.find("link", {"rel": "canonical"})
                        if canonical_link and canonical_link.get("href"):
                            canonical_url = canonical_link["href"]
                            # Make canonical URL absolute
                            canonical_url = urljoin(url, canonical_url)
                            # Normalize canonical URL too
                            normalized_canonical = self._normalize_url(canonical_url)

                            if normalized_url != normalized_canonical:
                                logger.info(
                                    f"Skipping {url} - canonical URL differs: {canonical_url}"
                                )
                                return (
                                    None  # Return None to indicate skip, not an error
                                )

                    # 3. Content duplicate check
                    if self.config.check_content_duplicates:
                        from ..utils import calculate_content_checksum

                        content_checksum = calculate_content_checksum(content)

                        # Check if checksum exists using callback or fall back to database query
                        if self._checksum_callback and self._checksum_callback(
                            content_checksum
                        ):
                            logger.info(f"Skipping {url} - duplicate content detected")
                            return None  # Return None to indicate skip, not an error

                    # Extract metadata
                    title = soup.find("title")
                    title_text = title.get_text(strip=True) if title else None

                    metadata = self._extract_metadata(soup)

                    return ScrapedPage(
                        url=str(response.url),  # Use final URL after redirects
                        content=str(soup),
                        title=title_text,
                        metadata=metadata,
                        encoding=encoding,
                        status_code=status_code,
                        headers=headers,
                        normalized_url=normalized_url,
                        canonical_url=canonical_url,
                        content_checksum=content_checksum,
                    )

            except asyncio.TimeoutError:
                logger.error(f"Timeout while scraping {url}")
                raise
            except aiohttp.ClientError as e:
                logger.error(f"Client error while scraping {url}: {e}")
                raise
            except Exception as e:
                logger.error(f"Unexpected error while scraping {url}: {e}")
                raise

    def set_resume_info(self, resume_info: List[Dict[str, str]]) -> None:
        """Set resume information for continuing a crawl.

        Args:
            resume_info: List of dicts with 'url' and 'content' keys
        """
        self._resume_info = resume_info
        logger.info(
            f"Loaded {len(resume_info)} previously scraped pages for link extraction"
        )

    async def populate_queue_from_content(
        self,
        content: str,
        url: str,
        to_visit: Set[str],
        depth_map: Dict[str, int],
        current_depth: int,
    ) -> None:
        """Extract links from content and add to queue.

        Args:
            content: HTML content to extract links from
            url: URL of the page
            to_visit: Set of URLs to visit
            depth_map: Mapping of URLs to their depth
            current_depth: Current crawl depth
        """
        if current_depth < self.config.max_depth:
            new_urls = self._extract_links(content, url)
            for new_url in new_urls:
                normalized_new_url = self._normalize_url(new_url)
                if (
                    normalized_new_url not in self._visited_urls
                    and normalized_new_url not in to_visit
                ):
                    to_visit.add(normalized_new_url)
                    depth_map[normalized_new_url] = current_depth + 1
                    logger.debug(
                        f"Added URL to queue: {normalized_new_url} (depth: {current_depth + 1})"
                    )

    async def scrape_site(self, start_url: str) -> AsyncGenerator[ScrapedPage, None]:
        """Scrape entire website starting from URL.

        Args:
            start_url: URL to start crawling from

        Yields:
            ScrapedPage objects as they are scraped
        """
        # Parse start URL to get base domain
        start_parsed = urlparse(start_url)
        base_domain = start_parsed.netloc

        # Store the base path for subdirectory restriction
        base_path = start_parsed.path.rstrip("/")
        if base_path:
            logger.info(f"Restricting crawl to subdirectory: {base_path}")

        # If no allowed domains specified, restrict to start domain
        if not self.config.allowed_domains:
            self.config.allowed_domains = [base_domain]
            logger.info(f"Restricting crawl to domain: {base_domain}")

        # URLs to visit
        to_visit: Set[str] = {start_url}
        depth_map: Dict[str, int] = {start_url: 0}

        # Check if we're already in a context manager
        should_close_session = False
        if not self.session:
            await self.__aenter__()
            should_close_session = True

        try:
            # If we have resume info, populate the queue from previously scraped pages
            if self._resume_info:
                logger.info("Populating queue from previously scraped pages...")
                for page_info in self._resume_info:
                    url = page_info["url"]
                    content = page_info["content"]
                    # Assume depth 0 for scraped pages, their links will be depth 1
                    await self.populate_queue_from_content(
                        content, url, to_visit, depth_map, 0
                    )
                logger.info(
                    f"Found {len(to_visit)} URLs to visit after analyzing scraped pages"
                )
            while to_visit and len(self._visited_urls) < self.config.max_pages:
                # Get next URL
                url = to_visit.pop()

                # Skip if already visited (normalize URL first)
                normalized_url = self._normalize_url(url)
                if self.is_visited(normalized_url):
                    continue

                # Validate URL
                if not await self.validate_url(url):
                    continue

                # Check subdirectory restriction
                if base_path:
                    url_parsed = urlparse(url)
                    if (
                        not url_parsed.path.startswith(base_path + "/")
                        and url_parsed.path != base_path
                    ):
                        logger.debug(
                            f"Skipping {url} - outside subdirectory {base_path}"
                        )
                        continue

                # Check robots.txt
                if not await self.can_fetch(url):
                    logger.info(f"Skipping {url} - blocked by robots.txt")
                    continue

                # Check depth
                current_depth = depth_map.get(url, 0)
                if current_depth > self.config.max_depth:
                    logger.debug(
                        f"Skipping {url} - exceeds max depth {self.config.max_depth}"
                    )
                    continue

                # Mark as visited
                self.mark_visited(normalized_url)

                try:
                    # Scrape the page
                    page = await self.scrape_url(url)

                    # Skip if page is None (duplicate content or canonical mismatch)
                    if page is None:
                        continue

                    yield page

                    # Extract links if not at max depth
                    await self.populate_queue_from_content(
                        page.content, url, to_visit, depth_map, current_depth
                    )

                    # Respect rate limit
                    if self.config.request_delay > 0:
                        await asyncio.sleep(self.config.request_delay)

                except Exception as e:
                    logger.error(f"Error processing {url}: {e}")
                    # Continue with other URLs
                    continue

        finally:
            # Clean up session if we created it
            if should_close_session:
                await self.__aexit__(None, None, None)

        logger.info(f"Crawl complete. Visited {len(self._visited_urls)} pages")

    def _extract_metadata(self, soup: BeautifulSoup) -> Dict[str, str]:
        """Extract metadata from HTML.

        Args:
            soup: BeautifulSoup parsed HTML

        Returns:
            Dictionary of metadata key-value pairs
        """
        metadata = {}

        # Extract meta tags
        for meta in soup.find_all("meta"):
            # Try different meta tag formats
            name = meta.get("name") or meta.get("property") or meta.get("http-equiv")
            content = meta.get("content", "")

            if name is not None and content:
                # Ensure name is a string
                metadata[str(name)] = content

        # Extract other useful information
        # Canonical URL
        canonical = soup.find("link", {"rel": "canonical"})
        if canonical and canonical.get("href"):
            metadata["canonical"] = canonical["href"]

        # Author
        author = soup.find("meta", {"name": "author"})
        if author and author.get("content"):
            metadata["author"] = author["content"]

        return metadata

    def _extract_links(self, html_content: str, base_url: str) -> Set[str]:
        """Extract all links from HTML content.

        Args:
            html_content: HTML content to parse
            base_url: Base URL for resolving relative links

        Returns:
            Set of absolute URLs found in the content
        """
        links = set()

        try:
            soup = BeautifulSoup(html_content, "html.parser")

            # Find all links (only from anchor tags, not link tags which often point to CSS)
            for tag in soup.find_all("a"):
                href = tag.get("href")
                if href:
                    # Clean and resolve URL
                    href = href.strip()
                    if href and not href.startswith(
                        ("#", "javascript:", "mailto:", "tel:")
                    ):
                        absolute_url = urljoin(base_url, href)
                        # Remove fragment
                        absolute_url = absolute_url.split("#")[0]

                        # Remove GET parameters if configured to do so
                        if self.config.ignore_get_params and "?" in absolute_url:
                            absolute_url = absolute_url.split("?")[0]

                        if absolute_url:
                            # Skip non-HTML resources
                            if not any(
                                absolute_url.endswith(ext)
                                for ext in [
                                    ".css",
                                    ".js",
                                    ".json",
                                    ".xml",
                                    ".ico",
                                    ".jpg",
                                    ".jpeg",
                                    ".png",
                                    ".gif",
                                    ".svg",
                                    ".webp",
                                    ".pdf",
                                    ".zip",
                                ]
                            ):
                                links.add(unquote(absolute_url))

        except Exception as e:
            logger.error(f"Error extracting links from {base_url}: {e}")

        return links

======= scrape_tool/scrapers/httrack.py ======
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""HTTrack-based web scraper implementation."""

import asyncio
import logging
import os
import shutil
import shlex
import tempfile
from pathlib import Path
from typing import AsyncGenerator, Optional
from urllib.parse import urlparse, urljoin

from .base import WebScraperBase, ScrapedPage, ScraperConfig

logger = logging.getLogger(__name__)


class HTTrackScraper(WebScraperBase):
    """HTTrack-based web scraper for complete website mirroring."""

    def __init__(self, config: ScraperConfig):
        """Initialize the HTTrack scraper.

        Args:
            config: Scraper configuration
        """
        super().__init__(config)
        self.httrack_path = shutil.which("httrack")
        if not self.httrack_path:
            raise RuntimeError(
                "HTTrack not found. Please install HTTrack: "
                "apt-get install httrack (Linux) or "
                "brew install httrack (macOS) or "
                "download from https://www.httrack.com (Windows)"
            )
        self.temp_dir: Optional[Path] = None

    async def __aenter__(self):
        """Create temporary directory for HTTrack output."""
        self.temp_dir = Path(tempfile.mkdtemp(prefix="html2md_httrack_"))
        logger.debug(f"Created temporary directory: {self.temp_dir}")
        return self

    async def __aexit__(self, *args):
        """Clean up temporary directory."""
        if self.temp_dir and self.temp_dir.exists():
            try:
                shutil.rmtree(self.temp_dir)
                logger.debug(f"Cleaned up temporary directory: {self.temp_dir}")
            except Exception as e:
                logger.warning(f"Failed to clean up temp directory: {e}")

    async def scrape_url(self, url: str) -> ScrapedPage:
        """Scrape a single URL using HTTrack.

        Note: HTTrack is designed for full site mirroring, so this method
        will create a minimal mirror and extract just the requested page.

        Args:
            url: URL to scrape

        Returns:
            ScrapedPage object containing the scraped content
        """
        if not self.temp_dir:
            raise RuntimeError("Scraper must be used as async context manager")

        # Create a subdirectory for this specific URL
        url_hash = str(hash(url))[-8:]
        output_dir = self.temp_dir / f"single_{url_hash}"
        output_dir.mkdir(exist_ok=True)

        # Build HTTrack command for single page
        # Properly escape all arguments to prevent command injection
        cmd = [
            self.httrack_path,
            url,  # URL is validated by validate_url method
            "-O",
            str(output_dir),
            "-r1",  # Depth 1 (just this page)
            "-%P",  # No external pages
            "-p1",  # Download HTML files
            "-%e0",  # Don't download error pages
            "--quiet",  # Quiet mode
            "--disable-security-limits",
            f"--user-agent={shlex.quote(self.config.user_agent)}",  # Escape user agent
            "--timeout=" + str(int(self.config.timeout)),
        ]

        if not self.config.verify_ssl:
            cmd.append("--assume-insecure")

        if self.config.ignore_get_params:
            cmd.append("-N0")  # Don't parse query strings

        # Run HTTrack
        logger.debug(f"Running HTTrack command: {' '.join(cmd)}")
        process = await asyncio.create_subprocess_exec(
            *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            error_msg = stderr.decode("utf-8", errors="replace")
            raise RuntimeError(f"HTTrack failed: {error_msg}")

        # Find the downloaded file
        # HTTrack creates files in a domain subdirectory
        parsed_url = urlparse(url)

        # Try multiple possible locations
        possible_files = [
            # Domain/path structure
            output_dir / parsed_url.netloc / parsed_url.path.lstrip("/"),
            output_dir / parsed_url.netloc / (parsed_url.path.lstrip("/") + ".html"),
            output_dir / parsed_url.netloc / "index.html",
            # Sometimes HTTrack puts files directly in output dir
            output_dir / "index.html",
        ]

        # If path ends with /, add index.html
        if parsed_url.path.endswith("/") or not parsed_url.path:
            possible_files.insert(
                0,
                output_dir
                / parsed_url.netloc
                / parsed_url.path.lstrip("/")
                / "index.html",
            )

        expected_file = None
        for pf in possible_files:
            if pf.exists() and pf.is_file():
                expected_file = pf
                break

        if not expected_file:
            # Try to find any HTML file in the domain directory
            domain_dir = output_dir / parsed_url.netloc
            if domain_dir.exists():
                html_files = list(domain_dir.rglob("*.html"))
                # Exclude HTTrack's own index files
                html_files = [f for f in html_files if "hts-cache" not in str(f)]
                if html_files:
                    expected_file = html_files[0]

        if not expected_file:
            # Last resort: find any HTML file
            html_files = list(output_dir.rglob("*.html"))
            # Exclude HTTrack's own files and cache
            html_files = [
                f
                for f in html_files
                if "hts-cache" not in str(f) and f.name != "index.html"
            ]
            if html_files:
                expected_file = html_files[0]
            else:
                raise RuntimeError(f"HTTrack did not download any HTML files for {url}")

        # Read the content
        try:
            content = expected_file.read_text(encoding="utf-8")
        except UnicodeDecodeError:
            content = expected_file.read_text(encoding="latin-1")

        # Extract title from content
        title = None
        if "<title>" in content and "</title>" in content:
            start = content.find("<title>") + 7
            end = content.find("</title>")
            title = content[start:end].strip()

        # For single URL scraping, we don't apply deduplication checks
        # but we still extract canonical URL for metadata
        canonical_url_found = None
        if "<link" in content and "canonical" in content:
            import re

            canonical_match = re.search(
                r'<link[^>]+rel=["\']canonical["\'][^>]+href=["\']([^"\']+)["\']',
                content,
                re.IGNORECASE,
            )
            if not canonical_match:
                canonical_match = re.search(
                    r'<link[^>]+href=["\']([^"\']+)["\'][^>]+rel=["\']canonical["\']',
                    content,
                    re.IGNORECASE,
                )
            if canonical_match:
                canonical_url_found = urljoin(url, canonical_match.group(1))

        return ScrapedPage(
            url=url,
            content=content,
            title=title,
            encoding="utf-8",
            normalized_url=url,
            canonical_url=canonical_url_found,
            content_checksum=None,  # Not calculated for single URL
        )

    async def scrape_site(self, start_url: str) -> AsyncGenerator[ScrapedPage, None]:
        """Scrape entire website using HTTrack.

        Args:
            start_url: URL to start crawling from

        Yields:
            ScrapedPage objects as they are scraped
        """
        if not self.temp_dir:
            raise RuntimeError("Scraper must be used as async context manager")

        output_dir = self.temp_dir / "site"
        output_dir.mkdir(exist_ok=True)

        # Build HTTrack command with conservative settings for Cloudflare
        # Calculate connection rate (max 0.5 connections per second)
        connection_rate = min(0.5, 1 / self.config.request_delay)

        # Limit concurrent connections (max 2 for Cloudflare sites)
        concurrent_connections = min(2, self.config.concurrent_requests)

        cmd = [
            self.httrack_path,
            start_url,  # URL is validated by validate_url method
            "-O",
            str(output_dir),
            f"-r{self.config.max_depth}",  # Max depth
            "-%P",  # No external pages
            "--quiet",  # Quiet mode
            "--disable-security-limits",
            f"--user-agent={shlex.quote(self.config.user_agent)}",  # Escape user agent
            "--timeout=" + str(int(self.config.timeout)),
            f"--sockets={concurrent_connections}",  # Max 2 connections
            f"--connection-per-second={connection_rate:.2f}",  # Max 0.5/sec
            f"--max-files={self.config.max_pages}",
            "--max-rate=100000",  # Limit bandwidth to 100KB/s
            "--min-rate=1000",  # Minimum 1KB/s
        ]

        # Parse start URL for domain and path restrictions
        parsed = urlparse(start_url)
        base_path = parsed.path.rstrip("/")

        # Add domain restrictions
        if self.config.allowed_domains:
            for domain in self.config.allowed_domains:
                cmd.extend(["+*" + domain + "*"])
        else:
            # Restrict to same domain by default
            cmd.extend(["+*" + parsed.netloc + "*"])

        # Add subdirectory restriction if path is specified
        if base_path:
            logger.info(f"Restricting HTTrack crawl to subdirectory: {base_path}")
            # Allow the base path and everything under it
            cmd.extend([f"+*{parsed.netloc}{base_path}/*"])
            # Exclude everything else on the same domain
            cmd.extend([f"-*{parsed.netloc}/*"])

        # Add exclusions
        if self.config.exclude_patterns:
            for pattern in self.config.exclude_patterns:
                cmd.extend(["-*" + pattern + "*"])

        if not self.config.verify_ssl:
            cmd.append("--assume-insecure")

        if self.config.ignore_get_params:
            cmd.append("-N0")  # Don't parse query strings

        if self.config.respect_robots_txt:
            cmd.append("--robots=3")  # Respect robots.txt

        # Run HTTrack
        logger.info(f"Starting HTTrack crawl from {start_url}")
        logger.debug(f"HTTrack command: {' '.join(cmd)}")

        process = await asyncio.create_subprocess_exec(
            *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )

        # Wait for HTTrack to complete
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            error_msg = stderr.decode("utf-8", errors="replace")
            logger.error(f"HTTrack failed: {error_msg}")
            # Continue to process any files that were downloaded

        # Find all downloaded HTML files
        html_files = list(output_dir.rglob("*.html"))
        logger.info(f"HTTrack downloaded {len(html_files)} HTML files")

        # Yield each file as a ScrapedPage
        for html_file in html_files:
            # Skip HTTrack's own files
            if html_file.name in ("index.html", "hts-log.txt", "hts-cache"):
                continue

            try:
                # Reconstruct URL from file path
                rel_path = html_file.relative_to(output_dir)
                parts = rel_path.parts

                # First part should be domain
                if len(parts) > 0:
                    domain = parts[0]
                    path_parts = parts[1:] if len(parts) > 1 else []

                    # Reconstruct URL
                    parsed_start = urlparse(start_url)
                    url = f"{parsed_start.scheme}://{domain}/" + "/".join(path_parts)

                    # Remove .html extension if it wasn't in original
                    if url.endswith("/index.html"):
                        url = url[:-11]  # Remove /index.html
                    elif url.endswith(".html") and ".html" not in start_url:
                        url = url[:-5]  # Remove .html

                    # Read content
                    try:
                        content = html_file.read_text(encoding="utf-8")
                    except UnicodeDecodeError:
                        content = html_file.read_text(encoding="latin-1")

                    # Store metadata for database
                    normalized_url = url.rstrip("/")
                    if self.config.ignore_get_params and "?" in normalized_url:
                        normalized_url = normalized_url.split("?")[0]
                    canonical_url_found = None
                    content_checksum = None

                    # Order: 1. GET parameter normalization (already done above)
                    # 2. Canonical URL check
                    if self.config.check_canonical:
                        # Simple regex-based extraction for canonical URL
                        import re

                        canonical_match = re.search(
                            r'<link[^>]+rel=["\']canonical["\'][^>]+href=["\']([^"\']+)["\']',
                            content,
                            re.IGNORECASE,
                        )
                        if not canonical_match:
                            # Try alternate order
                            canonical_match = re.search(
                                r'<link[^>]+href=["\']([^"\']+)["\'][^>]+rel=["\']canonical["\']',
                                content,
                                re.IGNORECASE,
                            )

                        if canonical_match:
                            canonical_url_found = canonical_match.group(1)
                            # Make canonical URL absolute
                            canonical_url_found = urljoin(url, canonical_url_found)
                            # Normalize canonical URL too
                            normalized_canonical = canonical_url_found.rstrip("/")
                            if (
                                self.config.ignore_get_params
                                and "?" in normalized_canonical
                            ):
                                normalized_canonical = normalized_canonical.split("?")[
                                    0
                                ]

                            if normalized_url != normalized_canonical:
                                logger.info(
                                    f"Skipping {url} - canonical URL differs: {canonical_url_found}"
                                )
                                continue  # Skip this file

                    # 3. Content duplicate check
                    if self.config.check_content_duplicates:
                        from ..utils import calculate_content_checksum

                        content_checksum = calculate_content_checksum(content)

                        # Check if checksum exists using callback
                        if self._checksum_callback and self._checksum_callback(
                            content_checksum
                        ):
                            logger.info(f"Skipping {url} - duplicate content detected")
                            continue  # Skip this file

                    # Extract title
                    title = None
                    if "<title>" in content and "</title>" in content:
                        start_idx = content.find("<title>") + 7
                        end_idx = content.find("</title>")
                        title = content[start_idx:end_idx].strip()

                    self.mark_visited(url)

                    yield ScrapedPage(
                        url=url,
                        content=content,
                        title=title,
                        encoding="utf-8",
                        normalized_url=normalized_url,
                        canonical_url=canonical_url_found,
                        content_checksum=content_checksum,
                    )

            except Exception as e:
                logger.error(f"Error processing {html_file}: {e}")
                continue

======= scrape_tool/scrapers/playwright.py ======
#!/usr/bin/env python3
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Playwright scraper backend for JavaScript-heavy websites."""

import asyncio
import logging
from typing import AsyncIterator, Set, Optional, Dict, Any, TYPE_CHECKING
from urllib.parse import urljoin, urlparse
import re

try:
    from playwright.async_api import async_playwright, Browser, BrowserContext, Page

    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    if TYPE_CHECKING:
        from playwright.async_api import Page
    else:
        Page = Any

from .base import WebScraperBase, ScrapedPage, ScraperConfig

logger = logging.getLogger(__name__)


class PlaywrightScraper(WebScraperBase):
    """Browser-based scraper using Playwright for JavaScript rendering.

    Playwright provides:
    - Full JavaScript execution and rendering
    - Support for SPAs and dynamic content
    - Multiple browser engines (Chromium, Firefox, WebKit)
    - Screenshot and PDF generation capabilities
    - Network interception and modification
    - Mobile device emulation

    Best for:
    - JavaScript-heavy websites and SPAs
    - Sites requiring user interaction (clicking, scrolling)
    - Content behind authentication
    - Visual regression testing
    """

    def __init__(self, config: ScraperConfig):
        """Initialize the Playwright scraper.

        Args:
            config: Scraper configuration

        Raises:
            ImportError: If playwright is not installed
        """
        if not PLAYWRIGHT_AVAILABLE:
            raise ImportError(
                "playwright is required for this scraper. "
                "Install with: pip install playwright && playwright install"
            )

        super().__init__(config)
        self._playwright = None
        self._browser: Optional[Browser] = None
        self._context: Optional[BrowserContext] = None
        self._visited_urls: Set[str] = set()

        # Browser configuration from scraper config
        self._browser_config = config.__dict__.get("browser_config", {})
        self._browser_type = self._browser_config.get("browser", "chromium")
        self._headless = self._browser_config.get("headless", True)
        self._viewport = self._browser_config.get(
            "viewport", {"width": 1920, "height": 1080}
        )
        self._wait_until = self._browser_config.get("wait_until", "networkidle")
        self._wait_timeout = self._browser_config.get("wait_timeout", 30000)

    async def __aenter__(self):
        """Enter async context and launch browser."""
        self._playwright = await async_playwright().start()

        # Launch browser based on type
        if self._browser_type == "firefox":
            self._browser = await self._playwright.firefox.launch(
                headless=self._headless
            )
        elif self._browser_type == "webkit":
            self._browser = await self._playwright.webkit.launch(
                headless=self._headless
            )
        else:  # Default to chromium
            self._browser = await self._playwright.chromium.launch(
                headless=self._headless
            )

        # Create browser context with custom user agent
        # Add option to control SSL validation (default to secure)
        ignore_https_errors = getattr(self.config, "ignore_https_errors", False)

        self._context = await self._browser.new_context(
            user_agent=self.config.user_agent,
            viewport=self._viewport,
            ignore_https_errors=ignore_https_errors,  # Only ignore if explicitly configured
            accept_downloads=False,
        )

        # Set default timeout
        self._context.set_default_timeout(self._wait_timeout)

        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Exit async context and cleanup."""
        if self._context:
            await self._context.close()
        if self._browser:
            await self._browser.close()
        if self._playwright:
            await self._playwright.stop()

    async def scrape_url(self, url: str) -> ScrapedPage:
        """Scrape a single URL using Playwright.

        Args:
            url: URL to scrape

        Returns:
            ScrapedPage object with scraped content

        Raises:
            Exception: If scraping fails
        """
        if not self._context:
            raise RuntimeError("Scraper not initialized. Use async context manager.")

        page = None
        try:
            # Check robots.txt before scraping
            if not await self.can_fetch(url):
                raise ValueError(f"URL {url} is blocked by robots.txt")

            # Create new page
            page = await self._context.new_page()

            # Navigate to URL
            response = await page.goto(url, wait_until=self._wait_until)

            if not response:
                raise Exception(f"Failed to navigate to {url}")

            # Wait for any additional dynamic content
            if self._browser_config.get("wait_for_selector"):
                await page.wait_for_selector(
                    self._browser_config["wait_for_selector"],
                    timeout=self._wait_timeout,
                )

            # Execute any custom JavaScript (with security warning)
            if self._browser_config.get("execute_script"):
                script = self._browser_config["execute_script"]

                # Basic validation to prevent obvious malicious scripts
                dangerous_patterns = [
                    "fetch",
                    "XMLHttpRequest",
                    "eval",
                    "Function",
                    "localStorage",
                    "sessionStorage",
                    "document.cookie",
                    "window.location",
                    "navigator",
                    "WebSocket",
                ]

                script_lower = script.lower()
                for pattern in dangerous_patterns:
                    if pattern.lower() in script_lower:
                        logger.warning(
                            f"Potentially dangerous JavaScript pattern '{pattern}' detected in script. Skipping execution."
                        )
                        break
                else:
                    # Only execute if no dangerous patterns found
                    logger.warning(
                        "Executing custom JavaScript. This feature should only be used with trusted scripts."
                    )
                    try:
                        await page.evaluate(script)
                    except Exception as e:
                        logger.error(f"Error executing custom JavaScript: {e}")

            # Get the final rendered HTML
            content = await page.content()

            # Extract title
            title = await page.title()

            # Extract metadata
            metadata = await self._extract_metadata(page)

            # Get response headers and status
            status_code = response.status
            headers = response.headers

            # Detect encoding
            encoding = "utf-8"  # Default for rendered content

            # Take screenshot if configured
            if self._browser_config.get("screenshot"):
                screenshot_path = self._browser_config.get(
                    "screenshot_path", "screenshot.png"
                )
                await page.screenshot(path=screenshot_path, full_page=True)
                metadata["screenshot"] = screenshot_path

            return ScrapedPage(
                url=page.url,  # Use final URL after redirects
                content=content,
                title=title,
                encoding=encoding,
                status_code=status_code,
                headers=headers,
                metadata=metadata,
            )

        except Exception as e:
            logger.error(f"Error scraping {url} with Playwright: {e}")
            raise
        finally:
            if page:
                await page.close()

    async def _extract_metadata(self, page: Page) -> Dict[str, Any]:
        """Extract metadata from the page."""
        metadata = {}

        # Extract meta tags
        meta_tags = await page.evaluate(
            """
            () => {
                const metadata = {};
                
                // Get description
                const desc = document.querySelector('meta[name="description"]');
                if (desc) metadata.description = desc.content;
                
                // Get keywords
                const keywords = document.querySelector('meta[name="keywords"]');
                if (keywords) metadata.keywords = keywords.content;
                
                // Get Open Graph tags
                document.querySelectorAll('meta[property^="og:"]').forEach(tag => {
                    const prop = tag.getAttribute('property');
                    if (prop && tag.content) {
                        metadata[prop] = tag.content;
                    }
                });
                
                // Get Twitter Card tags
                document.querySelectorAll('meta[name^="twitter:"]').forEach(tag => {
                    const name = tag.getAttribute('name');
                    if (name && tag.content) {
                        metadata[name] = tag.content;
                    }
                });
                
                // Get canonical URL
                const canonical = document.querySelector('link[rel="canonical"]');
                if (canonical) metadata.canonical = canonical.href;
                
                // Get page load time
                if (window.performance && window.performance.timing) {
                    const timing = window.performance.timing;
                    metadata.load_time = timing.loadEventEnd - timing.navigationStart;
                }
                
                return metadata;
            }
        """
        )

        metadata.update(meta_tags)

        # Add browser info
        metadata["browser"] = self._browser_type
        metadata["viewport"] = self._viewport

        return metadata

    async def scrape_site(self, start_url: str) -> AsyncIterator[ScrapedPage]:
        """Scrape an entire website using Playwright.

        Args:
            start_url: Starting URL for crawling

        Yields:
            ScrapedPage objects for each scraped page
        """
        if not self._context:
            raise RuntimeError("Scraper not initialized. Use async context manager.")

        # Parse start URL to get base domain
        parsed_start = urlparse(start_url)
        base_domain = parsed_start.netloc

        # Initialize queue
        queue = asyncio.Queue()
        await queue.put((start_url, 0))  # (url, depth)

        # Track visited URLs
        self._visited_urls.clear()
        self._visited_urls.add(start_url)

        # Semaphore for concurrent pages
        semaphore = asyncio.Semaphore(self.config.concurrent_requests)

        # Active tasks
        tasks = set()
        pages_scraped = 0

        async def process_url(url: str, depth: int):
            """Process a single URL and extract links."""
            async with semaphore:
                page = None
                try:
                    # Respect request delay
                    if self.config.request_delay > 0:
                        await asyncio.sleep(self.config.request_delay)

                    # Check robots.txt before scraping
                    if not await self.can_fetch(url):
                        logger.info(f"Skipping {url} - blocked by robots.txt")
                        return None

                    # Create new page
                    page = await self._context.new_page()

                    # Navigate to URL
                    response = await page.goto(url, wait_until=self._wait_until)

                    if not response:
                        logger.warning(f"Failed to navigate to {url}")
                        return None

                    # Wait for dynamic content
                    if self._browser_config.get("wait_for_selector"):
                        await page.wait_for_selector(
                            self._browser_config["wait_for_selector"],
                            timeout=self._wait_timeout,
                        )

                    # Get content
                    content = await page.content()
                    title = await page.title()
                    metadata = await self._extract_metadata(page)

                    # Create scraped page
                    scraped_page = ScrapedPage(
                        url=page.url,
                        content=content,
                        title=title,
                        encoding="utf-8",
                        status_code=response.status,
                        headers=response.headers,
                        metadata=metadata,
                    )

                    # Extract links if not at max depth
                    if depth < self.config.max_depth:
                        # Get all links using JavaScript
                        links = await page.evaluate(
                            """
                            () => {
                                return Array.from(document.querySelectorAll('a[href]'))
                                    .map(a => a.href)
                                    .filter(href => href && (href.startsWith('http://') || href.startsWith('https://')));
                            }
                        """
                        )

                        for link in links:
                            # Parse URL
                            parsed_url = urlparse(link)

                            # Skip if different domain (unless allowed)
                            if self.config.allowed_domains:
                                if parsed_url.netloc not in self.config.allowed_domains:
                                    continue
                            elif parsed_url.netloc != base_domain:
                                continue

                            # Skip if matches exclude pattern
                            if self.config.exclude_patterns:
                                if any(
                                    re.match(pattern, link)
                                    for pattern in self.config.exclude_patterns
                                ):
                                    continue

                            # Skip if already visited
                            if link in self._visited_urls:
                                continue

                            # Add to queue
                            self._visited_urls.add(link)
                            await queue.put((link, depth + 1))

                    return scraped_page

                except Exception as e:
                    logger.error(f"Error processing {url}: {e}")
                    return None
                finally:
                    if page:
                        await page.close()

        # Process URLs from queue
        while not queue.empty() or tasks:
            # Start new tasks if under limit
            while not queue.empty() and len(tasks) < self.config.concurrent_requests:
                try:
                    url, depth = queue.get_nowait()

                    # Check max pages limit
                    if pages_scraped >= self.config.max_pages:
                        break

                    # Create task
                    task = asyncio.create_task(process_url(url, depth))
                    tasks.add(task)

                except asyncio.QueueEmpty:
                    break

            # Wait for at least one task to complete
            if tasks:
                done, tasks = await asyncio.wait(
                    tasks, return_when=asyncio.FIRST_COMPLETED
                )

                # Process completed tasks
                for task in done:
                    page = await task
                    if page:
                        pages_scraped += 1
                        yield page

                        # Check if we've hit the page limit
                        if pages_scraped >= self.config.max_pages:
                            # Cancel remaining tasks
                            for t in tasks:
                                t.cancel()
                            return

        logger.info(f"Playwright scraping complete. Scraped {pages_scraped} pages")

======= scrape_tool/scrapers/scrapy_scraper.py ======
#!/usr/bin/env python3
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Scrapy backend for industrial-strength web scraping."""

import asyncio
import logging
import tempfile
from pathlib import Path
from typing import AsyncIterator, Optional, Dict, Any, List
from urllib.parse import urlparse
import json

try:
    import scrapy
    from scrapy.crawler import CrawlerProcess, CrawlerRunner
    from scrapy.utils.project import get_project_settings
    from twisted.internet import reactor, defer
    from scrapy.utils.log import configure_logging

    SCRAPY_AVAILABLE = True
except ImportError:
    SCRAPY_AVAILABLE = False

from .base import WebScraperBase, ScrapedPage, ScraperConfig

logger = logging.getLogger(__name__)


class ScrapySpider(scrapy.Spider if SCRAPY_AVAILABLE else object):
    """Custom Scrapy spider for HTML2MD."""

    name = "html2md_spider"

    def __init__(
        self, start_url: str, config: ScraperConfig, output_file: str, *args, **kwargs
    ):
        """Initialize spider with configuration."""
        # Initialize parent class first if Scrapy is available
        if SCRAPY_AVAILABLE and scrapy.Spider in self.__class__.__mro__:
            super().__init__(*args, **kwargs)

        self.start_urls = [start_url]
        self.config = config
        self.output_file = output_file
        self.pages_scraped = 0

        # Parse domain for allowed domains
        parsed = urlparse(start_url)
        if config.allowed_domains:
            self.allowed_domains = list(config.allowed_domains)
        else:
            self.allowed_domains = [parsed.netloc]

    def parse(self, response):
        """Parse a response and extract data."""
        # Check page limit
        if self.pages_scraped >= self.config.max_pages:
            return

        self.pages_scraped += 1

        # Extract page data
        # Convert headers to string dict (headers might contain bytes)
        headers = {}
        for key, value in response.headers.items():
            key_str = key.decode("utf-8") if isinstance(key, bytes) else str(key)
            value_str = (
                value[0].decode("utf-8")
                if isinstance(value[0], bytes)
                else str(value[0])
            )
            headers[key_str] = value_str

        page_data = {
            "url": response.url,
            "content": response.text,
            "title": response.css("title::text").get(""),
            "encoding": response.encoding,
            "status_code": response.status,
            "headers": headers,
            "metadata": self._extract_metadata(response),
        }

        # Save to output file
        with open(self.output_file, "a", encoding="utf-8") as f:
            f.write(json.dumps(page_data) + "\n")

        # Follow links if not at max depth
        depth = response.meta.get("depth", 0)
        if depth < self.config.max_depth and self.pages_scraped < self.config.max_pages:
            # Extract all links
            for href in response.css("a::attr(href)").getall():
                # Skip non-HTTP links
                if href.startswith(("mailto:", "tel:", "javascript:", "#")):
                    continue

                # Skip if matches exclude pattern
                if self.config.exclude_patterns:
                    if any(pattern in href for pattern in self.config.exclude_patterns):
                        continue

                yield response.follow(href, callback=self.parse)

    def _extract_metadata(self, response) -> Dict[str, Any]:
        """Extract metadata from the response."""
        metadata = {}

        # Meta description
        desc = response.css('meta[name="description"]::attr(content)').get()
        if desc:
            metadata["description"] = desc

        # Meta keywords
        keywords = response.css('meta[name="keywords"]::attr(content)').get()
        if keywords:
            metadata["keywords"] = keywords

        # Open Graph tags
        for og_tag in response.css('meta[property^="og:"]'):
            prop = og_tag.css("::attr(property)").get()
            content = og_tag.css("::attr(content)").get()
            if prop and content:
                metadata[prop] = content

        return metadata


class ScrapyScraper(WebScraperBase):
    """Industrial-strength scraper using Scrapy framework.

    Scrapy provides:
    - Built-in request throttling and retry logic
    - Concurrent request handling with Twisted
    - Middleware system for customization
    - robots.txt compliance
    - Auto-throttle based on server response times

    Best for:
    - Large-scale web scraping projects
    - Sites requiring complex crawling logic
    - Projects needing middleware (proxies, auth, etc.)
    """

    def __init__(self, config: ScraperConfig):
        """Initialize the Scrapy scraper.

        Args:
            config: Scraper configuration

        Raises:
            ImportError: If scrapy is not installed
        """
        if not SCRAPY_AVAILABLE:
            raise ImportError(
                "scrapy is required for this scraper. "
                "Install with: pip install scrapy"
            )

        super().__init__(config)
        self._temp_dir: Optional[Path] = None
        self._output_file: Optional[Path] = None

    async def __aenter__(self):
        """Enter async context."""
        # Create temporary directory for output
        self._temp_dir = Path(tempfile.mkdtemp(prefix="scrapy_html2md_"))
        self._output_file = self._temp_dir / "output.jsonl"
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Exit async context and cleanup."""
        # Cleanup temporary files
        if self._temp_dir and self._temp_dir.exists():
            import shutil

            shutil.rmtree(self._temp_dir)

    async def scrape_url(self, url: str) -> ScrapedPage:
        """Scrape a single URL using Scrapy.

        Args:
            url: URL to scrape

        Returns:
            ScrapedPage object with scraped content
        """
        # Use a simpler approach for single URLs - just use aiohttp
        # since Scrapy is more suited for site-wide crawling
        import aiohttp
        import aiofiles

        # Check robots.txt before scraping
        if not await self.can_fetch(url):
            raise ValueError(f"URL {url} is blocked by robots.txt")

        async with aiohttp.ClientSession() as session:
            headers = {"User-Agent": self.config.user_agent}
            timeout = aiohttp.ClientTimeout(total=self.config.timeout)

            async with session.get(
                url,
                headers=headers,
                timeout=timeout,
                allow_redirects=self.config.follow_redirects,
            ) as response:
                content = await response.text()

                # Parse with BeautifulSoup to extract title
                from bs4 import BeautifulSoup

                soup = BeautifulSoup(content, "html.parser")
                title = soup.title.string if soup.title else ""

                # Extract metadata
                metadata = {}
                desc_tag = soup.find("meta", attrs={"name": "description"})
                if desc_tag and desc_tag.get("content"):
                    metadata["description"] = desc_tag["content"]

                keywords_tag = soup.find("meta", attrs={"name": "keywords"})
                if keywords_tag and keywords_tag.get("content"):
                    metadata["keywords"] = keywords_tag["content"]

                # Extract OG tags
                for og_tag in soup.find_all(
                    "meta", attrs={"property": lambda x: x and x.startswith("og:")}
                ):
                    prop = og_tag.get("property")
                    content = og_tag.get("content")
                    if prop and content:
                        metadata[prop] = content

                return ScrapedPage(
                    url=str(response.url),
                    content=content,
                    title=title,
                    encoding=response.charset or "utf-8",
                    status_code=response.status,
                    headers=dict(response.headers),
                    metadata=metadata,
                )

    async def scrape_site(self, start_url: str) -> AsyncIterator[ScrapedPage]:
        """Scrape an entire website using Scrapy.

        Args:
            start_url: Starting URL for crawling

        Yields:
            ScrapedPage objects for each scraped page
        """
        # Clear output file
        if self._output_file.exists():
            self._output_file.unlink()

        # Configure Scrapy settings
        settings = get_project_settings()
        settings.update(
            {
                "USER_AGENT": self.config.user_agent,
                "ROBOTSTXT_OBEY": self.config.respect_robots_txt,
                "CONCURRENT_REQUESTS": self.config.concurrent_requests,
                "DOWNLOAD_DELAY": self.config.request_delay,
                "RANDOMIZE_DOWNLOAD_DELAY": True,  # Randomize delays
                "DEPTH_LIMIT": self.config.max_depth,
                "LOG_ENABLED": logger.isEnabledFor(logging.DEBUG),
                "TELNETCONSOLE_ENABLED": False,
                "AUTOTHROTTLE_ENABLED": True,  # Enable auto-throttle
                "AUTOTHROTTLE_START_DELAY": self.config.request_delay,
                "AUTOTHROTTLE_MAX_DELAY": self.config.request_delay * 10,
                "AUTOTHROTTLE_TARGET_CONCURRENCY": self.config.concurrent_requests,
                "HTTPCACHE_ENABLED": True,  # Enable cache
                "HTTPCACHE_DIR": str(self._temp_dir / "cache"),
                "REDIRECT_ENABLED": self.config.follow_redirects,
                "DOWNLOAD_TIMEOUT": self.config.timeout,
            }
        )

        # Use multiprocessing to run Scrapy in a separate process
        # to avoid reactor threading issues
        import multiprocessing
        import time

        def run_spider_process():
            """Run spider in separate process."""
            from scrapy.crawler import CrawlerProcess
            from scrapy.utils.project import get_project_settings

            # Re-create settings in the new process
            settings = get_project_settings()
            settings.update(
                {
                    "USER_AGENT": self.config.user_agent,
                    "ROBOTSTXT_OBEY": self.config.respect_robots_txt,
                    "CONCURRENT_REQUESTS": self.config.concurrent_requests,
                    "DOWNLOAD_DELAY": self.config.request_delay,
                    "RANDOMIZE_DOWNLOAD_DELAY": True,
                    "DEPTH_LIMIT": self.config.max_depth,
                    "LOG_ENABLED": logger.isEnabledFor(logging.DEBUG),
                    "TELNETCONSOLE_ENABLED": False,
                    "AUTOTHROTTLE_ENABLED": True,
                    "AUTOTHROTTLE_START_DELAY": self.config.request_delay,
                    "AUTOTHROTTLE_MAX_DELAY": self.config.request_delay * 10,
                    "AUTOTHROTTLE_TARGET_CONCURRENCY": self.config.concurrent_requests,
                    "HTTPCACHE_ENABLED": True,
                    "HTTPCACHE_DIR": str(self._temp_dir / "cache"),
                    "REDIRECT_ENABLED": self.config.follow_redirects,
                    "DOWNLOAD_TIMEOUT": self.config.timeout,
                }
            )

            process = CrawlerProcess(settings)
            process.crawl(
                ScrapySpider,
                start_url=start_url,
                config=self.config,
                output_file=str(self._output_file),
            )
            process.start()

        # Start spider in separate process
        process = multiprocessing.Process(target=run_spider_process)
        process.start()

        # Monitor output file and yield results as they come in
        last_position = 0
        pages_yielded = 0

        while True:
            # Check if spider process is still running
            if not process.is_alive():
                # Read any remaining data
                if self._output_file.exists():
                    with open(self._output_file, "r", encoding="utf-8") as f:
                        f.seek(last_position)
                        for line in f:
                            if line.strip():
                                data = json.loads(line.strip())
                                yield ScrapedPage(**data)
                                pages_yielded += 1
                break

            # Read new data from output file
            if self._output_file.exists():
                with open(self._output_file, "r", encoding="utf-8") as f:
                    f.seek(last_position)
                    for line in f:
                        if line.strip():
                            data = json.loads(line.strip())
                            yield ScrapedPage(**data)
                            pages_yielded += 1

                            # Check page limit
                            if pages_yielded >= self.config.max_pages:
                                # Terminate the process
                                process.terminate()
                                process.join(timeout=5)
                                if process.is_alive():
                                    process.kill()
                                return

                    last_position = f.tell()

            # Small delay to avoid busy waiting
            await asyncio.sleep(0.1)

        logger.info(f"Scrapy scraping complete. Scraped {pages_yielded} pages")

======= scrape_tool/scrapers/selectolax.py ======
#!/usr/bin/env python3
# Copyright 2025 Franz und Franz GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""httpx + selectolax scraper backend for blazing fast HTML parsing."""

import asyncio
import logging
from typing import AsyncIterator, Set, Optional, Dict, Any
from urllib.parse import urljoin, urlparse
import re

try:
    import httpx
    from selectolax.parser import HTMLParser

    HTTPX_AVAILABLE = True
except ImportError:
    HTTPX_AVAILABLE = False

from .base import WebScraperBase, ScrapedPage, ScraperConfig

logger = logging.getLogger(__name__)


class SelectolaxScraper(WebScraperBase):
    """High-performance scraper using httpx for async HTTP and selectolax for parsing.

    This scraper is optimized for speed and low memory usage. It uses:
    - httpx: Modern async HTTP client with connection pooling
    - selectolax: Blazing fast HTML parser built on C libraries

    Best for:
    - Large-scale scraping where performance is critical
    - Simple HTML parsing without JavaScript
    - Minimal resource usage requirements
    """

    def __init__(self, config: ScraperConfig):
        """Initialize the selectolax scraper.

        Args:
            config: Scraper configuration

        Raises:
            ImportError: If httpx or selectolax are not installed
        """
        if not HTTPX_AVAILABLE:
            raise ImportError(
                "httpx and selectolax are required for this scraper. "
                "Install with: pip install httpx selectolax"
            )

        super().__init__(config)
        self._client: Optional[httpx.AsyncClient] = None
        self._visited_urls: Set[str] = set()

    def _normalize_url(self, url: str) -> str:
        """Normalize URL by removing GET parameters if configured.

        Args:
            url: URL to normalize

        Returns:
            Normalized URL
        """
        if self.config.ignore_get_params and "?" in url:
            return url.split("?")[0]
        return url

    async def __aenter__(self):
        """Enter async context and create HTTP client."""
        # Configure client with connection pooling for performance
        limits = httpx.Limits(
            max_keepalive_connections=20,
            max_connections=self.config.concurrent_requests * 2,
            keepalive_expiry=30.0,
        )

        self._client = httpx.AsyncClient(
            timeout=httpx.Timeout(self.config.timeout),
            limits=limits,
            follow_redirects=self.config.follow_redirects,
            headers={"User-Agent": self.config.user_agent},
        )

        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Exit async context and cleanup."""
        if self._client:
            await self._client.aclose()

    async def scrape_url(self, url: str) -> ScrapedPage:
        """Scrape a single URL.

        Args:
            url: URL to scrape

        Returns:
            ScrapedPage object with scraped content

        Raises:
            Exception: If scraping fails
        """
        if not self._client:
            raise RuntimeError("Scraper not initialized. Use async context manager.")

        try:
            # Check robots.txt before scraping
            if not await self.can_fetch(url):
                raise ValueError(f"URL {url} is blocked by robots.txt")

            # Make HTTP request
            response = await self._client.get(url)
            response.raise_for_status()

            # Parse HTML with selectolax
            html_parser = HTMLParser(response.text)

            # Store metadata for database
            normalized_url = self._normalize_url(str(response.url))
            canonical_url = None
            content_checksum = None

            # Order: 1. GET parameter normalization (already done in _normalize_url)
            # 2. Canonical URL check
            if self.config.check_canonical:
                canonical_link = html_parser.css_first('link[rel="canonical"]')
                if canonical_link and canonical_link.attributes.get("href"):
                    canonical_url = canonical_link.attributes["href"]
                    # Make canonical URL absolute
                    canonical_url = urljoin(url, canonical_url)
                    # Normalize canonical URL too
                    normalized_canonical = self._normalize_url(canonical_url)

                    if normalized_url != normalized_canonical:
                        logger.info(
                            f"Skipping {url} - canonical URL differs: {canonical_url}"
                        )
                        return None  # Return None to indicate skip, not an error

            # 3. Content duplicate check
            if self.config.check_content_duplicates:
                from ..utils import calculate_content_checksum

                content_checksum = calculate_content_checksum(response.text)

                # Check if checksum exists using callback
                if self._checksum_callback and self._checksum_callback(
                    content_checksum
                ):
                    logger.info(f"Skipping {url} - duplicate content detected")
                    return None  # Return None to indicate skip, not an error

            # Extract title
            title = ""
            title_tag = html_parser.css_first("title")
            if title_tag:
                title = title_tag.text(strip=True)

            # Extract metadata
            metadata = {}

            # Get meta description
            meta_desc = html_parser.css_first('meta[name="description"]')
            if meta_desc:
                metadata["description"] = meta_desc.attributes.get("content", "")

            # Get meta keywords
            meta_keywords = html_parser.css_first('meta[name="keywords"]')
            if meta_keywords:
                metadata["keywords"] = meta_keywords.attributes.get("content", "")

            # Get Open Graph data
            for og_tag in html_parser.css('meta[property^="og:"]'):
                prop = og_tag.attributes.get("property", "")
                content = og_tag.attributes.get("content", "")
                if prop and content:
                    metadata[prop] = content

            # Detect encoding from meta tag or response
            encoding = response.encoding or "utf-8"
            meta_charset = html_parser.css_first("meta[charset]")
            if meta_charset:
                encoding = meta_charset.attributes.get("charset", encoding)
            else:
                # Check for http-equiv Content-Type
                meta_content_type = html_parser.css_first(
                    'meta[http-equiv="Content-Type"]'
                )
                if meta_content_type:
                    content = meta_content_type.attributes.get("content", "")
                    match = re.search(r"charset=([^;]+)", content)
                    if match:
                        encoding = match.group(1).strip()

            return ScrapedPage(
                url=str(response.url),  # Use final URL after redirects
                content=response.text,
                title=title,
                encoding=encoding,
                status_code=response.status_code,
                headers=dict(response.headers),
                metadata=metadata,
                normalized_url=normalized_url,
                canonical_url=canonical_url,
                content_checksum=content_checksum,
            )

        except httpx.HTTPError as e:
            logger.error(f"HTTP error scraping {url}: {e}")
            raise
        except Exception as e:
            logger.error(f"Error scraping {url}: {e}")
            raise

    async def scrape_site(self, start_url: str) -> AsyncIterator[ScrapedPage]:
        """Scrape an entire website starting from the given URL.

        Args:
            start_url: Starting URL for crawling

        Yields:
            ScrapedPage objects for each scraped page
        """
        if not self._client:
            raise RuntimeError("Scraper not initialized. Use async context manager.")

        # Parse start URL to get base domain
        parsed_start = urlparse(start_url)
        base_domain = parsed_start.netloc

        # Store the base path for subdirectory restriction
        base_path = parsed_start.path.rstrip("/")
        if base_path:
            logger.info(f"Restricting crawl to subdirectory: {base_path}")

        # Initialize queue with start URL
        queue = asyncio.Queue()
        await queue.put((start_url, 0))  # (url, depth)

        # Track visited URLs
        self._visited_urls.clear()
        normalized_start = self._normalize_url(start_url)
        self._visited_urls.add(normalized_start)

        # Semaphore for concurrent requests
        semaphore = asyncio.Semaphore(self.config.concurrent_requests)

        # Active tasks
        tasks = set()
        pages_scraped = 0

        async def process_url(url: str, depth: int):
            """Process a single URL."""
            async with semaphore:
                try:
                    # Respect request delay
                    if self.config.request_delay > 0:
                        await asyncio.sleep(self.config.request_delay)

                    # Scrape the page
                    page = await self.scrape_url(url)

                    # Skip if page is None (duplicate content or canonical mismatch)
                    if page is None:
                        return None

                    # Extract links if not at max depth
                    if depth < self.config.max_depth:
                        html_parser = HTMLParser(page.content)

                        for link in html_parser.css("a[href]"):
                            href = link.attributes.get("href", "")
                            if not href:
                                continue

                            # Resolve relative URLs
                            absolute_url = urljoin(url, href)

                            # Parse URL
                            parsed_url = urlparse(absolute_url)

                            # Skip if different domain (unless allowed)
                            if self.config.allowed_domains:
                                if parsed_url.netloc not in self.config.allowed_domains:
                                    continue
                            elif parsed_url.netloc != base_domain:
                                continue

                            # Check subdirectory restriction
                            if base_path:
                                if (
                                    not parsed_url.path.startswith(base_path + "/")
                                    and parsed_url.path != base_path
                                ):
                                    continue

                            # Skip if matches exclude pattern
                            if self.config.exclude_patterns:
                                if any(
                                    re.match(pattern, absolute_url)
                                    for pattern in self.config.exclude_patterns
                                ):
                                    continue

                            # Normalize URL
                            normalized_url = self._normalize_url(absolute_url)

                            # Skip if already visited
                            if normalized_url in self._visited_urls:
                                continue

                            # Skip non-HTTP(S) URLs
                            if parsed_url.scheme not in ("http", "https"):
                                continue

                            # Add to queue
                            self._visited_urls.add(normalized_url)
                            await queue.put((normalized_url, depth + 1))

                    return page

                except Exception as e:
                    logger.error(f"Error processing {url}: {e}")
                    return None

        # Process URLs from queue
        while not queue.empty() or tasks:
            # Start new tasks if under limit
            while not queue.empty() and len(tasks) < self.config.concurrent_requests:
                try:
                    url, depth = queue.get_nowait()

                    # Check max pages limit
                    if pages_scraped >= self.config.max_pages:
                        break

                    # Create task
                    task = asyncio.create_task(process_url(url, depth))
                    tasks.add(task)

                except asyncio.QueueEmpty:
                    break

            # Wait for at least one task to complete
            if tasks:
                done, tasks = await asyncio.wait(
                    tasks, return_when=asyncio.FIRST_COMPLETED
                )

                # Process completed tasks
                for task in done:
                    page = await task
                    if page:
                        pages_scraped += 1
                        yield page

                        # Check if we've hit the page limit
                        if pages_scraped >= self.config.max_pages:
                            # Cancel remaining tasks
                            for t in tasks:
                                t.cancel()
                            return

        logger.info(f"Scraping complete. Scraped {pages_scraped} pages")
