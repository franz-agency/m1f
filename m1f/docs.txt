========================================================================================
== FILE: README.md
== DATE: 2025-06-10 14:50:13 | SIZE: 5.73 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: d3d57aa5c839426dc7ab16fbbfc9cd0e7b83e0794e934f29da40bd59993f21ae
========================================================================================
# m1f - Make One File 🚀

**Feed your AI the whole story.** A powerful toolkit that turns messy codebases
into AI-ready context bundles.

## What's This?

Ever tried explaining your entire project to Claude or ChatGPT? Yeah, that's
what we thought. m1f makes it stupid simple to bundle your code, docs, and
whatever else into perfectly digestible chunks for LLMs.

## The Squad

### 🎯 **m1f** - The Bundler

Combines multiple files into a single, AI-friendly mega-file. Smart enough to
deduplicate content, handle any encoding, and even scan for secrets. Because
nobody wants their API keys in a ChatGPT conversation.

```bash
# Bundle your entire project (but smart about it)
m1f -s ./your-project -o context.txt --preset wordpress
```

### ✂️ **m1f-s1f** - The Splitter

Extracts files back from bundles. Perfect for when your AI assistant generates
that perfect codebase and you need it back in actual files.

```bash
# Unbundle that AI-generated masterpiece
m1f-s1f -i bundle.txt -d ./extracted
```

### 🌐 **m1f-scrape** - The Collector

Downloads entire websites for offline processing. Multiple backends for
different scenarios - from simple HTML to JavaScript-heavy SPAs.

```bash
# Grab those docs
m1f-scrape https://docs.example.com -o ./html --scraper playwright
```

### 📝 **m1f-html2md** - The Converter

Transforms HTML into clean Markdown. Analyzes structure, suggests optimal
selectors, and handles even the messiest enterprise documentation.

```bash
# Make it readable
m1f-html2md convert ./html -o ./markdown --content-selector "article"
```

### 🔢 **m1f-token-counter** - The Calculator

Counts tokens before you hit those pesky context limits. Support for all major
LLM encodings.

```bash
# Will it fit?
m1f-token-counter ./bundle.txt
```

## Real-World Magic

### Feed Documentation to Your AI Assistant

```bash
# Download → Convert → Bundle → Profit
m1f-scrape https://react.dev -o ./react-html
m1f-html2md convert ./react-html -o ./react-md
m1f -s ./react-md -o react-docs-for-claude.txt
```

### Smart WordPress Development

```bash
# Bundle your theme with intelligent filtering
m1f -s ./wp-content/themes/mytheme -o theme-context.txt \
    --preset presets/wordpress.m1f-presets.yml
```

### Auto-Bundle Your Project

```bash
# Set it and forget it
m1f-update
# Or watch for changes
./scripts/watch_and_bundle.sh
```

## Why You'll Love It

- **🧠 AI-First**: Built specifically for LLM context windows
- **⚡ Fast AF**: Async I/O, parallel processing, the works
- **🎨 Presets**: WordPress, web projects, documentation - we got you
- **🔒 Security**: Automatic secret detection (because accidents happen)
- **📦 All-in-One**: Download, convert, bundle, done

## Quick Start

### Linux/macOS (3 commands)

```bash
git clone https://github.com/franzundfriends/m1f.git
cd m1f
source ./scripts/install.sh
```

### Windows (3 commands + restart)

```powershell
git clone https://github.com/franzundfriends/m1f.git
cd m1f
.\scripts\install.ps1
# Restart PowerShell or run: . $PROFILE
```

That's it! ✨ The installer handles everything:

- ✅ Checks Python 3.10+
- ✅ Creates virtual environment
- ✅ Installs all dependencies
- ✅ Generates initial bundles
- ✅ Sets up global commands

Test it:

```bash
m1f --help
m1f-update
```

## Pro Tips

- Start small: Test with a few files before going wild
- Use presets: They're there for a reason
- Check token counts: Your LLM will thank you
- Read the docs: Seriously, they're pretty good

## Real Example: Scraping Claude's Documentation 🤖

Want to give Claude its own documentation? Here's how to scrape, process, and
bundle the Anthropic docs:

### The Full Pipeline

```bash
# 1. Download Claude's documentation
m1f-scrape https://docs.anthropic.com -o ./claude-docs-html \
  --max-pages 200 \
  --max-depth 4 \
  --request-delay 1.0

# 2. Analyze the HTML structure to find the best selectors
m1f-html2md analyze ./claude-docs-html/*.html --suggest-selectors

# 3. Convert to clean Markdown (adjust selectors based on analysis)
m1f-html2md convert ./claude-docs-html -o ./claude-docs-md \
  --content-selector "main.docs-content, article.documentation" \
  --ignore-selectors "nav" ".sidebar" ".footer" ".search-box"

# 4. Create the mega-bundle for Claude
m1f -s ./claude-docs-md -o claude-documentation.txt \
  --remove-scraped-metadata \
  --separator-style MachineReadable

# 5. Check if it fits (Claude can handle 200k tokens)
m1f-token-counter ./claude-documentation.txt
```

### Or Use the One-Liner Pro Move™

```bash
# Configure once
cat > claude-docs-config.yml << EOF
bundles:
  claude-docs:
    description: "Claude API Documentation"
    output: ".ai-context/claude-complete-docs.txt"
    sources:
      - path: "./claude-docs-md"
        include_extensions: [".md"]
    separator_style: "MachineReadable"
    priority: "high"
EOF

# Then auto-bundle whenever you need fresh docs
./scripts/auto_bundle.sh claude-docs
```

### The Result?

Now you can literally tell Claude: "Hey, here's your complete documentation" and
paste the entire context. Perfect for:

- Building Claude-powered tools with accurate API knowledge
- Creating Claude integration guides
- Having Claude help debug its own API calls
- Getting Claude to write better prompts for itself (meta!)

```bash
# Example usage in your prompt:
"Based on your documentation below, help me implement a streaming response handler:
[contents of claude-documentation.txt]"
```

### Pro tip: Keep It Fresh 🌿

Set up a weekly cron job to re-scrape and rebuild:

```bash
# Add to your crontab
0 0 * * 0 cd /path/to/m1f && ./scripts/scrape-claude-docs.sh
```

Where `scrape-claude-docs.sh` contains the full pipeline above.

## License

Apache 2.0 - Go wild, just don't blame us.

---

Built with ❤️ by [Franz Agency](https://franz.agency) for developers who talk to
robots.

========================================================================================
== FILE: m1f-claude.txt
== DATE: 2025-06-12 12:50:58 | SIZE: 7.71 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: 6bd52106e2bdd8badbc266d750e1ce96d97e0af3acbdf131c44b39d486ac3ebc
========================================================================================
# m1f-claude.txt: Essential m1f Guide for Claude

This is a focused guide for Claude to help you set up and use m1f effectively in any project.

## Quick Start

m1f (Make One File) combines multiple files into a single reference file - perfect for providing context to AI assistants like Claude.

### Basic Usage

```bash
# Simple bundling
m1f -s . -o output.txt

# Bundle specific file types
m1f -s . -o code.txt --include-extensions .py .js .ts

# Use presets for smart processing
m1f -s . -o bundle.txt --preset web-project
```

## CRITICAL: Directory Context Issue

**IMPORTANT**: When m1f is installed globally, it runs from its installation directory, NOT your current directory. This causes path issues.

### Workarounds:

1. **Use Python module directly** (RECOMMENDED):
   ```bash
   m1f -s . -o output.txt
   ```

2. **Create local wrapper script** in your project:
   ```bash
   #!/bin/bash
   # Save as: m1f-local
   python /path/to/m1f/tools/m1f.py "$@"
   ```

3. **Use absolute paths**:
   ```bash
   m1f -s /absolute/path/to/project -o /absolute/path/to/output.txt
   ```

## Setting Up Auto-Bundling

Auto-bundling creates predefined bundles automatically. Essential for maintaining up-to-date context files.

### 1. Create `.m1f.config.yml` in your project root:

```yaml
# .m1f.config.yml
bundles:
  # Complete project overview
  complete:
    description: "Complete project bundle for initial AI context"
    sources:
      - path: "."
    output: "m1f/1_complete.txt"
    separator_style: "MachineReadable"
    filters:
      max_file_size: "100KB"
      exclude_extensions: [".log", ".tmp"]
    
  # Documentation only
  docs:
    description: "All documentation files"
    sources:
      - path: "."
    output: "m1f/2_docs.txt"
    separator_style: "Markdown"
    filters:
      include_extensions: [".md", ".rst", ".txt"]
      max_file_size: "50KB"
    
  # Source code focus
  code:
    description: "Source code for debugging"
    sources:
      - path: "src"
      - path: "lib"
    output: "m1f/3_code.txt"
    separator_style: "MachineReadable"
    filters:
      include_extensions: [".py", ".js", ".ts", ".jsx", ".tsx"]
      exclude_patterns:
        - "**/__pycache__/**"
        - "**/node_modules/**"
        - "**/*.test.*"
        - "**/*.spec.*"

# Global settings
global:
  exclude_patterns:
    - "**/.git/**"
    - "**/.venv/**"
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/__pycache__/**"
    - "**/*.pyc"
    - "**/.env*"
  
  security_check:
    default_level: "detect"
    file_types:
      ".env": "error"
      ".yml": "warn"
      ".json": "warn"
```

### 2. Create m1f output directory:

```bash
mkdir -p m1f
echo "m1f/" >> .gitignore  # Don't commit generated bundles
```

### 3. Generate bundles:

```bash
# List available bundles
m1f auto-bundle --list

# Generate all bundles
m1f-update

# Generate specific bundle
m1f-update code
```

## Preset Files

Presets enable file-specific processing (minification, comment removal, etc.).

### 1. Create preset file in your project:

```yaml
# myproject.m1f-presets.yml
name: "MyProject"
description: "Custom processing for my project"

# File-specific processors
file_processors:
  # Minify JavaScript
  "**/*.js":
    - minify_js
  
  # Compress CSS
  "**/*.css":
    - minify_css
    - compress_whitespace
  
  # Clean Python files
  "**/*.py":
    - remove_comments
    - strip_empty_lines
  
  # Process JSON
  "**/*.json":
    - minify_json

# Security settings
security:
  # Scan for secrets
  detect_secrets: true
  
  # Patterns to flag as errors
  error_patterns:
    - "password.*=.*['\"].*['\"]"
    - "api[_-]?key.*=.*['\"].*['\"]"
    - "secret.*=.*['\"].*['\"]"

# Encoding preferences
encoding:
  # Auto-detect encoding
  auto_detect: true
  
  # Preferred output encoding
  output_encoding: "utf-8"
  
  # Fallback encoding
  fallback_encoding: "utf-8"
```

### 2. Use the preset:

```bash
m1f -s . -o output.txt --preset myproject.m1f-presets.yml
```

## Best Practices for AI Context

### 1. Keep bundles focused and under 100KB:
```yaml
bundles:
  api:
    sources: [{ path: "api" }]
    output: "m1f/api.txt"
    filters: { max_file_size: "50KB" }
  
  frontend:
    sources: [{ path: "frontend/src" }]
    output: "m1f/frontend.txt"
    filters: { max_file_size: "50KB" }
```

### 2. Use appropriate separator styles:
- `MachineReadable`: Best for extraction/parsing
- `Markdown`: Best for human/AI reading
- `Standard`: Simple and clean
- `None`: When you just need content

### 3. Create task-specific bundles:
```yaml
bundles:
  bug_fix:
    description: "Files related to current bug"
    sources:
      - path: "src/auth"
      - path: "tests/auth"
    output: "m1f/bug_context.txt"
  
  new_feature:
    description: "Files for new feature development"
    sources:
      - path: "src/components"
      - path: "docs/api"
    output: "m1f/feature_context.txt"
```

## Common Patterns

### WordPress Project
```yaml
bundles:
  theme:
    sources: [{ path: "wp-content/themes/mytheme" }]
    output: "m1f/theme.txt"
    preset: "wordpress"
    filters:
      exclude_patterns: ["**/node_modules/**", "**/vendor/**"]
```

### Python Project
```yaml
bundles:
  core:
    sources: [{ path: "src" }]
    output: "m1f/core.txt"
    filters:
      include_extensions: [".py"]
      exclude_patterns: ["**/__pycache__/**", "**/*.pyc"]
```

### React/Vue/Angular Project
```yaml
bundles:
  components:
    sources: [{ path: "src/components" }]
    output: "m1f/components.txt"
    filters:
      include_extensions: [".jsx", ".tsx", ".vue"]
      exclude_patterns: ["**/*.test.*", "**/*.spec.*"]
```

## Troubleshooting

### "Path traversal detected" error
- m1f is running from its installation directory
- Use workarounds mentioned above

### Bundle too large
- Add `max_file_size` filter
- Split into multiple focused bundles
- Exclude test files and dependencies

### Encoding issues
- Add `--prefer-utf8` flag
- Set `encoding.auto_detect: true` in preset

### Auto-bundle not finding config
- Ensure `.m1f.config.yml` is in project root
- Check YAML syntax is valid
- Use `m1f auto-bundle --list` to verify

## Integration with Claude

### 1. Reference bundles in CLAUDE.md:
```markdown
# CLAUDE.md

## Available Context Files
- `@m1f/1_complete.txt` - Full project overview
- `@m1f/2_docs.txt` - All documentation
- `@m1f/3_code.txt` - Source code only

Use these with @ mentions for instant context.
```

### 2. Keep bundles updated:
```bash
# Add to git pre-commit hook
m1f-update --quiet

# Or use file watcher
./scripts/watch_and_bundle.sh
```

### 3. Optimize for Claude's context window:
- Keep individual bundles under 100KB
- Create topic-specific bundles
- Use clear, descriptive filenames
- Include file paths in separator style

## Quick Reference Card

```bash
# Install m1f
git clone https://github.com/FranzForstmayr/m1f.git
cd m1f && ./scripts/install.sh

# Basic commands
m1f -s . -o output.txt                    # Bundle current directory
m1f-update                                # Run auto-bundling
m1f auto-bundle --list                    # List available bundles
m1f-s1f -i bundle.txt -d extracted/       # Extract files from bundle

# With presets
m1f -s . -o out.txt --preset wordpress    # Use WordPress preset
m1f -s . -o out.txt --preset mypreset.yml # Use custom preset

# Common flags
--include-extensions .py .js              # Only specific file types
--exclude-patterns "**/test/**"           # Exclude patterns
--max-file-size 100KB                     # Limit file sizes
--separator-style Markdown                # Human-readable output
--force                                   # Overwrite existing
--minimal-output                          # Less verbose
--prefer-utf8                             # Handle encoding issues
```

Remember: Always use absolute paths or run from m1f directory when using global installation!

========================================================================================
== FILE: requirements.txt
== DATE: 2025-06-14 23:08:39 | SIZE: 1.11 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: 8156c150273d0dfd91791473ee84fdac3401a1254d8a85e5031e3ebfe2cc18af
========================================================================================
aiohttp==3.10.11
application_properties==0.8.2
black==25.1.0
certifi==2025.4.26
chardet==5.2.0
charset-normalizer==3.4.2
click==8.2.0
colorama==0.4.6
Columnar==1.4.1
detect-secrets==1.5.0
idna==3.10
iniconfig==2.1.0
markdownify==0.14.1
beautifulsoup4==4.12.3
html5lib==1.1
mypy_extensions==1.1.0
packaging==25.0
pathspec==0.12.1
platformdirs==4.3.8
pluggy==1.6.0
pydantic==2.5.3
pymarkdownlnt==0.9.29
pytest==8.3.5
pytest-timeout==2.4.0
pytest-asyncio==0.25.2
PyYAML==6.0.2
regex==2024.11.6
requests==2.32.4
rich==13.7.0
tiktoken==0.9.0
tomli==2.2.1
toolz==1.0.0
typing_extensions==4.13.2
urllib3==2.4.0
wcwidth==0.2.13

# Async file operations
aiofiles==24.1.0
anyio==4.9.0

# Claude Code SDK for m1f-claude
claude-code-sdk>=0.0.10

# Optional dependencies for additional scrapers
# Install with: pip install httpx selectolax
httpx==0.27.2
selectolax==0.3.26

# Optional: Better BeautifulSoup parser
# Install with: pip install lxml
lxml==5.3.0

# Install with: pip install scrapy
scrapy==2.12.0

# Install with: pip install playwright && playwright install
playwright==1.50.0

# Test server dependencies
flask==3.1.1
flask-cors==6.0.0

========================================================================================
== FILE: SETUP.md
== DATE: 2025-06-13 11:39:27 | SIZE: 4.92 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 85b3fefaed65e03121cfb5ae6543fe60ef5069fa90f5ac432cb29da7e2ed1a40
========================================================================================
# m1f Setup Guide

## Prerequisites

You only need:

- **Python 3.10+** (check with `python --version` or `python3 --version`)
- **Git** (to clone the repository)

That's all! The installer handles everything else.

## Installation (3 Commands!)

### Linux/macOS

```bash
git clone https://github.com/franz-agency/m1f.git
cd m1f
source ./scripts/install.sh
```

**Important**: Use `source` (not just `./scripts/install.sh`) to activate
commands immediately!

### Windows

```powershell
git clone https://github.com/franz-agency/m1f.git
cd m1f
.\scripts\install.ps1
```

Then either:

- Restart PowerShell (recommended), or
- Reload profile: `. $PROFILE`

## What the Installer Does

The installation script automatically:

- ✅ Checks Python version (3.10+ required)
- ✅ Creates virtual environment
- ✅ Installs all dependencies
- ✅ Generates initial m1f bundles
- ✅ Adds commands to your PATH
- ✅ Creates global command shortcuts
- ✅ Sets up symlinks (optional)

## Test Your Installation

```bash
m1f --help
m1f-update
```

## Available Commands

After installation, these commands are available globally:

- `m1f` - Main tool for combining files
- `m1f-s1f` - Split combined files back to original structure
- `m1f-html2md` - Convert HTML to Markdown
- `m1f-scrape` - Download websites for offline viewing
- `m1f-token-counter` - Count tokens in files
- `m1f-update` - Regenerate all m1f bundles
- `m1f-link` - Link m1f documentation for AI tools (Claude Code, etc.)
- `m1f-claude` - Enhance prompts with m1f knowledge for Claude
- `m1f-help` - Show help for all commands

## Uninstall

### Linux/macOS

```bash
cd /path/to/m1f
./scripts/uninstall.sh
```

### Windows

```powershell
cd C:\path\to\m1f
.\scripts\setup_m1f_aliases.ps1 -Remove
```

---

## Manual Installation (Advanced)

If you prefer to install manually or the automatic installation fails:

### 1. Prerequisites

- Python 3.10 or higher
- Git
- pip

### 2. Clone and Setup Virtual Environment

```bash
git clone https://github.com/franz-agency/m1f.git
cd m1f

# Create virtual environment
python3 -m venv .venv

# Activate virtual environment
# Linux/macOS:
source .venv/bin/activate
# Windows PowerShell:
.\.venv\Scripts\Activate.ps1
# Windows cmd:
.venv\Scripts\activate.bat

# Install dependencies
pip install -r requirements.txt
```

### 3. Generate Initial Bundles

```bash
m1f-update
```

### 4. Add to PATH

#### Linux/macOS

Add to your shell configuration file (`~/.bashrc` or `~/.zshrc`):

```bash
export PATH="/path/to/m1f/bin:$PATH"  # m1f tools
```

Then reload:

```bash
source ~/.bashrc  # or ~/.zshrc
```

#### Windows

**Option A: PowerShell Functions**

Run the setup script:

```powershell
.\scripts\setup_m1f_aliases.ps1
. $PROFILE
```

**Option B: Add to System PATH**

1. Create batch files in a directory (e.g., `C:\m1f\batch\`)
2. Add that directory to your system PATH:
   - Win + X → System → Advanced system settings
   - Environment Variables → Path → Edit → New
   - Add your batch directory path

Example batch file (`m1f.bat`):

```batch
@echo off
cd /d "C:\path\to\m1f"
call .venv\Scripts\activate.bat
m1f %*
```

Create similar batch files for:

- `m1f-s1f.bat` → `m1f-s1f %*`
- `m1f-html2md.bat` → `m1f-html2md %*`
- `m1f-scrape.bat` → `m1f-scrape %*`
- `m1f-token-counter.bat` → `m1f-token-counter %*`

## Using m1f in Other Projects

### Quick Setup for AI-Assisted Development

When using AI tools like Claude Code, Cursor, or GitHub Copilot in your project,
they need to understand how m1f works to help you effectively. The `m1f-link`
command provides this context:

```bash
cd /your/project
m1f-link
```

This creates `m1f/m1f.txt` - a symlink to the complete m1f documentation
that AI tools can read.

#### Example AI Prompts:

```bash
# Ask Claude Code to create a configuration
"Please read @m1f/m1f.txt and create a .m1f.config.yml
for my Python web project"

# Get help with specific use cases
"Based on @m1f/m1f.txt, how do I exclude all test
files but include fixture data?"

# Troubleshoot issues
"I'm getting this error: [error message]. Can you check
@m1f/m1f.txt to help me fix it?"
```

The AI will understand:

- All m1f commands and parameters
- How to create `.m1f.config.yml` files
- Preset system and file processing options
- Best practices for different project types

## Troubleshooting

### Python Version Error

Install Python 3.10+ from [python.org](https://python.org)

### PowerShell Execution Policy (Windows)

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

### Command Not Found

- Linux/macOS: Make sure you've run `source ~/.bashrc` (or `~/.zshrc`)
- Windows: Restart PowerShell or Command Prompt

### Permission Errors

- Linux/macOS: Make sure scripts are executable: `chmod +x scripts/*.sh`
- Windows: Run PowerShell as Administrator if needed

## Next Steps

- Read the
  [M1F Development Workflow](docs/01_m1f/04_m1f_development_workflow.md)
- Check out example presets in `presets/`
- Run `m1f --help` to explore options

========================================================================================
== FILE: test_output_dirlist.txt
== DATE: 2025-06-15 18:24:41 | SIZE: 0 B | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
========================================================================================

========================================================================================
== FILE: test_output_filelist.txt
== DATE: 2025-06-15 18:24:41 | SIZE: 10 B | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: d0919d5bb7576d4b1a495856f1e561985d1063a8e22c74dfb90a5267c165331d
========================================================================================
README.md

========================================================================================
== FILE: docs/README.md
== DATE: 2025-06-12 12:50:58 | SIZE: 4.19 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 59021153d5f485dc689e498ae962e0f7f545c1897b9d28b468f03b3c529c83ad
========================================================================================
# m1f Documentation

This directory contains detailed documentation for the m1f project v3.2.0.

## Contents

### Core Tools

- [m1f (Make One File)](01_m1f/00_m1f.md) - Documentation for the main tool that
  combines multiple files into a single file with content deduplication and
  async I/O
- [s1f (Split One File)](02_s1f/20_s1f.md) - Documentation for the tool that
  extracts individual files from a combined file with modern Python architecture
- [token_counter](99_misc/98_token_counter.md) - Documentation for the token
  estimation tool

### Web Scraping and HTML Conversion

- [webscraper](04_scrape/40_webscraper.md) - Download websites for offline
  viewing and processing
- [html2md Overview](03_html2md/30_html2md.md) - Comprehensive guide to the HTML
  to Markdown converter
- [html2md Guide](03_html2md/31_html2md_guide.md) - Detailed usage guide with
  examples
- [html2md Test Suite](03_html2md/33_html2md_test_suite.md) - Documentation for
  the comprehensive test suite

### Advanced Features

- [Auto Bundle Guide](01_m1f/20_auto_bundle_guide.md) - Automatic project
  bundling for AI/LLM consumption
- [Claude + m1f Workflows](01_m1f/30_claude_workflows.md) - Turn Claude into
  your personal m1f expert with smart prompt enhancement
- [Claude Code Integration](01_m1f/31_claude_code_integration.md) - Optional
  AI-powered tool automation
- [Preset System Guide](01_m1f/10_m1f_presets.md) - File-specific processing
  rules and configurations
- [Per-File-Type Settings](01_m1f/11_preset_per_file_settings.md) - Fine-grained
  control over file processing

### Development

- [Version Management](05_development/55_version_management.md) - Version
  management and release process
- [Git Hooks Setup](05_development/56_git_hooks_setup.md) - Git hooks for
  automated bundling

## Quick Navigation

### Common Workflows

- **First-time setup**: Install Python 3.10+ and requirements:
  ```bash
  python -m venv .venv
  source .venv/bin/activate  # On Windows: .venv\Scripts\activate
  pip install -r requirements.txt
  ```
- **Basic file combination**: Use
  `m1f -s ./your_project -o ./combined.txt`
- **File extraction**: Use
  `m1f-s1f -i ./combined.txt -d ./extracted_files`
- **Check token count**: Use `m1f-token-counter ./combined.txt`
- **Download website**: Use
  `m1f-scrape https://example.com -o ./html`
- **Convert HTML to Markdown**: Use
  `m1f-html2md convert ./html ./markdown`
- **Auto-bundle project**: Use `./scripts/auto_bundle.sh` or configure with
  `.m1f.config.yml`

### Key Concepts

- **Separator Styles**: Different formats for separating files in the combined
  output ([details](01_m1f/00_m1f.md#separator-styles))
- **File Filtering**: Include/exclude specific files using patterns
  ([details](01_m1f/00_m1f.md#command-line-options))
- **Security**: Scan for secrets before combining files
  ([details](01_m1f/00_m1f.md#security-check))
- **Content Selection**: Extract specific content using CSS selectors
  ([details](03_html2md/30_html2md.md#content-selection))

## Project Overview

m1f v2.0.0 is a comprehensive toolkit designed to help you work more efficiently
with Large Language Models (LLMs) by managing context. Built with modern Python
3.10+ architecture, these tools solve core challenges when working with AI
assistants.

### Key Features

- **Modern Architecture**: Complete modular rewrite with async I/O, type hints,
  and clean architecture
- **Content Deduplication**: Automatically detect and skip duplicate files based
  on SHA256 checksums
- **Performance**: Async operations and parallel processing for large projects
- **Type Safety**: Full type annotations for better IDE support and fewer
  runtime errors
- **Professional Tools**: HTTrack integration for website scraping, CSS
  selectors for content extraction

### What You Can Do

- Combine multiple project files into a single reference file with automatic
  deduplication
- Extract individual files from a combined file with preserved structure and
  metadata
- Convert entire websites to clean Markdown format with HTTrack integration
- Filter files by size, type, or custom patterns
- Detect and handle symlinks with cycle prevention
- Remove scraped metadata for clean documentation bundles
- Estimate token usage for optimal LLM context planning

========================================================================================
== FILE: docs/99_CHANGELOG.md
== DATE: 2025-06-15 18:18:00 | SIZE: 34.99 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: e5e21f025a52530a3b842ef70a431d45e9e24527232711ad836c9624cb9ddefa
========================================================================================
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to
[Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added

- **--docs-only Parameter**: New command-line flag for documentation-only bundles
  - Filters to include only 62 documentation file extensions
  - Simplifies command: `m1f -s . -o docs.txt --docs-only`
  - Replaces verbose `--include-extensions` with 62 extensions
  - Available in presets via `docs_only: true` configuration
  - Overrides include-extensions when set

- **Documentation File Extensions**: Centralized definition in constants.py
  - Added DOCUMENTATION_EXTENSIONS constant with 62 file extensions
  - Added UTF8_PREFERRED_EXTENSIONS constant with 45 UTF-8 preferred formats
  - Includes man pages, markup formats, text files, and developer docs
  - Removed binary formats (.doc, .so) that were incorrectly included
  - Added is_documentation_file() utility function for consistent checks
  - Updated encoding handler to use centralized UTF-8 preference list
  - Documentation extensions now available system-wide for all tools

- **m1f-claude --init Improvements**: Enhanced project initialization process
  - **Streamlined Workflow**: Automatic bundle creation without Claude dependency
    - Automatically creates complete.txt bundle with all project files
    - Automatically creates docs.txt bundle with 62 documentation extensions
    - Uses --docs-only parameter for efficient documentation bundling
    - Claude Code only invoked for advanced topic-specific segmentation
    - Simplified workflow: git clone → m1f-link → m1f-claude --init → done!
  - **Verbose Mode**: Added `--verbose` flag to show prompts and command parameters
    - Displays complete Claude Code command with permissions
    - Shows full prompt being sent for debugging
    - Helps troubleshoot initialization issues
  - **Project Analysis Files**: Create and preserve analysis artifacts in m1f/ directory
    - Generates `project_analysis_filelist.txt` with all project files
    - Generates `project_analysis_dirlist.txt` with directory structure
    - Files are kept for reference (no cleanup)
    - Respects .gitignore patterns during analysis
    - Explicitly excludes m1f/ directory to prevent recursion
  - **Better Bundle Strategy**: Improved initialization prompts for project-specific configs
    - Explicit instruction to read @m1f/m1f.txt documentation first
    - Removed global file size limits from defaults
    - Added proper meta file exclusions (LICENSE*, CLAUDE.md, *.lock)
    - Clear rules against creating test bundles when no tests exist
    - Emphasis on logical segmentation (complete/docs/code/components/config/styles)
    - Clarified that dotfiles are excluded by default
    - Added vendor/ to example excludes for PHP projects
  - **Clearer Instructions**: Made prompts more explicit about modifying files
    - Emphasizes that basic config is just a starter needing enhancement
    - Requires 3-5 project-specific bundles minimum
    - Explicit instruction to use Edit/MultiEdit tools
    - Stronger language about actually modifying the config file

- **m1f-claude Enhancements**: Major improvements for intelligent m1f setup assistance
  - **Session Persistence**: Implemented proper conversation continuity using Claude CLI's `-r` flag
    - Each conversation maintains its own session ID
    - Multiple users can work in the same directory simultaneously
    - Session IDs are extracted from JSON responses and reused
  - **Streaming Output**: Real-time feedback with `--output-format stream-json`
    - Shows Claude's responses as they arrive
    - Displays tool usage in debug mode
    - Provides immediate visual feedback during processing
  - **Tool Permissions**: Added `--allowedTools` parameter with sensible defaults
    - Default tools: Read, Edit, MultiEdit, Write, Glob, Grep, Bash
    - Customizable via `--allowed-tools` command line argument
    - Enables file operations and project analysis
  - **Enhanced Prompt System**: Sophisticated prompt enhancement for m1f setup
    - Deep thinking task list approach for systematic m1f configuration
    - Detects when users want to set up m1f (various phrase patterns)
    - Provides 5-phase task list: Analysis, Documentation Study, Design, Implementation, Validation
    - Always references @m1f/m1f.txt documentation (5+ references per prompt)
    - Detects and prioritizes AI context files (CLAUDE.md, .cursorrules, .windsurfrules)
    - Project-aware recommendations based on detected frameworks
    - Line-specific documentation references for key sections
  - **Debug Mode**: Added `--debug` flag for detailed output
    - Shows session IDs, costs, and API usage
    - Displays tool invocations and responses
    - Helps troubleshoot issues and monitor usage
  - **Interactive Mode UX**: Improved visual feedback
    - "Claude is thinking..." indicator during processing
    - Tool usage notifications: `[🔧 Using tool: Read]`
    - Response completion indicator: `[✅ Response complete]`
    - Better prompt spacing with newlines before "You:"
    - Clear separation between responses and new prompts
    - Interaction counter: prompts to continue after every 10 exchanges
    - Ctrl-C signal handling for graceful cancellation
    - Tool output preview: shows abbreviated results from Claude's tool usage
    - Emphasis on Standard separator (not Markdown) for AI-optimized bundles
  - **Exit Command**: Added `/e` command support like Claude CLI
    - Works alongside 'quit', 'exit', and 'q' commands
    - Updated help text and keyboard interrupt messages
  - **Initialization Command**: Fixed `--init` command async/await issues
    - Resolved RuntimeError with cancel scope in different task
    - Added graceful handling of missing 'cost_usd' field in Claude SDK responses
    - Implemented proper anyio task group management for async operations
    - Enhanced error handling with debug logging for SDK issues
    - Fixed subprocess hanging by displaying prompts for manual use instead of programmatic execution

### Changed

- **m1f-claude --init Workflow**: Completely redesigned initialization process
  - Now automatically creates complete.txt and docs.txt bundles without Claude
  - Generates .m1f.config.yml with both bundles pre-configured
  - Uses new --docs-only parameter for documentation bundle creation
  - Claude Code only used for advanced topic-specific segmentation
  - Simplified workflow: git clone → m1f-link → m1f-claude --init → done!

- **Dependencies**: Updated claude-code-sdk to use flexible version constraint
  - Changed from `claude-code-sdk==0.0.10` to `claude-code-sdk>=0.0.10`
  - Ensures automatic updates to latest compatible versions
  - Maintains backward compatibility with current version

- **m1f-claude Architecture**: Switched from SDK to subprocess for better control
  - Uses Claude CLI directly with proper session management
  - More reliable than the SDK for interactive sessions
  - Better error handling and fallback mechanisms
  - Removed misleading "subprocess fallback" message (it's the primary method now)

### Fixed

- **m1f-claude --init Command**: Fixed Claude Code subprocess execution
  - Resolved parameter ordering issue with `--add-dir` flag
  - Changed from stdin-based prompt delivery to `-p` parameter method
  - Implemented fallback to display manual command when subprocess hangs
  - Now shows clear instructions for manual execution with proper parameters
  - Ensures Claude has directory access permissions for file operations


- **PowerShell Installation**: Fixed missing m1f_aliases.ps1 file
  - Created m1f_aliases.ps1 with all PowerShell functions and aliases
  - Added file existence check in setup_m1f_aliases.ps1 before sourcing
  - Fixed hardcoded path issue that caused PowerShell profile errors
  - Now uses correct relative paths based on actual m1f installation location
  - Added PowerShell profile path to warning message for easier debugging

- **m1f-claude Project Name Extraction**: Fixed regex patterns that were failing to extract project names
  - Replaced complex regex patterns with backreferences that were causing incorrect matches
  - Added simpler, more specific patterns for different name formats (quoted, unquoted, possessive)
  - Fixed issue where project names were always extracted as empty strings
  - Now correctly handles formats like "project called 'awesome-app'", "project named MyWebApp", "company's main project"

### Dependencies

- Added required dependencies for m1f-claude:
  - anyio==4.9.0 (async support)
  - claude-code-sdk==0.0.10 (Claude integration)

## [3.2.2] - 2025-07-06

### Changed

- **Documentation**: Updated all command examples to use installed bin commands
  - Replaced `python -m tools.m1f` with `m1f`
  - Replaced `python -m tools.s1f` with `m1f-s1f`
  - Replaced `python -m tools.scrape_tool` and `python -m tools.webscraper` with `m1f-scrape`
  - Replaced `python -m tools.html2md` and `python -m tools.html2md_tool` with `m1f-html2md`
  - Replaced `python tools/token_counter.py` with `m1f-token-counter`
  - Replaced `m1f auto-bundle` with `m1f-update` where appropriate
  - Updated all documentation, scripts, and examples for consistency

### Fixed

- **Scraper Config Files**: Fixed typo in YAML configs (mf1-html2md → m1f-scrape)
- **Documentation**: Improved command consistency across all user-facing documentation

## [3.2.1] - 2025-06-07

### Fixed

- **Wrapper Scripts**: Added PYTHONPATH to all wrapper scripts to ensure proper module imports
- **Pre-commit Hook**: Updated to use python3 and properly handle virtual environments
- **Bin Scripts**: All wrapper scripts now preserve current working directory

## [3.2.0] - 2025-06-06

### Added

- **Git Hooks Integration**: Automatic bundle generation on every commit

  - Pre-commit hook that runs `m1f auto-bundle` before each commit
  - Installation script with remote download support:
    `curl -sSL https://raw.githubusercontent.com/franzundfranz/m1f/main/scripts/install-git-hooks.sh | bash`
  - Auto-detection of m1f development repository vs. installed m1f
  - Automatic staging of generated bundles in `m1f/` directory
  - Comprehensive setup guide at `docs/05_development/56_git_hooks_setup.md`

- **Bundle Directory Migration**: Moved from `.m1f/` to `m1f/` for better AI
  tool compatibility

  - AI tools like Claude Code can now access bundled files directly
  - Generated bundles are included in version control by default
  - Automatic migration of configuration paths
  - Updated `m1f-link` command to create symlinks in `m1f/` directory
  - Added `m1f/README.md` explaining auto-generated files

- **Complete Preset Parameter Support**: ALL m1f parameters can now be
  configured via presets

  - Input/Output settings: source_directory, input_file, output_file,
    input_include_files
  - Output control: add_timestamp, filename_mtime_hash, force, minimal_output,
    skip_output_file
  - Archive settings: create_archive, archive_type
  - Runtime behavior: verbose, quiet
  - CLI arguments always take precedence over preset values
  - Enables simple commands like `m1f --preset production.yml`
  - Updated template-all-settings.m1f-presets.yml with all new parameters
  - Full documentation in docs/01_m1f/12_preset_reference.md

- **Auto-Bundle Subcommand**: Integrated auto-bundle functionality directly into
  m1f

  - New `auto-bundle` subcommand for creating multiple bundles from YAML config
  - Reads `.m1f.config.yml` from project root
  - Supports creating all bundles or specific bundles by name
  - `--list` option to show available bundles with descriptions
  - `--verbose` and `--quiet` options for output control
  - `m1f-update` command provides convenient access from anywhere
  - Full compatibility with existing `.m1f.config.yml` format
  - Supports all m1f options: presets, exclude/include files, conditional
    bundles
  - Updated `watch_and_bundle.sh` to use new auto-bundle functionality

- **Simplified Installation System**: Complete installer scripts for all
  platforms

  - New `install.sh` handles entire setup process (3 commands total!)
  - New `install.ps1` for Windows with full automation
  - Automatic Python 3.10+ version checking
  - Virtual environment creation and dependency installation
  - Initial bundle generation during setup
  - Smart shell detection for immediate PATH activation
  - `uninstall.sh` for clean removal

- **PATH-based Command System**: Replaced aliases with executable wrappers

  - Created `bin/` directory with standalone executable scripts
  - Each wrapper activates venv and runs appropriate tool
  - Works consistently across all shells and platforms
  - Optional symlink creation in ~/.local/bin

- **m1f-claude Command**: Smart prompt enhancement for Claude AI

  - New `m1f-claude` command that enhances prompts with m1f knowledge
  - Automatically injects m1f documentation context into prompts
  - Interactive mode for continued conversations
  - Project structure analysis for better suggestions
  - Contextual hints based on user intent (bundling, config, WordPress, AI
    context)
  - Integration with Claude Code CLI (if installed)
  - Comprehensive workflow guide at docs/01_m1f/30_claude_workflows.md

- **Enhanced Auto-Bundle Functionality**: Improved usability and flexibility

  - Config file search now traverses from current directory up to root
  - New `--group` parameter to create bundles by group (e.g.,
    `m1f auto-bundle --group documentation`)
  - Bundle grouping support in `.m1f.config.yml` with `group: "name"` field
  - Improved error messages when config file is not found
  - Enhanced `--list` output showing bundles organized by groups
  - Comprehensive documentation in `docs/01_m1f/20_auto_bundle_guide.md`
  - Examples for server-wide bundle management and automation

- **Join Paragraphs Feature**: Markdown optimization for LLMs

  - New `JOIN_PARAGRAPHS` processing action to compress markdown
  - Intelligently joins multi-line paragraphs while preserving structure
  - Preserves code blocks, tables, lists, and other markdown elements
  - Helps maximize content in the first 200 lines that LLMs read intensively
  - Available in presets for documentation bundles

- **S1F List Command**: Display archive contents without extraction

  - New `--list` flag to show files in m1f archives
  - Displays file information including size, encoding, and type
  - No longer shows SHA256 hashes for cleaner output
  - Useful for previewing archive contents before extraction

- **Configurable UTF-8 Preference**: Made UTF-8 encoding preference for text
  files configurable

  - Added `prefer_utf8_for_text_files` option to EncodingConfig (defaults to
    True)
  - New CLI flag `--no-prefer-utf8-for-text-files` to disable UTF-8 preference
  - Configurable via preset files through `prefer_utf8_for_text_files` setting
  - Affects only text files (.md, .markdown, .txt, .rst) when encoding detection
    is ambiguous

- **Configurable Content Deduplication**: Made content deduplication optional
  - Added `enable_content_deduplication` option to OutputConfig (defaults to
    True)
  - New CLI flag `--allow-duplicate-files` to include files with identical
    content
  - Configurable via preset files through `enable_content_deduplication` setting
  - Useful when you need to preserve all files regardless of duplicate content

### Fixed

- **Security**: Comprehensive path traversal protection across all tools

  - Added path validation to prevent directory traversal attacks
  - Block paths with `../` or `..\` patterns
  - Reject absolute paths in s1f extraction
  - Validate all user-provided file paths including symlink targets
  - Allow legitimate exceptions: home directory configs (~/.m1f/), output files

- **Markdown Format**: Fixed separator and content formatting issues

  - Content now properly starts on new line after code fence in markdown format
  - Added blank line between separator and content in parallel processing mode
  - Fixed S1F markdown parser to correctly handle language hint and newline
  - Fixed closing ``` for markdown format in parallel processing

- **S1F List Output**: Simplified file information display

  - Removed SHA256 hash display from list output
  - No longer shows "[Unknown]" for missing file sizes
  - Only displays file size when available

- **Standard Separator Format**: Removed checksum from display
  - Standard format now shows only file path without SHA256
  - Simplified output for better readability
  - Parser ignores separators inside code blocks to prevent false positives

### Changed

- **Parallel File Processing**: Enhanced performance for large projects

  - Added optional `--parallel` flag for concurrent file processing
  - Implemented asyncio-based batch handling with proper thread safety
  - Added locks for thread-safe checksum operations
  - Maintained file ordering in output despite parallel processing
  - Automatic fallback to sequential processing for single files

- **Auto-bundle config file** (`.m1f.config.yml`) updated with group
  categorization

  - Documentation bundles grouped under "documentation"
  - Source code bundles grouped under "source"
  - Complete project bundle in "complete" group

- **Command Naming Standardization**: All tools now use m1f- prefix

  - `s1f` → `m1f-s1f`
  - `html2md` → `m1f-html2md`
  - `webscraper` → `m1f-scrape`
  - `token-counter` → `m1f-token-counter`
  - Prevents naming conflicts with system commands

- **Module Execution**: Fixed import errors with proper module syntax

  - All scripts now use `python -m tools.m1f` format
  - Ensures reliable imports across different environments
  - Updated all documentation examples

- **WebScraper Rate Limiting**: Conservative defaults for Cloudflare protection

  - Changed default request delay from 0.5s to 15s
  - Reduced concurrent requests from 5 to 2
  - Added bandwidth limiting (100KB/s) and connection rate limits
  - Created cloudflare.yaml config with ultra-conservative 30s delays

- **Code Quality**: Comprehensive linting and formatting
  - Applied Black formatting to all Python code
  - Applied Prettier formatting to all Markdown files
  - Added/updated license headers across all source files
  - Removed deprecated test files and debug utilities

### Security

- **Path Traversal Protection**: Comprehensive validation across all tools

  - Prevents attackers from using paths like `../../../etc/passwd`
  - Validates resolved paths against project boundaries
  - Allows legitimate exceptions for configs and output files
  - Added extensive security tests

- **Scraper Security**: Enhanced security measures
  - Enforced robots.txt compliance with caching
  - Added URL validation to prevent SSRF attacks
  - Basic JavaScript validation to block dangerous scripts
  - Sanitized command arguments in HTTrack to prevent injection

### Improved

- **HTML2MD Enhancement**: Better file path handling

  - Improved source path logic for file inputs
  - Enhanced relative path resolution for edge cases
  - Consistent output path generation with fallback mechanisms
  - Removed hardcoded Anthropic-specific navigation selectors

- **Encoding Detection**: Enhanced fallback logic

  - Default to UTF-8 if chardet fails or returns empty
  - Prefer UTF-8 over Windows-1252 for markdown files
  - Expanded encoding map for better emoji support
  - Better handling of exotic encodings

- **Async I/O Support**: Performance optimizations

  - S1F now supports optional aiofiles for async file reading
  - Better handling of deprecated asyncio methods
  - Improved concurrent operation handling

- **Testing Infrastructure**: Comprehensive test improvements
  - Reorganized test structure for better clarity
  - Added path traversal security tests
  - Fixed all test failures (100% success rate)
  - Added pytest markers for test categorization
  - Improved test documentation

### Removed

- Obsolete scripts replaced by integrated functionality:
  - `scripts/auto_bundle.py` (now `m1f auto-bundle`)
  - `scripts/auto_bundle.sh` (now `m1f auto-bundle`)
  - `scripts/auto_bundle.ps1` (now `m1f auto-bundle`)
  - `scripts/update_m1f_files.sh` (now `m1f-update`)
  - `setup_m1f_aliases.sh` (replaced by bin/ directory)
  - Deprecated test files and debug utilities (~3000 lines removed)

## [3.1.0] - 2025-06-04

### Added - html2md

- **Custom Extractor System**: Site-specific content extraction
  - Pluggable extractor architecture for optimal HTML parsing
  - Support for function-based and class-based extractors
  - Extract, preprocess, and postprocess hooks
  - Dynamic loading of Python extractor files
  - Default extractor for basic navigation removal
- **Workflow Integration**: Organized .scrapes directory structure
  - Standard directory layout: html/, md/, extractors/
  - .scrapes directory added to .gitignore
  - Supports Claude-assisted extractor development
- **CLI Enhancement**: `--extractor` option for custom extraction logic
- **API Enhancement**: Extractor parameter in Html2mdConverter constructor

### Changed - html2md

- Removed all Anthropic-specific code from core modules
- Cleaned up api.py to remove hardcoded navigation selectors
- Improved modularity with separate extractor system

### Added - m1f

- **Multiple Exclude/Include Files Support**: Enhanced file filtering
  capabilities
  - `exclude_paths_file` and `include_paths_file` now accept multiple files
  - Files are merged in order, non-existent files are gracefully skipped
  - Include files work as whitelists - only matching files are processed
  - Full backward compatibility with single file syntax
  - CLI supports multiple files: `--exclude-paths-file file1 file2 file3`
  - YAML config supports both single file and list syntax

### Changed

- Enhanced file processor to handle pattern merging from multiple sources
- Updated CLI arguments to accept multiple files with `nargs="+"`
- Improved pattern matching for exact path excludes/includes

## [3.0.1] - 2025-06-04

### Fixed

- **Configuration Parsing**: Fixed YAML syntax error in .m1f.config.yml
  - Corrected array item syntax in include_files sections
  - Removed erroneous hyphens within square bracket array notation

## [3.0.0] - 2025-06-03

### Added

- **Python-based auto_bundle.py**: Cross-platform bundling implementation
  - Pure Python alternative to shell scripts
  - Improved include-extensions handling
  - Dynamic watcher ignores based on configuration
  - Global excludes support
  - Better error handling and logging
- **Enhanced Bundling Configuration**: Advanced m1f.config.yml structure
  - Config-based directory setup
  - Refined source rules for s1f-code and all bundles
  - Improved path handling for m1f/s1f separation
- **Depth-based Sorting**: Files and directories now sorted by depth for better
  organization
- **Improved Documentation**: Comprehensive updates to m1f documentation
  - Added CLI reference and troubleshooting guides
  - Enhanced preset system documentation
  - Clarified script invocation methods
  - Added quick reference guides
- **Testing Improvements**: Enhanced asyncio handling across test suites
  - Better pytest configuration for async tests
  - Preset configuration support in scrapers
  - Fixed import and linting issues
- **License Change**: Migrated from MIT to Apache 2.0 License
  - Added NOTICE file with proper attribution
  - Updated all license references throughout codebase

### Changed

- **Refactored Web Scraping Architecture**: Separated webscraper from HTML2MD
  - Cleaner separation of concerns
  - Better modularity for each tool
  - Improved maintainability
- **Build System Enhancements**: Overhauled build configuration
  - Optimized bundling for tool segregation
  - Added quiet flag to suppress unnecessary log file creation
  - Enhanced PowerShell support with auto_bundle.ps1
- **Documentation Structure**: Reorganized docs for better navigation
  - Renamed files for improved sorting
  - Moved changelog to dedicated location
  - Updated all references to new structure

### Fixed

- **Script Issues**: Multiple fixes for auto-bundling scripts
  - Corrected include-extensions parameter handling
  - Fixed config file parsing and argument handling
  - Resolved path resolution issues
- **Test Errors**: All test suite issues resolved
  - Fixed async test handling
  - Corrected import statements
  - Resolved linting issues (Black and Markdown)
- **Configuration Issues**: Fixed various config problems
  - Corrected output paths in m1f.config.yml
  - Fixed switch handling in scripts
  - Updated autobundler configurations

### Dependencies

- Updated aiohttp to 3.10.11 for security and performance improvements
- Added new packages to support enhanced functionality

---

### Original 3.0.0 Features (from earlier development)

- **Pluggable Web Scraper Backends**: HTML2MD now supports multiple scraper
  backends for different use cases
  - **Selectolax** (httpx + selectolax): Blazing fast HTML parsing with minimal
    resource usage
  - **Scrapy**: Industrial-strength web scraping framework with middleware
    support
  - **Playwright**: Browser automation for JavaScript-heavy sites and SPAs
  - Each scraper is optimized for specific scenarios:
    - Selectolax: Maximum performance for simple HTML (20+ concurrent requests)
    - Scrapy: Complex crawling with retry logic, caching, and auto-throttle
    - Playwright: Full JavaScript execution with multiple browser support
  - CLI option `--scraper` to select backend (beautifulsoup, httrack,
    selectolax, scrapy, playwright)
  - Backend-specific configuration files in `scrapers/configs/`
  - Graceful fallback when optional dependencies are not installed

### Changed

- **HTML2MD Version**: Bumped to 3.0.0 for major feature addition
- **Scraper Architecture**: Refactored to plugin-based system with abstract base
  class
- **Documentation**: Comprehensive updates for all scraper backends with
  examples
- **CLI**: Extended to support new scraper options and configuration
- **HTTrack Integration**: Replaced Python HTTrack module with native Linux
  httrack command
  - Now uses real HTTrack command-line tool for professional-grade website
    mirroring
  - Better performance, reliability, and standards compliance
  - Requires system installation: `sudo apt-get install httrack`
  - Enhanced command-line options mapping for HTTrack features

### Documentation

- Added Web Scraper Backends Guide (`docs/html2md_scraper_backends.md`)
- Updated HTML2MD documentation with new scraper examples
- Added configuration examples for each scraper backend

## [2.1.1] - 2025-05-25

### Changed

- Small documentation update
- Improved example consistency across documentation
- Updated file paths in test fixtures
- Cleaned up outdated references

## [2.1.0] - 2025-05-25

### Added

- **Preset System**: Flexible file-specific processing rules

  - Hierarchical preset loading: global (~/.m1f/) → user → project
  - Global settings: encoding, separator style, line endings, includes/excludes
  - Extension-specific processing: HTML minification, CSS compression, comment
    stripping
  - Built-in actions: minify, strip_tags, strip_comments, compress_whitespace,
    remove_empty_lines
  - Custom processors: truncate, redact_secrets, extract_functions
  - CLI options: `--preset`, `--preset-group`, `--disable-presets`
  - Example presets: WordPress, web projects, documentation
  - **Per-file-type overrides**: Different settings for different extensions
    - `security_check`: Enable/disable security scanning per file type
    - `max_file_size`: Different size limits for CSS, JS, PHP, etc.
    - `remove_scraped_metadata`: Clean HTML2MD files selectively
    - `include_dot_paths`, `include_binary_files`: File-type specific filtering
  - **Auto-bundling with presets**: New scripts and VS Code tasks
    - `scripts/auto_bundle_preset.sh` - Preset-based intelligent bundling
    - `tasks/auto_bundle.json` - 11 VS Code tasks for automated bundling
    - Focus areas: WordPress, web projects, documentation
    - Integration with preset system for file-specific processing
  - **Test suite**: Basic preset functionality tests
    - Global settings and file filtering tests
    - File-specific action processing tests
    - Integration verification

- **Auto-bundling System**: Automatic project organization for AI/LLM
  consumption
  - `scripts/auto_bundle.sh` - Basic bundling with predefined categories
  - `scripts/auto_bundle_v2.sh` - Advanced bundling with YAML configuration
  - `.m1f.config.yml` - Customizable bundle definitions and priorities
  - `scripts/watch_and_bundle.sh` - File watcher for automatic updates
  - Bundle types: docs, src, tests, complete, and custom focus areas
- **Claude Code Integration** (optional): AI-powered tool automation

  - `tools/claude_orchestrator.py` - Natural language command processing
  - Integration with Claude Code CLI for workflow automation
  - Project-specific `.claude/settings.json` configuration
  - Example workflows and documentation

- **HTML2MD Preprocessing System**: Configurable HTML cleaning
  - `tools/html2md/analyze_html.py` - Analyze HTML for preprocessing patterns
  - `tools/html2md/preprocessors.py` - Generic preprocessing framework
  - Removed hardcoded project-specific logic
  - Support for custom preprocessing configurations per project

### Changed

- HTML2MD now uses configurable preprocessing instead of hardcoded rules
- Updated documentation structure to include new features

### Fixed

- Preset `strip_tags` action now properly strips all HTML tags when no specific
  tags are specified
- Added missing `get_file_specific_settings` method to PresetManager class

### Documentation

- Added Preset System Guide (`docs/m1f_presets.md`)
- Added Auto Bundle Guide (`docs/AUTO_BUNDLE_GUIDE.md`)
- Added Claude Code Integration Guide (`docs/CLAUDE_CODE_INTEGRATION.md`)
- Added example workflows (`examples/claude_workflows.md`)
- Updated main documentation index with new features

## [2.0.1] - 2025-05-25

### Fixed

- All test suite failures now pass (100% success rate)
  - S1F: Fixed content normalization and timestamp tolerance issues
  - M1F: Fixed encoding test with proper binary file handling
  - HTML2MD: Fixed server tests and API implementation
  - Security: Fixed warning log format detection with ANSI codes
- Documentation formatting and consistency issues

### Changed

- Applied Black formatting to all Python code
- Applied Prettier formatting to all Markdown files
- Updated all documentation to consistently use module execution syntax

### Documentation

- Updated all docs to reflect v2.0.0 architecture changes
- Added architecture sections to all tool documentation
- Modernized API examples with async/await patterns
- Updated token limits for latest LLM models

## [2.0.0] - 2025-05-25

### 🚀 Major Architectural Overhaul

This is a major release featuring complete architectural modernization of the
m1f project, bringing it to Python 3.10+ standards with significant performance
improvements and new features.

### Added

- **HTML2MD Converter**: New tool for converting HTML to Markdown with HTTrack
  integration for website scraping
  - CSS selector-based content extraction
  - Configurable crawl depth and domain restrictions
  - Metadata preservation and frontmatter generation
  - Integration with m1f for bundle creation
- **Content Deduplication**: Automatic detection and removal of duplicate file
  content based on SHA256 checksums
- **Symlink Support**: Smart symlink handling with cycle detection
- **File Size Filtering**: New `--max-file-size` parameter with unit support (B,
  KB, MB, GB, TB)
- **Metadata Removal**: New `--remove-scraped-metadata` option for cleaning
  HTML2MD scraped content
- **Colorized Output**: Beautiful console output with progress indicators
- **Async I/O**: Concurrent file operations for better performance
- **Type Hints**: Comprehensive type annotations using Python 3.10+ features
- **Test Infrastructure**: pytest-timeout for reliable test execution

### Changed

- **Complete Architecture Rewrite**:
  - m1f transformed from monolithic script to modular package
  - s1f transformed from monolithic script to modular package
  - Clean architecture with dependency injection and SOLID principles
- **Python Requirements**: Now requires Python 3.10+ (previously 3.9+)
- **Enhanced Security**: Improved security scanning and validation
- **Better Error Handling**: Custom exception hierarchies with specific error
  types
- **Improved Logging**: Structured logging with configurable levels and colors

### Fixed

- All test suite failures (205 tests now passing)
- S1F content normalization and timestamp tolerance issues
- M1F encoding tests with proper binary file support
- HTML2MD frontmatter generation and CLI integration
- Security warning log format handling
- Path resolution issues in tests
- Memory efficiency for large file handling

### Security

- Removed dangerous placeholder directory creation
- Enhanced input validation
- Better path sanitization
- Improved handling of sensitive data detection

### Breaking Changes

- Internal APIs completely reorganized (CLI remains compatible)
- Module structure changed from single files to packages
- Python 3.10+ now required (was 3.9+)
- Some internal functions renamed or relocated

---

## [1.4.0] - 2025-05-19

### Added

- WordPress content export functionality (`wp_export_md.py`)
- Support for exporting WordPress posts, pages, and custom post types
- Conversion of WordPress HTML content to clean Markdown
- Preservation of WordPress metadata (author, date, categories, tags)
- Flexible filtering options for content export

### Changed

- Improved documentation structure
- Enhanced error handling in export tools

### Fixed

- Various minor bug fixes and improvements

---

## [1.3.0] - 2025-05-18

### Added

- `--max-file-size` parameter for filtering large files
- Size unit support (B, KB, MB, GB, TB)
- Recommended 50KB limit for text file merging

### Changed

- Improved file size handling and validation
- Better error messages for size-related issues

### Fixed

- File size calculation accuracy
- Edge cases in size parsing

---

## [1.2.0] - 2025-05-17

### Added

- Symlink handling with `--include-symlinks` and `--ignore-symlinks` options
- Cycle detection for symlinks to prevent infinite loops
- `--security-check` option with configurable levels (skip, warn, fail)
- Integration with detect-secrets for sensitive data detection

### Changed

- Improved file path resolution
- Better handling of special file types

### Fixed

- Symlink recursion issues
- Security scanning false positives

---

## [1.1.0] - 2025-05-16

### Added

- Content deduplication feature
- `--filename-mtime-hash` option for tracking file changes
- Better support for various text encodings
- Custom argument parser with improved error messages

### Changed

- Optimized file reading for better performance
- Improved separator style formatting
- Enhanced logging output

### Fixed

- Encoding detection issues
- Hash generation consistency
- Memory usage for large projects

---

## [1.0.0] - 2025-05-15

### Added

- Initial release of m1f (Make One File)
- s1f (Split One File) companion tool
- Basic file combination functionality
- Multiple separator styles (XML, Markdown, Plain)
- Gitignore support
- Archive creation (ZIP, TAR)
- Token counting for LLM context estimation

### Features

- Combine multiple files into single output
- Preserve file structure and metadata
- Configurable file filtering
- Multiple output formats
- Cross-platform compatibility

========================================================================================
== FILE: tasks/README.md
== DATE: 2025-06-12 12:50:58 | SIZE: 19.95 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 35984dd6246ada5c588d4ec64fc90f517e950e6f072f01acdb19c676afade0bd
========================================================================================
# AI Context File Generator & Auto-Bundling System

## Overview

This directory contains tasks for creating selective file bundles that serve as
context for AI interactions. The system includes:

1. **Manual Selection** - Create bundles from carefully selected files
2. **Auto-Bundling** - Automatically organize project content into topic-based
   bundles
3. **Preset System** - Apply file-specific processing rules
4. **Watch Mode** - Automatically regenerate bundles when files change

Using the `m1f` tool and auto-bundling scripts, you can create optimized
context files for AI assistants.

## VS Code Setup

To use these tasks in VS Code:

1. Create a `.vscode` directory in your project root (if it doesn't exist)
2. Copy the example tasks configuration:
   ```bash
   cp tasks/example.tasks.json .vscode/tasks.json
   ```
3. Now you can access all tasks via the Command Palette (`Ctrl+Shift+P` →
   "Tasks: Run Task")

The `example.tasks.json` file references all available task definitions:

- `m1f.json` - Manual file selection tasks
- `auto_bundle.json` - Automated bundling tasks with preset support
- `linting.json` - Code quality and linting tasks

**Note**: The `.vscode` directory is typically gitignored, so each developer can
customize their tasks.json as needed.

## When to Use This Tool

**Do NOT use this tool if:**

- You only have a few files to work with (just reference them directly)
- You want to include your entire project (this will overwhelm the AI with
  irrelevant information)

**DO use this tool when:**

- You have a large project (hundreds or thousands of files)
- You need to provide context from ~50 key files that are most relevant to your
  current task
- You want to give the AI a focused understanding of specific parts of your
  codebase

## Purpose

When working with AI assistants (like those in Windsurf, Cursor, VS Code, or
other AI-enabled editors), providing selective but sufficient context is
essential. This tool helps you to:

1. Select and combine only the most important files into a single document
2. Include metadata that helps AI systems understand file relationships
3. Create machine-readable formats optimized for Large Language Models
4. Efficiently manage context limitations by focusing on what matters

## Available Task Files

This directory contains several task definition files:

### Task Definition Files

1. **m1f.json** - Core context generation tasks for manual file selection
2. **auto_bundle.json** - Automated bundling tasks with 11 different bundle
   types
3. **linting.json** - Code quality and linting tasks
4. **example.tasks.json** - Example VS Code tasks.json that integrates all task
   files

### Supporting Files

- **ai_context_files.txt** - Example list of files for manual context creation
- **wp\_\*.txt** - WordPress-specific include/exclude patterns

### m1f.json - Core Context Generation Tasks

The `m1f.json` file defines core tasks for manual file selection:

### 1. AI Context: Create Combined File

This task combines files from your project with common exclusions:

- **Source**: Project directory with extensive filtering
- **Output**: `.gen/ai_context.m1f.txt`
- **Excludes**: Non-relevant directories (`node_modules`, `.git`, `.venv`, etc.)
- **Format**: Machine-readable format with clear file separators
- **Optimization**: Uses `--minimal-output` to generate only the combined file
  without extra logs or lists
- **Best for**: Initial exploration when you're unsure which files are important

### 2. AI Context: Create From Input List (Recommended)

This task combines only the specific files you select:

- **Source**: Files explicitly listed in `tasks/ai_context_files.txt`
- **Output**: `.gen/ai_context_custom.m1f.txt`
- **Format**: Same machine-readable format
- **Efficiency**: Uses `--minimal-output --quiet` for silent operation with no
  auxiliary files
- **Best for**: Focused work when you know which ~20-50 files are most relevant

## Practical Usage Guide

### Step 1: Identify Key Files

Start by identifying the most important files for your current task:

- **Core files**: Main entry points, key modules, and configuration files
- **Relevant to your task**: Files you're actively working on or need to
  understand
- **Context providers**: Files that explain project structure or domain concepts
- **Aim for 20-50 files**: This provides enough context without overwhelming the
  AI

### Step 2: Create Your Custom File List

The recommended approach is to create a task-specific file list in
`ai_context_files.txt`:

```
# Core modules for authentication feature
${workspaceFolder}/auth/user.py
${workspaceFolder}/auth/permissions.py
${workspaceFolder}/auth/tokens.py

# Configuration
${workspaceFolder}/config/settings.py

# Related utilities
${workspaceFolder}/utils/crypto.py
```

### Step 3: Generate the Context File

1. Open Windsurf/VS Code Command Palette (`Ctrl+Shift+P`)
2. Type "Tasks: Run Task" and press Enter
3. Select "AI Context: Create From Input List" (recommended)
4. The task will run and create the output file in the `.gen` directory

### Step 4: Use with AI

1. Open the generated `.m1f.txt` file in your editor
2. In your AI-enabled editor (Windsurf, Cursor, VS Code):
   - Include this file in the AI's context using the editor's method
   - In Windsurf: Type `@filename` in chat or use the "Add to Context" option

### auto_bundle.json - Automated Topic-Based Bundling

The `auto_bundle.json` file provides tasks for automatic bundle generation:

#### Available Auto-Bundle Tasks:

1. **Auto Bundle: Docs Bundle** - All documentation, READMEs, and markdown files
2. **Auto Bundle: Source Bundle** - All source code files
3. **Auto Bundle: Tests Bundle** - All test files and fixtures
4. **Auto Bundle: Complete Bundle** - Combined documentation, source, and tests
5. **Auto Bundle: Custom Focus** - Topic-specific bundles (html2md, m1f, s1f,
   etc.)
6. **Auto Bundle: Watch and Update** - Monitor changes and regenerate bundles
7. **Auto Bundle: With Preset** - Apply processing rules during bundling
8. **Auto Bundle: Generate All Bundles** - Creates all standard bundles in one
   go
9. **Auto Bundle: Preset - All Standard** - Creates all standard preset-based
   bundles
10. **Auto Bundle: Preset - Focused** - Creates focused bundles using presets
11. **Auto Bundle: List Presets** - Lists all available presets and their groups

#### Using Auto-Bundle Tasks:

1. Open VS Code Command Palette (`Ctrl+Shift+P`)
2. Type "Tasks: Run Task"
3. Select an auto-bundle task (e.g., "Auto Bundle: Complete Bundle")
4. The bundle will be created in `.ai-context/`

#### Configuration:

Auto-bundling is configured via `.m1f.config.yml`. See the
[Auto Bundle Guide](../docs/01_m1f/06_auto_bundle_guide.md) for details.

#### Preset-Based Auto-Bundling:

The preset-based tasks (9-11) use the `scripts/auto_bundle_preset.sh` script
which leverages the m1f preset system:

- **Intelligent file filtering** - Presets apply smart includes/excludes based
  on file type
- **Per-file-type processing** - Different settings for different file
  extensions
- **Security scanning control** - Enable/disable security checks per file type
- **Size limit management** - Different size limits for CSS vs PHP files
- **Processing actions** - Minify, strip tags, compress whitespace per file type

Example preset usage:

```bash
# Create all standard bundles using presets
m1f-update all

# Create WordPress-specific bundles
m1f-update focus wordpress

# Use specific preset with group
m1f auto-bundle preset web-project frontend
```

Available presets:

- `wordpress` - WordPress themes and plugins with appropriate excludes
- `web-project` - Modern web projects with frontend/backend separation
- `documentation` - Documentation-focused bundles
- `example-globals` - Example with comprehensive global settings

See [m1f Presets Documentation](../docs/01_m1f/02_m1f_presets.md) for detailed
preset information.

## Best Practices for Effective AI Context

### For Manual Selection:

1. **Be selective**: Choose only the most important 20-50 files for your current
   task
2. **Include structure files**: Add README.md, configuration files, and key
   interfaces
3. **Group related files**: When customizing your list, organize files by
   related functionality
4. **Comment your file lists**: Add comments in `ai_context_files.txt` to
   explain why files are included

### For Auto-Bundling:

1. **Use focused bundles**: Start with topic-specific bundles (docs, src) before
   using complete
2. **Configure properly**: Customize `.m1f.config.yml` for your project
   structure
3. **Apply presets**: Use the preset system to optimize file processing
4. **Watch mode**: Use watch tasks during active development
5. **Refresh regularly**: Regenerate bundles after significant changes

## Customizing the Process

You can customize the tasks by editing `m1f.json` for your specific needs:

- Modify output file locations and naming conventions
- Adjust file exclusion patterns for your project structure
- Add task-specific configurations for different project components

## Additional Options

Consider these advanced options from `m1f` for specific needs:

- `--include-dot-paths`: Useful for including WordPress-specific configuration
  files like `.htaccess` or other dot files and directories (e.g., `.config/`,
  `.github/`) if they are relevant to your context. By default, all files and
  directories starting with a dot are excluded.
- `--separator-style`: While `MachineReadable` is generally recommended for AI
  context files, you can explore other styles if needed.
- `--skip-output-file`: Executes all operations (logs, additional files, etc.)
  but skips writing the final .m1f.txt output file. Useful when you're only
  interested in generating the file and directory listings or logs, but not the
  combined content file itself.

For a complete list of all available options and their detailed descriptions,
run:

```
m1f --help
```

## Machine-Readable Format

The default separator style "MachineReadable" optimizes the combined file for AI
understanding:

```
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
METADATA_JSON:
{
    "original_filepath": "relative/path.ext",
    "original_filename": "path.ext",
    "timestamp_utc_iso": "2023-01-01T12:00:00Z",
    "type": ".ext",
    "size_bytes": 1234,
    "checksum_sha256": "abc123..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---

[file content]

--- PYMK1F_END_FILE_CONTENT_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
```

This format ensures the AI can clearly identify file boundaries and understand
metadata about each file, making it more effective in processing your selected
files. The JSON metadata includes the original filepath, filename, timestamp in
ISO format, file type, size in bytes, and SHA256 checksum for data integrity
verification. It's particularly suitable for automated processing and splitting
back into individual files.

## Author

Franz und Franz - https://franz.agency

## Use Case: WordPress Theme/Plugin Context File

When developing WordPress themes or plugins, you often need to provide an AI
assistant with the context of your specific theme/plugin files. Here's how you
can create a single context file for this purpose using `m1f.py`:

### 1. Strategically Select WordPress Files

To create an effective AI context for WordPress development, carefully select
files that represent the functionality or problem area you're focusing on.
Consider these categories:

- **Core Theme Files**:

  - `style.css` (for theme identity and metadata)
  - `functions.php` (critical for theme logic, hooks, and filters)
  - `index.php`, `header.php`, `footer.php`, `sidebar.php` (main template
    structure)
  - Specific template files relevant to your task: `single.php`, `page.php`,
    `archive.php`, `category.php`, `tag.php`, `search.php`, `404.php`,
    `front-page.php`, `home.php`.
  - Template parts (e.g., files in `template-parts/` directory like
    `content-page.php`).
  - Customizer settings and controls if relevant (`inc/customizer.php`).
  - Key JavaScript (e.g., `assets/js/custom.js`) and CSS files.

- **Core Plugin Files**:

  - The main plugin file (e.g., `your-plugin-name/your-plugin-name.php`) which
    includes the plugin header.
  - Files containing main classes, action/filter hooks, shortcodes, and admin
    panel logic.
  - AJAX handlers, REST API endpoint definitions.
  - Files related to Custom Post Types (CPTs) or taxonomies defined by the
    plugin.
  - Key JavaScript and CSS files specific to the plugin's functionality.

- **Feature-Specific Files**: If you are working on a particular feature (e.g.,
  WooCommerce integration, a custom contact form, a specific admin page):

  - Include all files directly related to that feature from both your theme and
    any relevant plugins.
  - For example, for WooCommerce: relevant template overrides in
    `your-theme/woocommerce/`, custom functions related to WooCommerce in
    `functions.php` or a plugin.

- **Problem-Specific Files**: If debugging, include files involved in the error
  stack trace or areas where the bug is suspected.

- **Important Note on Parent/Child Themes**:
  - If using a child theme, include relevant files from _both_ the child theme
    and parent theme that interact or are being overridden.

### 2. Structure Your Input File List (`my_wp_context_files.txt`)

Create a plain text file (e.g., `my_wp_context_files.txt`) listing the absolute
or relative paths to your selected files. Organize and comment this list for
clarity, especially if you plan to reuse or modify it.

**Example `my_wp_context_files.txt` for a theme feature and a related plugin:**

```plaintext
# Paths should be relative to your project root, or absolute.
# For VS Code tasks, ${workspaceFolder} can be used.

# =====================================
# My Custom Theme: "AwesomeTheme"
# Working on: Homepage Slider Feature
# =====================================

# Core Theme Files
wp-content/themes/AwesomeTheme/style.css
wp-content/themes/AwesomeTheme/functions.php
wp-content/themes/AwesomeTheme/header.php
wp-content/themes/AwesomeTheme/footer.php
wp-content/themes/AwesomeTheme/front-page.php

# Homepage Slider Specifics
wp-content/themes/AwesomeTheme/template-parts/homepage-slider.php
wp-content/themes/AwesomeTheme/includes/slider-customizer-settings.php
wp-content/themes/AwesomeTheme/assets/js/homepage-slider.js
wp-content/themes/AwesomeTheme/assets/css/homepage-slider.css

# =====================================
# Related Plugin: "UtilityPlugin"
# Used by: Homepage Slider for data
# =====================================
wp-content/plugins/UtilityPlugin/utility-plugin.php
wp-content/plugins/UtilityPlugin/includes/class-data-provider.php
wp-content/plugins/UtilityPlugin/includes/cpt-slides.php

# =====================================
# General WordPress Context (Optional)
# =====================================
# Consider adding if debugging core interactions, but be selective:
# wp-includes/post.php
# wp-includes/query.php
```

**Tips for your list:**

- Use comments (`#`) to organize sections or explain choices.
- Start with a small, focused set of files and expand if the AI needs more
  context.
- Paths are typically relative to where you run the `m1f.py` script, or from the
  `${workspaceFolder}` if using VS Code tasks.

### 3. Generate the Combined Context File

Run `m1f` from your terminal, pointing to your input file list and specifying
an output file. It's recommended to use the `MachineReadable` separator style.

```bash
m1f \
  --input-file my_wp_context_files.txt \
  --output-file .gen/wordpress_context.m1f.txt \
  --separator-style MachineReadable \
  --force \
  --minimal-output
```

**Explanation of options:**

- `--input-file my_wp_context_files.txt`: Specifies the list of files to
  include.
- `--output-file .gen/wordpress_context.m1f.txt`: Defines where the combined
  file will be saved. Using a `.gen` or `.ai-context` subfolder is good
  practice.
- `--separator-style MachineReadable`: Ensures the output is easily parsable by
  AI tools.
- `--force`: Overwrites the output file if it already exists.
- `--minimal-output`: Prevents the script from generating auxiliary files like
  file lists or logs, keeping your project clean.

You can also generate only the auxiliary files (file list and directory list)
without creating the combined file:

```bash
m1f \
  --input-file my_wp_context_files.txt \
  --output-file .gen/wordpress_auxiliary_only.m1f.txt \
  --skip-output-file \
  --verbose
```

This will create `wordpress_auxiliary_only_filelist.txt` and
`wordpress_auxiliary_only_dirlist.txt` files but won't generate the combined
content file.

### 4. Using the Context File with Your AI Assistant

Once `wordpress_context.m1f.txt` is generated:

1.  Open the file in your AI-enabled editor (e.g., Cursor, VS Code with AI
    extensions).
2.  Use your editor's features to add this file to the AI's context. For
    example, in Cursor, you can type `@wordpress_context.m1f.txt` in the chat or
    use the "Add to Context" option.
3.  Now, when you ask the AI questions or request code related to your WordPress
    theme/plugin, it will have the specific context of your selected files.

### Example: Creating a VS Code Task

You can automate this process by creating a VS Code task in your
`.vscode/tasks.json` file:

```json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "WordPress: Generate AI Context from List",
      "type": "shell",
      "command": "python",
      "args": [
        "${workspaceFolder}/tools/m1f.py",
        "--input-file",
        "${workspaceFolder}/my_wp_context_files.txt",
        "--output-file",
        "${workspaceFolder}/.gen/wordpress_context.m1f.txt",
        "--separator-style",
        "MachineReadable",
        "--force",
        "--minimal-output",
        "--quiet"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "detail": "Combines specified WordPress theme/plugin files into a single context file for AI."
    },
    {
      "label": "WordPress: Generate File Lists Only",
      "type": "shell",
      "command": "python",
      "args": [
        "${workspaceFolder}/tools/m1f.py",
        "--input-file",
        "${workspaceFolder}/my_wp_context_files.txt",
        "--output-file",
        "${workspaceFolder}/.gen/wordpress_auxiliary.m1f.txt",
        "--skip-output-file",
        "--verbose"
      ],
      "problemMatcher": [],
      "group": "build",
      "detail": "Generates file and directory lists without creating the combined file."
    }
  ]
}
```

With this task, you can simply run "WordPress: Generate AI Context from List"
from the VS Code Command Palette to update your context file. Remember to
maintain your `my_wp_context_files.txt` list as your project evolves.

This approach helps you provide targeted and relevant information to your AI
assistant, leading to more accurate and helpful responses for your WordPress
development tasks.

## Example: Organizing a Large Project with `m1f`

When dealing with a project that contains hundreds or thousands of files, start
by generating a complete file and directory listing without creating the merged
context file. Run the **Project Review: Generate Lists** task. It calls
`m1f` with `--skip-output-file` and saves two inventory files to the
`m1f` directory:

- `m1f/project_review_filelist.txt`
- `m1f/project_review_dirlist.txt`

Review these lists and decide which areas of the project you want to load into
your AI assistant. Typical numbered context files might include:

- `1_doc.txt` – the full documentation bundle
- `2_template.txt` – template files from your theme
- `3_plugin.txt` – a specific plugin or a group of plugins

Store each generated context file in the `m1f` folder with a number prefix for
quick referencing in Windsurf, Cursor, or Claude (for example `@m1f/1_doc.txt`).

To keep the inventory current during development, launch **Project Review: Watch
for Changes**. This background watcher reruns the list generation whenever files
are modified.

Remember to add `m1f/` (and `.1f/` if used) to your `.gitignore` so these helper
files stay out of version control.

========================================================================================
== FILE: tasks/ai_context_files.txt
== DATE: 2025-06-04 21:15:33 | SIZE: 1.44 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: bab0ab696d58620f5936ac778057f3e3e2995094cbe9cf53c343e6fc8ea26049
========================================================================================
# This is an example file list for AI context bundling
# Group related files by feature/functionality with comments

# Core project documentation
/path/to/project/README.md
/path/to/project/ARCHITECTURE.md
/path/to/project/docs/api_reference.md

# Authentication feature
/path/to/project/auth/models.py           # Data models for users and permissions
/path/to/project/auth/views.py            # Authentication API endpoints
/path/to/project/auth/middleware.py       # Auth verification middleware
/path/to/project/auth/tests/test_auth.py  # Key tests that explain requirements

# Database configuration
/path/to/project/config/database.py       # Database connection settings
/path/to/project/db/migrations/001_init.py # Shows schema structure
/path/to/project/db/models/base.py        # Base model classes

# Frontend components
/path/to/project/frontend/components/AuthForm.jsx
/path/to/project/frontend/components/Dashboard.jsx
/path/to/project/frontend/services/api.js # API integration points

# Utility functions
/path/to/project/utils/logging.py
/path/to/project/utils/validators.py

# Configuration files
/path/to/project/.env.example             # Shows required environment variables
/path/to/project/config/settings.py       # Application settings

# Main application entry points
/path/to/project/app.py                   # Main application initialization
/path/to/project/server.py                # Server startup code

# Add task-specific files here as needed

========================================================================================
== FILE: tasks/wp_excludes.txt
== DATE: 2025-06-04 21:15:33 | SIZE: 1.22 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: d4b9b1453885caaf73a5e25c806b74803b54d03ab0300615604dbea8c5e3abd0
========================================================================================
# WordPress Paths to Exclude

# Core WordPress system files
wp-admin/
wp-includes/

# Uploads directory (usually too large and contains only binary media files)
wp-content/uploads/

# Cache files
wp-content/cache/
wp-content/advanced-cache.php
wp-content/wp-cache-config.php
wp-content/object-cache.php

# Default and inactive themes
wp-content/themes/twentytwenty/
wp-content/themes/twentytwentyone/
wp-content/themes/twentytwentytwo/
wp-content/themes/twentytwentythree/
wp-content/themes/twentytwentyfour/

# Common plugins not relevant for development
wp-content/plugins/akismet/
wp-content/plugins/hello-dolly/
wp-content/plugins/wordpress-seo/
wp-content/plugins/wp-super-cache/
wp-content/plugins/wordfence/
wp-content/plugins/elementor/
wp-content/plugins/woocommerce/

# Language files
wp-content/languages/plugins/
wp-content/languages/themes/
wp-content/languages/continents-cities*.po
wp-content/languages/admin*.po

# Backup files
*.bak
*.backup
*.old
*-backup.*
~*

# Plugin/theme development build artifacts
node_modules/
dist/
build/
vendor/
.git/
.github/
.vscode/

# Logs and temporary files
*.log
*.tmp
.DS_Store
Thumbs.db

# Database dumps
*.sql

# Minified files (keep the source files, exclude minified versions)
*.min.js
*.min.css 

========================================================================================
== FILE: tasks/wp_plugin_includes.txt
== DATE: 2025-06-04 21:15:33 | SIZE: 1.29 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: 3db0d19bb8b64886009ffec57c208278093d46ccbf5023bbfa46b55920a5d6c5
========================================================================================
# WordPress Plugin Files to Include

# Main plugin file
wp-content/plugins/myplugin/myplugin.php

# Plugin structure
wp-content/plugins/myplugin/includes/*.php
wp-content/plugins/myplugin/admin/*.php
wp-content/plugins/myplugin/public/*.php
wp-content/plugins/myplugin/includes/class-*.php
wp-content/plugins/myplugin/admin/class-*.php
wp-content/plugins/myplugin/public/class-*.php

# API and REST endpoints
wp-content/plugins/myplugin/includes/api/*.php
wp-content/plugins/myplugin/includes/rest-api/*.php

# Templates and partials
wp-content/plugins/myplugin/templates/*.php
wp-content/plugins/myplugin/partials/*.php

# Assets
wp-content/plugins/myplugin/assets/js/*.js
wp-content/plugins/myplugin/assets/css/*.css
wp-content/plugins/myplugin/admin/js/*.js
wp-content/plugins/myplugin/admin/css/*.css
wp-content/plugins/myplugin/public/js/*.js
wp-content/plugins/myplugin/public/css/*.css

# Blocks (if using Gutenberg blocks)
wp-content/plugins/myplugin/blocks/*.php
wp-content/plugins/myplugin/blocks/*.js
wp-content/plugins/myplugin/blocks/*.json

# Languages and internationalization
wp-content/plugins/myplugin/languages/*.pot
wp-content/plugins/myplugin/languages/*.po
wp-content/plugins/myplugin/languages/*.mo

# Configuration
wp-content/plugins/myplugin/config/*.php
wp-content/plugins/myplugin/uninstall.php 

========================================================================================
== FILE: tasks/wp_theme_includes.txt
== DATE: 2025-06-04 21:15:33 | SIZE: 1.11 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: 7b4d3fc6407562505842c13e2b33f309b8e50d862380a5928671f0808f5dae87
========================================================================================
# WordPress Theme Files to Include

# Core theme files
wp-content/themes/mytheme/style.css
wp-content/themes/mytheme/functions.php
wp-content/themes/mytheme/index.php
wp-content/themes/mytheme/header.php
wp-content/themes/mytheme/footer.php
wp-content/themes/mytheme/sidebar.php
wp-content/themes/mytheme/page.php
wp-content/themes/mytheme/single.php
wp-content/themes/mytheme/archive.php
wp-content/themes/mytheme/search.php
wp-content/themes/mytheme/404.php
wp-content/themes/mytheme/comments.php

# Template parts
wp-content/themes/mytheme/template-parts/*.php

# Theme includes and functionality
wp-content/themes/mytheme/inc/*.php
wp-content/themes/mytheme/includes/*.php

# Theme assets
wp-content/themes/mytheme/assets/js/*.js
wp-content/themes/mytheme/assets/css/*.css
wp-content/themes/mytheme/assets/scss/*.scss

# WooCommerce templates (if used)
wp-content/themes/mytheme/woocommerce/*.php

# Block patterns and templates
wp-content/themes/mytheme/patterns/*.php
wp-content/themes/mytheme/block-templates/*.html
wp-content/themes/mytheme/block-template-parts/*.html

# Configuration files
wp-content/themes/mytheme/theme.json 

========================================================================================
== FILE: tasks/wp_theme_plugin_includes.txt
== DATE: 2025-06-04 21:15:33 | SIZE: 2.40 KB | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: b069f8804b392ae44ed2af1ea6d73d5b42113f61b66c5ccf7df3f4305df046ef
========================================================================================
# WordPress Theme Files to Include

# Core theme files
wp-content/themes/mytheme/style.css
wp-content/themes/mytheme/functions.php
wp-content/themes/mytheme/index.php
wp-content/themes/mytheme/header.php
wp-content/themes/mytheme/footer.php
wp-content/themes/mytheme/sidebar.php
wp-content/themes/mytheme/page.php
wp-content/themes/mytheme/single.php
wp-content/themes/mytheme/archive.php
wp-content/themes/mytheme/search.php
wp-content/themes/mytheme/404.php
wp-content/themes/mytheme/comments.php

# Template parts
wp-content/themes/mytheme/template-parts/*.php

# Theme includes and functionality
wp-content/themes/mytheme/inc/*.php
wp-content/themes/mytheme/includes/*.php

# Theme assets
wp-content/themes/mytheme/assets/js/*.js
wp-content/themes/mytheme/assets/css/*.css
wp-content/themes/mytheme/assets/scss/*.scss

# WooCommerce templates (if used)
wp-content/themes/mytheme/woocommerce/*.php

# Block patterns and templates
wp-content/themes/mytheme/patterns/*.php
wp-content/themes/mytheme/block-templates/*.html
wp-content/themes/mytheme/block-template-parts/*.html

# Configuration files
wp-content/themes/mytheme/theme.json
# WordPress Plugin Files to Include

# Main plugin file
wp-content/plugins/myplugin/myplugin.php

# Plugin structure
wp-content/plugins/myplugin/includes/*.php
wp-content/plugins/myplugin/admin/*.php
wp-content/plugins/myplugin/public/*.php
wp-content/plugins/myplugin/includes/class-*.php
wp-content/plugins/myplugin/admin/class-*.php
wp-content/plugins/myplugin/public/class-*.php

# API and REST endpoints
wp-content/plugins/myplugin/includes/api/*.php
wp-content/plugins/myplugin/includes/rest-api/*.php

# Templates and partials
wp-content/plugins/myplugin/templates/*.php
wp-content/plugins/myplugin/partials/*.php

# Assets
wp-content/plugins/myplugin/assets/js/*.js
wp-content/plugins/myplugin/assets/css/*.css
wp-content/plugins/myplugin/admin/js/*.js
wp-content/plugins/myplugin/admin/css/*.css
wp-content/plugins/myplugin/public/js/*.js
wp-content/plugins/myplugin/public/css/*.css

# Blocks (if using Gutenberg blocks)
wp-content/plugins/myplugin/blocks/*.php
wp-content/plugins/myplugin/blocks/*.js
wp-content/plugins/myplugin/blocks/*.json

# Languages and internationalization
wp-content/plugins/myplugin/languages/*.pot
wp-content/plugins/myplugin/languages/*.po
wp-content/plugins/myplugin/languages/*.mo

# Configuration
wp-content/plugins/myplugin/config/*.php
wp-content/plugins/myplugin/uninstall.php

========================================================================================
== FILE: tests/README.md
== DATE: 2025-06-10 14:50:13 | SIZE: 9.86 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: b5b409992e77c3b81d99c0e7fad48f527010ca35bbca8c18dcf644e6b7ff032a
========================================================================================
# Test Suite Documentation

This directory contains the modernized test suite for the m1f tool suite,
including m1f, s1f, html2md, and m1f-scrape tools, using Python 3.10+ features
and modern testing practices.

## Test Structure

```
tests/
├── conftest.py              # Global fixtures and test configuration
├── base_test.py             # Base test classes with common utilities
├── pytest.ini               # Test-specific pytest configuration
├── test_html2md_server.py   # HTML2MD server tests
├── test_simple_server.py    # Simple server tests
├── m1f/                     # m1f-specific tests
│   ├── conftest.py          # m1f-specific fixtures
│   ├── test_m1f_basic.py    # Basic functionality tests
│   ├── test_m1f_advanced.py # Advanced features tests
│   ├── test_m1f_encoding.py # Encoding-related tests
│   ├── test_m1f_edge_cases.py # Edge cases and special scenarios
│   ├── test_m1f_file_hash.py # Filename mtime hash functionality
│   ├── test_m1f_integration.py # Integration and CLI tests
│   ├── test_m1f_presets_basic.py # Basic preset tests
│   ├── test_m1f_presets_integration.py # Advanced preset tests
│   ├── test_m1f_presets_v3_2.py # V3.2 preset features
│   └── source/              # Test data and resources
├── s1f/                     # s1f-specific tests
│   ├── conftest.py          # s1f-specific fixtures
│   ├── test_s1f_basic.py    # Basic functionality tests
│   ├── test_s1f_encoding.py # Encoding-related tests
│   ├── test_s1f_async.py    # Async functionality tests
│   └── ...                  # Other test files and resources
├── html2md/                 # html2md-specific tests
│   ├── __init__.py          # Package marker
│   ├── test_html2md.py      # Core HTML2MD functionality tests
│   ├── test_integration.py  # Integration tests
│   ├── test_local_scraping.py # Local scraping tests
│   ├── test_scrapers.py     # Scraper backend tests
│   ├── source/              # Test HTML files
│   ├── expected/            # Expected output files
│   └── scraped_examples/    # Real-world scraping test cases
└── html2md_server/          # Test server for HTML2MD
    ├── server.py            # Test server implementation
    ├── manage_server.py     # Server management utilities
    └── test_pages/          # Test HTML pages
```

## Key Features

### Modern Python 3.10+ Features

- **Type Hints**: All functions and fixtures use modern type hints with the
  union operator (`|`)
- **Structural Pattern Matching**: Where applicable (Python 3.10+)
- **Better Type Annotations**: Using `from __future__ import annotations`
- **Modern pathlib Usage**: Consistent use of `Path` objects

### Test Organization

- **Modular Test Files**: Tests are split into focused modules by functionality
- **Base Test Classes**: Common functionality is abstracted into base classes
- **Fixture Hierarchy**: Global, tool-specific, and test-specific fixtures
- **Clear Test Markers**: Tests are marked with categories (unit, integration,
  slow, encoding)

### Key Fixtures

#### Global Fixtures (conftest.py)

- `temp_dir`: Creates a temporary directory for test files
- `isolated_filesystem`: Provides an isolated filesystem environment
- `create_test_file`: Factory for creating test files
- `create_test_directory_structure`: Creates complex directory structures
- `capture_logs`: Captures and examines log output
- `cleanup_logging`: Automatically cleans up logging handlers

#### M1F-Specific Fixtures (m1f/conftest.py)

- `run_m1f`: Runs m1f with specified arguments
- `m1f_cli_runner`: Runs m1f as a subprocess
- `create_m1f_test_structure`: Creates m1f-specific test structures

#### S1F-Specific Fixtures (s1f/conftest.py)

- `run_s1f`: Runs s1f with specified arguments
- `s1f_cli_runner`: Runs s1f as a subprocess
- `create_combined_file`: Creates combined files in different formats
- `create_m1f_output`: Uses m1f to create realistic test files

#### HTML2MD-Specific Fixtures (html2md/conftest.py)

- `html2md_runner`: Runs html2md with specified arguments
- `create_test_html`: Creates test HTML files with various structures
- `test_server`: Manages test HTTP server for scraping tests
- `mock_url_fetcher`: Mocks URL fetching for unit tests

#### Scraper Test Utilities

- Test server in `html2md_server/` for realistic scraping scenarios
- Pre-scraped examples for regression testing
- Multiple scraper backend configurations

## Running Tests

### Run All Tests

```bash
pytest
```

### Run Specific Test Categories

```bash
# Run only unit tests
pytest -m unit

# Run only integration tests
pytest -m integration

# Run encoding-related tests
pytest -m encoding

# Skip slow tests
pytest -m "not slow"
```

### Run Tests for Specific Tools

```bash
# Run only m1f tests
pytest tests/m1f/

# Run only s1f tests
pytest tests/s1f/

# Run only html2md tests
pytest tests/html2md/

# Run scraper tests
pytest tests/html2md/test_scrapers.py

# Run preset tests
pytest tests/m1f/test_m1f_presets*.py
```

### Run Specific Test Files

```bash
# Run basic m1f tests
pytest tests/m1f/test_m1f_basic.py

# Run encoding tests for both tools
pytest tests/m1f/test_m1f_encoding.py tests/s1f/test_s1f_encoding.py
```

### Run with Coverage

```bash
# Install pytest-cov if not already installed
pip install pytest-cov

# Run with coverage report
pytest --cov=tools --cov-report=html

# View coverage report
open htmlcov/index.html
```

## Test Categories

### Unit Tests (`@pytest.mark.unit`)

- Fast, isolated tests of individual components
- No external dependencies
- Mock external interactions

### Integration Tests (`@pytest.mark.integration`)

- Test interaction between multiple components
- May create real files and directories
- Test end-to-end workflows

### Slow Tests (`@pytest.mark.slow`)

- Tests that take significant time (e.g., large file handling)
- Skipped in quick test runs

### Encoding Tests (`@pytest.mark.encoding`)

- Tests related to character encoding
- May require specific system encodings

## Writing New Tests

### Test Class Structure

```python
from __future__ import annotations

import pytest
from ..base_test import BaseM1FTest  # or BaseS1FTest

class TestFeatureName(BaseM1FTest):
    """Description of what these tests cover."""

    @pytest.mark.unit
    def test_specific_behavior(self, fixture1, fixture2):
        """Test description."""
        # Arrange
        ...

        # Act
        ...

        # Assert
        ...
```

### Using Fixtures

```python
def test_with_temp_files(self, create_test_file, temp_dir):
    """Example using fixture to create test files."""
    # Create a test file
    test_file = create_test_file("test.txt", "content")

    # Use temp_dir for output
    output_file = temp_dir / "output.txt"
```

### Parametrized Tests

```python
@pytest.mark.parametrize("input,expected", [
    ("value1", "result1"),
    ("value2", "result2"),
])
def test_multiple_cases(self, input, expected):
    """Test with multiple input/output pairs."""
    assert process(input) == expected
```

## Best Practices

1. **Use Type Hints**: All test functions and fixtures should have type hints
2. **Clear Test Names**: Test names should describe what is being tested
3. **Docstrings**: Each test should have a docstring explaining its purpose
4. **Arrange-Act-Assert**: Follow the AAA pattern for test structure
5. **Use Fixtures**: Leverage fixtures for common setup and teardown
6. **Mark Tests**: Use appropriate markers for test categorization
7. **Isolated Tests**: Each test should be independent and not rely on others

## Test Server for HTML2MD

The test suite includes a test server for HTML2MD scraping tests:

```bash
# Start the test server
cd tests/html2md_server
python server.py

# Or use the management script
python manage_server.py start

# Run scraping tests with the server
pytest tests/html2md/test_local_scraping.py
```

The test server provides:

- Static HTML pages for testing various HTML structures
- Realistic website scenarios
- Controlled environment for scraper testing

## Troubleshooting

### Common Issues

1. **Import Errors**: Ensure the tools directory is in the Python path
2. **Fixture Not Found**: Check that conftest.py files are properly placed
3. **Encoding Errors**: Some encoding tests may fail on systems without specific
   encodings
4. **Permission Errors**: Ensure proper cleanup of temporary files
5. **Test Server Issues**: Ensure port 8080 is available for the test server
6. **Scraper Timeouts**: Some scraper tests may timeout on slow connections

### Debug Options

```bash
# Run with verbose output
pytest -vv

# Show print statements
pytest -s

# Stop on first failure
pytest -x

# Drop into debugger on failure
pytest --pdb
```

## Test Coverage

The test suite provides comprehensive coverage for:

### m1f Tool

- File combination with various separators
- Encoding detection and conversion
- Preset system and file-specific processing
- Security scanning
- Archive creation
- Edge cases and error handling

### s1f Tool

- File extraction from combined files
- Format detection (Standard, Detailed, Markdown, etc.)
- Encoding preservation
- Async file processing
- Checksum validation

### html2md Tool

- HTML to Markdown conversion
- URL scraping and fetching
- Multiple scraper backends (BeautifulSoup, Playwright, etc.)
- Content extraction and cleaning
- Metadata preservation

### m1f-scrape Tool

- Website scraping with multiple backends
- Crawling and link following
- Rate limiting and politeness
- Content downloading and organization

## Contributing

When adding new tests:

1. Follow the existing test structure
2. Add appropriate markers (@pytest.mark.unit, etc.)
3. Update this README if adding new test categories
4. Ensure tests are independent and reproducible
5. Add fixtures to appropriate conftest.py files
6. Document any special test requirements

========================================================================================
== FILE: docs/01_m1f/README.md
== DATE: 2025-06-13 22:22:07 | SIZE: 2.93 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 6d5080db58521b9cba02a4d4924272ebddeb52843f6b8bdd38b3f4357c024f13
========================================================================================
# m1f Documentation

Welcome to the m1f (Make One File) documentation. This tool combines multiple
text files into a single output file, perfect for providing context to Large
Language Models (LLMs) and creating bundled documentation.

## What's New in v3.2

- **Enhanced Security**: Path traversal protection, SSRF prevention, automatic
  robots.txt compliance
- **Performance**: Parallel file processing enabled by default (3-5x faster)
- **Flexibility**: Control content deduplication and UTF-8 encoding preferences
- **Reliability**: Improved error handling and security scanning

See the [v3.2 Features Guide](./41_version_3_2_features.md) for details.

## Table of Contents

### Getting Started

- [**00_m1f.md**](00_m1f.md) - Main documentation with features, usage examples,
  and architecture
- [**01_quick_reference.md**](./01_quick_reference.md) - Quick command reference
  and common patterns
- [**02_cli_reference.md**](./02_cli_reference.md) - Complete command-line
  parameter reference
- [**03_troubleshooting.md**](./03_troubleshooting.md) - Common issues and
  solutions

### Preset System

- [**10_m1f_presets.md**](./10_m1f_presets.md) - Comprehensive preset system
  guide
- [**11_preset_per_file_settings.md**](./11_preset_per_file_settings.md) -
  Advanced per-file processing configuration
- [**12_preset_reference.md**](./12_preset_reference.md) - Complete preset
  reference with all settings, features, and clarifications

### Features & Tools

- [**20_auto_bundle_guide.md**](./20_auto_bundle_guide.md) - Automated bundling
  with configuration files
- [**21_development_workflow.md**](./21_development_workflow.md) - Best
  practices for development workflows
- [**25_m1f_config_examples.md**](./25_m1f_config_examples.md) - Comprehensive
  configuration examples for different project types

### AI Integration

- [**30_claude_workflows.md**](./30_claude_workflows.md) - Working with Claude
  and LLMs
- [**31_claude_code_integration.md**](./31_claude_code_integration.md) -
  Integration with Claude Code for AI-assisted development

### Advanced Topics

- [**40_security_best_practices.md**](./40_security_best_practices.md) -
  Security guidelines and protective measures
- [**41_version_3_2_features.md**](./41_version_3_2_features.md) - Comprehensive
  v3.2 feature documentation and migration guide

## Quick Start

```bash
# Basic usage (parallel processing is automatic in v3.2)
m1f -s ./your_project -o ./combined.txt

# With file type filtering
m1f -s ./src -o code.txt --include-extensions .py .js

# Using presets
m1f -s . -o bundle.txt --preset wordpress.m1f-presets.yml

# v3.2 features: Allow duplicate files + custom encoding
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Security scanning with warning mode
m1f -s ./src -o bundle.txt --security-check warn
```

For detailed information, start with the [main documentation](00_m1f.md) or jump
to the [quick reference](./01_quick_reference.md) for common commands.

========================================================================================
== FILE: docs/01_m1f/00_m1f.md
== DATE: 2025-06-15 18:11:34 | SIZE: 24.43 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 855a2bdddb55b4f361364a03693af56d0fec6f1c72e906246b4a009d1037aa05
========================================================================================
# m1f (Make One File)

A modern, high-performance tool that combines multiple files into a single file
with rich metadata, content deduplication, and async I/O support.

## Overview

The m1f tool (v3.2.0) solves a common challenge when working with LLMs:
providing sufficient context without exceeding token limits. Built with Python
3.10+ and modern architecture patterns, it creates optimized reference files
from multiple sources while automatically handling duplicates and providing
comprehensive metadata.

## Key Features

- **Content Deduplication**: Automatically detects and skips duplicate files
  based on SHA256 checksums
- **Async I/O**: High-performance file operations with concurrent processing
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Modular package structure with clean separation of
  concerns
- **Smart Filtering**: Advanced file filtering with size limits, extensions, and
  patterns
- **Symlink Support**: Intelligent symlink handling with cycle detection
- **Professional Security**: Integration with detect-secrets for sensitive data
  detection
- **Colorized Output**: Beautiful console output with progress indicators

## Quick Start

```bash
# Basic usage with a source directory
m1f -s ./your_project -o ./combined.txt

# Include only specific file types
m1f -s ./your_project -o ./combined.txt --include-extensions .py .js .md

# Include only documentation files (62 extensions)
m1f -s ./your_project -o ./docs_bundle.txt --docs-only

# Exclude specific directories
m1f -s ./your_project -o ./combined.txt --excludes "node_modules/" "build/" "dist/"

# Filter by file size (new in v2.0.0)
m1f -s ./your_project -o ./combined.txt --max-file-size 50KB
```

> **Note**: For a complete reference of all available options, see the
> [CLI Reference](./07_cli_reference.md). For troubleshooting, see the
> [Troubleshooting Guide](./08_troubleshooting.md).

## Command Line Options

| Option                      | Description                                                                                                                                                                                                                                                      |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-s, --source-directory`    | Path to the directory containing files to process                                                                                                                                                                                                                |
| `-i, --input-file`          | Path to a file containing a list of files/directories to process. Can be used together with --source-directory to resolve relative paths in the input file against the source directory                                                                          |
| `-o, --output-file`         | Path for the combined output file                                                                                                                                                                                                                                |
| `-f, --force`               | Force overwrite of existing output file without prompting                                                                                                                                                                                                        |
| `-t, --add-timestamp`       | Add a timestamp (\_YYYYMMDD_HHMMSS) to the output filename. Useful for versioning and preventing accidental overwrite of previous output files                                                                                                                   |
| `--filename-mtime-hash`     | Append a hash of file modification timestamps to the filename. The hash is created using all filenames and their modification dates, enabling caching mechanisms. Hash only changes when files are added/removed or their content changes                        |
| `--include-extensions`      | Space-separated list of file extensions to include (e.g., `--include-extensions .py .js .html` will only process files with these extensions)                                                                                                                    |
| `--exclude-extensions`      | Space-separated list of file extensions to exclude (e.g., `--exclude-extensions .log .tmp .bak` will skip these file types)                                                                                                                                      |
| `--docs-only`               | Include only documentation files (62 extensions including .md, .txt, .rst, .org, .tex, .info, etc.). Overrides include-extensions.                                                                                                                               |
| `--max-file-size`           | Skip files larger than the specified size (e.g., `--max-file-size 50KB` will exclude files over 50 kilobytes). Supports units: B, KB, MB, GB, TB. Useful for filtering out large generated files, logs, or binary data when merging text files for LLM context   |
| `--exclude-paths-file`      | Path to file containing paths or patterns to exclude. Supports both exact path lists and gitignore-style pattern formats. Can use a .gitignore file directly                                                                                                     |
| `--no-default-excludes`     | Disable default directory exclusions. By default, the following directories are excluded: vendor, node_modules, build, dist, cache, .git, .svn, .hg, \***\*pycache\*\*** (see [Default Excludes Guide](./26_default_excludes_guide.md) for complete list)        |
| `--excludes`                | Space-separated list of paths to exclude. Supports directory names, exact file paths, and gitignore-style patterns (e.g., `--excludes logs "config/settings.json" "*.log" "build/" "!important.log"`)                                                            |
| `--include-dot-paths`       | Include files and directories that start with a dot (e.g., .gitignore, .hidden/). By default, all dot files and directories are excluded.                                                                                                                        |
| `--include-binary-files`    | Attempt to include files with binary extensions                                                                                                                                                                                                                  |
| `--remove-scraped-metadata` | Remove scraped metadata (URL, timestamp) from HTML2MD files during processing. Automatically detects and removes metadata blocks at the end of markdown files created by HTML scraping tools                                                                     |
| `--separator-style`         | Style of separators between files (`Standard`, `Detailed`, `Markdown`, `MachineReadable`, `None`)                                                                                                                                                                |
| `--line-ending`             | Line ending for script-generated separators (`lf` or `crlf`)                                                                                                                                                                                                     |
| `--convert-to-charset`      | Convert all files to the specified character encoding (`utf-8` [default], `utf-16`, `utf-16-le`, `utf-16-be`, `ascii`, `latin-1`, `cp1252`). The original encoding is automatically detected and included in the metadata when using compatible separator styles |
| `--abort-on-encoding-error` | Abort processing if encoding conversion errors occur. Without this flag, characters that cannot be represented will be replaced                                                                                                                                  |
| `-v, --verbose`             | Enable verbose logging. Without this flag, only summary information is shown, and detailed file-by-file logs are written to the log file instead of the console                                                                                                  |
| `--minimal-output`          | Generate only the combined output file (no auxiliary files)                                                                                                                                                                                                      |
| `--skip-output-file`        | Execute operations but skip writing the final output file                                                                                                                                                                                                        |
| `-q, --quiet`               | Suppress all console output                                                                                                                                                                                                                                      |
| `--create-archive`          | Create a backup archive of all processed files                                                                                                                                                                                                                   |
| `--archive-type`            | Type of archive to create (`zip` or `tar.gz`)                                                                                                                                                                                                                    |
| `--security-check`          | Scan files for secrets before merging (`abort`, `skip`, `warn`)                                                                                                                                                                                                  |
| `--preset`                  | One or more preset configuration files for file-specific processing. Files are loaded in order with later files overriding earlier ones                                                                                                                          |
| `--preset-group`            | Specific preset group to use from the configuration. If not specified, all matching presets from all groups are considered                                                                                                                                       |
| `--disable-presets`         | Disable all preset processing even if preset files are loaded                                                                                                                                                                                                    |

## Preset System

The preset system allows you to define file-specific processing rules for
different file types within the same bundle. This is particularly useful for
projects with mixed content types.

### Preset Hierarchy

Presets are loaded in the following order (highest priority wins):

1. **Global Presets** (~/.m1f/global-presets.yml) - Lowest priority
2. **User Presets** (~/.m1f/presets/\*.yml) - Medium priority
3. **Project Presets** (via --preset parameter) - Highest priority

### Quick Preset Examples

```bash
# Use built-in WordPress preset
m1f -s ./wp-site -o bundle.txt --preset presets/wordpress.m1f-presets.yml

# Use specific preset group
m1f -s ./project -o bundle.txt --preset my-presets.yml --preset-group production

# Load multiple preset files (merged in order)
m1f -s . -o out.txt --preset defaults.yml project.yml overrides.yml
```

### Available Processing Actions

- **minify** - Remove unnecessary whitespace (HTML, CSS, JS)
- **strip_tags** - Remove specified HTML tags
- **strip_comments** - Remove comments based on file type
- **compress_whitespace** - Normalize whitespace
- **remove_empty_lines** - Remove all empty lines
- **custom** - Apply custom processors

For detailed preset documentation, see:

- [Preset System Guide](02_m1f_presets.md) - Complete preset documentation
- [Per-File-Type Settings](03_m1f_preset_per_file_settings.md) - File-specific
  overrides

## Usage Examples

### Basic Operations

```bash
# Basic command using a source directory
m1f --source-directory /path/to/your/code \
  --output-file /path/to/combined_output.txt

# Using an input file containing paths to process (one per line)
m1f -i filelist.txt -o combined_output.txt

# Using both source directory and input file together
m1f -s ./source_code -i ./file_list.txt -o ./combined.txt

# Remove scraped metadata from HTML2MD files (new in v2.0.0)
m1f -s ./scraped_docs -o ./clean_docs.txt \
  --include-extensions .md --remove-scraped-metadata
```

### Advanced Operations

```bash
# Using MachineReadable style with verbose logging
m1f -s ./my_project -o ./output/bundle.m1f.txt \
  --separator-style MachineReadable --force --verbose

# Creating a combined file and a backup zip archive
m1f -s ./source_code -o ./dist/combined.txt \
  --create-archive --archive-type zip

# Only include text files under 50KB to avoid large generated files
m1f -s ./project -o ./text_only.txt \
  --max-file-size 50KB --include-extensions .py .js .md .txt .json

# Handle symlinks with cycle detection (new in v2.0.0)
m1f -s ./project -o ./output.txt \
  --include-symlinks --verbose
```

## Security Check

The `--security-check` option scans files for potential secrets using
`detect-secrets` if the library is installed. When secrets are detected you can
decide how the script proceeds:

- `abort` – stop processing immediately and do not create the output file.
- `skip` – omit files that contain secrets from the final output.
- `warn` – include all files but print a summary warning at the end.

If `detect-secrets` is not available, a simplified pattern-based scan is used as
a fallback.

## Output Files

By default, `m1f.py` creates several output files to provide comprehensive
information about the processed files:

1. **Primary output file** - The combined file specified by `--output-file`
   containing all processed files with separators
2. **Log file** - A `.log` file with the same base name as the output file,
   containing detailed processing information
3. **File list** - A `_filelist.txt` file containing the paths of all included
   files
4. **Directory list** - A `_dirlist.txt` file containing all unique directories
   from the included files
5. **Archive file** - An optional backup archive (zip or tar.gz) if
   `--create-archive` is specified

To create only the primary output file and skip the auxiliary files, use the
`--minimal-output` option:

```bash
# Create only the combined output file without any auxiliary files
m1f -s ./src -o ./combined.txt --minimal-output
```

## Common Use Cases

### Documentation Compilation

```bash
# Create a complete documentation bundle from all markdown files
m1f -s ./docs -o ./doc_bundle.m1f.txt --include-extensions .md
```

### Code Review Preparation

```bash
# Bundle specific components for code review
m1f -i code_review_files.txt -o ./review_bundle.m1f.txt
```

### WordPress Development

```bash
# Combine theme or plugin files for AI analysis
m1f -s ./wp-content/themes/my-theme -o ./theme_context.m1f.txt \
  --include-extensions .php .js .css --exclude-paths-file ./exclude_build_files.txt
```

### Project Knowledge Base

```bash
# Create a searchable knowledge base from project documentation
m1f -s ./project -o ./knowledge_base.m1f.txt \
  --include-extensions .md .txt .rst --minimal-output
```

### Documentation Bundles

```bash
# Create a documentation-only bundle using --docs-only
m1f -s ./project -o ./docs_bundle.txt --docs-only

# Equivalent using include-extensions (more verbose)
m1f -s ./project -o ./docs_bundle.txt --include-extensions \
  .1 .1st .2 .3 .4 .5 .6 .7 .8 .adoc .asciidoc .changelog .changes \
  .creole .faq .feature .help .history .info .lhs .litcoffee .ltx \
  .man .markdown .markdown2 .md .mdown .mdtxt .mdtext .mdwn .mdx \
  .me .mkd .mkdn .mkdown .ms .news .nfo .notes .org .pod .pod6 \
  .qmd .rd .rdoc .readme .release .rmd .roff .rst .rtf .story \
  .t .tex .texi .texinfo .text .textile .todo .tr .txt .wiki
```

### HTML2MD Integration

```bash
# Combine scraped markdown files and remove metadata
m1f -s ./scraped_content -o ./clean_content.m1f.txt \
  --include-extensions .md --remove-scraped-metadata

# Merge multiple scraped websites into a clean documentation bundle
m1f -s ./web_content -o ./web_docs.m1f.txt \
  --include-extensions .md --remove-scraped-metadata --separator-style Markdown
```

### Project Analysis and Overview

```bash
# Generate complete project file and directory lists for analysis
m1f -s . -o m1f/project_analysis.txt --skip-output-file \
  --exclude-paths-file .gitignore --excludes m1f/

# This creates (without the main output file):
# - m1f/project_analysis_filelist.txt  # All project files
# - m1f/project_analysis_dirlist.txt   # All directories
# - m1f/project_analysis.log           # Processing log
```

Use this when you need:
- A complete overview of your project structure
- To understand what files m1f will process
- To verify your exclusion patterns are working correctly
- To analyze project composition before creating bundles
- Input for m1f-claude --init to create optimal configurations

The file lists respect all m1f defaults (excluding .git, node_modules, etc.) plus your .gitignore patterns.

## Separator Styles

The `--separator-style` option allows you to choose how files are separated in
the combined output file. Each style is designed for specific use cases, from
human readability to automated parsing.

### Standard Style

A simple, concise separator that shows only the file path:

```
======= path/to/file.py ======
```

### Detailed Style (Default)

A more comprehensive separator that includes file metadata:

```
========================================================================================
== FILE: path/to/file.py
== DATE: 2025-05-15 14:30:21 | SIZE: 2.50 KB | TYPE: .py
== CHECKSUM_SHA256: abcdef1234567890...
========================================================================================
```

### Markdown Style

Formats the metadata as Markdown with proper code blocks, using the file
extension to set syntax highlighting:

````markdown
## path/to/file.py

**Date Modified:** 2025-05-15 14:30:21 | **Size:** 2.50 KB | **Type:** .py |
**Checksum (SHA256):** abcdef1234567890...

```python
# File content starts here
def example():
    return "Hello, world!"
```
````

### MachineReadable Style

A robust format designed for reliable automated parsing and processing:

```text
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
METADATA_JSON:
{
    "original_filepath": "path/to/file.py",
    "original_filename": "file.py",
    "timestamp_utc_iso": "2025-05-15T14:30:21Z",
    "type": ".py",
    "size_bytes": 2560,
    "checksum_sha256": "abcdef1234567890..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---

# File content here

--- PYMK1F_END_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---
```

### None Style

Files are concatenated directly without any separators between them.

## Additional Notes

### Binary File Handling

While the script can include binary files using the `--include-binary-files`
option, these are read as text (UTF-8 with error ignoring). This can result in
garbled/unreadable content in the output and significantly increase file size.

### Encoding Behavior

The script uses UTF-8 as the default encoding for reading and writing files.
When using `--convert-to-charset`, the original encoding of each file is
automatically detected and recorded in the file metadata.

### Documentation File Extensions

m1f recognizes the following extensions as documentation files:
- Man pages: .1, .1st, .2, .3, .4, .5, .6, .7, .8
- Markup formats: .adoc, .asciidoc, .md, .markdown, .mdx, .rst, .org, .textile, .wiki
- Text formats: .txt, .text, .readme, .changelog, .changes, .todo, .notes
- Developer docs: .pod, .rdoc, .yard, .lhs, .litcoffee
- LaTeX/TeX: .tex, .ltx, .texi, .texinfo
- Other: .rtf, .nfo, .faq, .help, .history, .info, .news, .release, .story

When `--prefer-utf8-for-text-files` is enabled (default), m1f prefers UTF-8 encoding for:
- All Markdown variants (.md, .markdown, .mdx, .rmd, .qmd, etc.)
- Plain text files (.txt, .text, .readme, .changelog, .todo, etc.)
- Structured text formats (.rst, .org, .textile, .wiki, etc.)
- Developer documentation (.pod, .rdoc, .lhs, .litcoffee, etc.)

### Line Ending Behavior

The `--line-ending` option only affects the line endings generated by the script
(in separators and blank lines), not those in the original files. The line
endings of original files remain unchanged.

### Archive Creation

When `--create-archive` is used, the archive will contain all files selected for
inclusion in the main output file, using their relative paths within the
archive.

### Architecture

The m1f tool has been completely rewritten as a modular Python package:

```
tools/m1f/
├── __init__.py          # Package initialization
├── cli.py               # Command-line interface
├── core.py              # Main orchestration logic
├── config.py            # Configuration management
├── constants.py         # Constants and enums
├── exceptions.py        # Custom exceptions
├── file_processor.py    # File handling with async I/O
├── encoding_handler.py  # Smart encoding detection
├── security_scanner.py  # Secret detection integration
├── output_writer.py     # Output generation
├── archive_creator.py   # Archive functionality
├── separator_generator.py # Separator formatting
├── logging.py           # Structured logging
└── utils.py             # Utility functions
```

### Performance Considerations

With the new async I/O architecture, m1f can handle large projects more
efficiently:

- Concurrent file reading and processing
- Memory-efficient streaming for large files
- Smart caching to avoid redundant operations
- Content deduplication saves space and processing time

For extremely large directories with tens of thousands of files or very large
individual files, the script might take some time to process.

## Preset System

The preset system provides powerful file-specific processing capabilities:

### Key Features

- **Hierarchical Configuration**: Settings cascade from global → project → CLI
- **File-Type Processing**: Apply different rules to different file extensions
- **Processing Actions**:
  - `minify` - Reduce file size by removing unnecessary characters
  - `strip_tags` - Remove HTML tags
  - `strip_comments` - Remove code comments
  - `compress_whitespace` - Reduce multiple spaces/newlines
  - `remove_empty_lines` - Clean up empty lines
- **Per-File Settings**: Override security, size limits, and filters per file
  type
- **Custom Processors**: Extend with your own processing functions

### Quick Start

1. Create a preset file in your project (`.m1f-presets.yml`):

```yaml
globals:
  global_settings:
    include_extensions: [.js, .css, .html, .php]
    security_check: warn
    max_file_size: 1MB

  presets:
    frontend:
      extensions: [.js, .css, .html]
      actions: [minify]

    backend:
      extensions: [.php]
      security_check: fail
      max_file_size: 500KB
```

2. Use the preset:

```bash
m1f -s ./src -o output.txt --preset .m1f-presets.yml
```

### Documentation

**Core Documentation:**

- [Quick Reference](./09_quick_reference.md) - Common commands and patterns
- [CLI Reference](./07_cli_reference.md) - Complete command-line reference
- [Default Excludes Guide](./26_default_excludes_guide.md) - What's excluded automatically
- [Troubleshooting Guide](./08_troubleshooting.md) - Common issues and solutions

**Preset System:**

- [Complete Preset Guide](02_m1f_presets.md) - Full preset system documentation
- [Per-File Settings](03_m1f_preset_per_file_settings.md) - Advanced file-type
  overrides
- [Example Presets](../presets/) - Ready-to-use preset templates

**Workflows and Integration:**

- [Development Workflow](./21_development_workflow.md) - Best practices
- [Claude Code Integration](./31_claude_code_integration.md) - AI-assisted
  development
- [Auto Bundle Guide](./20_auto_bundle_guide.md) - Automated bundling

========================================================================================
== FILE: docs/01_m1f/01_quick_reference.md
== DATE: 2025-06-12 12:50:58 | SIZE: 5.01 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: a8747ffb384601f29cfb539367299132fecf438eb2e887754ef336ab4cef6c95
========================================================================================
# m1f Quick Reference

## Most Common Commands

### Basic File Combination

```bash
# Combine all files in current directory
m1f -s . -o output.txt

# Combine specific directory
m1f -s ./src -o bundle.txt

# Force overwrite existing output
m1f -s . -o output.txt -f
```

### Using Presets (v3.2.0+)

```bash
# Use a preset file (can define ALL parameters)
m1f --preset production.yml -o output.txt

# Preset can even define source and output
m1f --preset full-config.yml

# Override preset values with CLI
m1f --preset prod.yml -o custom-output.txt -v
```

### File Type Filtering

```bash
# Only Python files
m1f -s . -o code.txt --include-extensions .py

# Multiple file types
m1f -s . -o docs.txt --include-extensions .md .txt .rst

# Exclude certain types
m1f -s . -o output.txt --exclude-extensions .pyc .log
```

### Directory and Pattern Exclusions

```bash
# Exclude specific directories
m1f -s . -o output.txt --excludes "tests/" "docs/"

# Exclude patterns
m1f -s . -o output.txt --excludes "*.test.js" "*/tmp/*"

# Use gitignore file
m1f -s . -o output.txt --exclude-paths-file .gitignore
```

### Output Formatting

```bash
# Markdown format
m1f -s . -o output.md --separator-style Markdown

# Machine-readable JSON metadata
m1f -s . -o output.txt --separator-style MachineReadable

# No separators
m1f -s . -o output.txt --separator-style None
```

### Size Management

```bash
# Skip large files
m1f -s . -o output.txt --max-file-size 100KB

# Include only small text files
m1f -s . -o small.txt --max-file-size 50KB --include-extensions .txt .md
```

### Archive Creation

```bash
# Create zip backup
m1f -s . -o output.txt --create-archive

# Create tar.gz backup
m1f -s . -o output.txt --create-archive --archive-type tar.gz
```

### Using Presets

```bash
# Use single preset
m1f -s . -o output.txt --preset wordpress.m1f-presets.yml

# Use preset group
m1f -s . -o output.txt --preset web.yml --preset-group frontend

# Multiple presets (merged in order)
m1f -s . -o output.txt --preset base.yml project.yml
```

## Common Patterns

### Documentation Bundle

```bash
m1f -s ./docs -o documentation.txt \
    --include-extensions .md .rst .txt \
    --separator-style Markdown
```

### Source Code Bundle

```bash
m1f -s ./src -o source-code.txt \
    --include-extensions .py .js .ts .jsx .tsx \
    --excludes "*.test.*" "*.spec.*" \
    --max-file-size 500KB
```

### WordPress Theme/Plugin

```bash
m1f -s ./wp-content/themes/mytheme -o theme.txt \
    --include-extensions .php .js .css \
    --excludes "node_modules/" "vendor/" \
    --preset presets/wordpress.m1f-presets.yml
```

### Clean Documentation Export

```bash
m1f -s ./scraped_docs -o clean-docs.txt \
    --include-extensions .md \
    --remove-scraped-metadata \
    --separator-style Markdown
```

### Multiple Exclude/Include Files

```bash
# Multiple exclude files (merged)
m1f -s . -o output.txt \
    --exclude-paths-file .gitignore .dockerignore custom-excludes.txt

# Whitelist mode with include files
m1f -s . -o api-bundle.txt \
    --include-paths-file api-files.txt core-files.txt \
    --exclude-paths-file .gitignore
```

### Working with File Lists (-i)

```bash
# Single input file
m1f -s . -i files.txt -o output.txt

# Merge multiple file lists (Bash)
m1f -s . -i <(cat critical.txt important.txt nice-to-have.txt) -o output.txt

# Combine with filters (input files bypass filters)
m1f -s . -i must-include.txt -o output.txt \
    --exclude-paths-file .gitignore
```

### CI/CD Integration

```bash
# Create timestamped output
m1f -s . -o build.txt -t

# Minimal output for automation
m1f -s . -o output.txt --minimal-output --quiet

# With security check
m1f -s . -o output.txt --security-check abort
```

## Quick Option Reference

| Short | Long                 | Purpose                   |
| ----- | -------------------- | ------------------------- |
| `-s`  | `--source-directory` | Source directory          |
| `-i`  | `--input-file`       | File list input           |
| `-o`  | `--output-file`      | Output file (required)    |
| `-f`  | `--force`            | Overwrite existing        |
| `-t`  | `--add-timestamp`    | Add timestamp to filename |
| `-v`  | `--verbose`          | Detailed output           |
| `-q`  | `--quiet`            | Suppress output           |

## Separator Styles

- **Standard**: Simple filename separator
- **Detailed**: Full metadata (default)
- **Markdown**: Markdown formatting
- **MachineReadable**: JSON metadata
- **None**: No separators

## Size Units

- `B`: Bytes
- `KB`: Kilobytes (1024 bytes)
- `MB`: Megabytes
- `GB`: Gigabytes

Example: `--max-file-size 1.5MB`

## Exit on Success

```bash
m1f -s . -o output.txt && echo "Success!"
```

## Aliases Setup

Add to your shell profile:

```bash
alias m1f='python /path/to/m1f/tools/m1f.py'
alias m1f-docs='m1f -s . -o docs.txt --include-extensions .md .txt'
alias m1f-code='m1f -s . -o code.txt --include-extensions .py .js'
```

## Need Help?

- Full options: `m1f --help`
- [Complete CLI Reference](./02_cli_reference.md)
- [Troubleshooting Guide](./03_troubleshooting.md)
- [Preset Documentation](./10_m1f_presets.md)

========================================================================================
== FILE: docs/01_m1f/02_cli_reference.md
== DATE: 2025-06-12 12:50:58 | SIZE: 10.64 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 22d4cffc1e1f82cfca8abd97e6d19ec0e0d05706cb43c5dc0164f3de2d312bb2
========================================================================================
# m1f CLI Reference

This is a comprehensive reference for all command-line parameters and flags
available in m1f v3.2.0.

## Synopsis

```bash
m1f [-h] [--version] [-s DIR] [-i FILE] -o FILE
    [--input-include-files [FILE ...]]
    [--separator-style {Standard,Detailed,Markdown,MachineReadable,None}]
    [--line-ending {lf,crlf}] [-t] [--filename-mtime-hash]
    [--excludes [PATTERN ...]] [--exclude-paths-file FILE ...]
    [--include-paths-file FILE ...]
    [--include-extensions [EXT ...]] [--exclude-extensions [EXT ...]]
    [--include-dot-paths] [--include-binary-files] [--include-symlinks]
    [--max-file-size SIZE] [--no-default-excludes]
    [--remove-scraped-metadata]
    [--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}]
    [--abort-on-encoding-error] [--no-prefer-utf8-for-text-files]
    [--security-check {error,warn,skip}]
    [--create-archive] [--archive-type {zip,tar.gz}] [-f]
    [--minimal-output] [--skip-output-file] [--allow-duplicate-files]
    [-v] [-q]
    [--preset FILE [FILE ...]] [--preset-group GROUP]
    [--disable-presets]
```

## General Options

### `--help`, `-h`

Show help message and exit.

### `--version`

Show program version and exit. Current version: v3.2.0

## Input/Output Options

### `--source-directory DIR`, `-s DIR`

Path to the directory containing files to combine. Can be used multiple times to
process multiple directories.

### `--input-file FILE`, `-i FILE`

Path to a text file containing a list of files/directories to process, one per
line. These files are explicitly included and bypass all filter rules.

**Note**: At least one of `-s` (source directory) or `-i` (input file) must be
specified. When using `-i` alone, relative paths in the input file are resolved
relative to the current working directory. When both `-s` and `-i` are used,
relative paths in the input file are resolved relative to the source directory.

Example input file:

```
# Comments are supported
src/main.py          # Relative to source directory
/absolute/path.txt   # Absolute path
docs/**/*.md         # Glob patterns supported
```

**Merging multiple file lists with Bash**:

```bash
# Create temporary merged file
cat files1.txt files2.txt files3.txt > merged_files.txt
m1f -s . -i merged_files.txt -o output.txt

# Or use process substitution (Linux/Mac)
m1f -s . -i <(cat files1.txt files2.txt files3.txt) -o output.txt

# Remove duplicates while merging
m1f -s . -i <(cat files1.txt files2.txt | sort -u) -o output.txt
```

### `--output-file FILE`, `-o FILE` (REQUIRED)

Path where the combined output file will be created. This is the only required
parameter.

### `--input-include-files [FILE ...]`

Files to include at the beginning of the output. The first file is treated as an
introduction/header.

## Output Formatting

### `--separator-style {Standard,Detailed,Markdown,MachineReadable,None}`

Format of the separator between files. Default: `Detailed`

- **Standard**: Simple separator with filename
- **Detailed**: Includes file metadata (date, size, type, checksum)
- **Markdown**: Markdown-formatted headers and metadata
- **MachineReadable**: JSON metadata blocks for programmatic parsing
- **None**: No separators (files concatenated directly)

### `--line-ending {lf,crlf}`

Line ending style for generated content. Default: `lf`

- **lf**: Unix/Linux/Mac style (\n)
- **crlf**: Windows style (\r\n)

### `--add-timestamp`, `-t`

Add timestamp to output filename in format `_YYYYMMDD_HHMMSS`.

### `--filename-mtime-hash`

Add hash of file modification times to output filename. Useful for
cache-busting.

## File Filtering

### `--excludes [PATTERN ...]`

Paths, directories, or glob patterns to exclude. Supports wildcards.

Example: `--excludes "*/tests/*" "*.pyc" "node_modules/"`

### `--exclude-paths-file FILE ...`

File(s) containing paths to exclude (supports gitignore format). Each pattern on
a new line. Multiple files can be specified and will be merged. Non-existent
files are skipped gracefully.

Examples:

```bash
# Single file
m1f -s . -o output.txt --exclude-paths-file .gitignore

# Multiple files
m1f -s . -o output.txt --exclude-paths-file .gitignore .m1fignore custom-excludes.txt
```

### `--include-paths-file FILE ...`

File(s) containing patterns to include (supports gitignore format). When
specified, only files matching these patterns will be included (whitelist mode).
Multiple files can be specified and will be merged. Non-existent files are
skipped gracefully.

**Processing Order**:

1. Files from `-i` (input-file) are always included, bypassing all filters
2. Files from `-s` (source directory) are filtered by include patterns first
3. Then exclude patterns are applied

**Path Resolution**: Same as `-i` - relative paths are resolved relative to the
source directory (`-s`).

Example include file:

```
# Include all Python files
*.py
# Include specific directories
src/**/*
api/**/*
# Exclude tests even if they match above
!test_*.py
```

Examples:

```bash
# Single file
m1f -s . -o output.txt --include-paths-file important-files.txt

# Multiple files
m1f -s . -o output.txt --include-paths-file core-files.txt api-files.txt

# Combined with input file (input file takes precedence)
m1f -s . -i explicit-files.txt -o output.txt --include-paths-file patterns.txt
```

### `--include-extensions [EXT ...]`

Only include files with these extensions. Extensions should include the dot.

Example: `--include-extensions .py .js .md`

### `--exclude-extensions [EXT ...]`

Exclude files with these extensions.

Example: `--exclude-extensions .pyc .pyo`

### `--include-dot-paths`

Include files and directories starting with a dot (hidden files). By default,
these are excluded.

### `--include-binary-files`

Attempt to include binary files. Use with caution as this may produce unreadable
output.

### `--include-symlinks`

Follow symbolic links. Be careful of infinite loops!

### `--max-file-size SIZE`

Skip files larger than specified size. Supports KB, MB, GB suffixes.

Examples: `10KB`, `1.5MB`, `2GB`

### `--no-default-excludes`

Disable default exclusions. By default, m1f excludes:

- `.git/`, `.svn/`, `.hg/`
- `node_modules/`, `venv/`, `.venv/`
- `__pycache__/`, `*.pyc`
- `.DS_Store`, `Thumbs.db`

### `--remove-scraped-metadata`

Remove scraped metadata (URL, timestamp) from HTML2MD files during processing.
Useful when processing scraped content.

## Character Encoding

### `--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}`

Convert all files to specified encoding. Default behavior is to detect and
preserve original encoding.

### `--abort-on-encoding-error`

Abort if encoding conversion fails. By default, files with encoding errors are
skipped with a warning.

### `--no-prefer-utf8-for-text-files`

Disable UTF-8 preference for text files (.md, .txt, .rst) when encoding is
ambiguous. By default, m1f prefers UTF-8 encoding for these file types when
chardet detects windows-1252 with less than 95% confidence, as these files often
contain UTF-8 emojis or special characters.

## Security Options

### `--security-check {error,warn,skip}`

Check for sensitive information in files using detect-secrets.

- **error**: Stop processing if secrets are found (default in v3.2)
- **warn**: Include files but show warnings
- **skip**: Disable security scanning (not recommended)

## Archive Options

### `--create-archive`

Create backup archive of processed files in addition to the combined output.

### `--archive-type {zip,tar.gz}`

Type of archive to create. Default: `zip`

## Output Control

### `--force`, `-f`

Force overwrite of existing output file without prompting.

### `--minimal-output`

Only create the combined file (no auxiliary files like file lists or directory
structure).

### `--skip-output-file`

Skip creating the main output file. Useful when only creating an archive.

### `--allow-duplicate-files`

Allow files with identical content to be included in the output. By default, m1f
deduplicates files based on their content checksum to save space and tokens.
With this flag, all files are included even if they have identical content.

### `--verbose`, `-v`

Enable verbose output with detailed processing information.

### `--quiet`, `-q`

Suppress all console output except errors.

## Preset Configuration

### `--preset FILE [FILE ...]`

Load preset configuration file(s) for file-specific processing. Multiple files
are merged in order.

### `--preset-group GROUP`

Use a specific preset group from the configuration file.

### `--disable-presets`

Disable all preset processing, even if preset files are specified.

## Exit Codes

- **0**: Success
- **1**: General error (M1FError base)
- **2**: File not found (FileNotFoundError)
- **3**: Permission denied (PermissionError)
- **4**: Encoding error (EncodingError)
- **5**: Configuration error (ConfigurationError)
- **6**: Validation error (ValidationError)
- **7**: Security check failed (SecurityError)
- **8**: Archive creation failed (ArchiveError)
- **130**: Operation cancelled by user (Ctrl+C)

## Environment Variables

**Note**: The following environment variables are documented for future
implementation but are not currently supported in v3.2.0:

- `M1F_DEFAULT_PRESET` - Path to default preset file (not implemented)
- `M1F_SECURITY_CHECK` - Default security check mode (not implemented)
- `M1F_MAX_FILE_SIZE` - Default maximum file size limit (not implemented)

## Subcommands

### `auto-bundle`

Create multiple m1f bundles based on a YAML configuration file
(`.m1f.config.yml`).

```bash
# Create all bundles
m1f auto-bundle

# Create specific bundle
m1f auto-bundle BUNDLE_NAME

# List available bundles
m1f auto-bundle --list

# With options
m1f auto-bundle --verbose
m1f auto-bundle --quiet
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle` that can be used interchangeably:

```bash
# These are equivalent:
m1f auto-bundle
m1f-update

# With specific bundle:
m1f auto-bundle code
m1f-update code
```

**Options:**

- `BUNDLE_NAME`: Name of specific bundle to create (optional)
- `--list`: List available bundles from configuration
- `--verbose`, `-v`: Enable verbose output
- `--quiet`, `-q`: Suppress all console output

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for detailed configuration
instructions.

## Notes

1. **Module Invocation**: You can use either `m1f` or
   `python -m tools.m1f`, or set up the `m1f` alias as described in the
   development workflow.

2. **Input Requirements**: At least one of `-s` (source directory) or `-i`
   (input file) must be specified. If neither is provided, m1f will show an
   error message.

3. **Gitignore**: m1f respects .gitignore files by default unless
   `--no-default-excludes` is used.

4. **Performance**: For large projects, use `--include-extensions` to limit
   processing to specific file types.

========================================================================================
== FILE: docs/01_m1f/03_troubleshooting.md
== DATE: 2025-06-12 12:50:58 | SIZE: 4.80 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 49b131114782d7065a7064e1daa5d6571e14f23f0e44484806e15fa09bd26dc4
========================================================================================
# Troubleshooting Guide

This guide covers common issues and error messages you might encounter when
using m1f.

## Common Issues

### Module Import Error

**Problem**: Running `m1f` results in:

```
ModuleNotFoundError: No module named 'm1f'
```

**Solution**: Use the direct script invocation instead:

```bash
m1f [options]
```

Or set up the alias as described in the
[Development Workflow](./21_development_workflow.md).

### Permission Denied

**Problem**: Error when trying to write output file:

```
PermissionError: [Errno 13] Permission denied: '/path/to/output.txt'
```

**Solutions**:

1. Check write permissions in the output directory
2. Use a different output location
3. Run with appropriate permissions (avoid using sudo unless necessary)

### File Not Found

**Problem**: Source directory or input file not found.

**Solutions**:

1. Verify the path exists: `ls -la /path/to/source`
2. Use absolute paths to avoid confusion
3. Check for typos in the path

### Encoding Errors

**Problem**: `UnicodeDecodeError` when processing files.

**Solutions**:

1. Use `--convert-to-charset utf-8` to force UTF-8 encoding
2. Skip problematic files with proper exclusion patterns
3. Use `--abort-on-encoding-error` to identify problematic files

Example:

```bash
m1f -s . -o output.txt --convert-to-charset utf-8
```

### Memory Issues with Large Projects

**Problem**: Memory usage is too high or process is killed.

**Solutions**:

1. Use `--max-file-size` to limit individual file sizes
2. Process specific directories instead of entire project
3. Use `--include-extensions` to limit file types
4. Enable minimal output mode: `--minimal-output`

Example:

```bash
m1f -s . -o output.txt --max-file-size 1MB --include-extensions .py .md
```

### Symlink Cycles

**Problem**: Infinite loop when following symlinks.

**Solutions**:

1. Don't use `--include-symlinks` unless necessary
2. Exclude directories with circular symlinks
3. m1f has built-in cycle detection, but it's better to avoid the issue

### Security Check Failures

**Problem**: Files contain sensitive information.

**Solutions**:

1. Review the detected secrets
2. Use `--security-check skip` to skip files with secrets
3. Use `--security-check warn` to include but get warnings
4. Add sensitive files to exclusions

Example:

```bash
m1f -s . -o output.txt --security-check warn --excludes ".env" "config/secrets.yml"
```

## Error Messages

### "Output file already exists"

**Meaning**: The specified output file exists and would be overwritten.

**Solution**: Use `-f` or `--force` to overwrite, or choose a different output
filename.

### "No files found to process"

**Meaning**: No files matched the inclusion criteria.

**Solutions**:

1. Check your source directory contains files
2. Verify extension filters aren't too restrictive
3. Check exclusion patterns aren't excluding everything
4. Use `--verbose` to see what's being processed

### "File size exceeds maximum allowed"

**Meaning**: A file is larger than the specified `--max-file-size`.

**Solution**: The file is automatically skipped. Adjust `--max-file-size` if
needed.

### "Failed to create archive"

**Meaning**: Archive creation failed (disk space, permissions, etc.).

**Solutions**:

1. Check available disk space
2. Verify write permissions
3. Try a different archive format
4. Skip archive creation and create output file only

### "Preset file not found"

**Meaning**: The specified preset configuration file doesn't exist.

**Solutions**:

1. Check the preset file path
2. Use absolute paths for preset files
3. Verify preset file exists: `ls -la presets/`

## Performance Optimization

### Slow Processing

**Solutions**:

1. Use `--include-extensions` to limit file types
2. Exclude large directories like `node_modules`
3. Use `--max-file-size` to skip large files
4. Enable minimal output: `--minimal-output`
5. Disable security checks if not needed

### High Memory Usage

**Solutions**:

1. Process smaller directory trees
2. Use file size limits
3. Exclude binary files
4. Process in batches using input file lists

## Debug Mode

For detailed debugging information:

```bash
m1f -s . -o output.txt --verbose
```

This will show:

- Files being processed
- Files being skipped and why
- Processing times
- Detailed error messages

## Getting Help

1. Check the [CLI Reference](./02_cli_reference.md) for parameter details
2. Review [examples in the main documentation](00_m1f.md#common-use-cases)
3. Check the [preset documentation](./10_m1f_presets.md) for configuration
   issues
4. Report issues at the project repository

## Exit Codes

Understanding exit codes can help in scripting:

- `0`: Success
- `1`: General error
- `2`: Invalid arguments
- `3`: File not found
- `4`: Permission denied
- `5`: Security check failed

Use in scripts:

```bash
if m1f -s . -o output.txt; then
    echo "Success"
else
    echo "Failed with exit code: $?"
fi
```

========================================================================================
== FILE: docs/01_m1f/10_m1f_presets.md
== DATE: 2025-06-12 12:50:58 | SIZE: 13.09 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: ff6065b882a8d46f39ce1fd978e810508add4816c241c1e08723ae090c45bdc7
========================================================================================
# m1f Preset System Documentation

The m1f preset system allows you to define file-specific processing rules,
enabling different handling for different file types within the same bundle.

## Overview

Instead of applying the same settings to all files, presets let you:

- Minify HTML files while preserving source code formatting
- Strip comments from production code but keep them in documentation
- Apply different separator styles for different file types
- Truncate large data files while keeping full source code
- **NEW**: Override security checks and size limits per file type
- **NEW**: Integrate with auto-bundling for intelligent project organization

## Quick Start

1. **Use a built-in preset**:

   ```bash
   m1f -s ./my-project -o bundle.txt --preset presets/wordpress.m1f-presets.yml
   ```

2. **Specify a preset group**:

   ```bash
   m1f -s ./site -o bundle.txt --preset presets/web-project.m1f-presets.yml --preset-group frontend
   ```

3. **Use multiple preset files**:
   ```bash
   m1f -s . -o bundle.txt --preset company-presets.yml project-presets.yml
   ```

## Preset Configuration File

Preset files are YAML documents that define processing rules:

```yaml
# Group name
my_project:
  description: "Processing rules for my project"
  enabled: true
  priority: 10 # Higher priority groups are checked first
  base_path: "src" # Optional base path for patterns

  presets:
    # Preset for Python files
    python:
      extensions: [".py"]
      patterns:
        - "*.py"
        - "lib/**/*.py"
      actions:
        - strip_comments
        - remove_empty_lines
      separator_style: "Detailed"
      include_metadata: true

    # Preset for HTML files
    html:
      extensions: [".html", ".htm"]
      actions:
        - minify
        - strip_tags
      strip_tags: ["script", "style"]
      preserve_tags: ["pre", "code"]
      max_lines: 500 # Truncate after 500 lines

    # Default preset for unmatched files
    default:
      actions: []
      include_metadata: true
```

## Available Actions

### Built-in Actions

1. **`minify`** - Reduces file size by removing unnecessary whitespace

   - HTML: Removes comments, compresses whitespace
   - CSS: Removes comments, compresses rules
   - JS: Basic minification (removes comments and newlines)

2. **`strip_tags`** - Removes HTML tags

   - Use `strip_tags` to list tags to remove
   - Use `preserve_tags` to protect specific tags

3. **`strip_comments`** - Removes comments based on file type

   - Python: Removes # comments (preserves docstrings)
   - JS/Java/C/C++: Removes // and /\* \*/ comments

4. **`compress_whitespace`** - Normalizes whitespace

   - Replaces multiple spaces with single space
   - Reduces multiple newlines to double newline

5. **`remove_empty_lines`** - Removes all empty lines

6. **`custom`** - Apply custom processor
   - Specify processor with `custom_processor`
   - Pass arguments with `processor_args`

### Built-in Custom Processors

1. **`truncate`** - Limit content length

   ```yaml
   actions:
     - custom
   custom_processor: "truncate"
   processor_args:
     max_chars: 1000
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   actions:
     - custom
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)api[_-]?key\s*[:=]\s*["\']?[\w-]+["\']?'
   ```

3. **`extract_functions`** - Extract only function definitions (Python)
   ```yaml
   actions:
     - custom
   custom_processor: "extract_functions"
   ```

## Preset Options

### File Matching

- **`extensions`**: List of file extensions (e.g., `[".py", ".js"]`)
- **`patterns`**: Glob patterns for matching files (e.g., `["src/**/*.py"]`)

### Processing Options

- **`actions`**: List of processing actions to apply
- **`strip_tags`**: HTML tags to remove
- **`preserve_tags`**: HTML tags to keep when stripping
- **`separator_style`**: Override default separator ("Standard", "Detailed",
  "Markdown", "None")
- **`include_metadata`**: Whether to include file metadata (default: true)
- **`max_lines`**: Truncate file after N lines

### Custom Processing

- **`custom_processor`**: Name of custom processor
- **`processor_args`**: Arguments for custom processor

## Examples

### WordPress Project

```yaml
wordpress:
  description: "WordPress project processing"

  presets:
    php:
      extensions: [".php"]
      actions:
        - strip_comments
        - remove_empty_lines

    config:
      patterns: ["wp-config*.php", ".env*"]
      actions:
        - custom
      custom_processor: "redact_secrets"

    sql:
      extensions: [".sql"]
      actions:
        - strip_comments
      max_lines: 1000 # Truncate large dumps
```

### Frontend Project

```yaml
frontend:
  description: "React/Vue/Angular project"

  presets:
    components:
      extensions: [".jsx", ".tsx", ".vue"]
      actions:
        - strip_comments
        - compress_whitespace

    styles:
      extensions: [".css", ".scss"]
      actions:
        - minify
      # Note: exclude_patterns is available in global_settings, not in presets

    images:
      extensions: [".png", ".jpg", ".svg"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 50 # Just filename
```

### Documentation Project

```yaml
documentation:
  description: "Documentation processing"

  presets:
    markdown:
      extensions: [".md", ".mdx"]
      actions:
        - remove_empty_lines
      separator_style: "Markdown"

    code_examples:
      patterns: ["examples/**/*"]
      actions:
        - strip_comments
      max_lines: 50 # Keep examples concise
```

## Priority and Selection

When multiple preset groups are loaded:

1. Groups are checked by priority (highest first)
2. Within a group, presets are checked in order:
   - Extension matches
   - Pattern matches
   - Default preset
3. First matching preset is used
4. If no preset matches, standard m1f processing applies

## Command Line Usage

```bash
# Use single preset file
m1f -s . -o out.txt --preset my-presets.yml

# Use specific group
m1f -s . -o out.txt --preset presets.yml --preset-group backend

# Multiple preset files (merged in order)
m1f -s . -o out.txt --preset base.yml project.yml

# Disable all presets
m1f -s . -o out.txt --preset presets.yml --disable-presets
```

## Complete List of Supported Settings

### Global Settings

These apply to all files unless overridden:

```yaml
global_settings:
  # Encoding and formatting
  encoding: "utf-8"
  separator_style: "Detailed"
  line_ending: "lf"

  # Include/exclude patterns
  include_patterns: ["src/**/*", "lib/**/*"]
  exclude_patterns: ["*.min.js", "*.map"]
  include_extensions: [".py", ".js", ".md"]
  exclude_extensions: [".log", ".tmp"]

  # File filtering
  include_dot_paths: false
  include_binary_files: false
  include_symlinks: false
  no_default_excludes: false
  max_file_size: "10MB"

  # Exclude/include file(s) - can be single file or list
  exclude_paths_file: ".gitignore"
  # Or multiple files:
  # exclude_paths_file:
  #   - ".gitignore"
  #   - ".m1fignore"
  #   - "custom-excludes.txt"

  # Include file(s) for whitelist mode
  # include_paths_file: "important-files.txt"
  # Or multiple files:
  # include_paths_file:
  #   - "core-files.txt"
  #   - "api-files.txt"

  # Processing options
  remove_scraped_metadata: true
  abort_on_encoding_error: false

  # Security
  security_check: "warn" # abort, skip, warn
```

### Extension-Specific Settings

All file-specific settings can now be overridden per extension in
global_settings or in individual presets:

```yaml
global_settings:
  extensions:
    .md:
      actions: [remove_empty_lines]
      security_check: null # Disable security checks for markdown
      remove_scraped_metadata: true
    .php:
      actions: [strip_comments]
      security_check: "abort" # Strict security for PHP
      max_file_size: "5MB"
    .css:
      actions: [minify]
      max_file_size: "50KB" # Stricter size limit for CSS
    .log:
      include_dot_paths: true # Include hidden log files
      max_file_size: "100KB"

presets:
  sensitive_code:
    extensions: [".env", ".key", ".pem"]
    security_check: "abort"
    include_binary_files: false

  documentation:
    extensions: [".md", ".txt", ".rst"]
    security_check: null # No security check for docs
    remove_scraped_metadata: true
```

## Advanced Examples

### Security Check per File Type

Disable security checks for documentation but keep them for code:

```yaml
security_example:
  global_settings:
    security_check: "abort" # Default: strict

    extensions:
      .md:
        security_check: null # Disable for markdown
      .txt:
        security_check: null # Disable for text
      .rst:
        security_check: null # Disable for reStructuredText
      .php:
        security_check: "abort" # Keep strict for PHP
      .js:
        security_check: "warn" # Warn only for JS
      .env:
        security_check: "abort" # Very strict for env files
```

### Size Limits per File Type

Different size limits for different file types:

```yaml
size_limits:
  global_settings:
    max_file_size: "1MB" # Default limit

    extensions:
      .css:
        max_file_size: "50KB" # Stricter for CSS
      .js:
        max_file_size: "100KB" # JavaScript limit
      .php:
        max_file_size: "5MB" # More lenient for PHP
      .sql:
        max_file_size: "10MB" # Large SQL dumps allowed
      .log:
        max_file_size: "500KB" # Log file limit

  presets:
    # Override for specific patterns
    vendor_files:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      max_file_size: "10KB" # Very small for vendor files
```

### Different Processing by Location

Process files differently based on their location:

```yaml
conditional:
  presets:
    # Production files - minify and strip
    production:
      patterns: ["dist/**/*", "build/**/*"]
      actions: [minify, strip_comments]

    # Development files - keep readable
    development:
      patterns: ["src/**/*", "dev/**/*"]
      actions: [remove_empty_lines]

    # Vendor files - skip processing
    vendor:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      actions: [] # No processing
```

### Combining Multiple Presets

You can load multiple preset files that build on each other:

```bash
m1f -s . -o bundle.txt \
  --preset base-rules.yml \
  --preset project-specific.yml \
  --preset production-overrides.yml
```

## Creating Custom Presets

1. **Start with a template**:

   ```bash
   # Use the comprehensive template with all available settings
   cp presets/template-all-settings.m1f-presets.yml my-project.m1f-presets.yml

   # Or start from a simpler example
   cp presets/web-project.m1f-presets.yml my-project.m1f-presets.yml
   ```

2. **Customize for your project**:

   - Identify file types needing special handling
   - Choose appropriate actions
   - Test with a small subset first

3. **Tips**:
   - Use `max_lines` for generated or data files
   - Apply `minify` only to production builds
   - Keep `preserve_tags` for code examples in HTML
   - Use high priority for project-specific rules

## Integration with CI/CD

```yaml
# GitHub Actions example
- name: Create bundle with presets
  run: |
    m1f \
      -s . \
      -o release-bundle.txt \
      --preset .github/release-presets.yml \
      --preset-group production
```

## Troubleshooting

### Preset not applying

- Check file extension includes the dot (`.py` not `py`)
- Verify pattern matches with `--verbose` flag
- Ensure preset group is enabled

### Wrong preset selected

- Check priority values (higher = checked first)
- Use specific patterns over broad extensions
- Use `--preset-group` to target specific group

### Processing errors

- Some actions may not work on all file types
- Binary files skip most processing
- Use `--verbose` to see which presets are applied

## Auto-Bundling Integration

The preset system integrates seamlessly with the auto-bundling scripts:

### Using Presets with Auto-Bundle

1. **With VS Code Tasks**:

   - Use the "Auto Bundle: With Preset" task
   - Select your preset file and optional group
   - The bundle will apply file-specific processing

2. **With m1f-update Command**:

   ```bash
   # Create all bundles with auto-bundle
   m1f-update

   # Create specific bundle
   m1f-update wordpress

   # List available bundles
   m1f-update --list
   ```

3. **Available Preset Bundles**:
   - `wordpress` - Theme and plugin development
   - `web-project` - Frontend/backend web projects
   - `documentation` - Documentation-focused bundles
   - Custom presets in `presets/` directory

### Benefits

- **Intelligent Filtering**: Each preset knows which files to include
- **Optimized Processing**: Apply minification only where beneficial
- **Security Control**: Different security levels for different file types
- **Size Management**: Appropriate size limits per file type

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for more details on the
bundling system.

## See Also

- [**Preset System Complete Reference**](./10_preset_reference.md) -
  Comprehensive reference with all settings, undocumented features, and advanced
  patterns
- [**Per-File Settings Guide**](./11_preset_per_file_settings.md) - Deep dive
  into per-file processing
- [**Auto Bundle Guide**](./20_auto_bundle_guide.md) - Automated bundling with
  presets

========================================================================================
== FILE: docs/01_m1f/11_preset_per_file_settings.md
== DATE: 2025-06-10 14:50:13 | SIZE: 6.75 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: a219a38c527acfc84e254b10186473f4e3a027b94fac8726a04314032b41dc49
========================================================================================
# Per-File-Type Settings in m1f Presets

The m1f preset system supports fine-grained control over processing settings on
a per-file-type basis. This allows you to apply different rules to different
file types within the same bundle.

## Overview

You can override almost any m1f setting for specific file extensions or
patterns. This is particularly useful for:

- Disabling security checks for documentation while keeping them for code
- Setting different size limits for CSS vs PHP files
- Applying different processing rules based on file type
- Handling sensitive files differently from public files

## Supported Per-File Settings

The following settings can be overridden on a per-file basis:

### Processing Settings

- `actions` - List of processing actions (minify, strip_comments, etc.)
- `strip_tags` - HTML tags to remove
- `preserve_tags` - HTML tags to preserve
- `separator_style` - Override separator style for specific files
- `include_metadata` - Whether to include file metadata
- `max_lines` - Truncate after N lines

### Security & Filtering

- `security_check` - Override security scanning (`"abort"`, `"skip"`, `"warn"`,
  `null`)
- `max_file_size` - File-specific size limit (e.g., `"50KB"`, `"5MB"`)
- `remove_scraped_metadata` - Remove HTML2MD metadata for specific files
- `include_dot_paths` - Include hidden files for this type
- `include_binary_files` - Include binary files for this type

### Custom Processing

- `custom_processor` - Name of custom processor to use
- `processor_args` - Arguments for the custom processor

## Configuration Methods

### Method 1: Global Extension Settings

Define defaults for all files of a specific extension:

```yaml
my_project:
  global_settings:
    # Default settings for all files
    security_check: "abort"
    max_file_size: "1MB"

    # Extension-specific overrides
    extensions:
      .md:
        security_check: null # Disable for markdown
        remove_scraped_metadata: true
        max_file_size: "500KB"

      .php:
        security_check: "abort" # Keep strict for PHP
        max_file_size: "5MB"
        actions: [strip_comments]

      .css:
        max_file_size: "50KB" # Strict limit for CSS
        actions: [minify, strip_comments]

      .env:
        security_check: "abort"
        include_dot_paths: true # Include .env files
        max_file_size: "10KB"
```

### Method 2: Preset-Specific Settings

Define settings for files matching specific patterns:

```yaml
my_project:
  presets:
    documentation:
      extensions: [".md", ".rst", ".txt"]
      patterns: ["docs/**/*", "README*"]
      security_check: null # No security check
      remove_scraped_metadata: true
      max_file_size: "1MB"

    sensitive_files:
      extensions: [".env", ".key", ".pem"]
      patterns: ["config/**/*", "secrets/**/*"]
      security_check: "abort"
      max_file_size: "50KB"
      include_dot_paths: true

    vendor_code:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      security_check: null # Don't check third-party code
      max_file_size: "100KB" # Only include small files
      actions: [] # No processing
```

## Real-World Examples

### Example 1: Web Project with Mixed Content

```yaml
web_project:
  global_settings:
    # Defaults
    security_check: "warn"
    max_file_size: "2MB"

    extensions:
      # Documentation - relaxed rules
      .md:
        security_check: null
        remove_scraped_metadata: true
        actions: [remove_empty_lines]

      # Frontend - strict size limits
      .css:
        max_file_size: "50KB"
        security_check: "skip"
        actions: [minify]

      .js:
        max_file_size: "100KB"
        security_check: "warn"
        actions: [strip_comments, compress_whitespace]

      # Backend - larger files, strict security
      .php:
        max_file_size: "5MB"
        security_check: "abort"
        actions: [strip_comments]

      # Data files - very different handling
      .sql:
        max_file_size: "10MB"
        security_check: null
        max_lines: 1000 # Truncate large dumps
```

### Example 2: Documentation Project

```yaml
documentation:
  global_settings:
    # Default: include everything for docs
    security_check: null
    remove_scraped_metadata: true

    extensions:
      # Markdown files
      .md:
        actions: [remove_empty_lines]
        separator_style: "Markdown"

      # Code examples in docs
      .py:
        max_lines: 50 # Keep examples short
        actions: [strip_comments]

      # Config examples
      .json:
        actions: [compress_whitespace]
        max_lines: 30

      # Log file examples
      .log:
        max_file_size: "100KB"
        max_lines: 100
```

### Example 3: Security-Focused Configuration

```yaml
secure_project:
  global_settings:
    # Very strict by default
    security_check: "abort"
    abort_on_encoding_error: true

    extensions:
      # Public documentation - can be relaxed
      .md:
        security_check: null

      # Code files - different levels
      .js:
        security_check: "warn" # Client-side code

      .php:
        security_check: "abort" # Server-side code

      .env:
        security_check: "abort"
        max_file_size: "10KB" # Env files should be small

      # Config files - careful handling
      .json:
        security_check: "warn"
        actions: [custom]
        custom_processor: "redact_secrets"
```

## Priority and Precedence

When multiple settings could apply to a file, they are resolved in this order:

1. **File-specific preset settings** (highest priority)
   - Settings in a preset that matches the file
2. **Global extension settings**
   - Settings in `global_settings.extensions`
3. **Global defaults** (lowest priority)
   - Settings in `global_settings`

Example:

```yaml
my_project:
  global_settings:
    max_file_size: "1MB" # Default for all

    extensions:
      .js:
        max_file_size: "500KB" # Override for JS files

  presets:
    vendor_js:
      patterns: ["vendor/**/*.js"]
      max_file_size: "2MB" # Override for vendor JS (highest priority)
```

## Best Practices

1. **Start with sensible defaults** in `global_settings`
2. **Use extension settings** for broad file-type rules
3. **Use presets** for location or context-specific overrides
4. **Document your choices** with comments
5. **Test incrementally** with `--verbose` to see which rules apply

## Limitations

- Settings cascade down but don't merge collections (e.g., `actions` lists
  replace, not extend)
- Some settings only make sense for certain file types
- Binary file detection happens before preset processing

## See Also

- [Preset System Guide](10_m1f_presets.md) - General preset documentation
- [Preset Template](../../presets/template-all-settings.m1f-presets.yml) -
  Complete example with all settings
- [Use Case Examples](../../presets/example-use-cases.m1f-presets.yml) -
  Real-world scenarios

========================================================================================
== FILE: docs/01_m1f/12_preset_reference.md
== DATE: 2025-06-12 12:50:58 | SIZE: 17.70 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 7d3bb671e33257e3e45f90b465c9e2e52626adaed83ee7deb2784d22a3b7b70e
========================================================================================
# m1f Preset System Complete Reference

This document provides a comprehensive reference for the m1f preset system,
including all available settings, clarifications, and advanced usage patterns.

## Table of Contents

- [Quick Start](#quick-start)
- [Preset File Format](#preset-file-format)
- [All Available Settings](#all-available-settings)
- [Available Actions](#available-actions)
- [Pattern Matching](#pattern-matching)
- [Processing Order](#processing-order)
- [Important Clarifications](#important-clarifications)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Debugging and Best Practices](#debugging-and-best-practices)

## Quick Start

The m1f preset system allows you to define file-specific processing rules and
configurations. Here's a minimal example:

```yaml
# my-preset.yml
web_assets:
  description: "Process web assets"
  presets:
    javascript:
      extensions: [".js", ".jsx"]
      actions: ["minify", "strip_comments"]
```

Use it with:

```bash
# Module invocation (recommended)
m1f -s ./src -o bundle.txt --preset my-preset.yml

# Direct command invocation (if installed)
m1f -s ./src -o bundle.txt --preset my-preset.yml
```

## Preset File Format

### Modern Format (Recommended)

```yaml
# Group name - can be selected with --preset-group
group_name:
  description: "Optional description of this preset group"
  enabled: true # Can disable entire group
  priority: 10 # Higher numbers are processed first (default: 0)
  base_path: "src" # Optional base path for all patterns in this group

  presets:
    # Preset name (for internal reference)
    preset_name:
      patterns: ["*.js", "*.jsx"] # Glob patterns
      extensions: [".js", ".jsx"] # Extension matching (with or without dot)
      actions:
        - minify
        - strip_comments
        - compress_whitespace

      # Per-file overrides
      security_check: "warn" # error, skip, warn
      max_file_size: "500KB"
      include_dot_paths: true
      include_binary_files: false
      remove_scraped_metadata: true

      # Custom processor with arguments
      custom_processor: "truncate"
      processor_args:
        max_lines: 100
        add_marker: true

# Global settings (apply to all groups)
globals:
  global_settings:
    # Input/Output settings (NEW in v3.2.0)
    source_directory: "./src"
    input_file: "files_to_process.txt"
    output_file: "bundle.txt"
    input_include_files:
      - "README.md"
      - "INTRO.txt"

    # Output control (NEW in v3.2.0)
    add_timestamp: true
    filename_mtime_hash: false
    force: false
    minimal_output: false
    skip_output_file: false

    # Archive settings (NEW in v3.2.0)
    create_archive: false
    archive_type: "zip" # zip or tar.gz

    # Runtime behavior (NEW in v3.2.0)
    verbose: false
    quiet: false

    # Default file processing
    security_check: "warn"
    max_file_size: "1MB"

    # Per-extension settings
    extensions:
      .py:
        security_check: "error"
        max_file_size: "2MB"
      .env:
        security_check: "skip"
        actions: ["redact_secrets"]
```

## All Available Settings

### Group-Level Settings

| Setting             | Type    | Default | Description                     |
| ------------------- | ------- | ------- | ------------------------------- |
| `description`       | string  | none    | Human-readable description      |
| `enabled`           | boolean | true    | Enable/disable this group       |
| `priority`          | integer | 0       | Processing order (higher first) |
| `base_path`         | string  | none    | Base path for pattern matching  |
| `enabled_if_exists` | string  | none    | Only enable if this path exists |

### Global Settings (NEW in v3.2.0)

These settings can be specified in the `global_settings` section and override
CLI defaults:

#### Input/Output Settings

| Setting               | Type        | Default | Description                                 |
| --------------------- | ----------- | ------- | ------------------------------------------- |
| `source_directory`    | string      | none    | Source directory path                       |
| `input_file`          | string      | none    | Input file listing paths to process         |
| `output_file`         | string      | none    | Output file path                            |
| `input_include_files` | string/list | []      | Files to include at beginning (intro files) |

#### Output Control Settings

| Setting                 | Type    | Default | Description                          |
| ----------------------- | ------- | ------- | ------------------------------------ |
| `add_timestamp`         | boolean | false   | Add timestamp to output filename     |
| `filename_mtime_hash`   | boolean | false   | Add hash of file mtimes to filename  |
| `force`                 | boolean | false   | Force overwrite existing output file |
| `minimal_output`        | boolean | false   | Only create main output file         |
| `skip_output_file`      | boolean | false   | Skip creating main output file       |
| `allow_duplicate_files` | boolean | false   | Allow duplicate content (v3.2)       |

#### Archive Settings

| Setting          | Type    | Default | Description                       |
| ---------------- | ------- | ------- | --------------------------------- |
| `create_archive` | boolean | false   | Create backup archive of files    |
| `archive_type`   | string  | "zip"   | Archive format: "zip" or "tar.gz" |

#### Runtime Settings

| Setting   | Type    | Default | Description                 |
| --------- | ------- | ------- | --------------------------- |
| `verbose` | boolean | false   | Enable verbose output       |
| `quiet`   | boolean | false   | Suppress all console output |

#### File Processing Settings

| Setting                        | Type    | Default | Description                         |
| ------------------------------ | ------- | ------- | ----------------------------------- |
| `encoding`                     | string  | "utf-8" | Target encoding for all files       |
| `separator_style`              | string  | none    | File separator style                |
| `line_ending`                  | string  | "lf"    | Line ending style (lf/crlf)         |
| `security_check`               | string  | "warn"  | How to handle secrets               |
| `max_file_size`                | string  | none    | Maximum file size to process        |
| `enable_content_deduplication` | boolean | true    | Enable content deduplication (v3.2) |
| `prefer_utf8_for_text_files`   | boolean | true    | Prefer UTF-8 for text files (v3.2)  |

### Preset-Level Settings

| Setting                   | Type    | Default | Description                                 |
| ------------------------- | ------- | ------- | ------------------------------------------- |
| `patterns`                | list    | []      | Glob patterns to match files                |
| `extensions`              | list    | []      | File extensions to match                    |
| `actions`                 | list    | []      | Processing actions to apply                 |
| `security_check`          | string  | "warn"  | How to handle secrets                       |
| `max_file_size`           | string  | none    | Maximum file size to process                |
| `include_dot_paths`       | boolean | false   | Include hidden files                        |
| `include_binary_files`    | boolean | false   | Process binary files                        |
| `remove_scraped_metadata` | boolean | false   | Remove HTML2MD metadata                     |
| `custom_processor`        | string  | none    | Name of custom processor                    |
| `processor_args`          | dict    | {}      | Arguments for custom processor              |
| `line_ending`             | string  | "lf"    | Convert line endings (lf, crlf)             |
| `separator_style`         | string  | none    | Override default separator style            |
| `include_metadata`        | boolean | true    | Include file metadata in output             |
| `max_lines`               | integer | none    | Truncate file after N lines                 |
| `strip_tags`              | list    | []      | HTML tags to remove (for strip_tags action) |
| `preserve_tags`           | list    | []      | HTML tags to preserve when stripping        |

## Available Actions

### Built-in Actions

1. **`minify`** - Remove unnecessary whitespace and formatting

   - Reduces file size
   - Maintains functionality
   - Best for: JS, CSS, HTML

2. **`strip_tags`** - Remove HTML/XML tags

   - Extracts text content only
   - Preserves text between tags
   - Best for: HTML, XML, Markdown with HTML

3. **`strip_comments`** - Remove code comments

   - Removes single and multi-line comments
   - Language-aware (JS, Python, CSS, etc.)
   - Best for: Production code bundles

4. **`compress_whitespace`** - Reduce multiple spaces/newlines

   - Converts multiple spaces to single space
   - Reduces multiple newlines to double newline
   - Best for: Documentation, logs

5. **`remove_empty_lines`** - Remove blank lines
   - Removes lines with only whitespace
   - Keeps single blank lines between sections
   - Best for: Clean documentation

### Custom Processors

Currently implemented:

1. **`truncate`** - Limit file length

   ```yaml
   custom_processor: "truncate"
   processor_args:
     max_lines: 100
     max_chars: 10000
     add_marker: true # Add "... truncated ..." marker
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)(api[_-]?key|secret|password|token)\\s*[:=]\\s*["\\']?[\\w-]+["\\']?'
       - '(?i)bearer\\s+[\\w-]+'
     replacement: "[REDACTED]"
   ```

3. **`extract_functions`** - Extract function definitions
   ```yaml
   custom_processor: "extract_functions"
   processor_args:
     languages: ["python", "javascript"]
     include_docstrings: true
   ```

Note: Other processors mentioned in examples (like `extract_code_cells`) are
illustrative and would need to be implemented.

## Pattern Matching

### Pattern Types

1. **Extension Matching**

   ```yaml
   extensions: [".py", ".pyx", "py"] # All are equivalent
   ```

2. **Glob Patterns**

   ```yaml
   patterns:
     - "*.test.js" # All test files
     - "src/**/*.js" # All JS in src/
   ```

3. **Combined Matching**
   ```yaml
   # File must match BOTH extension AND pattern
   extensions: [".js"]
   patterns: ["src/**/*"]
   ```

### Base Path Behavior

```yaml
group_name:
  base_path: "src"
  presets:
    example:
      patterns: ["components/*.js"] # Actually matches: src/components/*.js
```

## Processing Order

1. **Group Priority** - Higher priority groups are checked first
2. **Preset Order** - Within a group, presets are checked in definition order
3. **First Match Wins** - First matching preset is applied
4. **Action Order** - Actions are applied in the order listed

### Setting Precedence

1. CLI arguments (highest priority)
2. Preset-specific settings
3. Global per-extension settings
4. Global default settings
5. m1f defaults (lowest priority)

**Note**: CLI arguments ALWAYS override preset values.

## Important Clarifications

### Pattern Matching Limitations

**Exclude patterns with `!` prefix are not supported in preset patterns**. To
exclude files:

1. **Use Global Settings** (Recommended):

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js", "*.map", "dist/**/*"]
   ```

2. **Use CLI Arguments**:
   ```bash
   m1f -s . -o out.txt --exclude-patterns "*.min.js" "*.map"
   ```

### Settings Hierarchy

Understanding where settings can be applied:

1. **Global Settings Level** (`globals.global_settings`):

   - `include_patterns` / `exclude_patterns`
   - `include_extensions` / `exclude_extensions`
   - All general m1f settings

2. **Preset Level** (individual presets):

   - `patterns` and `extensions` (for matching)
   - `actions` (processing actions)
   - Override settings like `security_check`

3. **Extension-Specific Global Settings**
   (`globals.global_settings.extensions.{ext}`):
   - All preset-level settings per extension

### Common Misconceptions

1. **Exclude Patterns in Presets**

   ❌ **Incorrect**:

   ```yaml
   presets:
     my_preset:
       exclude_patterns: ["*.min.js"] # Doesn't work here
   ```

   ✅ **Correct**:

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js"] # Works here
   ```

2. **Actions vs Settings**

   **Actions** (go in `actions` list):

   - `minify`, `strip_tags`, `strip_comments`, etc.

   **Settings** (separate fields):

   - `strip_tags: ["script", "style"]` (configuration)
   - `max_lines: 100` (configuration)

## Advanced Features

### Conditional Presets

```yaml
production:
  enabled_if_exists: ".env.production" # Only active in production
  presets:
    minify_all:
      extensions: [".js", ".css", ".html"]
      actions: ["minify", "strip_comments"]
```

### Multiple Preset Files

```bash
# Files are merged in order (later files override earlier ones)
m1f -s . -o out.txt \
  --preset base.yml \
  --preset project.yml \
  --preset overrides.yml
```

### Preset Locations

1. **Project presets**: `./presets/*.m1f-presets.yml`
2. **Local preset**: `./.m1f-presets.yml`
3. **User presets**: `~/m1f/*.m1f-presets.yml`
4. **Specified presets**: Via `--preset` flag

### Complete Parameter Control (v3.2.0+)

Starting with v3.2.0, ALL m1f parameters can be controlled via presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production build configuration"

  global_settings:
    # Define all inputs/outputs
    source_directory: "./src"
    output_file: "dist/bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Enable production features
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true

    # Production optimizations
    minimal_output: true
    quiet: true

    # File processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    security_check: "error"
```

Usage comparison:

**Before v3.2.0** (long command):

```bash
m1f -s ./src -o dist/bundle.txt \
  --input-include-files README.md LICENSE \
  --add-timestamp --create-archive --archive-type tar.gz \
  --force --minimal-output --quiet \
  --separator-style MachineReadable \
  --security-check error
```

**After v3.2.0** (simple command):

```bash
m1f --preset production.m1f-presets.yml -o output.txt
```

## Examples

### Web Development Preset

```yaml
web_development:
  description: "Modern web development bundle"

  presets:
    # Minify production assets
    production_assets:
      patterns: ["dist/**/*", "build/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]

    # Source code - keep readable
    source_code:
      patterns: ["src/**/*"]
      extensions: [".js", ".jsx", ".ts", ".tsx"]
      actions: ["strip_comments"]
      security_check: "error"

    # Documentation
    docs:
      extensions: [".md", ".mdx"]
      actions: ["compress_whitespace", "remove_empty_lines"]

    # Configuration files
    config:
      patterns: ["*.json", "*.yml", "*.yaml"]
      security_check: "error"
      custom_processor: "redact_secrets"
```

### Data Science Preset

```yaml
data_science:
  presets:
    # Large data files - truncate
    data_files:
      extensions: [".csv", ".json", ".parquet"]
      max_file_size: "100KB"
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000

    # Scripts - full content
    scripts:
      extensions: [".py", ".r", ".jl"]
      actions: ["strip_comments"]
```

### Multiple Environment Presets

```yaml
# environments.m1f-presets.yml
development:
  priority: 10
  global_settings:
    source_directory: "./src"
    output_file: "dev-bundle.txt"
    verbose: true
    include_dot_paths: true
    security_check: "warn"

staging:
  priority: 20
  global_settings:
    source_directory: "./src"
    output_file: "stage-bundle.txt"
    create_archive: true
    security_check: "error"

production:
  priority: 30
  global_settings:
    source_directory: "./dist"
    output_file: "prod-bundle.txt"
    minimal_output: true
    quiet: true
    create_archive: true
    archive_type: "tar.gz"
```

Use with `--preset-group`:

```bash
# Development build
m1f --preset environments.yml --preset-group development

# Production build
m1f --preset environments.yml --preset-group production
```

## Debugging and Best Practices

### Debugging Tips

1. **Verbose Mode**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose
   ```

   Shows which preset is applied to each file and processing details.

2. **Check What's Applied**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose 2>&1 | grep "Applying preset"
   ```

3. **Validate YAML**

   ```bash
   python -c "import yaml; yaml.safe_load(open('my-preset.yml'))"
   ```

4. **Test Small First** Create a test directory with a few files to verify
   preset behavior before running on large codebases.

### Best Practices

1. **Start Simple** - Begin with basic actions, add complexity as needed
2. **Test Thoroughly** - Use verbose mode to verify behavior
3. **Layer Presets** - Use multiple files for base + overrides
4. **Document Presets** - Add descriptions to groups and complex presets
5. **Version Control** - Keep presets in your repository
6. **Performance First** - Apply expensive actions only where needed
7. **Use Priority Wisely** - Higher priority groups are checked first

### Common Issues

1. **Preset not applied**

   - Check pattern matching
   - Verify preset group is enabled
   - Use verbose mode to debug

2. **Wrong action order**

   - Actions are applied sequentially
   - Order matters (e.g., minify before strip_comments)

3. **Performance issues**
   - Limit expensive actions to necessary files
   - Use `max_file_size` to skip large files
   - Consider `minimal_output` mode

## Version Information

This documentation is accurate as of m1f version 3.2.0.

========================================================================================
== FILE: docs/01_m1f/20_auto_bundle_guide.md
== DATE: 2025-06-12 12:50:58 | SIZE: 7.47 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 356352886813731903855e4dc0877d043de1a0491c23374dac006c42c2085542
========================================================================================
# Auto-Bundle Guide

The m1f auto-bundle feature allows you to automatically generate predefined
bundles of files based on configuration. This is especially useful for
maintaining consistent documentation bundles, creating project snapshots, and
managing multiple projects on a server.

## Configuration File

Auto-bundle looks for a `.m1f.config.yml` file in your project. The tool
searches from the current directory upward to the root, allowing flexible
project organization.

### Basic Configuration Structure

```yaml
# .m1f.config.yml

# Global settings that apply to all bundles
global:
  global_excludes:
    - "**/*.pyc"
    - "**/*.log"
    - "**/tmp/**"

# Bundle definitions
bundles:
  docs:
    description: "Project documentation"
    output: "m1f/docs/manual.txt"
    sources:
      - path: "docs"
        include_extensions: [".md", ".txt"]

  code:
    description: "Source code bundle"
    output: "m1f/src/code.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts"]
```

## Command Usage

### Create All Bundles

```bash
m1f auto-bundle
# Or use the convenient alias:
m1f-update
```

### Create Specific Bundle

```bash
m1f auto-bundle docs
# Or use the convenient alias:
m1f-update docs
```

### List Available Bundles

```bash
m1f auto-bundle --list
```

### Create Bundles by Group

```bash
m1f auto-bundle --group documentation
# Or use the convenient alias:
m1f-update --group documentation
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle` that provides a simpler way to regenerate bundles.

## Bundle Groups

You can organize bundles into groups for easier management:

```yaml
bundles:
  user-docs:
    description: "User documentation"
    group: "documentation"
    output: "m1f/docs/user.txt"
    sources:
      - path: "docs/user"

  api-docs:
    description: "API documentation"
    group: "documentation"
    output: "m1f/docs/api.txt"
    sources:
      - path: "docs/api"

  frontend-code:
    description: "Frontend source code"
    group: "source"
    output: "m1f/src/frontend.txt"
    sources:
      - path: "frontend"
```

Then create all documentation bundles:

```bash
m1f auto-bundle --group documentation
```

## Server-Wide Usage

### Managing Multiple Projects

For server environments with multiple projects, you can create a management
script:

```bash
#!/bin/bash
# update-all-bundles.sh

# Find all projects with .m1f.config.yml
for config in $(find /home/projects -name ".m1f.config.yml" -type f); do
    project_dir=$(dirname "$config")
    echo "Updating bundles in: $project_dir"

    cd "$project_dir"
    m1f-update --quiet
done
```

### Project-Specific Bundles

Create project-specific configurations by using groups:

```yaml
# Project A - .m1f.config.yml
bundles:
  all:
    description: "Complete project bundle"
    group: "project-a"
    output: "m1f/project-a-complete.txt"
    sources:
      - path: "."
```

Then update only specific projects:

```bash
cd /path/to/project-a
m1f-update --group project-a
```

### Automated Bundle Updates

Set up a cron job for automatic updates:

```bash
# Update all project bundles daily at 2 AM
0 2 * * * /usr/local/bin/update-all-bundles.sh
```

### Centralized Bundle Storage

Configure bundles to output to a central location:

```yaml
bundles:
  project-bundle:
    description: "Project bundle for central storage"
    output: "/var/m1f-bundles/myproject/latest.txt"
    sources:
      - path: "."
```

## Advanced Features

### Conditional Bundles

Enable bundles only when specific files exist:

```yaml
bundles:
  python-docs:
    description: "Python documentation"
    enabled_if_exists: "setup.py"
    output: "m1f/python-docs.txt"
    sources:
      - path: "."
        include_extensions: [".py"]
```

### Multiple Source Configurations

Combine files from different locations with different settings:

```yaml
bundles:
  complete:
    description: "Complete project documentation"
    output: "m1f/complete.txt"
    sources:
      - path: "docs"
        include_extensions: [".md"]
      - path: "src"
        include_extensions: [".py"]
        excludes: ["**/test_*.py"]
      - path: "."
        include_files: ["README.md", "CHANGELOG.md"]
```

### Using Presets

Apply presets for advanced file processing:

```yaml
bundles:
  web-bundle:
    description: "Web project bundle"
    output: "m1f/web.txt"
    preset: "presets/web-project.m1f-presets.yml"
    preset_group: "production"
    sources:
      - path: "."
```

## Automatic Bundle Generation with Git Hooks

m1f provides a Git pre-commit hook that automatically runs auto-bundle before
each commit. This ensures your bundles are always in sync with your source code.

### Installing the Git Hook

```bash
# Run from your project root (where .m1f.config.yml is located)
bash /path/to/m1f/scripts/install-git-hooks.sh
```

The hook will:

- Run `m1f-update` before each commit
- Add generated bundles to the commit automatically
- Block commits if bundle generation fails

For detailed setup instructions, see the
[Git Hooks Setup Guide](../05_development/56_git_hooks_setup.md).

## Best Practices

1. **Organize with Groups**: Use groups to categorize bundles logically
2. **Version Control**: Include `.m1f.config.yml` in version control
3. **Include m1f/ Directory**: Keep generated bundles in version control for AI
   tool access
4. **Use Descriptive Names**: Make bundle names self-explanatory
5. **Regular Updates**: Use Git hooks or schedule automatic updates for
   frequently changing projects
6. **Review Bundle Changes**: Check generated bundle diffs before committing

## Troubleshooting

### Config Not Found

If you see "No .m1f.config.yml configuration found!", the tool couldn't find a
config file searching from the current directory up to the root. Create a
`.m1f.config.yml` in your project root.

### Bundle Not Created

Check the verbose output:

```bash
m1f-update --verbose
```

Common issues:

- Incorrect file paths
- Missing source directories
- Invalid YAML syntax
- Disabled bundles

### Group Not Found

If using `--group` and no bundles are found:

1. Check that bundles have the `group` field
2. Verify the group name matches exactly
3. Use `--list` to see available groups

## Examples

### Documentation Site Bundle

```yaml
bundles:
  docs-site:
    description: "Documentation site content"
    group: "documentation"
    output: "m1f/docs-site.txt"
    sources:
      - path: "content"
        include_extensions: [".md", ".mdx"]
      - path: "src/components"
        include_extensions: [".jsx", ".tsx"]
    excludes:
      - "**/node_modules/**"
      - "**/.next/**"
```

### Multi-Language Project

```yaml
bundles:
  python-code:
    description: "Python backend code"
    group: "backend"
    output: "m1f/backend/python.txt"
    sources:
      - path: "backend"
        include_extensions: [".py"]

  javascript-code:
    description: "JavaScript frontend code"
    group: "frontend"
    output: "m1f/frontend/javascript.txt"
    sources:
      - path: "frontend"
        include_extensions: [".js", ".jsx", ".ts", ".tsx"]

  all-code:
    description: "All source code"
    output: "m1f/all-code.txt"
    sources:
      - path: "."
        include_extensions: [".py", ".js", ".jsx", ".ts", ".tsx"]
```

### WordPress Plugin Bundle

```yaml
bundles:
  wp-plugin:
    description: "WordPress plugin files"
    group: "wordpress"
    output: "m1f/wp-plugin.txt"
    preset: "presets/wordpress.m1f-presets.yml"
    sources:
      - path: "."
        include_extensions: [".php", ".js", ".css"]
    excludes:
      - "**/vendor/**"
      - "**/node_modules/**"
```

========================================================================================
== FILE: docs/01_m1f/21_development_workflow.md
== DATE: 2025-06-13 11:39:42 | SIZE: 5.82 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: deac03fa40566193131a98d2fa1f489d5460fa17843cf052808fb452ff4f01e6
========================================================================================
# m1f Development Workflow

This document describes the recommended workflow for developing with m1f and
using it in other projects.

## Overview

The m1f project provides a self-contained development environment with:

- Pre-generated m1f bundles of its own source code
- Shell aliases for convenient access from anywhere
- Symlink system for using m1f documentation in other projects

## Prerequisites

For initial setup instructions, see the [SETUP.md](../../SETUP.md) guide.

## Using m1f in Other Projects

### Method 1: Using Aliases (Recommended)

From any directory, you can use m1f directly:

```bash
cd /path/to/your/project
m1f -s . -o combined.txt
```

### Method 2: Providing m1f Documentation to AI Tools (Claude Code, etc.)

When you want to use m1f in a project with AI assistance (like Claude Code,
Cursor, or other AI-powered development tools), the AI needs to understand how
m1f works and what parameters are available. The `m1f-link` command solves this
by creating a symlink to the complete m1f documentation.

#### Why this is important:

- AI tools need context to understand how to use m1f
- The documentation contains all parameters, options, and examples
- AI can help create custom configurations and commands

#### How to use:

1. Navigate to your project:

   ```bash
   cd /path/to/your/project
   ```

2. Create documentation symlink:

   ```bash
   m1f-link
   ```

   This creates: `m1f/m1f.txt -> /path/to/m1f/m1f/m1f/87_m1f_only_docs.txt`

3. Reference the documentation in your AI tool:

   ```bash
   # For Claude Code, Cursor, or similar AI assistants:
   @m1f/m1f.txt

   # Example prompts:
   "Please read @m1f/m1f.txt and help me create a .m1f.config.yml
   for bundling my Python project"

   "Based on @m1f/m1f.txt, what's the best way to exclude test
   files while keeping documentation?"

   "Using @m1f/m1f.txt as reference, help me set up auto-bundling
   for a WordPress theme"
   ```

This single documentation file contains:

- Complete m1f usage guide and all parameters
- Examples and best practices
- Preset system documentation
- Auto-bundle configuration guide
- All tool documentation (m1f, s1f, html2md, webscraper)

The AI can then:

- Understand all m1f parameters and options
- Help create custom `.m1f.config.yml` configurations
- Suggest appropriate presets for your project type
- Generate complex m1f commands with correct syntax
- Troubleshoot issues based on error messages

## Development Workflow

### When Developing m1f

1. Always work in the development environment:

   ```bash
   cd /path/to/m1f
   source .venv/bin/activate
   ```

2. Test changes directly:

   ```bash
   python -m tools.m1f -s test_dir -o output.txt
   ```

3. Run tests:

   ```bash
   pytest tests/
   ```

4. Update bundle files after significant changes:
   ```bash
   m1f-update
   ```

### When Using m1f in Projects

1. Use the global aliases:

   ```bash
   m1f -s src -o bundle.txt --preset documentation
   ```

2. Or create project-specific configuration:

   ```bash
   # Create .m1f directory in your project
   mkdir .m1f

   # Create m1f preset
   cat > .m1f/project.m1f-presets.yml << 'EOF'
   presets:
     my-bundle:
       source_directory: "."
       include_extensions: [".py", ".md", ".txt"]
       excludes: ["*/node_modules/*", "*/__pycache__/*"]
   EOF

   # Use preset
   m1f --preset .m1f/project.m1f-presets.yml --preset-group my-bundle -o bundle.txt
   ```

## Directory Structure

```
m1f/
├── .m1f/                      # Pre-generated m1f bundles
│   ├── m1f/                   # Tool bundles
│   └── m1f-doc/
│       └── 99_m1fdocs.txt    # Complete documentation
├── bin/                       # Executable commands
│   ├── m1f
│   ├── m1f-s1f
│   ├── m1f-html2md
│   ├── scrape_tool
│   └── ...
├── scripts/
│   ├── install.sh            # Installation script
│   └── watch_and_bundle.sh   # File watcher for auto-bundling
└── tools/                    # m1f source code
    ├── m1f/
    ├── s1f/
    └── html2md/

your-project/
└── .m1f/
    └── m1f -> /path/to/m1f/.m1f/  # Symlink to m1f bundles
```

## Best Practices

1. **Keep Bundles Updated**: Run `m1f-update` after significant changes to m1f
2. **Use Aliases**: The shell aliases handle virtual environment activation
   automatically
3. **Project Organization**: Keep project-specific m1f configurations in `.m1f/`
   directory
4. **Version Control**: The `.m1f/` directory is already in `.gitignore`

## Troubleshooting

### Aliases Not Working

If aliases don't work after setup:

1. Make sure you've reloaded your shell configuration
2. Check that the aliases were added to your shell config file
3. Verify the m1f project path is correct in the aliases

### Virtual Environment Issues

The aliases automatically activate the virtual environment. If you encounter
issues:

1. Ensure the virtual environment exists at `/path/to/m1f/.venv`
2. Check that all dependencies are installed

### Symlink Issues

If `m1f-link` fails:

1. Ensure you have write permissions in the current directory
2. Check that the m1f project path is accessible
3. Remove any existing `.m1f/m1f` symlink and try again

## Advanced Usage

### Custom Bundle Generation

Create custom bundles for specific use cases:

```bash
# Bundle only specific file types
m1f -s /path/to/project -o api-docs.txt \
    --include-extensions .py .yaml \
    --excludes "*/tests/*" \
    --separator-style Markdown

# Create compressed archive
m1f -s . -o project.txt --create-archive --archive-type tar.gz
```

### Integration with CI/CD

Add m1f to your CI pipeline:

```yaml
# Example GitHub Actions
- name: Generate Documentation Bundle
  run: |
    python -m tools.m1f -s docs -o docs-bundle.txt

- name: Upload Bundle
  uses: actions/upload-artifact@v2
  with:
    name: documentation
    path: docs-bundle.txt
```

========================================================================================
== FILE: docs/01_m1f/25_m1f_config_examples.md
== DATE: 2025-06-13 22:55:04 | SIZE: 36.97 KB | TYPE: .md
== ENCODING: macroman
== CHECKSUM_SHA256: b901577dc1ad64cbb484346d8d21e0c88e1fe42241512072762291f31852ab67
========================================================================================
# m1f Configuration Examples

This guide provides comprehensive examples of `.m1f.config.yml` files for different project types. Each example includes detailed comments explaining the configuration choices.

> **‚ö†Ô∏è IMPORTANT**: m1f automatically excludes many common directories (node_modules, .git, __pycache__, etc.). See the [Default Excludes Guide](./26_default_excludes_guide.md) for the complete list. **Only add project-specific excludes to keep your configs minimal!**

## üö® IMPORTANT: Use Standard Separator for AI Bundles!

**The primary purpose of m1f bundles is to provide context to AI assistants like Claude, NOT for human reading in Markdown!**

- ‚úÖ **ALWAYS use**: `separator_style: Standard` (or omit it - Standard is the default)
- ‚ùå **AVOID**: `separator_style: Markdown` (this adds unnecessary ```language blocks)
- üéØ **Why**: Standard format is clean and optimal for AI consumption

```yaml
# CORRECT - For AI consumption:
bundles:
  - name: my-bundle
    separator_style: Standard  # ‚Üê This is optimal (or just omit it)
    
# AVOID - Adds unnecessary markdown formatting:
bundles:
  - name: my-bundle
    separator_style: Markdown  # ‚Üê Don't use for AI bundles!
```

**Note**: `MachineReadable` is only needed when you plan to use `s1f` to split the bundle back into individual files.

## Minimal vs Verbose Configurations

### ‚ùå BAD Example - Overly Verbose (Don't Do This!)

```yaml
global:
  global_excludes:
    # ‚ùå ALL of these are already excluded by default!
    - "**/node_modules/**"     # Auto-excluded
    - "**/vendor/**"           # Auto-excluded
    - "**/__pycache__/**"      # Auto-excluded
    - "**/build/**"            # Auto-excluded
    - "**/dist/**"             # Auto-excluded
    - "**/.git/**"             # Auto-excluded
    - "**/cache/**"            # Auto-excluded
    - "**/.vscode/**"          # Auto-excluded
    - "**/.idea/**"            # Auto-excluded
    
    # ‚úÖ Only these are needed (project-specific)
    - "**/logs/**"             
    - "**/tmp/**"              
    - "/m1f/**"                
```

### ‚úÖ GOOD Example - Minimal Configuration

```yaml
global:
  global_excludes:
    # Only project-specific excludes
    - "**/logs/**"             # Your log files
    - "**/tmp/**"              # Your temp files
    - "/m1f/**"                # Output directory
    
  global_settings:
    # Let .gitignore handle most excludes
    exclude_paths_file: ".gitignore"
```

## Table of Contents

1. [m1f Tool Project (Current)](#m1f-tool-project-current)
2. [Node.js/React Project](#nodejsreact-project)
3. [Python/Django Project](#pythondjango-project)
4. [WordPress Theme](#wordpress-theme)
5. [Documentation Site](#documentation-site)
6. [Mixed Language Project](#mixed-language-project)
7. [Microservices Architecture](#microservices-architecture)
8. [Mobile App Project](#mobile-app-project)

## m1f Tool Project (Current)

This is the actual configuration used by the m1f project itself - a Python-based tool with comprehensive documentation.

```yaml
# m1f Auto-Bundle Configuration

# Global settings
global:
  # Exclusions that apply to all bundles
  global_excludes:
    - "/m1f/**"                         # Exclude output directory
    - "**/*.pyc"                        # Python bytecode
    - "**/*.log"                        # Log files
    - "**/tmp/**"                       # Temporary directories
    - "**/dev/**"                       # Development files
    - "**/tests/**/source/**"           # Test input data
    - "**/tests/**/output/**"           # Test output data
    - "**/tests/**/expected/**"         # Expected test results
    - "**/tests/**/scraped_examples/**" # Scraped test examples

  global_settings:
    # Default security setting for all files
    security_check: "warn"              # Strict by default
    # Use .gitignore as exclude file (can be single file or list)
    exclude_paths_file:
      - ".gitignore"
      - ".m1fignore"

    # Per-extension overrides
    extensions:
      .py:
        security_check: "abort"         # Strict for Python files

  # Default settings for all bundles
  defaults:
    force_overwrite: true
    max_file_size: "1MB"
    minimal_output: false
    
  # File watcher settings for auto-update
  watcher:
    enabled: true
    debounce_seconds: 2
    ignored_paths:
      - "/m1f"
      - ".git/"
      - ".venv/"
      - "tmp/"
      - ".scrapes/"

# Bundle definitions
bundles:
  # Documentation bundles - separate by tool
  m1f-docs:
    description: "m1f docs"
    group: "documentation"
    output: "m1f/m1f/87_m1f_only_docs.txt"
    sources:
      - path: "docs/01_m1f"

  html2md-docs:
    description: "html2md docs"
    group: "documentation"
    output: "m1f/m1f/88_html2md_docs.txt"
    sources:
      - path: "docs/03_html2md"

  # Source code bundles - modular approach
  m1f-code:
    description: "m1f complete code"
    group: "source"
    output: "m1f/m1f/94_code.txt"
    sources:
      - path: "."
        includes: ["README.md", "SETUP.md", "requirements.txt", "tools/**", "scripts/**"]
      - path: "tests/"
        excludes: ["**/tests/**/source/**", "**/tests/**/extracted/**", "**/tests/**/output/**"]

  # Complete project bundle
  all:
    description: "All 1 One"
    group: "complete"
    output: "m1f/m1f/99_m1f_complete.txt"
    sources:
      - path: "."
```

## Node.js/React Project

Configuration for a modern React application with TypeScript and testing.

```yaml
# React Application m1f Configuration

global:
  global_excludes:
    # ‚ö†Ô∏è MINIMAL CONFIG - Only project-specific excludes!
    # DON'T add node_modules, dist, build - they're auto-excluded!
    
    # Next.js specific (not in defaults)
    - "**/.next/**"                     # Next.js build cache
    - "**/coverage/**"                  # Test coverage reports
    
    # Log and temp files
    - "**/*.log"
    - "**/*.map"                        # Source maps
    - "**/.DS_Store"
    - "**/Thumbs.db"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".eslintignore"]
    
    # JavaScript/TypeScript specific processing
    extensions:
      .js:
        minify: true                    # Minify for AI context
        remove_comments: true           # Clean comments
      .jsx:
        minify: true
        remove_comments: true
      .ts:
        minify: true
        remove_comments: true
      .tsx:
        minify: true
        remove_comments: true
      .json:
        minify: true                    # Compact JSON
      .env:
        security_check: "abort"         # Never include env files

  defaults:
    force_overwrite: true
    max_file_size: "500KB"              # Smaller for JS files
    minimal_output: true                # Compact output

bundles:
  # Application source code
  app-components:
    description: "React components"
    group: "frontend"
    output: "m1f/01_components.txt"
    sources:
      - path: "src/components"
        include_extensions: [".tsx", ".ts", ".css", ".scss"]
      - path: "src/hooks"
        include_extensions: [".ts", ".tsx"]

  app-pages:
    description: "Application pages/routes"
    group: "frontend"
    output: "m1f/02_pages.txt"
    sources:
      - path: "src/pages"
      - path: "src/routes"
      - path: "src/layouts"

  app-state:
    description: "State management (Redux/Context)"
    group: "frontend"
    output: "m1f/03_state.txt"
    sources:
      - path: "src/store"
      - path: "src/redux"
      - path: "src/context"
      - path: "src/reducers"
      - path: "src/actions"

  # API and services
  app-api:
    description: "API integration layer"
    group: "integration"
    output: "m1f/10_api.txt"
    sources:
      - path: "src/api"
      - path: "src/services"
      - path: "src/graphql"
        include_extensions: [".ts", ".graphql", ".gql"]

  # Configuration and setup
  app-config:
    description: "Build configuration"
    group: "config"
    output: "m1f/20_config.txt"
    sources:
      - path: "."
        includes: [
          "package.json",
          "tsconfig.json",
          "webpack.config.js",
          "vite.config.js",
          ".eslintrc.*",
          ".prettierrc.*",
          "babel.config.*"
        ]

  # Tests
  app-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/30_tests.txt"
    sources:
      - path: "src"
        includes: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
      - path: "__tests__"
      - path: "cypress/integration"
        include_extensions: [".js", ".ts"]

  # Documentation
  app-docs:
    description: "Project documentation"
    group: "docs"
    output: "m1f/40_docs.txt"
    sources:
      - path: "."
        includes: ["README.md", "CONTRIBUTING.md", "docs/**/*.md"]
      - path: "src"
        includes: ["**/*.md"]

  # Quick reference bundle for AI assistance
  app-quick-reference:
    description: "Key files for quick AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"              # Keep small for quick loading
    sources:
      - path: "."
        includes: ["package.json", "README.md", "src/App.tsx", "src/index.tsx"]
      - path: "src/types"               # TypeScript types
```

## Python/Django Project

Configuration for a Django web application with REST API.

```yaml
# Django Project m1f Configuration

global:
  global_excludes:
    # ‚ö†Ô∏è MINIMAL CONFIG - __pycache__, .pytest_cache, etc. are auto-excluded!
    
    # Python bytecode (not in defaults)
    - "**/*.pyc"
    - "**/*.pyo"
    - "**/*.pyd"
    
    # Virtual environments (common names)
    - "**/venv/**"
    - "**/.venv/**"
    - "**/env/**"
    
    # Django specific
    - "**/migrations/**"                # Database migrations
    - "**/media/**"                     # User uploads
    - "**/static/**"                    # Collected static files
    - "**/staticfiles/**"
    - "**/*.sqlite3"                    # SQLite database
    - "**/celerybeat-schedule"

  global_settings:
    security_check: "abort"             # Strict for web apps
    exclude_paths_file: ".gitignore"
    
    extensions:
      .py:
        remove_docstrings: false        # Keep docstrings for API
        remove_comments: true           # Remove inline comments
      .html:
        minify: true                    # Minify templates
      .env:
        security_check: "abort"         # Never include
      .yml:
        security_check: "warn"          # Check for secrets

  defaults:
    force_overwrite: true
    max_file_size: "1MB"

bundles:
  # Django apps - one bundle per app
  app-accounts:
    description: "User accounts and authentication"
    group: "apps"
    output: "m1f/apps/01_accounts.txt"
    sources:
      - path: "accounts/"
        excludes: ["migrations/", "__pycache__/", "*.pyc"]

  app-api:
    description: "REST API implementation"
    group: "apps"
    output: "m1f/apps/02_api.txt"
    sources:
      - path: "api/"
        excludes: ["migrations/", "__pycache__/"]
      - path: "."
        includes: ["**/serializers.py", "**/viewsets.py"]

  app-core:
    description: "Core business logic"
    group: "apps"
    output: "m1f/apps/03_core.txt"
    sources:
      - path: "core/"
        excludes: ["migrations/", "__pycache__/"]

  # Project configuration
  django-settings:
    description: "Django settings and configuration"
    group: "config"
    output: "m1f/10_settings.txt"
    sources:
      - path: "config/"                 # Settings module
      - path: "."
        includes: ["manage.py", "requirements*.txt", "Dockerfile", "docker-compose.yml"]

  # Models across all apps
  django-models:
    description: "All database models"
    group: "database"
    output: "m1f/20_models.txt"
    sources:
      - path: "."
        includes: ["**/models.py", "**/models/*.py"]

  # Views and URLs
  django-views:
    description: "Views and URL patterns"
    group: "views"
    output: "m1f/21_views.txt"
    sources:
      - path: "."
        includes: ["**/views.py", "**/views/*.py", "**/urls.py"]

  # Templates
  django-templates:
    description: "HTML templates"
    group: "frontend"
    output: "m1f/30_templates.txt"
    sources:
      - path: "templates/"
      - path: "."
        includes: ["**/templates/**/*.html"]

  # Tests
  django-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/40_tests.txt"
    sources:
      - path: "."
        includes: ["**/tests.py", "**/tests/*.py", "**/test_*.py"]

  # Management commands
  django-commands:
    description: "Custom management commands"
    group: "utilities"
    output: "m1f/50_commands.txt"
    sources:
      - path: "."
        includes: ["**/management/commands/*.py"]

  # Quick AI reference
  django-quick-ref:
    description: "Essential files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: [
          "README.md",
          "requirements.txt",
          "config/settings/base.py",
          "config/urls.py"
        ]
```

## WordPress Theme

Configuration for a custom WordPress theme with modern build tools.

```yaml
# WordPress Theme m1f Configuration

global:
  global_excludes:
    # ‚ö†Ô∏è MINIMAL CONFIG - node_modules, vendor, build, dist are auto-excluded!
    
    # WordPress specific (not in defaults)
    - "wp-admin/**"                     # Core files
    - "wp-includes/**"                  # Core files
    - "wp-content/uploads/**"           # User uploads
    - "wp-content/cache/**"             # Cache plugins
    - "wp-content/backup/**"            # Backup files
    - "wp-content/upgrade/**"           # Updates
    
    # Sass cache (not in defaults)
    - "**/.sass-cache/**"
    - "**/*.map"                        # Source maps
    - "**/*.log"                        # Log files

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".wpignore"]
    
    # Use WordPress preset for optimal processing
    preset: "wordpress"
    
    extensions:
      .php:
        remove_comments: true           # Clean PHP comments
      .js:
        minify: true
      .css:
        minify: true
      .scss:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "500KB"

bundles:
  # Theme core files
  theme-core:
    description: "Theme core functionality"
    group: "theme"
    output: "m1f/01_theme_core.txt"
    sources:
      - path: "."
        includes: [
          "style.css",                  # Theme header
          "functions.php",
          "index.php",
          "header.php",
          "footer.php",
          "sidebar.php",
          "searchform.php",
          "404.php"
        ]

  # Template files
  theme-templates:
    description: "Page and post templates"
    group: "theme"
    output: "m1f/02_templates.txt"
    sources:
      - path: "."
        includes: [
          "single*.php",
          "page*.php",
          "archive*.php",
          "category*.php",
          "tag*.php",
          "taxonomy*.php",
          "front-page.php",
          "home.php"
        ]
      - path: "template-parts/"
      - path: "templates/"

  # Theme includes/components
  theme-includes:
    description: "Theme includes and components"
    group: "theme"
    output: "m1f/03_includes.txt"
    sources:
      - path: "inc/"
      - path: "includes/"
      - path: "lib/"
      - path: "components/"

  # Custom post types and taxonomies
  theme-cpt:
    description: "Custom post types and taxonomies"
    group: "functionality"
    output: "m1f/10_custom_types.txt"
    sources:
      - path: "."
        includes: ["**/post-types/*.php", "**/taxonomies/*.php"]
      - path: "inc/"
        includes: ["*cpt*.php", "*custom-post*.php", "*taxonom*.php"]

  # ACF field groups
  theme-acf:
    description: "Advanced Custom Fields configuration"
    group: "functionality"
    output: "m1f/11_acf_fields.txt"
    sources:
      - path: "acf-json/"               # ACF JSON exports
      - path: "."
        includes: ["**/acf-fields/*.php", "**/acf/*.php"]

  # JavaScript and build files
  theme-assets:
    description: "Theme assets and build configuration"
    group: "assets"
    output: "m1f/20_assets.txt"
    sources:
      - path: "src/"
        include_extensions: [".js", ".jsx", ".scss", ".css"]
      - path: "assets/src/"
      - path: "."
        includes: [
          "webpack.config.js",
          "gulpfile.js",
          "package.json",
          ".babelrc",
          "postcss.config.js"
        ]

  # WooCommerce integration
  theme-woocommerce:
    description: "WooCommerce customizations"
    group: "integrations"
    output: "m1f/30_woocommerce.txt"
    sources:
      - path: "woocommerce/"
      - path: "inc/"
        includes: ["*woocommerce*.php", "*wc-*.php"]

  # Documentation and setup
  theme-docs:
    description: "Theme documentation"
    group: "docs"
    output: "m1f/40_documentation.txt"
    sources:
      - path: "."
        includes: ["README.md", "CHANGELOG.md", "style.css"]
      - path: "docs/"

  # Quick reference for AI
  theme-quick-ref:
    description: "Essential theme files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: [
          "style.css",
          "functions.php",
          "README.md",
          "package.json"
        ]
```

## Documentation Site

Configuration for a documentation website using Markdown and static site generators.

```yaml
# Documentation Site m1f Configuration

global:
  global_excludes:
    # Build outputs
    - "_site/**"
    - "public/**"
    - "dist/**"
    - ".cache/**"
    
    # Development
    - "**/node_modules/**"
    - "**/.sass-cache/**"
    - "**/tmp/**"

  global_settings:
    security_check: "skip"              # Docs are public
    exclude_paths_file: ".gitignore"
    
    # Optimize for documentation
    extensions:
      .md:
        preserve_formatting: true       # Keep Markdown formatting
        max_file_size: "2MB"           # Allow larger docs
      .mdx:
        preserve_formatting: true
      .yml:
        minify: false                  # Keep YAML readable
      .json:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "1MB"
    include_empty_dirs: false

bundles:
  # Documentation by section
  docs-getting-started:
    description: "Getting started guides"
    group: "content"
    output: "m1f/01_getting_started.txt"
    sources:
      - path: "docs/getting-started/"
      - path: "content/getting-started/"
      - path: "src/pages/docs/getting-started/"

  docs-tutorials:
    description: "Tutorial content"
    group: "content"
    output: "m1f/02_tutorials.txt"
    sources:
      - path: "docs/tutorials/"
      - path: "content/tutorials/"
      - path: "examples/"
        include_extensions: [".md", ".mdx"]

  docs-api-reference:
    description: "API documentation"
    group: "content"
    output: "m1f/03_api_reference.txt"
    sources:
      - path: "docs/api/"
      - path: "content/api/"
      - path: "reference/"

  docs-guides:
    description: "How-to guides"
    group: "content"
    output: "m1f/04_guides.txt"
    sources:
      - path: "docs/guides/"
      - path: "content/guides/"
      - path: "content/how-to/"

  # Site configuration and theming
  site-config:
    description: "Site configuration and theme"
    group: "config"
    output: "m1f/10_site_config.txt"
    sources:
      - path: "."
        includes: [
          "config*.yml",
          "config*.yaml",
          "config*.toml",
          "config*.json",
          "_config.yml",              # Jekyll
          "docusaurus.config.js",     # Docusaurus
          "gatsby-config.js",         # Gatsby
          "mkdocs.yml",              # MkDocs
          ".vuepress/config.js"      # VuePress
        ]
      - path: "data/"                # Data files
        include_extensions: [".yml", ".yaml", ".json"]

  # Theme and layouts
  site-theme:
    description: "Theme and layout files"
    group: "theme"
    output: "m1f/11_theme.txt"
    sources:
      - path: "_layouts/"             # Jekyll
      - path: "_includes/"
      - path: "layouts/"              # Hugo
      - path: "themes/"
      - path: "src/theme/"
      - path: "src/components/"
        include_extensions: [".jsx", ".tsx", ".vue", ".css", ".scss"]

  # Code examples
  docs-examples:
    description: "Code examples and snippets"
    group: "examples"
    output: "m1f/20_examples.txt"
    sources:
      - path: "examples/"
      - path: "snippets/"
      - path: "code-examples/"
      - path: "."
        includes: ["**/*.example.*", "**/examples/**"]

  # Search index and data
  site-search:
    description: "Search configuration and index"
    group: "search"
    output: "m1f/30_search.txt"
    sources:
      - path: "."
        includes: ["**/search-index.json", "**/algolia*.js", "**/lunr*.js"]
      - path: "search/"

  # Complete documentation bundle
  docs-complete:
    description: "All documentation content"
    group: "complete"
    output: "m1f/99_all_docs.txt"
    sources:
      - path: "."
        include_extensions: [".md", ".mdx"]
        excludes: ["node_modules/", "_site/", "public/"]

  # Quick reference
  docs-quick-ref:
    description: "Key documentation for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: ["README.md", "index.md", "docs/index.md"]
      - path: "docs/"
        includes: ["quick-start.md", "overview.md", "introduction.md"]
```

## Mixed Language Project

Configuration for a project with multiple programming languages (e.g., Python backend, React frontend, Go microservices).

```yaml
# Mixed Language Project m1f Configuration

global:
  global_excludes:
    # Language-specific build artifacts
    - "**/node_modules/**"              # JavaScript
    - "**/__pycache__/**"              # Python
    - "**/venv/**"
    - "**/vendor/**"                    # Go/PHP
    - "**/target/**"                    # Rust/Java
    - "**/bin/**"                       # Binaries
    - "**/obj/**"                       # .NET
    
    # Common excludes
    - "**/dist/**"
    - "**/build/**"
    - "**/*.log"
    - "**/.cache/**"
    - "**/tmp/**"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".dockerignore"]
    
    # Language-specific processing
    extensions:
      # Frontend
      .js:
        minify: true
        remove_comments: true
      .ts:
        minify: true
        remove_comments: true
      .jsx:
        minify: true
      .tsx:
        minify: true
      
      # Backend
      .py:
        remove_comments: true
        remove_docstrings: false
      .go:
        remove_comments: true
      .java:
        remove_comments: true
      .rs:
        remove_comments: true
      
      # Config files
      .env:
        security_check: "abort"
      .yml:
        security_check: "warn"

  defaults:
    force_overwrite: true
    max_file_size: "1MB"

bundles:
  # Frontend - React/TypeScript
  frontend-components:
    description: "Frontend React components"
    group: "frontend"
    output: "m1f/frontend/01_components.txt"
    sources:
      - path: "frontend/src/components/"
      - path: "frontend/src/hooks/"
      - path: "frontend/src/utils/"

  frontend-config:
    description: "Frontend configuration"
    group: "frontend"
    output: "m1f/frontend/02_config.txt"
    sources:
      - path: "frontend/"
        includes: ["package.json", "tsconfig.json", "webpack.config.js", ".eslintrc.*"]

  # Backend - Python/FastAPI
  backend-api:
    description: "Python API endpoints"
    group: "backend"
    output: "m1f/backend/01_api.txt"
    sources:
      - path: "backend/app/api/"
      - path: "backend/app/routers/"

  backend-models:
    description: "Database models and schemas"
    group: "backend"
    output: "m1f/backend/02_models.txt"
    sources:
      - path: "backend/app/models/"
      - path: "backend/app/schemas/"
      - path: "backend/app/database/"

  backend-services:
    description: "Business logic services"
    group: "backend"
    output: "m1f/backend/03_services.txt"
    sources:
      - path: "backend/app/services/"
      - path: "backend/app/core/"

  # Microservices - Go
  service-auth:
    description: "Authentication service (Go)"
    group: "microservices"
    output: "m1f/services/01_auth.txt"
    sources:
      - path: "services/auth/"
        include_extensions: [".go"]
        excludes: ["vendor/", "*_test.go"]

  service-notifications:
    description: "Notification service (Go)"
    group: "microservices"
    output: "m1f/services/02_notifications.txt"
    sources:
      - path: "services/notifications/"
        include_extensions: [".go"]
        excludes: ["vendor/", "*_test.go"]

  # Shared libraries
  shared-proto:
    description: "Protocol Buffers definitions"
    group: "shared"
    output: "m1f/shared/01_protobuf.txt"
    sources:
      - path: "proto/"
        include_extensions: [".proto"]

  shared-utils:
    description: "Shared utilities across languages"
    group: "shared"
    output: "m1f/shared/02_utils.txt"
    sources:
      - path: "shared/"
      - path: "common/"

  # Infrastructure as Code
  infrastructure:
    description: "Infrastructure configuration"
    group: "infrastructure"
    output: "m1f/infra/01_infrastructure.txt"
    sources:
      - path: "infrastructure/"
        include_extensions: [".tf", ".yml", ".yaml"]
      - path: "."
        includes: ["docker-compose*.yml", "Dockerfile*", ".dockerignore"]

  # Testing
  tests-frontend:
    description: "Frontend tests"
    group: "testing"
    output: "m1f/tests/01_frontend.txt"
    sources:
      - path: "frontend/"
        includes: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts"]

  tests-backend:
    description: "Backend tests"
    group: "testing"
    output: "m1f/tests/02_backend.txt"
    sources:
      - path: "backend/"
        includes: ["**/test_*.py", "**/*_test.py"]

  tests-integration:
    description: "Integration tests"
    group: "testing"
    output: "m1f/tests/03_integration.txt"
    sources:
      - path: "tests/integration/"
      - path: "e2e/"

  # Documentation
  project-docs:
    description: "Project documentation"
    group: "docs"
    output: "m1f/docs/01_documentation.txt"
    sources:
      - path: "."
        includes: ["README.md", "CONTRIBUTING.md", "ARCHITECTURE.md"]
      - path: "docs/"
      - path: "frontend/README.md"
      - path: "backend/README.md"
      - path: "services/*/README.md"

  # Quick reference bundle
  project-overview:
    description: "Project overview for AI context"
    group: "reference"
    output: "m1f/00_overview.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: [
          "README.md",
          "docker-compose.yml",
          "frontend/package.json",
          "backend/requirements.txt",
          "services/auth/go.mod"
        ]
```

## Microservices Architecture

Configuration for a microservices-based application with multiple services.

```yaml
# Microservices Architecture m1f Configuration

global:
  global_excludes:
    # Common excludes across all services
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/target/**"
    - "**/build/**"
    - "**/dist/**"
    - "**/.cache/**"
    - "**/logs/**"
    - "**/*.log"

  global_settings:
    security_check: "abort"             # Strict for microservices
    exclude_paths_file: [".gitignore", ".dockerignore"]
    
    # Process by file type
    extensions:
      .env:
        security_check: "abort"
      .yml:
        security_check: "warn"
      .json:
        minify: true
      .proto:
        preserve_formatting: true       # Keep protobuf readable

  defaults:
    force_overwrite: true
    max_file_size: "500KB"              # Smaller for services

  # Watch for changes in all services
  watcher:
    enabled: true
    debounce_seconds: 3
    ignored_paths:
      - "**/node_modules"
      - "**/vendor"
      - "**/logs"

bundles:
  # API Gateway
  gateway-main:
    description: "API Gateway service"
    group: "gateway"
    output: "m1f/gateway/01_main.txt"
    sources:
      - path: "services/gateway/"
        excludes: ["node_modules/", "dist/", "coverage/"]

  # Individual microservices
  service-users:
    description: "User management service"
    group: "services"
    output: "m1f/services/01_users.txt"
    sources:
      - path: "services/users/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-orders:
    description: "Order processing service"
    group: "services"
    output: "m1f/services/02_orders.txt"
    sources:
      - path: "services/orders/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-inventory:
    description: "Inventory management service"
    group: "services"
    output: "m1f/services/03_inventory.txt"
    sources:
      - path: "services/inventory/"
        excludes: ["vendor/", "bin/", "logs/"]

  service-payments:
    description: "Payment processing service"
    group: "services"
    output: "m1f/services/04_payments.txt"
    sources:
      - path: "services/payments/"
        excludes: ["vendor/", "bin/", "logs/"]

  # Shared configurations and contracts
  shared-contracts:
    description: "Service contracts and interfaces"
    group: "shared"
    output: "m1f/shared/01_contracts.txt"
    sources:
      - path: "contracts/"
        include_extensions: [".proto", ".graphql", ".openapi.yml"]
      - path: "schemas/"

  shared-libs:
    description: "Shared libraries and utilities"
    group: "shared"
    output: "m1f/shared/02_libraries.txt"
    sources:
      - path: "libs/"
      - path: "packages/"
      - path: "common/"

  # Infrastructure and deployment
  k8s-configs:
    description: "Kubernetes configurations"
    group: "infrastructure"
    output: "m1f/k8s/01_configs.txt"
    sources:
      - path: "k8s/"
        include_extensions: [".yml", ".yaml"]
      - path: "helm/"

  docker-configs:
    description: "Docker configurations"
    group: "infrastructure"
    output: "m1f/docker/01_configs.txt"
    sources:
      - path: "."
        includes: ["**/Dockerfile*", "**/.dockerignore", "docker-compose*.yml"]

  # Monitoring and observability
  monitoring:
    description: "Monitoring and alerting configs"
    group: "observability"
    output: "m1f/monitoring/01_configs.txt"
    sources:
      - path: "monitoring/"
      - path: "grafana/"
      - path: "prometheus/"

  # CI/CD pipelines
  cicd:
    description: "CI/CD pipeline definitions"
    group: "devops"
    output: "m1f/cicd/01_pipelines.txt"
    sources:
      - path: ".github/workflows/"
      - path: ".gitlab-ci.yml"
      - path: "jenkins/"
      - path: ".circleci/"

  # Service mesh configuration
  service-mesh:
    description: "Service mesh configurations"
    group: "infrastructure"
    output: "m1f/mesh/01_configs.txt"
    sources:
      - path: "istio/"
      - path: "linkerd/"
      - path: "consul/"

  # Quick overview for new developers
  architecture-overview:
    description: "Architecture overview"
    group: "reference"
    output: "m1f/00_architecture.txt"
    max_file_size: "150KB"
    sources:
      - path: "."
        includes: [
          "README.md",
          "ARCHITECTURE.md",
          "docker-compose.yml",
          "services/*/README.md"
        ]
```

## Mobile App Project

Configuration for a React Native or Flutter mobile application.

```yaml
# Mobile App m1f Configuration

global:
  global_excludes:
    # Platform-specific builds
    - "**/ios/build/**"
    - "**/ios/Pods/**"
    - "**/android/build/**"
    - "**/android/.gradle/**"
    - "**/android/app/build/**"
    
    # React Native / Flutter
    - "**/node_modules/**"
    - "**/.dart_tool/**"
    - "**/pubspec.lock"
    - "**/package-lock.json"
    - "**/yarn.lock"
    
    # IDE and temp files
    - "**/.idea/**"
    - "**/.vscode/**"
    - "**/tmp/**"
    - "**/*.log"

  global_settings:
    security_check: "warn"
    exclude_paths_file: [".gitignore", ".npmignore"]
    
    extensions:
      # Mobile-specific
      .swift:
        remove_comments: true
      .kt:
        remove_comments: true
      .dart:
        remove_comments: true
      .java:
        remove_comments: true
      # JavaScript/TypeScript
      .js:
        minify: true
      .jsx:
        minify: true
      .ts:
        minify: true
      .tsx:
        minify: true

  defaults:
    force_overwrite: true
    max_file_size: "500KB"

bundles:
  # Core application code
  app-screens:
    description: "App screens and navigation"
    group: "app"
    output: "m1f/app/01_screens.txt"
    sources:
      - path: "src/screens/"            # React Native
      - path: "lib/screens/"            # Flutter
      - path: "src/pages/"
      - path: "src/navigation/"

  app-components:
    description: "Reusable UI components"
    group: "app"
    output: "m1f/app/02_components.txt"
    sources:
      - path: "src/components/"
      - path: "lib/widgets/"            # Flutter
      - path: "src/ui/"

  app-state:
    description: "State management"
    group: "app"
    output: "m1f/app/03_state.txt"
    sources:
      - path: "src/store/"              # Redux/MobX
      - path: "src/context/"            # React Context
      - path: "lib/providers/"          # Flutter Provider
      - path: "lib/blocs/"              # Flutter BLoC

  app-services:
    description: "API and service layer"
    group: "app"
    output: "m1f/app/04_services.txt"
    sources:
      - path: "src/services/"
      - path: "src/api/"
      - path: "lib/services/"
      - path: "src/utils/"

  # Platform-specific code
  platform-ios:
    description: "iOS specific code"
    group: "platform"
    output: "m1f/platform/01_ios.txt"
    sources:
      - path: "ios/"
        include_extensions: [".swift", ".m", ".h", ".plist"]
        excludes: ["Pods/", "build/"]

  platform-android:
    description: "Android specific code"
    group: "platform"
    output: "m1f/platform/02_android.txt"
    sources:
      - path: "android/"
        include_extensions: [".java", ".kt", ".xml", ".gradle"]
        excludes: ["build/", ".gradle/"]

  # Assets and resources
  app-assets:
    description: "App assets and resources"
    group: "assets"
    output: "m1f/assets/01_resources.txt"
    sources:
      - path: "assets/"
        includes: ["**/*.json", "**/*.xml", "**/strings.xml"]
      - path: "src/assets/"
      - path: "resources/"

  # Configuration
  app-config:
    description: "App configuration"
    group: "config"
    output: "m1f/config/01_configuration.txt"
    sources:
      - path: "."
        includes: [
          "package.json",
          "app.json",                   # React Native
          "metro.config.js",            # React Native
          "babel.config.js",
          "tsconfig.json",
          "pubspec.yaml",               # Flutter
          ".env.example"
        ]

  # Tests
  app-tests:
    description: "Test suites"
    group: "testing"
    output: "m1f/tests/01_tests.txt"
    sources:
      - path: "__tests__/"
      - path: "test/"
      - path: "src/"
        includes: ["**/*.test.js", "**/*.test.ts", "**/*.spec.js"]

  # Native modules
  native-modules:
    description: "Native modules and bridges"
    group: "native"
    output: "m1f/native/01_modules.txt"
    sources:
      - path: "src/native/"
      - path: "native-modules/"
      - path: "."
        includes: ["**/RN*.swift", "**/RN*.java", "**/RN*.kt"]

  # Quick reference
  app-quick-ref:
    description: "Key files for AI context"
    group: "reference"
    output: "m1f/00_quick_reference.txt"
    max_file_size: "100KB"
    sources:
      - path: "."
        includes: [
          "README.md",
          "package.json",
          "app.json",
          "src/App.js",
          "index.js"
        ]
```

## Best Practices

When creating your `.m1f.config.yml`:

1. **Group Related Files**: Create focused bundles that group related functionality
2. **Use Meaningful Names**: Choose descriptive bundle names that indicate content
3. **Set Size Limits**: Keep bundles under 100KB for optimal AI performance
4. **Security First**: Always configure proper security checks for sensitive files
5. **Leverage Presets**: Use built-in presets for common project types
6. **Exclude Wisely**: Don't bundle generated files, dependencies, or build artifacts
7. **Document Purpose**: Add descriptions to help others understand each bundle
8. **Test Configuration**: Run `m1f-update` and check bundle sizes with `m1f-token-counter`

## Common Patterns

### Pattern 1: Separate by Layer
```yaml
bundles:
  frontend:     # UI components
  backend:      # Server logic
  database:     # Models and migrations
  api:          # API endpoints
  tests:        # Test suites
```

### Pattern 2: Separate by Feature
```yaml
bundles:
  feature-auth:     # Authentication
  feature-payment:  # Payment processing
  feature-search:   # Search functionality
  feature-admin:    # Admin panel
```

### Pattern 3: Separate by Purpose
```yaml
bundles:
  quick-reference:  # Essential files for context
  documentation:    # All docs
  source-code:      # Implementation
  configuration:    # Config files
  deployment:       # Deploy scripts
```

### Pattern 4: Progressive Detail
```yaml
bundles:
  overview:         # High-level summary (10KB)
  core-logic:       # Main functionality (50KB)
  full-source:      # Complete code (100KB)
  everything:       # All files (500KB)
```

Remember: The best configuration depends on your specific project needs and how you plan to use the bundles with AI assistants.

========================================================================================
== FILE: docs/01_m1f/26_default_excludes_guide.md
== DATE: 2025-06-13 23:58:58 | SIZE: 6.99 KB | TYPE: .md
== ENCODING: macroman
== CHECKSUM_SHA256: aa723970157cd5b39ca6fbb9506e0e9cbba5020ddab61f5c9de48765d90b2307
========================================================================================
# m1f Default Excludes Guide

This guide explains the files and directories that m1f excludes by default, helping you write minimal and efficient `.m1f.config.yml` configurations.

## üö® CRITICAL: Correct Bundle Format

**ALWAYS use the `sources:` array format, NOT `source_directory:`!**

```yaml
# ‚úÖ CORRECT FORMAT:
bundles:
  - name: my-bundle
    sources:
      - "./src"
    output_file: "m1f/my-bundle.txt"
    separator_style: Standard  # Or omit - Standard is default
    
# ‚ùå WRONG FORMAT (will cause errors):
bundles:
  my-bundle:
    source_directory: "./src"  # This format causes "ERROR: At least one of -s/--source-directory..."
    output_file: "m1f/my-bundle.txt"
    separator_style: Detailed  # Don't use for AI bundles!
```

**ALWAYS test with `m1f-update` immediately after creating/editing .m1f.config.yml!**

## Understanding Default Excludes

**IMPORTANT**: m1f automatically excludes many common directories and files. You DON'T need to repeat these in your configuration - only add project-specific exclusions!

## Default Excluded Directories

The following directories are ALWAYS excluded unless you explicitly use `--no-default-excludes`:

```yaml
# These are excluded automatically - no need to add them to your config!
- vendor/          # Composer dependencies (PHP)
- node_modules/    # NPM dependencies (JavaScript)
- build/           # Common build output directory
- dist/            # Distribution/compiled files
- cache/           # Cache directories
- .git/            # Git repository data
- .svn/            # Subversion data
- .hg/             # Mercurial data
- __pycache__/     # Python bytecode cache
- .pytest_cache/   # Pytest cache
- .mypy_cache/     # MyPy type checker cache
- .tox/            # Tox testing cache
- .coverage/       # Coverage.py data
- .eggs/           # Python eggs
- htmlcov/         # HTML coverage reports
- .idea/           # IntelliJ IDEA settings
- .vscode/         # Visual Studio Code settings
```

## Default Excluded Files

These specific files are also excluded automatically:

```yaml
# These files are excluded by default:
- LICENSE          # License files (usually not needed in bundles)
- package-lock.json    # NPM lock file
- composer.lock        # Composer lock file
- poetry.lock          # Poetry lock file
- Pipfile.lock         # Pipenv lock file
- yarn.lock            # Yarn lock file
```

## Writing Minimal Configurations

### ‚ùå BAD - Overly Verbose Configuration

```yaml
# DON'T DO THIS - repeating default excludes unnecessarily!
global:
  global_excludes:
    - "**/node_modules/**"     # Already excluded by default!
    - "**/vendor/**"           # Already excluded by default!
    - "**/__pycache__/**"      # Already excluded by default!
    - "**/build/**"            # Already excluded by default!
    - "**/dist/**"             # Already excluded by default!
    - "**/.git/**"             # Already excluded by default!
    - "**/cache/**"            # Already excluded by default!
    - "**/.vscode/**"          # Already excluded by default!
    - "**/*.pyc"               # Project-specific - OK
    - "**/logs/**"             # Project-specific - OK
```

### ‚úÖ GOOD - Minimal Configuration

```yaml
# Only add project-specific exclusions!
global:
  global_excludes:
    - "**/*.pyc"               # Python bytecode
    - "**/logs/**"             # Your project's log files
    - "**/tmp/**"              # Your temporary directories
    - "/m1f/**"                # Output directory
    - "**/secrets/**"          # Sensitive data
```

## Common Patterns by Project Type

### Python Projects

```yaml
# Only add what's NOT in default excludes
global:
  global_excludes:
    - "**/*.pyc"               # Bytecode files
    - "**/*.pyo"               # Optimized bytecode
    - "**/*.pyd"               # Python DLL files
    - "**/venv/**"             # Virtual environments
    - "**/.venv/**"            # Alternative venv naming
    - "**/env/**"              # Another venv naming
```

### Node.js Projects

```yaml
# node_modules is already excluded!
global:
  global_excludes:
    - "**/.next/**"            # Next.js build cache
    - "**/.nuxt/**"            # Nuxt.js build cache
    - "**/coverage/**"         # Test coverage reports
    - "**/*.log"               # Log files
```

### WordPress Projects

```yaml
# Only WordPress-specific excludes needed
global:
  global_excludes:
    - "**/wp-content/uploads/**"    # User uploads
    - "**/wp-content/cache/**"      # Cache plugins
    - "**/wp-content/backup/**"     # Backup files
    - "wp-admin/**"                 # Core files
    - "wp-includes/**"              # Core files
```

## Using .gitignore as Exclude File

Instead of manually listing excludes, use your existing .gitignore:

```yaml
global:
  global_settings:
    # This automatically uses your .gitignore patterns!
    exclude_paths_file: ".gitignore"
```

Or use multiple exclude files:

```yaml
global:
  global_settings:
    exclude_paths_file:
      - ".gitignore"      # Version control ignores
      - ".m1fignore"      # m1f-specific ignores
```

## Checking What's Excluded

To see all excluded paths (including defaults), use verbose mode:

```bash
m1f -s . -o test.txt --verbose
```

This will show:
- Default excluded directories
- Patterns from your config
- Files matched by your exclude patterns

## Disabling Default Excludes

If you need to include normally excluded directories:

```bash
# Include everything, even node_modules, .git, etc.
m1f -s . -o complete.txt --no-default-excludes
```

‚ö†Ô∏è **WARNING**: This can create HUGE bundles and include sensitive data!

## Best Practices

1. **Start Simple**: Begin with no excludes and add only as needed
2. **Use .gitignore**: Leverage existing ignore patterns
3. **Test First**: Run with `--verbose` to see what's excluded
4. **Document Why**: Add comments explaining non-obvious excludes

```yaml
global:
  global_excludes:
    # Project-specific build artifacts
    - "**/generated/**"         # Auto-generated code
    - "**/reports/**"           # Test/coverage reports
    
    # Large data files
    - "**/*.sqlite"             # Database files
    - "**/*.csv"                # Data exports
    
    # Sensitive information
    - "**/.env*"                # Environment files
    - "**/secrets/**"           # API keys, certs
```

## Quick Reference

### Already Excluded (Don't Repeat)
- `node_modules/`, `vendor/`, `build/`, `dist/`
- `.git/`, `.svn/`, `.hg/`
- `__pycache__/`, `.pytest_cache/`, `.mypy_cache/`
- `.idea/`, `.vscode/`
- Lock files: `*.lock`, `package-lock.json`

### Commonly Added (Project-Specific)
- Virtual envs: `venv/`, `.venv/`, `env/`
- Logs: `*.log`, `logs/`
- Temp files: `tmp/`, `temp/`, `*.tmp`
- Database: `*.sqlite`, `*.db`
- Environment: `.env`, `.env.*`
- Output: `/m1f/` (your bundle directory)

## Summary

Keep your `.m1f.config.yml` files clean and minimal by:
1. NOT repeating default excludes
2. Only adding project-specific patterns
3. Using `.gitignore` when possible
4. Documenting non-obvious exclusions

This makes your configurations easier to read, maintain, and share with others!

========================================================================================
== FILE: docs/01_m1f/30_claude_workflows.md
== DATE: 2025-06-14 21:43:33 | SIZE: 11.95 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: b33a822bd69ea511e611dab89d82fc2ef134e0c4285128526bd92191efa0f443
========================================================================================
# Claude + m1f: Your AI-Powered Project Assistant 🤖

Ever wished you had an AI buddy who actually understands your project structure?
That's what happens when you combine Claude with m1f. This guide shows you how
to turn Claude into your personal project assistant who knows exactly how to
bundle, organize, and process your code.

## The Power of m1f v3.2 + Claude ✨

With m1f v3.2's enhanced features, Claude can help you:

- Configure comprehensive security scanning
- Set up parallel processing for faster bundling
- Create sophisticated preset configurations
- Manage content deduplication strategies
- Handle complex encoding scenarios

## Getting Started with Claude

### Step 1: Give Claude the Power

First, let's get Claude up to speed on what m1f can do:

```bash
cd /your/awesome/project
m1f-link  # Creates m1f/m1f.txt symlink
```

Boom! 💥 Now you've got the complete m1f documentation sitting in your project.
Claude can read this and instantly become an m1f expert.

### Step 2: Start the Conversation

Here's where it gets fun. Just tell Claude what you need:

```
Hey Claude, I need help setting up m1f for my project.
Check out @m1f/m1f.txt to see what m1f can do.

My project is a Python web app with:
- Backend API in /api
- Frontend React code in /frontend
- Tests scattered around
- Some docs in /docs

Can you create a .m1f.config.yml that bundles these intelligently?
```

Claude will read the docs and create a perfect config for your project
structure. No more guessing at parameters!

## Real-World Workflows That Actually Work 🚀

### The "Security-First Bundle" Workflow

```
Claude, I need to create bundles for external review.
Using m1f v3.2's security features:

1. Create a config that scans for secrets (security_check: error)
2. Exclude any files with sensitive data
3. Set up proper path validation
4. Ensure no internal IPs or credentials leak through

Focus on making it safe to share with contractors.
```

### The "Performance Optimization" Workflow

```
Claude, my project has 5000+ files and bundling is slow.
Help me optimize using m1f v3.2's features:

1. Leverage parallel processing (enabled by default)
2. Set up smart file size limits
3. Use content deduplication to reduce bundle size
4. Create targeted bundles instead of one massive file

The goal is sub-10 second bundle generation.
```

### The "Multi-Environment Setup" Workflow

```
Claude, I need different bundles for dev/staging/prod.
Using m1f v3.2's preset system:

1. Create environment-specific presets
2. Use conditional presets (enabled_if_exists)
3. Set different security levels per environment
4. Configure appropriate output formats

Make it so I can just run: m1f --preset env.yml --preset-group production
```

## Using m1f-claude: The Smart Assistant 🧠

We've supercharged Claude with m1f knowledge. Here's how to use it:

```bash
# Basic usage - Claude already knows about m1f!
m1f-claude "Bundle my Python project for code review"

# Interactive mode - have a conversation
m1f-claude -i
> Help me organize my WordPress theme files
> Now create a bundle for just the custom post types
> Can you exclude all the vendor files?
```

### What Makes m1f-claude Special?

When you use `m1f-claude`, it automatically:

- Knows where to find m1f documentation
- Understands your project structure
- Suggests optimal parameters
- Can execute commands directly (with your permission)

### 💡 Important: Claude Code Subscription Recommended

**We strongly recommend using Claude Code with a subscription plan** when using m1f-claude for project setup. Setting up m1f with Claude's assistance can involve:

- Multiple file reads to analyze your project structure
- Creating and editing configuration files
- Running various commands to test configurations
- Iterative refinement of bundles

Since we don't know exactly how many tokens this process will consume, a subscription ensures you won't run into usage limits during critical setup phases. The investment pays off quickly through the time saved in properly configuring your project.

## Working with Claude Code

If you're using Claude Code (claude.ai/code), you can leverage its file reading
capabilities:

```
# In Claude Code, you can directly reference files
Claude, please read my current .m1f.config.yml and suggest improvements
based on m1f v3.2 features like:
- Better security scanning
- Optimized performance settings
- Advanced preset configurations
```

## Advanced v3.2 Patterns 🎯

### The "Complete Configuration via Presets"

With v3.2, you can control everything through presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production-ready bundles with full security"

  global_settings:
    # Input/Output
    source_directory: "./src"
    output_file: "dist/prod-bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Security (v3.2)
    security_check: "error" # Stop on any secrets

    # Performance (v3.2)
    enable_content_deduplication: true
    prefer_utf8_for_text_files: true

    # Output control
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true
    minimal_output: true
    quiet: true

    # Processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    max_file_size: "1MB"

    # Exclusions
    exclude_patterns:
      - "**/*.test.js"
      - "**/*.spec.ts"
      - "**/node_modules/**"
      - "**/.env*"

  presets:
    minify_production:
      patterns: ["dist/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]
```

### The "AI Context Optimization" Pattern

```yaml
bundles:
  ai-context:
    description: "Optimized for Claude and other LLMs"
    output: "m1f/ai-context.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts", ".jsx", ".tsx"]
        exclude_patterns:
          - "**/*.test.*"
          - "**/*.spec.*"
          - "**/test/**"

    # v3.2 optimizations
    global_settings:
      # Security first
      security_check: "warn"

      # Performance
      enable_content_deduplication: true # Reduce token usage

      # AI-friendly format
      separator_style: "Markdown"
      max_file_size: "100KB" # Keep context focused

      # Clean output
      remove_scraped_metadata: true
      allow_duplicate_files: false
```

### The "Encoding-Aware Bundle" Pattern

```yaml
bundles:
  legacy-code:
    description: "Handle mixed encoding legacy code"
    output: "m1f/legacy-bundle.txt"

    global_settings:
      # v3.2 encoding features
      prefer_utf8_for_text_files: false # Respect original encoding
      convert_to_charset: "utf-8" # But convert output
      abort_on_encoding_error: false # Continue on errors

      # Include everything
      include_binary_files: false
      include_dot_paths: true
```

## Pro Tips for Claude Interactions 💪

### 1. Let Claude Learn Your Project

First time? Let Claude explore:

```
Claude, analyze my project structure and suggest
how to organize it with m1f bundles. Consider:
- What files change together
- Logical groupings for different use cases
- Size limits for AI context windows

Use @m1f/m1f.txt to understand all available options.
```

### 2. Provide Clear Context

```
Claude, here's my project structure from m1f:
- Total files: 500
- Main languages: Python (60%), JavaScript (30%), Docs (10%)
- Special requirements: HIPAA compliance, no credential exposure
- Target use: Sharing with external auditors

Create a secure bundling strategy using m1f v3.2's security features.
Check @m1f/m1f.txt for security parameters.
```

### 3. Iterative Refinement

```
Claude, the bundle is too large (50MB). Help me:
1. Use content deduplication more aggressively
2. Set up file size limits
3. Create multiple smaller bundles by component
4. Exclude generated files and build artifacts
```

### 4. Preset Composition

```
Claude, I want layered presets:
1. base.yml - Company-wide standards
2. project.yml - Project-specific rules
3. personal.yml - My personal preferences

Show me how to use them together with proper override behavior.
```

## Security-First Workflows 🔒

### Preparing Code for Review

```
Claude, I need to share code with a contractor. Create a config that:
1. Runs strict security scanning (security_check: error)
2. Validates all file paths
3. Excludes .env files and secrets
4. Redacts any hardcoded credentials
5. Creates an audit trail

Use m1f v3.2's security features to make this bulletproof.
```

### Automated Security Checks

```
Claude, write a Git pre-commit hook that:
1. Runs m1f with security scanning
2. Blocks commits if secrets are found
3. Auto-generates safe bundles
4. Updates the m1f/ directory

Make it work with m1f v3.2's git hooks setup.
```

## Performance Optimization Strategies 🚀

### Large Codebase Handling

```
Claude, optimize m1f for our monorepo (10K+ files):

1. Set up smart exclusion patterns
2. Use size-based filtering
3. Create focused bundles per team
4. Leverage parallel processing
5. Implement caching strategies

Goal: Bundle generation under 30 seconds.
```

### Memory-Efficient Processing

```yaml
# Claude might suggest this for large files
large_files:
  description: "Handle massive log files"

  global_settings:
    max_file_size: "10MB" # Skip huge files
    enable_content_deduplication: true

  presets:
    truncate_logs:
      extensions: [".log", ".txt"]
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000
        add_marker: true
```

## Troubleshooting with Claude 🔧

### Common Issues and Solutions

```
Claude, m1f is flagging false positives for secrets. Help me:
1. Configure security_check levels appropriately
2. Create patterns to exclude test fixtures
3. Set up per-file security overrides
4. Document why certain warnings are acceptable
```

### Performance Debugging

```
Claude, bundling takes 5 minutes. Analyze this verbose output
and suggest optimizations:
[paste m1f --verbose output]

Consider:
- File count and sizes
- Duplicate detection overhead
- Encoding detection delays
- Security scanning bottlenecks
```

## Integration Patterns 🔌

### CI/CD Integration

```
Claude, create a GitHub Action that:
1. Triggers on PR creation
2. Generates comparison bundles (before/after)
3. Posts bundle statistics as PR comment
4. Fails if bundle size increases >10%
5. Runs security scanning on changed files

Use m1f v3.2's features for efficiency.
```

### Documentation Automation

```
Claude, automate our documentation workflow:
1. Scrape our docs site weekly
2. Convert HTML to Markdown
3. Bundle by section with m1f
4. Remove outdated metadata
5. Create versioned archives

Leverage m1f's web scraping and processing features.
```

## Quick Reference Commands 🎪

Some powerful one-liners for common tasks:

```bash
# Give Claude m1f superpowers
m1f-link

# Quick m1f setup for your project
m1f-claude "Setup m1f for a typical Python project with tests and docs"

# Interactive Claude session
m1f-claude -i

# Security audit bundle
m1f -s . -o audit.txt --security-check error --minimal-output

# Fast development bundle (no security checks)
m1f -s ./src -o dev.txt --security-check skip

# Documentation bundle with metadata
m1f -s ./docs -o docs.txt --separator-style Detailed

# Clean bundle for AI consumption
m1f -s . -o ai-context.txt --allow-duplicate-files false

# Help me understand this codebase
m1f-claude "Create bundles to help a new developer understand this project"

# Prep for the AI apocalypse
m1f-claude "Optimize my project for AI assistants with proper context windows"
```

## Your Turn! 🎮

Now you're ready to turn Claude into your personal m1f expert. Remember:

1. Always start with `m1f-link` to give Claude the docs
2. Be specific about what you want to achieve
3. Let Claude suggest optimal configurations based on the documentation
4. Iterate and refine based on results
5. Test security settings thoroughly before sharing

The best part? Claude remembers your conversations, so it gets better at
understanding your project over time.

Happy bundling! 🚀

---

_P.S. - If Claude suggests something that seems off, just ask "Are you sure
about that? Check @m1f/m1f.txt again." Works every time! 😉_

========================================================================================
== FILE: docs/01_m1f/31_claude_code_integration.md
== DATE: 2025-06-15 17:52:54 | SIZE: 9.19 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 3f32007c1b159817d2a2c0ddabd1703fad4ebf26db635f70581e868eac2c12f8
========================================================================================
# Claude Code Integration Guide

This guide explains how to integrate Claude Code as an optional AI assistant for
the m1f tools project.

## Overview

Claude Code can help automate complex workflows by understanding natural
language prompts and executing the appropriate tools with correct parameters.

## Installation

### Prerequisites

- Node.js installed on your system
- An Anthropic API key (get one at https://console.anthropic.com)

### Install Claude Code

```bash
npm install -g @anthropic-ai/claude-code
```

### Initial Setup

1. Start Claude Code:

   ```bash
   claude
   ```

2. Login with your API key:

   ```
   /login
   ```

3. Configure Claude Code for this project:
   ```bash
   cd /path/to/m1f
   claude config
   ```

## Project Configuration

Create `.claude/settings.json` in the project root:

```json
{
  "model": "claude-opus-4",
  "customInstructions": "You are helping with the m1f tools project. Key tools available: m1f.py (file bundler), s1f.py (file splitter), mf1-html2md (HTML to Markdown converter), wp_export_md.py (WordPress exporter).",
  "permissions": {
    "write": true,
    "execute": true
  }
}
```

## m1f-claude Tool

### Quick Project Setup with --init

The `m1f-claude --init` command provides an intelligent way to set up m1f for your project:

```bash
# Initialize m1f configuration with basic bundles
m1f-claude --init

# With verbose output to see what's happening
m1f-claude --init --verbose
```

#### What --init Does:

1. **Project Analysis**
   - Runs m1f to create file and directory lists in `m1f/` directory
   - Creates `project_analysis_filelist.txt` and `project_analysis_dirlist.txt`
   - Respects .gitignore patterns and excludes m1f/ directory
   - Analyzes project type, languages, and structure

2. **Automatic Bundle Creation**
   - **complete.txt**: Full project bundle (excluding meta files)
   - **docs.txt**: All documentation files with 50+ supported extensions
   - Both bundles are created immediately without Claude Code

3. **Configuration File**
   - Creates `.m1f.config.yml` with complete and docs bundles configured
   - Includes all documentation extensions (.md, .txt, .rst, .adoc, etc.)
   - No global file size limits
   - Proper meta file exclusions (LICENSE*, CLAUDE.md, *.lock)

4. **Advanced Segmentation (Optional)**
   - If Claude Code is installed, offers to create topic-specific bundles
   - Analyzes project structure for components, API, styles, etc.
   - Adds these bundles to your existing configuration
   - Uses `--allowedTools Read,Write,Edit,MultiEdit` for file operations

#### Example Output:

```
🚀 Initializing m1f for your project...
==================================================
✅ Git repository detected: /home/user/my-project
✅ m1f documentation already available
⚠️  No m1f configuration found - will help you create one
✅ Claude Code is available

📊 Project Analysis
==============================
Analyzing project structure with m1f...
📄 Created file list: project_analysis_filelist.txt
📁 Created directory list: project_analysis_dirlist.txt
✅ Found 127 files in 59 directories
📁 Project Type: Next.js Application
💻 Languages: JavaScript (37 files), TypeScript (30 files)
📂 Code Dirs: src/app, src/components, src/lib

📦 Creating Initial Bundles
==============================
Creating complete project bundle...
✅ Created: m1f/complete.txt
Creating documentation bundle...
✅ Created: m1f/docs.txt

📝 Creating .m1f.config.yml with basic bundles...
✅ Configuration created with complete and docs bundles

🤖 Claude Code for Advanced Segmentation
──────────────────────────────────────────────────
Basic bundles created! Now Claude can help you create topic-specific bundles.

[Claude analyzes and adds topic-specific bundles]

✅ Advanced segmentation complete!
📝 Claude has analyzed your project and added topic-specific bundles.

🚀 Next steps:
• Your basic bundles are ready in m1f/
  - complete.txt: Full project bundle
  - docs.txt: All documentation files
• Run 'm1f-update' to regenerate bundles after config changes
• Use Claude to create topic-specific bundles as needed
```

#### Troubleshooting:

- **Use --verbose** to see the full prompt and command parameters
- **Check file permissions** if config isn't being modified
- **Ensure Claude Code is installed**: `npm install -g @anthropic-ai/claude-code`
- **Analysis files are kept** in m1f/ directory for reference

## Using Claude Code with m1f Tools

### Basic Commands

1. **Bundle files into m1f**:

   ```bash
   claude -p "Bundle all Python files in the tools directory into a single m1f file"
   ```

2. **Convert HTML to Markdown**:

   ```bash
   claude -p "Convert all HTML files in ~/docs to Markdown with preprocessing"
   ```

3. **Analyze and preprocess HTML**:
   ```bash
   claude -p "Analyze the HTML files in the docs folder and create a preprocessing config"
   ```

### Advanced Workflows

1. **Complete documentation conversion workflow**:

   ```bash
   claude -p "I have scraped HTML documentation in ~/docs/html. Please:
   1. Analyze a few sample files to understand the structure
   2. Create a preprocessing configuration
   3. Convert all HTML to Markdown
   4. Create thematic m1f bundles (concepts, reference, installation, etc.)"
   ```

2. **Export WordPress site**:
   ```bash
   claude -p "Export my WordPress site at example.com to Markdown, organizing by categories"
   ```

## Programmatic Usage

### Using Claude Code in Scripts

```python
#!/usr/bin/env python3
import subprocess
import json

def claude_command(prompt):
    """Execute a Claude Code command and return the result."""
    result = subprocess.run(
        ['claude', '-p', prompt, '--output-format', 'json'],
        capture_output=True,
        text=True
    )
    return json.loads(result.stdout)

# Example: Get optimal m1f parameters
response = claude_command(
    "What are the optimal m1f parameters for bundling a Python project with tests?"
)
print(response)
```

### Integration with m1f Tools

Create `tools/claude_orchestrator.py`:

```python
#!/usr/bin/env python3
"""Orchestrate m1f tools using Claude Code."""

import subprocess
import json
from pathlib import Path

class ClaudeOrchestrator:
    def __init__(self):
        self.tools = {
            'm1f': 'tools/m1f.py',
            's1f': 'tools/s1f.py',
            'mf1-html2md': 'tools/mf1-html2md',
            'wp_export': 'tools/wp_export_md.py'
        }

    def analyze_request(self, user_prompt):
        """Use Claude to analyze user request and determine actions."""
        analysis_prompt = f"""
        Analyze this request and return a JSON with:
        1. tool: which tool to use ({', '.join(self.tools.keys())})
        2. parameters: dict of parameters for the tool
        3. steps: list of steps to execute

        Request: {user_prompt}
        """

        result = subprocess.run(
            ['claude', '-p', analysis_prompt, '--output-format', 'json'],
            capture_output=True,
            text=True
        )
        return json.loads(result.stdout)

    def execute_workflow(self, user_prompt):
        """Execute a complete workflow based on user prompt."""
        plan = self.analyze_request(user_prompt)

        for step in plan['steps']:
            print(f"Executing: {step['description']}")
            # Execute the actual command
            subprocess.run(step['command'], shell=True)
```

## Best Practices

1. **Create project-specific instructions** in `.claude/settings.json`
2. **Use Claude for complex workflows** that require multiple steps
3. **Leverage Claude's understanding** of file patterns and project structure
4. **Combine with shell pipes** for powerful automation

## Example Workflows

### 1. Documentation Processing Pipeline

```bash
# Complete pipeline with Claude
claude -p "Process the scraped documentation in ~/scraped-docs:
1. Analyze HTML structure
2. Create preprocessing config
3. Convert to Markdown preserving structure
4. Create m1f bundles by topic
5. Generate a summary report"
```

### 2. Project Analysis

```bash
# Analyze project for bundling
claude -p "Analyze this Python project and suggest:
1. Which files should be bundled together
2. Optimal m1f parameters
3. Any files that should be excluded"
```

### 3. Automated Testing

```bash
# Run tests and fix issues
claude -p "Run the test suite, identify any failures, and fix them"
```

## Environment Variables

Set these in your shell profile for persistent configuration:

```bash
export ANTHROPIC_MODEL="claude-sonnet-4-20250514"
export CLAUDE_CODE_PROJECT_ROOT="/path/to/m1f"
```

## Troubleshooting

1. **Permission errors**: Ensure Claude Code has write permissions in settings
2. **Model selection**: Use Claude Opus 4 for the most complex analysis, Claude
   Sonnet 4 for balanced performance
3. **Rate limits**: Be mindful of API usage limits

## Security Considerations

1. **Never commit API keys** to version control
2. **Use `.claude/settings.local.json`** for personal settings
3. **Review Claude's actions** before executing in production

## Further Resources

- [Claude Code Documentation](https://docs.anthropic.com/en/docs/claude-code)
- [m1f Tools Documentation](00_m1f.md)
- [html2md Documentation](../03_html2md/30_html2md.md)

========================================================================================
== FILE: docs/01_m1f/40_security_best_practices.md
== DATE: 2025-06-10 14:50:13 | SIZE: 6.64 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 43357f4d87c81a2543a71c004e6f63bd7688b7e7edcc26df8cb6943710390f5d
========================================================================================
# Security Best Practices Guide for m1f Toolkit

## Overview

This guide documents security best practices and protective measures implemented
in the m1f toolkit v3.2. Following these practices ensures safe operation and
prevents common security vulnerabilities.

## Path Validation and Traversal Protection

### Why It Matters

Path traversal attacks can allow malicious actors to access files outside
intended directories, potentially exposing sensitive system files or overwriting
critical data.

### Best Practices

1. **Always validate resolved paths**:

   ```python
   # Good practice - validate after resolving
   from tools.m1f.utils import validate_safe_path

   target_path = Path(user_input).resolve()
   validate_safe_path(target_path, base_path)
   ```

2. **Use the provided validation utilities**:

   - `validate_safe_path()` in `tools/m1f/utils.py` ensures paths stay within
     allowed boundaries
   - All user-provided paths should be validated before use

3. **Symlink safety**:
   - Symlinks are resolved and validated to prevent escaping directories
   - Target of symlinks must be within the allowed base path

### Common Pitfalls to Avoid

- Never use user input directly in file paths without validation
- Don't trust relative paths without resolving and validating them
- Always validate paths from configuration files and presets

## Web Scraping Security

### SSRF (Server-Side Request Forgery) Protection

The toolkit blocks access to:

- Private IP ranges (10.x.x.x, 172.16.x.x, 192.168.x.x)
- Localhost and loopback addresses (127.0.0.1, ::1)
- Link-local addresses (169.254.x.x)
- Cloud metadata endpoints (169.254.169.254)

### SSL/TLS Validation

1. **Default behavior**: SSL certificates are validated by default
2. **Disabling validation** (use with caution):

   ```bash
   # Only for trusted internal sites or testing
   m1f-scrape --ignore-https-errors https://internal-site.com
   ```

   ⚠️ **Warning**: Disabling SSL validation exposes you to man-in-the-middle
   attacks. Only use for trusted internal resources.

### robots.txt Compliance

All scrapers automatically respect robots.txt files:

- Automatically fetched and parsed for each domain
- Scraping is blocked for disallowed paths
- User-agent specific rules are respected
- This is always enabled - no configuration option to disable

### JavaScript Execution Safety

When using Playwright with custom scripts:

- Scripts are validated for dangerous patterns
- Avoid executing untrusted JavaScript code
- Use built-in actions instead of custom scripts when possible

## Command Injection Prevention

### Safe Command Execution

The toolkit uses proper escaping for all system commands:

```python
# Good - using shlex.quote()
import shlex
command = f"httrack {shlex.quote(url)} -O {shlex.quote(output_dir)}"

# Bad - direct string interpolation
command = f"httrack {url} -O {output_dir}"  # DON'T DO THIS
```

## Preset System Security

### File Size Limits

- Preset files are limited to 10MB to prevent memory exhaustion
- Large preset files are rejected with an error

### Path Validation in Presets

- All paths in preset files are validated
- Paths cannot escape the project directory
- Absolute paths outside the project are blocked

### Custom Processor Validation

- Processor names must be alphanumeric with underscores only
- Special characters that could enable code injection are blocked

## Secure Temporary File Handling

The toolkit uses Python's `tempfile` module for all temporary files:

- Temporary directories are created with restricted permissions
- All temporary files are cleaned up after use
- No sensitive data is left in temporary locations

## Security Scanning for Sensitive Data

### Built-in Secret Detection

m1f includes automatic scanning for:

- API keys and tokens
- Passwords and credentials
- Private keys
- High-entropy strings that might be secrets

### Security Check Modes

1. **Error mode** (default): Stops processing if secrets are found

   ```bash
   m1f -s ./src -o output.txt --security-check error
   ```

2. **Warn mode**: Logs warnings but continues processing

   ```bash
   m1f -s ./src -o output.txt --security-check warn
   ```

3. **Skip mode**: Disables security scanning (not recommended)
   ```bash
   m1f -s ./src -o output.txt --security-check skip
   ```

### Handling False Positives

If legitimate content is flagged as sensitive:

1. Review the warnings carefully
2. Use `--security-check warn` if you're certain the content is safe
3. Consider refactoring code to avoid patterns that trigger detection

## Input Validation Best Practices

### File Type Validation

- Use include/exclude patterns to limit processed file types
- Be explicit about allowed file extensions
- Validate file contents match expected formats

### Size and Resource Limits

- Set appropriate limits for file sizes
- Use `--max-file-size` to prevent processing huge files
- Monitor memory usage for large file sets

### Encoding Safety

- The toolkit automatically detects file encodings
- UTF-8 is preferred for text files by default
- Binary files are handled safely without interpretation

## Deployment Security Recommendations

### Environment Configuration

1. Run with minimal required permissions
2. Use dedicated service accounts when possible
3. Avoid running as root/administrator

### Network Security

1. Use HTTPS for all web scraping when possible
2. Configure firewall rules to limit outbound connections
3. Monitor for unusual network activity

### Logging and Monitoring

1. Enable verbose logging for security-sensitive operations
2. Review logs regularly for suspicious patterns
3. Set up alerts for security check failures

## Reporting Security Issues

If you discover a security vulnerability in m1f:

1. Do NOT open a public issue
2. Email security details to the maintainers
3. Include steps to reproduce the issue
4. Allow time for a fix before public disclosure

## Security Checklist for Users

Before running m1f in production:

- [ ] Validate all input paths and patterns
- [ ] Review security check mode settings
- [ ] Enable SSL validation for web scraping
- [ ] Set appropriate file size limits
- [ ] Use minimal required permissions
- [ ] Review preset files for suspicious content
- [ ] Test security scanning on sample data
- [ ] Configure proper logging and monitoring
- [ ] Keep the toolkit updated to the latest version

## Updates and Security Patches

Stay informed about security updates:

- Check the CHANGELOG for security-related fixes
- Update to new versions promptly
- Review breaking changes that might affect security

Remember: Security is a shared responsibility. While m1f implements many
protective measures, proper configuration and usage are essential for
maintaining a secure environment.

========================================================================================
== FILE: docs/01_m1f/41_version_3_2_features.md
== DATE: 2025-06-10 14:50:13 | SIZE: 9.06 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 7a3e3e8098fe0facb328aad2316e4592f5b00f3a7a74b469d265dddbc3c8ec32
========================================================================================
# m1f v3.2 Feature Documentation

## Overview

Version 3.2 of the m1f toolkit introduces significant security enhancements,
performance improvements, and new configuration options. This document provides
a comprehensive overview of all v3.2 features and changes.

## Major Security Enhancements

### 1. Path Traversal Protection

- **What's New**: Comprehensive validation of all file paths to prevent
  directory traversal attacks
- **Impact**: Prevents malicious actors from accessing files outside intended
  directories
- **Implementation**:
  - New `validate_safe_path()` utility function
  - Applied to all user inputs, preset paths, and configuration files
  - Symlink targets are now validated

### 2. SSRF Protection in Web Scrapers

- **What's New**: Blocks access to private IP ranges and cloud metadata
  endpoints
- **Protected Ranges**:
  - Private networks (10.x.x.x, 172.16.x.x, 192.168.x.x)
  - Localhost (127.0.0.1, ::1)
  - Link-local (169.254.x.x)
  - Cloud metadata (169.254.169.254)
- **Applies to**: All web scraping tools (BeautifulSoup, Playwright, Scrapy,
  Selectolax)

### 3. robots.txt Compliance

- **What's New**: All scrapers now automatically respect robots.txt files
- **Features**:
  - Automatic robots.txt fetching and parsing
  - Per-path access validation
  - User-agent specific rule support
  - No configuration needed - always enabled
- **Previously**: Only HTTrack respected robots.txt

### 4. SSL/TLS Certificate Validation

- **What's New**: SSL validation is now enabled by default
- **Configuration**:
  - New `--ignore-https-errors` flag for exceptions
  - Per-scraper SSL configuration
- **Security**: Prevents man-in-the-middle attacks

### 5. Command Injection Prevention

- **What's New**: Proper escaping of all shell commands
- **Implementation**: Uses `shlex.quote()` for all user inputs in commands
- **Affected Tools**: HTTrack scraper, git operations

### 6. JavaScript Execution Safety

- **What's New**: Validation of custom JavaScript in Playwright scraper
- **Features**:
  - Detects dangerous patterns (eval, Function constructor)
  - Warns about custom script execution
  - Encourages use of built-in actions

### 7. Custom Processor Validation

- **What's New**: Validates processor names to prevent injection attacks
- **Rules**: Only alphanumeric characters and underscores allowed
- **Impact**: Prevents code injection through preset files

## Performance Improvements

### 1. Parallel File Processing

- **Enabled by Default**: Parallel processing is now always active
- **Features**:
  - Concurrent file reading with automatic batch size optimization
  - Thread-safe checksum deduplication
  - Maintains deterministic file order in output
- **Performance**: Up to 3-5x faster for large file sets

### 2. Optimized Checksum Verification

- **What's Changed**: Stream-based file reading for checksums
- **Benefits**:
  - Reduced memory usage for large files
  - Prevents out-of-memory errors
  - 8KB chunk processing

### 3. Concurrent Write Limits in s1f

- **What's New**: Semaphore-based write limiting
- **Default**: 10 concurrent file operations
- **Benefits**: Prevents "too many open files" errors

### 4. Async I/O Improvements

- **Updates**:
  - Uses `aiofiles` for truly async file operations
  - Modern async patterns (asyncio.run())
  - Proper exception handling in async contexts

## Configuration Enhancements

### 1. Content Deduplication Control

- **New CLI Option**: `--allow-duplicate-files`
- **Preset Setting**: `enable_content_deduplication`
- **Default**: Deduplication enabled (False for allow-duplicate)
- **Use Case**: When you need to preserve duplicate content

### 2. UTF-8 Preference Control

- **New CLI Option**: `--no-prefer-utf8-for-text-files`
- **Preset Setting**: `prefer_utf8_for_text_files`
- **Default**: UTF-8 preferred (True)
- **Use Case**: Working with legacy encodings like windows-1252

### 3. Security Check Modes

- **Options**:
  - `error` (default): Stop on security issues
  - `warn`: Log warnings but continue
  - `skip`: Disable security scanning
- **CLI**: `--security-check {error|warn|skip}`
- **Preset**: `security_check` setting

### 4. File Size Limits

- **Preset Files**: Limited to 10MB
- **Benefits**: Prevents memory exhaustion attacks
- **Error Handling**: Clear error messages for oversized files

## Improved Patterns and Flexibility

### 1. Flexible Metadata Stripping

- **What's New**: More flexible regex for scraped content metadata
- **Supports**:
  - Various horizontal rule styles (`---`, `___`, `***`)
  - Different emphasis markers
  - Multiple formatting variations

### 2. Code Block Detection in s1f

- **What's New**: Ignores separators inside code blocks
- **Benefits**: Prevents false positive file detection
- **Applies to**: Markdown code blocks (```)

### 3. Timezone-Aware Timestamps

- **What's Changed**: All timestamps now use UTC
- **Implementation**: `datetime.now(timezone.utc)`
- **Benefits**: Consistent timestamps across timezones

## CLI Updates

### New Options Summary

```bash
# Performance
--allow-duplicate-files         # Disable content deduplication

# Encoding
--no-prefer-utf8-for-text-files # Disable UTF-8 preference

# Security
--security-check {error|warn|skip}  # Security scanning mode
--ignore-https-errors              # Disable SSL validation (scraping)

# Existing options work as before
--source-directory, -s          # Source directory
--output-file, -o              # Output file
--preset                       # Use preset configuration
```

## Breaking Changes

### 1. Standard Separator Format

- **Change**: File separators no longer include checksums
- **Before**: `=== path/to/file.txt === SHA256: abc123...`
- **After**: `=== path/to/file.txt ===`
- **Impact**: s1f can still read old format files

### 2. SSL Validation Default

- **Change**: SSL validation now enabled by default
- **Impact**: May break scraping of sites with invalid certificates
- **Migration**: Use `--ignore-https-errors` if needed

### 3. Security Scanning Default

- **Change**: Security scanning in error mode by default
- **Impact**: Processing stops on sensitive data detection
- **Migration**: Use `--security-check warn` for old behavior

## Preset System Enhancements

### New Preset Settings

```yaml
# Performance
enable_content_deduplication: false # Allow duplicate files

# Encoding
prefer_utf8_for_text_files: false # Disable UTF-8 preference

# Security
security_check: warn # Security check mode

# Per-file settings still work
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Test Suite Improvements

- Fixed test isolation issues
- Added proper async test support
- Improved test server connectivity handling
- Enhanced security test coverage

## Migration Guide

### From v3.1 to v3.2

1. **Review Security Settings**:

   - Default security scanning may flag legitimate content
   - Use `--security-check warn` during migration

2. **Check SSL Requirements**:

   - Sites with self-signed certificates need `--ignore-https-errors`
   - Review and update scraping scripts

3. **Update Separator Parsing**:

   - If you parse m1f output, update to handle new separator format
   - s1f handles both formats automatically

4. **Performance Tuning**:
   - Parallel processing is automatic - no configuration needed
   - Monitor memory usage with large file sets

## Examples

### Using New Features

```bash
# Security in warn mode (parallel processing is automatic)
m1f -s ./src -o bundle.txt --security-check warn

# Allow duplicates with custom encoding handling
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Secure web scraping (robots.txt compliance is automatic)
m1f-scrape https://example.com -o ./scraped

# Using new features in presets
m1f -s . -o bundle.txt --preset my-preset.yml
```

### Sample v3.2 Preset

```yaml
name: "Modern Web Project v3.2"
version: "3.2"

# Global settings with v3.2 features
settings:
  enable_content_deduplication: true
  prefer_utf8_for_text_files: true
  security_check: error

# File patterns remain the same
include_patterns:
  - "src/**/*.{js,ts,jsx,tsx}"
  - "**/*.md"

exclude_patterns:
  - "**/node_modules/**"
  - "**/.git/**"

# Per-file settings with processors
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Performance Benchmarks

Typical improvements with v3.2:

- **Parallel Processing**: 3-5x faster for 1000+ files
- **Memory Usage**: 50% reduction for large files
- **s1f Extraction**: 2x faster with concurrent writes
- **Checksum Calculation**: Constant memory usage regardless of file size

## Security Audit Results

v3.2 addresses all HIGH and MEDIUM priority security issues:

- ✅ Path traversal vulnerabilities fixed
- ✅ SSRF protection implemented
- ✅ Command injection prevented
- ✅ SSL validation enforced
- ✅ robots.txt compliance added
- ✅ JavaScript execution validated
- ✅ Race conditions eliminated

## Support and Resources

- [Security Best Practices Guide](./40_security_best_practices.md)
- [CLI Reference](./02_cli_reference.md)
- [Preset System Guide](./10_m1f_presets.md)
- [Troubleshooting Guide](./03_troubleshooting.md)

For questions or issues, please refer to the project repository.

========================================================================================
== FILE: docs/02_s1f/20_s1f.md
== DATE: 2025-06-12 12:50:58 | SIZE: 8.80 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 2ab20373b8149cb049af9695921c78a388e1a505f8ec7309ccba03a33530afbf
========================================================================================
# s1f (Split One File)

A modern file extraction tool with async I/O that reconstructs original files
from combined archives with full metadata preservation.

## Overview

The s1f tool (v2.0.0) is the counterpart to m1f, designed to extract and
reconstruct original files from a combined file. Built with Python 3.10+ and
modern async architecture, it ensures reliable extraction with checksum
verification and proper encoding handling.

## Key Features

- **Async I/O**: High-performance concurrent file writing
- **Smart Parser Framework**: Automatic format detection with dedicated parsers
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Clean modular design with dependency injection
- **Checksum Verification**: SHA256 integrity checking with line ending
  normalization
- **Encoding Support**: Intelligent encoding detection and conversion
- **Error Recovery**: Graceful fallbacks and detailed error reporting
- **Progress Tracking**: Real-time extraction statistics

## Quick Start

```bash
# Basic extraction (positional arguments - recommended)
m1f-s1f ./combined.txt ./extracted_files

# Basic extraction (option-style arguments)
m1f-s1f -i ./combined.txt -d ./extracted_files

# List files without extracting
m1f-s1f --list ./combined.txt

# Force overwrite of existing files
m1f-s1f ./combined.txt ./extracted_files -f

# Verbose output to see detailed extraction progress
m1f-s1f ./combined.txt ./extracted_files -v

# Extract with specific encoding (new in v2.0.0)
m1f-s1f ./combined.txt ./extracted_files --target-encoding utf-16-le
```

## Architecture

S1F v2.0.0 features a modern, modular architecture:

```
tools/s1f/
├── __init__.py       # Package initialization
├── __main__.py       # Entry point for module execution
├── cli.py            # Command-line interface
├── config.py         # Configuration management
├── core.py           # Core extraction logic with async I/O
├── exceptions.py     # Custom exceptions
├── logging.py        # Structured logging
├── models.py         # Data models (ExtractedFile, etc.)
├── parsers.py        # Abstract parser framework
├── utils.py          # Utility functions
└── writers.py        # Output writers (file, stdout)
```

### Key Components

- **Async I/O**: Concurrent file operations for better performance
- **Parser Framework**: Extensible system for handling different file formats
- **Type Safety**: Full type hints and dataclass models
- **Clean Architecture**: Separation of concerns with dependency injection

## Command Line Options

s1f supports both positional and option-style arguments for flexibility:

### Positional Arguments (recommended)

```bash
s1f <input_file> <destination_directory>
```

### Option-Style Arguments (backward compatibility)

```bash
s1f -i <input_file> -d <destination_directory>
```

### All Options

| Option                        | Description                                                                                                                                                                                                   |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-i, --input-file`            | Path to the combined input file (can also be specified as first positional argument)                                                                                                                          |
| `-d, --destination-directory` | Directory where extracted files will be saved (can also be specified as second positional argument)                                                                                                           |
| `-l, --list`                  | List files in the archive without extracting them. When used, destination directory is not required                                                                                                           |
| `-f, --force`                 | Force overwrite of existing files without prompting                                                                                                                                                           |
| `-v, --verbose`               | Enable verbose output                                                                                                                                                                                         |
| `--version`                   | Show version information and exit                                                                                                                                                                             |
| `--timestamp-mode`            | How to set file timestamps (`original` or `current`). Original preserves timestamps from when files were combined, current uses the current time                                                              |
| `--ignore-checksum`           | Skip checksum verification for MachineReadable files. Useful when files were intentionally modified after being combined                                                                                      |
| `--respect-encoding`          | Try to use the original file encoding when writing extracted files. If enabled and original encoding information is available, files will be written using that encoding instead of UTF-8                     |
| `--target-encoding`           | Explicitly specify the character encoding to use for all extracted files (e.g., `utf-8`, `latin-1`, `utf-16-le`). This overrides the `--respect-encoding` option and any encoding information in the metadata |

## Usage Examples

### Basic Operations

```bash
# Basic command (positional arguments)
m1f-s1f /path/to/combined_output.txt /path/to/output_folder

# Basic command (option-style)
m1f-s1f --input-file /path/to/combined_output.txt \
  --destination-directory /path/to/output_folder

# List files in archive without extracting
m1f-s1f --list ./output/bundle.m1f.txt

# Splitting a MachineReadable file with force overwrite and verbose output
m1f-s1f ./output/bundle.m1f.txt ./extracted_project -f -v

# Check version
m1f-s1f --version
```

### Advanced Operations

```bash
# Using current system time for timestamps
m1f-s1f -i ./combined_file.txt -d ./extracted_files \
  --timestamp-mode current

# Preserving original file encodings
m1f-s1f -i ./with_encodings.txt -d ./extracted_files \
  --respect-encoding

# Using a specific encoding for all extracted files
m1f-s1f -i ./combined_file.txt -d ./extracted_files \
  --target-encoding utf-8

# Ignoring checksum verification (when files were intentionally modified)
m1f-s1f -i ./modified_bundle.m1f.txt -d ./extracted_files \
  --ignore-checksum
```

## Supported File Formats

The s1f tool can extract files from combined files created with any of the m1f
separator styles:

- **Standard Style** - Simple separators with file paths and checksums
- **Detailed Style** - Comprehensive separators with full metadata
- **Markdown Style** - Formatted with Markdown syntax for documentation
- **MachineReadable Style** - Structured format with JSON metadata and UUID
  boundaries
- **None Style** - Files combined without separators (limited extraction
  capability)

For the most reliable extraction, use files created with the MachineReadable
separator style, as these contain complete metadata and checksums for
verification.

## Common Workflows

### Extract and Verify

This workflow is useful when you want to ensure the integrity of extracted
files:

```bash
# Step 1: Extract the files with verification
m1f-s1f -i ./project_bundle.m1f.txt -d ./extracted_project -v

# Step 2: Check for any checksum errors in the output
# If any errors are reported, consider using --ignore-checksum if appropriate
```

### Multiple Extraction Targets

When you need to extract the same combined file to different locations:

```bash
# Extract for development
m1f-s1f -i ./project.m1f.txt -d ./dev_workspace

# Extract for backup with original timestamps
m1f-s1f -i ./project.m1f.txt -d ./backup --timestamp-mode original
```

## Performance

S1F v2.0.0 includes significant performance improvements:

- **Async I/O**: Concurrent file writing for 3-5x faster extraction on SSDs
- **Optimized Parsing**: Efficient line-by-line processing with minimal memory
  usage
- **Smart Buffering**: Adaptive buffer sizes based on file characteristics

## Error Handling

The tool provides comprehensive error handling:

- **Checksum Verification**: Automatic integrity checking with clear error
  messages
- **Encoding Fallbacks**: Graceful handling of encoding issues with multiple
  fallback strategies
- **Permission Errors**: Clear reporting of file system permission issues
- **Partial Recovery**: Continue extraction even if individual files fail

========================================================================================
== FILE: docs/03_html2md/30_html2md.md
== DATE: 2025-06-12 12:50:58 | SIZE: 16.62 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 17a22fb2b768e4a837bfaf284d477cb980dc70a20a87fdd189a99d24dd44d1e0
========================================================================================
# html2md (HTML to Markdown Converter)

A modern HTML to Markdown converter with HTML structure analysis, custom
extractors, async I/O, and parallel processing capabilities.

## Overview

The html2md tool (v3.1.0) provides a robust solution for converting HTML content
to Markdown format, with fine-grained control over the conversion process. Built
with Python 3.10+ and modern async architecture, it focuses on intelligent
content extraction and conversion.

**New in v3.1.0:** Custom extractor plugin system for site-specific content
extraction.

**Note:** Web scraping functionality has been moved to the separate `webscraper`
tool for better modularity. Use `webscraper` to download websites, then
`html2md` to convert the downloaded HTML files.

## Key Features

- **Custom Extractor System**: Create site-specific extractors for optimal
  content extraction
- **HTML Structure Analysis**: Analyze HTML files to find optimal content
  selectors
- **Intelligent Content Extraction**: Use CSS selectors to extract specific
  content
- **Async I/O**: High-performance concurrent file processing
- **API Mode**: Programmatic access for integration with other tools
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Clean modular design
- **Workflow Integration**: .scrapes directory structure for organized
  processing
- Recursive directory scanning for batch conversion
- Smart internal link handling (HTML → Markdown)
- Customizable element filtering and removal
- YAML frontmatter generation
- Heading level adjustment
- Code block language detection
- Character encoding detection and conversion
- Parallel processing for faster conversion

## Quick Start

```bash
# Basic conversion of all HTML files in a directory
m1f-html2md convert ./website -o ./docs

# Use a custom extractor for site-specific conversion
m1f-html2md convert ./website -o ./docs \
  --extractor ./extractors/custom_extractor.py

# Extract only main content from HTML files
m1f-html2md convert ./website -o ./docs \
  --content-selector "main.content" --ignore-selectors nav .sidebar footer

# Skip YAML frontmatter and adjust heading levels
m1f-html2md convert ./website -o ./docs \
  --no-frontmatter --heading-offset 1

# Analyze HTML structure to find best selectors
m1f-html2md analyze ./html/*.html --suggest-selectors

# Analyze with detailed structure output
m1f-html2md analyze ./html/*.html --show-structure --common-patterns

# Generate a configuration file
m1f-html2md config -o config.yaml
```

### Complete Workflow Example with .scrapes Directory

```bash
# Step 1: Create project structure
mkdir -p .scrapes/my-project/{html,md,extractors}

# Step 2: Download website using webscraper
m1f-scrape https://example.com -o .scrapes/my-project/html

# Step 3: Analyze HTML structure (optional)
m1f-html2md analyze .scrapes/my-project/html/*.html --suggest-selectors

# Step 4: Create custom extractor (optional)
# Use Claude to analyze and create site-specific extractor:
claude -p "Analyze these HTML files and create a custom extractor for html2md" \
  --files .scrapes/my-project/html/*.html

# Step 5: Convert with custom extractor
m1f-html2md convert .scrapes/my-project/html -o .scrapes/my-project/md \
  --extractor .scrapes/my-project/extractors/custom_extractor.py
```

## Command Line Interface

The html2md tool uses subcommands for different operations:

### Convert Command

Convert local HTML files to Markdown:

```bash
m1f-html2md convert <source> -o <output> [options]
```

| Option               | Description                                                   |
| -------------------- | ------------------------------------------------------------- |
| `source`             | Source file or directory                                      |
| `-o, --output`       | Output file or directory (required)                           |
| `-c, --config`       | Configuration file path (YAML format)                         |
| `--format`           | Output format: markdown, m1f_bundle, json (default: markdown) |
| `--extractor`        | Path to custom extractor Python file                          |
| `--content-selector` | CSS selector for main content                                 |
| `--ignore-selectors` | CSS selectors to ignore (space-separated)                     |
| `--heading-offset`   | Offset heading levels (default: 0)                            |
| `--no-frontmatter`   | Don't add YAML frontmatter                                    |
| `--parallel`         | Enable parallel processing                                    |
| `--log-file`         | Log to file                                                   |
| `-v, --verbose`      | Enable verbose output                                         |
| `-q, --quiet`        | Suppress all output except errors                             |
| `--version`          | Show version information and exit                             |

### Analyze Command

Analyze HTML structure for optimal content extraction:

```bash
m1f-html2md analyze <files> [options]
```

| Option                | Description                                                          |
| --------------------- | -------------------------------------------------------------------- |
| `files`               | HTML files to analyze (2-3 files recommended)                        |
| `--show-structure`    | Show detailed HTML structure                                         |
| `--common-patterns`   | Find common patterns across files                                    |
| `--suggest-selectors` | Suggest CSS selectors for content extraction (default if no options) |
| `-v, --verbose`       | Enable verbose output                                                |
| `-q, --quiet`         | Suppress all output except errors                                    |
| `--log-file`          | Log to file                                                          |

### Config Command

Generate a configuration file template:

```bash
m1f-html2md config [options]
```

| Option         | Description                                            |
| -------------- | ------------------------------------------------------ |
| `-o, --output` | Output configuration file (default: config.yaml)       |
| `--format`     | Configuration format: yaml, toml, json (default: yaml) |

## Usage Examples

### Basic Conversion

```bash
# Simple conversion of all HTML files in a directory
m1f-html2md convert ./website -o ./docs

# Convert files with verbose logging
m1f-html2md convert ./website -o ./docs --verbose

# Convert to m1f bundle format
m1f-html2md convert ./website -o ./docs.m1f --format m1f_bundle

# Convert to JSON format for processing
m1f-html2md convert ./website -o ./data.json --format json
```

### Content Selection

```bash
# Extract only the main content and ignore navigation elements
m1f-html2md convert ./website -o ./docs \
  --content-selector "main" --ignore-selectors nav .sidebar footer

# Extract article content from specific selectors
m1f-html2md convert ./website -o ./docs \
  --content-selector "article.content" \
  --ignore-selectors .author-bio .share-buttons .related-articles
```

### HTML Analysis

```bash
# Analyze HTML files to find optimal selectors
m1f-html2md analyze ./html/*.html

# Show detailed structure of HTML files
m1f-html2md analyze ./html/*.html --show-structure

# Find common patterns across multiple files
m1f-html2md analyze ./html/*.html --common-patterns

# Get all analysis options
m1f-html2md analyze ./html/*.html \
  --show-structure --common-patterns --suggest-selectors
```

### File Filtering

```bash
# Process only specific file types
m1f-html2md convert ./website -o ./docs \
  -c config.yaml  # Use a configuration file for file filtering
```

### Formatting Options

```bash
# Adjust heading levels (e.g., h1 → h2, h2 → h3)
m1f-html2md convert ./website -o ./docs \
  --heading-offset 1

# Skip frontmatter generation
m1f-html2md convert ./website -o ./docs \
  --no-frontmatter

# Use configuration file for advanced formatting options
m1f-html2md convert ./website -o ./docs -c config.yaml

# Log conversion process to file
m1f-html2md convert ./website -o ./docs \
  --log-file conversion.log
```

### Performance Optimization

```bash
# Use parallel processing for faster conversion of large sites
m1f-html2md convert ./website -o ./docs \
  --parallel
```

## Custom Extractors

The custom extractor system allows you to create site-specific content
extraction logic for optimal results. Extractors can be simple functions or full
classes.

### Creating a Custom Extractor

#### Function-based Extractor

```python
# extractors/simple_extractor.py
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    """Extract main content from HTML."""
    # Remove navigation elements
    for nav in soup.find_all(['nav', 'header', 'footer']):
        nav.decompose()

    # Find main content
    main = soup.find('main') or soup.find('article')
    if main:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    """Clean up the converted markdown."""
    # Remove duplicate newlines
    import re
    return re.sub(r'\n{3,}', '\n\n', markdown)
```

#### Class-based Extractor

```python
# extractors/advanced_extractor.py
from tools.html2md.extractors import BaseExtractor
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

class Extractor(BaseExtractor):
    """Custom extractor for specific website."""

    def extract(self, soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
        """Extract content with site-specific logic."""
        # Custom extraction logic
        return soup

    def preprocess(self, html: str, config: Optional[Dict[str, Any]] = None) -> str:
        """Preprocess raw HTML before parsing."""
        # Fix common HTML issues
        return html.replace('&nbsp;', ' ')

    def postprocess(self, markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
        """Post-process converted markdown."""
        # Clean up site-specific artifacts
        return markdown
```

### Using Custom Extractors

```bash
# Use with CLI
m1f-html2md convert ./html -o ./markdown \
  --extractor ./extractors/my_extractor.py

# Use with API
from tools.html2md.api import Html2mdConverter
from pathlib import Path

converter = Html2mdConverter(
    config,
    extractor=Path("./extractors/my_extractor.py")
)
```

### .scrapes Directory Structure

The recommended workflow uses a `.scrapes` directory (gitignored) for organizing
scraping projects:

```
.scrapes/
└── project-name/
    ├── html/         # Raw HTML files from scraping
    ├── md/           # Converted Markdown files
    └── extractors/   # Custom extraction scripts
        └── custom_extractor.py
```

This structure keeps scraped content organized and separate from your main
codebase.

## Advanced Features

### YAML Frontmatter

By default, the converter adds YAML frontmatter to each Markdown file,
including:

- Title extracted from HTML title tag or first h1 element
- Source filename
- Conversion date
- Original file modification date

To disable frontmatter generation, use the `--no-frontmatter` option:

```bash
m1f-html2md convert ./website -o ./docs --no-frontmatter
```

The generated frontmatter looks like:

```yaml
---
title: Extracted from HTML
source_file: original.html
date_converted: 2023-06-15T14:30:21
date_modified: 2023-06-12T10:15:33
---
```

### Heading Level Adjustment

The `--heading-offset` option allows you to adjust the hierarchical structure of
the document by incrementing or decrementing heading levels. This is useful
when:

- Integrating content into an existing document with its own heading hierarchy
- Making h1 headings become h2 headings for better document structure
- Ensuring proper nesting of headings for better semantics

Positive values increase heading levels (e.g., h1 → h2), while negative values
decrease them (e.g., h2 → h1).

### Code Block Language Detection

The converter can automatically detect language hints from HTML code blocks that
use language classes, such as:

```html
<pre><code class="language-python">def example():
    return "Hello, world!"
</code></pre>
```

This will be converted to a properly formatted Markdown code block with language
hint:

````markdown
```python
def example():
    return "Hello, world!"
```
````

### Character Encoding Handling

The converter provides robust character encoding detection and conversion:

1. Automatically detects the encoding of source HTML files
2. Properly handles UTF-8, UTF-16, and other encodings
3. All output files are written in UTF-8 encoding
4. Handles BOM (Byte Order Mark) detection for Unicode files

## Architecture

HTML2MD v3.1.0 features a modern, modular architecture:

```
tools/html2md/
├── __init__.py       # Package initialization
├── __main__.py       # Entry point for module execution
├── api.py            # Programmatic API for other tools
├── cli.py            # Command-line interface
├── config/           # Configuration management
│   ├── __init__.py
│   ├── loader.py     # Config file loader
│   └── models.py     # Config data models
├── core.py           # Core conversion logic
├── extractors.py     # Custom extractor system
├── preprocessors.py  # HTML preprocessing
├── analyze_html.py   # HTML structure analysis
└── utils.py          # Utility functions

.scrapes/             # Project scrapes directory (gitignored)
└── project-name/
    ├── html/         # Raw HTML files
    ├── md/           # Converted Markdown
    └── extractors/   # Custom extractors
```

### Key Components

- **API Mode**: Use as a library in other Python projects
- **Custom Extractors**: Pluggable extractor system for site-specific logic
- **Type Safety**: Full type hints and dataclass models
- **Clean Architecture**: Separation of concerns with dependency injection
- **Async Support**: Modern async/await for high performance
- **Workflow Integration**: Organized .scrapes directory structure

## Integration with m1f

The html2md tool works well with the m1f (Make One File) tool for comprehensive
documentation handling:

1. First convert HTML files to Markdown:

   ```bash
   m1f-html2md convert ./html-docs -o ./markdown-docs
   ```

2. Then use m1f to combine the Markdown files:
   ```bash
   m1f -s ./markdown-docs -o ./combined-docs.m1f.txt \
     --separator-style Markdown
   ```

This workflow is ideal for:

- Converting documentation from HTML to Markdown format
- Consolidating documentation from multiple sources
- Preparing content for LLM context windows
- Creating searchable knowledge bases

## Performance Considerations

- For large websites with many HTML files, use the `--parallel` option
- Conversion speed depends on file size, complexity, and number of files
- Memory usage scales with file sizes when parallel processing is enabled
- The tool uses async I/O for efficient file operations

## Programmatic API

Use html2md in your Python projects:

```python
from tools.html2md.api import Html2mdConverter
from tools.html2md.config import Config
from tools.html2md.extractors import BaseExtractor
from pathlib import Path

# Create converter with configuration
config = Config(
    source=Path("./html"),
    destination=Path("./markdown")
)
converter = Html2mdConverter(config)

# Convert with custom extractor
converter = Html2mdConverter(
    config,
    extractor=Path("./extractors/custom_extractor.py")
)

# Or with inline extractor
class MyExtractor(BaseExtractor):
    def extract(self, soup, config=None):
        # Custom logic
        return soup

converter = Html2mdConverter(config, extractor=MyExtractor())

# Convert a single file
output_path = converter.convert_file(Path("page.html"))
print(f"Converted to: {output_path}")

# Convert entire directory
results = converter.convert_directory()
print(f"Converted {len(results)} files")
```

## Requirements and Dependencies

- Python 3.10 or newer
- Required packages:
  - beautifulsoup4: For HTML parsing
  - markdownify: For HTML to Markdown conversion
  - aiofiles: For async file operations
  - rich: For console output
  - pydantic: For configuration models
- Optional packages:
  - chardet: For encoding detection
  - pyyaml: For YAML configuration files
  - toml: For TOML configuration files

Install dependencies:

```bash
pip install beautifulsoup4 markdownify chardet pyyaml aiofiles rich pydantic
```

**Note**: For web scraping functionality, use the separate `webscraper` tool
which provides multiple backend options including HTTrack.

========================================================================================
== FILE: docs/03_html2md/31_html2md_guide.md
== DATE: 2025-06-12 12:50:58 | SIZE: 11.04 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 144cec015574f985b1360431cc63bf3dfa979ad788a5db8589955b2343f6cfb8
========================================================================================
# HTML to Markdown Converter Guide

The `html2md` tool (v3.1.0) is a modern, async converter designed to transform
HTML content into clean Markdown format. Built with Python 3.10+ and modern
async architecture, it focuses on intelligent content extraction and conversion.

**Note:** Web scraping functionality has been moved to the separate `webscraper`
tool. Use `webscraper` to download websites, then `html2md` to convert the
downloaded HTML files.

## Table of Contents

- [Installation](#installation)
- [Quick Start](#quick-start)
- [Command Line Usage](#command-line-usage)
- [Configuration](#configuration)
- [Python API](#python-api)
- [Custom Extractors](#custom-extractors)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Troubleshooting](#troubleshooting)

## Installation

### Python Dependencies

```bash
pip install beautifulsoup4 markdownify pydantic rich httpx chardet pyyaml aiofiles

# Optional dependencies
pip install toml      # For TOML configuration files
```

### Installation

```bash
pip install beautifulsoup4 markdownify pydantic rich chardet pyyaml aiofiles

# Optional dependencies
pip install toml      # For TOML configuration files
```

## Quick Start

### Convert a Single File

```bash
m1f-html2md convert index.html -o index.md
```

### Convert a Directory

```bash
m1f-html2md convert ./html_docs/ -o ./markdown_docs/
```

### Analyze HTML Structure

```bash
m1f-html2md analyze ./html/*.html --suggest-selectors
```

### Generate Configuration

```bash
m1f-html2md config -o config.yaml
```

## Command Line Usage

The tool provides three main commands:

### `convert` - Convert Files or Directories

```bash
m1f-html2md convert [source] -o [output] [options]

Options:
  -c, --config FILE         Configuration file (YAML format)
  --format FORMAT          Output format (markdown, m1f_bundle, json)
  --content-selector SEL    CSS selector for main content
  --ignore-selectors SEL    CSS selectors to ignore (space-separated)
  --heading-offset N        Offset heading levels by N
  --no-frontmatter         Don't add YAML frontmatter
  --parallel               Enable parallel processing
  --extractor FILE         Path to custom extractor Python file
  --log-file FILE          Log to file
  -v, --verbose            Enable verbose output
  -q, --quiet              Suppress all output except errors
```

### `analyze` - Analyze HTML Structure

```bash
m1f-html2md analyze [files] [options]

Options:
  --show-structure         Show detailed HTML structure
  --common-patterns        Find common patterns across files
  --suggest-selectors      Suggest CSS selectors (default)
  -v, --verbose            Enable verbose output
```

### `config` - Generate Configuration File

```bash
m1f-html2md config [options]

Options:
  -o, --output FILE        Output file (default: config.yaml)
  --format FORMAT          Config format (yaml, toml, json)
```

## Configuration

### Configuration File Structure

Create a `config.yaml` file:

```yaml
# Basic settings (v3.1.0 format)
source: ./html_docs
destination: ./markdown_docs
output_format: markdown

# Content extraction
extractor:
  content_selector: "article.content, main, .documentation"
  ignore_selectors:
    - nav
    - header
    - footer
    - .sidebar
    - .ads
    - "#comments"
  remove_elements:
    - script
    - style
    - iframe
  extract_metadata: true
  extract_opengraph: true

# Markdown processing
processor:
  heading_offset: 0
  add_frontmatter: true
  heading_style: atx
  link_handling: convert
  link_extensions:
    .html: .md
    .htm: .md
  normalize_whitespace: true
  fix_encoding: true

# Parallel processing
parallel: true

# Logging
verbose: false
quiet: false
log_file: ./conversion.log
```

### Configuration Options Explained

#### Extractor Configuration

- `content_selector`: CSS selector(s) to find main content
- `ignore_selectors`: Elements to remove before conversion
- `remove_elements`: HTML tags to completely remove
- `preserve_attributes`: HTML attributes to keep
- `extract_metadata`: Extract meta tags and title
- `extract_opengraph`: Extract OpenGraph metadata

#### Processor Configuration

- `heading_offset`: Adjust heading levels (e.g., h1→h2)
- `link_handling`: How to process links (convert/preserve/absolute/relative)
- `normalize_whitespace`: Clean up extra whitespace
- `fix_encoding`: Fix common encoding issues

#### Processing Configuration

- `parallel`: Enable parallel processing for multiple files
- `verbose`: Enable verbose logging
- `quiet`: Suppress all output except errors
- `log_file`: Path to log file

## Python API

### Basic Usage

```python
from tools.html2md.api import HTML2MDConverter
import asyncio

# Create converter with configuration
converter = HTML2MDConverter(
    outermost_selector="main",
    ignore_selectors=["nav", "footer"],
    add_frontmatter=True
)

# Convert a directory (async)
results = asyncio.run(converter.convert_directory("./html", "./markdown"))

# Convert a single file (async)
result = asyncio.run(converter.convert_file("index.html"))

# Convert with custom extractor
from pathlib import Path

converter = HTML2MDConverter(
    outermost_selector="main",
    extractor=Path("./extractors/custom_extractor.py")
)

result = asyncio.run(converter.convert_file("index.html"))
```

### Advanced Configuration

```python
from tools.html2md.config.models import HTML2MDConfig

# Create configuration with v3.1.0 models
config = HTML2MDConfig(
    source_dir="./html",
    destination_dir="./output",
    outermost_selector="div.documentation",
    ignore_selectors=[".nav-menu", ".footer"],
    strip_attributes=True,
    heading_offset=1,
    add_frontmatter=True,
    parallel=True,
    max_workers=4
)

converter = HTML2MDConverter.from_config(config)
```

### Convenience Functions

```python
from tools.html2md.api import convert_file, convert_directory
import asyncio

# Simple file conversion (async)
result = asyncio.run(convert_file("page.html", destination="page.md"))

# Directory conversion with options (async)
results = asyncio.run(convert_directory(
    source="./html",
    destination="./markdown",
    outermost_selector="article",
    parallel=True
))
```

## Custom Extractors

The custom extractor system allows you to create site-specific content
extraction logic:

### Function-based Extractor

```python
# extractors/my_extractor.py
from bs4 import BeautifulSoup

def extract(soup: BeautifulSoup, config=None):
    """Extract main content."""
    # Custom extraction logic
    main = soup.find('main')
    if main:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup
    return soup

def postprocess(markdown: str, config=None):
    """Clean up converted markdown."""
    import re
    return re.sub(r'\n{3,}', '\n\n', markdown)
```

### Using Custom Extractors

```bash
m1f-html2md convert ./html -o ./markdown \
  --extractor ./extractors/my_extractor.py
```

## Advanced Features

### Content Extraction with CSS Selectors

Target specific content areas:

```yaml
extractor:
  content_selector: |
    article.post-content,
    div.documentation-body,
    main[role="main"],
    #content:not(.sidebar)
```

### Link Handling Strategies

1. **Convert**: Change `.html` to `.md`

   ```yaml
   processor:
     link_handling: convert
     link_extensions:
       .html: .md
       .php: .md
   ```

2. **Preserve**: Keep original links

   ```yaml
   processor:
     link_handling: preserve
   ```

3. **Absolute**: Make all links absolute
   ```yaml
   processor:
     link_handling: absolute
   ```

### Metadata Extraction

The tool can extract and preserve:

- Page title
- Meta description
- OpenGraph data
- Schema.org structured data
- Custom meta tags

### m1f Bundle Creation

Generate m1f bundles directly:

```yaml
output_format: m1f_bundle
m1f:
  create_bundle: true
  bundle_name: my-documentation
  include_assets: true
  generate_index: true
  metadata:
    project: My Project Docs
    version: 1.0.0
```

## Examples

### Example 1: Convert Documentation Site

```bash
# Create configuration
cat > docs-config.yaml << EOF
source: ./python-docs-html
destination: ./python-docs-md
extractor:
  content_selector: "div.document"
  ignore_selectors:
    - ".sphinxsidebar"
    - ".related"
processor:
  heading_offset: 1
  add_frontmatter: true
parallel: true
EOF

# Run conversion
m1f-html2md convert ./python-docs-html -o ./python-docs-md -c docs-config.yaml
```

### Example 2: Convert Blog with Specific Content

```python
from tools.html2md.api import HTML2MDConverter
import asyncio

converter = HTML2MDConverter(
    outermost_selector="article.post",
    ignore_selectors=[
        ".post-navigation",
        ".comments-section",
        ".social-share"
    ],
    add_frontmatter=True,
    heading_offset=0
)

# Convert all blog posts (async)
results = asyncio.run(converter.convert_directory(
    "./blog-html",
    "./blog-markdown"
))
```

### Example 3: Create m1f Bundle from HTML

```bash
# First download the website using webscraper
m1f-scrape https://docs.example.com -o ./html

# Then convert to m1f bundle
m1f-html2md convert ./html \
  -o ./output.m1f \
  --format m1f_bundle \
  --content-selector "main.content" \
  --ignore-selectors nav footer
```

## Troubleshooting

### Common Issues

1. **Content selector not matching**

   ```
   WARNING: Content selector 'article' not found
   ```

   Solution: Use the analyze command to find the right selectors:

   ```bash
   m1f-html2md analyze ./html/*.html --suggest-selectors
   ```

2. **Encoding issues**

   ```
   UnicodeDecodeError: 'utf-8' codec can't decode
   ```

   Solution: The tool auto-detects encoding, but HTML files may have mixed
   encodings. All output is converted to UTF-8.

3. **Large directories timing out**

   Solution: Use parallel processing:

   ```bash
   m1f-html2md convert ./html -o ./md --parallel
   ```

4. **Missing content after conversion**

   Solution: Check your ignore selectors - they may be too broad:

   ```bash
   m1f-html2md convert ./html -o ./md \
     --content-selector "body" \
     --ignore-selectors .ads .cookie-notice
   ```

### Debug Mode

Enable verbose logging for debugging:

```bash
m1f-html2md convert ./html -o ./md -v --log-file debug.log
```

Or in configuration:

```yaml
verbose: true
log_file: ./conversion-debug.log
```

### Performance Tips

1. **Use parallel processing** for large directories:

   ```yaml
   parallel: true
   ```

2. **Target specific content** to reduce processing:

   ```yaml
   extractor:
     content_selector: "article.documentation"
   ```

3. **Use custom extractors** for complex sites to optimize extraction

## Integration with m1f

The converted Markdown files are optimized for m1f bundling:

1. Clean, consistent formatting
2. Preserved metadata in frontmatter
3. Proper link structure
4. UTF-8 encoding

To create an m1f bundle after conversion:

```bash
# Download website first
m1f-scrape https://docs.example.com -o ./html/

# Convert to Markdown
m1f-html2md convert ./html/ -o ./docs/

# Create m1f bundle
m1f -s ./docs/ -o documentation.m1f.txt
```

Or convert directly to m1f bundle format:

```bash
m1f-html2md convert ./html/ \
  -o ./docs.m1f \
  --format m1f_bundle
```

========================================================================================
== FILE: docs/03_html2md/32_html2md_workflow_guide.md
== DATE: 2025-06-12 12:50:58 | SIZE: 9.90 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: c729689bcecab305d2c3256be8bdfb1820b2022dc74c3c869a4c3f674d8d36ed
========================================================================================
# HTML2MD Workflow Guide

This guide explains the recommended workflow for converting websites to Markdown
using html2md with custom extractors.

## Overview

The html2md tool now supports a flexible workflow that separates concerns:

1. HTML acquisition (scraping or external)
2. Content analysis and extractor development
3. Conversion with site-specific extraction

## Directory Structure

All scraping projects use the `.scrapes` directory (gitignored):

```
.scrapes/
└── project-name/
    ├── html/         # Raw HTML files
    ├── md/           # Converted Markdown files
    └── extractors/   # Custom extraction scripts
```

## Complete Workflow

### Step 1: Set Up Project Structure

```bash
# Create project directories
mkdir -p .scrapes/my-docs/{html,md,extractors}
```

### Step 2: Acquire HTML Content

You have several options:

#### Option A: Use webscraper tool

```bash
m1f-scrape https://example.com \
  -o .scrapes/my-docs/html \
  --max-pages 50 \
  --scraper playwright
```

#### Option B: Manual download

- Save HTML files directly to `.scrapes/my-docs/html/`
- Use browser "Save As" or wget/curl
- Any method that gets HTML files

#### Option C: External scraping

- Use any scraping tool you prefer
- Just ensure HTML files end up in the html/ directory

### Step 3: Analyze HTML Structure (Optional)

Understand the HTML structure before creating extractors:

```bash
# Analyze a few sample files
m1f-html2md analyze \
  .scrapes/my-docs/html/*.html \
  --suggest-selectors

# Get detailed structure analysis
m1f-html2md analyze \
  .scrapes/my-docs/html/*.html \
  --show-structure \
  --common-patterns
```

### Step 4: Create Custom Extractor (Optional)

#### Manual Creation

Create `.scrapes/my-docs/extractors/custom_extractor.py`:

```python
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    """Extract main content from HTML."""
    # Remove site-specific navigation
    for selector in ['nav', '.sidebar', '#header', '#footer']:
        for elem in soup.select(selector):
            elem.decompose()

    # Find main content area
    main = soup.find('main') or soup.find('article') or soup.find('.content')
    if main:
        # Create clean soup with just main content
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    """Clean up converted markdown."""
    lines = markdown.split('\n')
    cleaned = []

    for line in lines:
        # Remove "Copy" buttons before code blocks
        if line.strip() == 'Copy':
            continue
        cleaned.append(line)

    return '\n'.join(cleaned)
```

#### Claude-Assisted Creation

Use Claude to analyze HTML and create a custom extractor:

```bash
# Have Claude analyze the HTML structure
claude -p "Analyze these HTML files and create a custom extractor for html2md. \
The extractor should:
1. Remove all navigation, headers, footers, and sidebars
2. Extract only the main content
3. Clean up any site-specific artifacts in the markdown
4. Handle the specific structure of this website

Write the extractor to .scrapes/my-docs/extractors/custom_extractor.py" \
--files .scrapes/my-docs/html/*.html
```

### Step 5: Convert HTML to Markdown

#### With Custom Extractor

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md \
  --extractor extractors/custom_extractor.py
```

#### With Default Extractor

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md
```

#### With CSS Selectors Only

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md \
  --content-selector "main.content" \
  --ignore-selectors "nav" ".sidebar" ".ads"
```

### Step 6: Review and Refine

1. Check the converted Markdown files
2. If quality needs improvement:
   - Update the custom extractor
   - Re-run the conversion
   - Iterate until satisfied

## Example: Documentation Site

Here's a complete example for converting a documentation site:

```bash
# 1. Setup
mkdir -p .scrapes/docs-site/{html,md,extractors}

# 2. Download documentation
m1f-scrape https://docs.example.com \
  -o .scrapes/docs-site/html \
  --max-pages 100 \
  --scraper playwright

# 3. Analyze structure
m1f-html2md analyze \
  .scrapes/docs-site/html/*.html \
  --suggest-selectors

# 4. Create extractor for docs site
cat > .scrapes/docs-site/extractors/docs_extractor.py << 'EOF'
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Remove docs-specific elements
    for selector in [
        '.docs-nav', '.docs-sidebar', '.docs-header',
        '.docs-footer', '.edit-page', '.feedback',
        '[class*="navigation"]', '[id*="toc"]'
    ]:
        for elem in soup.select(selector):
            elem.decompose()

    # Extract article content
    article = soup.find('article') or soup.find('.docs-content')
    if article:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(article)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    # Clean up docs-specific patterns
    import re

    # Remove "Copy" buttons
    markdown = re.sub(r'^Copy\s*\n', '', markdown, flags=re.MULTILINE)

    # Remove "On this page" sections
    markdown = re.sub(r'^On this page.*?(?=^#|\Z)', '', markdown,
                      flags=re.MULTILINE | re.DOTALL)

    return markdown.strip()
EOF

# 5. Convert with custom extractor
cd .scrapes/docs-site
m1f-html2md convert html -o md \
  --extractor extractors/docs_extractor.py

# 6. Create m1f bundle (optional)
m1f -s md -o docs-bundle.txt
```

## Best Practices

### 1. Start Small

- Test with a few HTML files first
- Refine the extractor before processing everything

### 2. Iterative Development

- Create basic extractor
- Convert a sample
- Identify issues
- Update extractor
- Repeat until satisfied

### 3. Extractor Tips

- Use specific CSS selectors for the site
- Remove navigation early in extraction
- Handle site-specific patterns in postprocess
- Test with different page types

### 4. Organization

- Keep each project in its own directory
- Document site-specific quirks
- Save working extractors for reuse

### 5. Performance

- Use `--parallel` for large conversions
- Process in batches if needed
- Monitor memory usage

## Troubleshooting

### Common Issues

**Issue**: Navigation elements still appear in Markdown

- **Solution**: Add more specific selectors to the extractor
- Check for dynamic class names or IDs

**Issue**: Missing content

- **Solution**: Verify content selector is correct
- Check if content is loaded dynamically (use playwright scraper)

**Issue**: Broken formatting

- **Solution**: Adjust extraction logic
- Use postprocess to fix patterns

**Issue**: Encoding errors

- **Solution**: Ensure HTML files are UTF-8
- Use `--target-encoding utf-8` if needed

### Debug Tips

1. **Test extractor standalone**:

```python
from bs4 import BeautifulSoup
from pathlib import Path

# Load your extractor
import sys
sys.path.append('.scrapes/my-docs/extractors')
import custom_extractor

# Test on single file
html = Path('.scrapes/my-docs/html/sample.html').read_text()
soup = BeautifulSoup(html, 'html.parser')
result = custom_extractor.extract(soup)
print(result.prettify())
```

2. **Use verbose mode**:

```bash
m1f-html2md convert html -o md \
  --extractor extractors/custom_extractor.py \
  --verbose
```

3. **Process single file**:

```bash
m1f-html2md convert html/single-file.html \
  -o test.md \
  --extractor extractors/custom_extractor.py
```

## Advanced Techniques

### Multi-Stage Extraction

For complex sites, use multiple extraction stages:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Stage 1: Remove obvious non-content
    remove_selectors = ['script', 'style', 'nav', 'header', 'footer']
    for selector in remove_selectors:
        for elem in soup.select(selector):
            elem.decompose()

    # Stage 2: Find content container
    container = soup.select_one('.main-container') or soup.body

    # Stage 3: Clean within container
    for elem in container.select('.ads, .social-share, .related'):
        elem.decompose()

    # Stage 4: Extract final content
    content = container.select_one('article') or container

    new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
    new_soup.body.append(content)
    return new_soup
```

### Conditional Extraction

Handle different page types:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Detect page type
    if soup.find('article', class_='blog-post'):
        return extract_blog_post(soup)
    elif soup.find('div', class_='documentation'):
        return extract_documentation(soup)
    elif soup.find('div', class_='api-reference'):
        return extract_api_reference(soup)
    else:
        return extract_generic(soup)
```

### Metadata Preservation

Keep important metadata:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Preserve title
    title = soup.find('title')

    # Extract content
    content = soup.find('main')

    # Create new soup with metadata
    new_soup = BeautifulSoup('<html><head></head><body></body></html>', 'html.parser')
    if title:
        new_soup.head.append(title)
    if content:
        new_soup.body.append(content)

    return new_soup
```

## Conclusion

The html2md workflow provides maximum flexibility:

- Separate HTML acquisition from conversion
- Site-specific extractors for optimal results
- Iterative refinement process
- Integration with other tools (webscraper, m1f)

This approach ensures you can handle any website structure and produce clean,
readable Markdown output.

========================================================================================
== FILE: docs/03_html2md/33_html2md_test_suite.md
== DATE: 2025-06-10 14:50:13 | SIZE: 8.67 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 67676a577e975b7335d9f64127572d5cac1996919e3907ec044d0f708a175b4e
========================================================================================
# HTML2MD Test Suite Documentation

A comprehensive test suite for validating the html2md converter (v2.0.0) with
challenging real-world HTML structures.

## Overview

The HTML2MD test suite provides a robust testing framework consisting of:

- A Flask-based web server serving complex HTML test pages
- Comprehensive pytest test cases covering all conversion features including
  async operations
- Real-world documentation examples with challenging HTML structures
- Automated test runner with coverage reporting
- Full support for testing async/await patterns and parallel processing

## Architecture

```
tests/
├── html2md_server/
│   ├── server.py              # Flask test server
│   ├── requirements.txt       # Test suite dependencies
│   ├── run_tests.sh          # Automated test runner
│   ├── README.md             # Test suite documentation
│   ├── static/
│   │   ├── css/
│   │   │   └── modern.css    # Modern CSS with dark mode
│   │   └── js/
│   │       └── main.js       # Interactive features
│   └── test_pages/
│       ├── index.html        # Test suite homepage
│       ├── m1f-documentation.html
│       ├── html2md-documentation.html
│       ├── complex-layout.html
│       ├── code-examples.html
│       └── ...               # Additional test pages
└── test_html2md_server.py    # Pytest test cases
```

## Test Server

### Features

- Modern Flask-based web server
- RESTful API endpoints for test page discovery
- CORS enabled for cross-origin testing
- Dynamic page generation support
- Static asset serving with proper MIME types

### Running the Server

```bash
# Start server on default port 8080
python tests/html2md_server/server.py

# Server provides:
# - http://localhost:8080/            # Test suite homepage
# - http://localhost:8080/page/{name} # Individual test pages
# - http://localhost:8080/api/test-pages # JSON API
```

## Test Pages

### 1. M1F Documentation (`m1f-documentation.html`)

Tests real documentation conversion with:

- Complex heading hierarchies
- Code examples in multiple languages
- Nested structures and feature grids
- Command-line documentation tables
- Advanced layout with inline styles

### 2. HTML2MD Documentation (`html2md-documentation.html`)

Comprehensive documentation page testing:

- Multi-level navigation structures
- API documentation with code examples
- Complex tables and option grids
- Details/Summary elements
- Sidebar navigation

### 3. Complex Layout Test (`complex-layout.html`)

CSS layout challenges:

- **Flexbox layouts**: Multi-item flex containers
- **CSS Grid**: Complex grid with spanning items
- **Nested structures**: Up to 4 levels deep
- **Positioning**: Absolute, relative, sticky elements
- **Multi-column layouts**: CSS columns with rules
- **Masonry layouts**: Pinterest-style card layouts
- **Overflow containers**: Scrollable areas

### 4. Code Examples Test (`code-examples.html`)

Programming language support:

- **Languages tested**: Python, TypeScript, JavaScript, Bash, SQL, Go, Rust
- **Inline code**: Mixed with regular text
- **Code with special characters**: HTML entities, Unicode
- **Configuration files**: YAML, JSON examples
- **Edge cases**: Empty blocks, long lines, whitespace-only

### 5. Additional Test Pages (Planned)

- **Edge Cases**: Malformed HTML, special characters
- **Modern Features**: HTML5 elements, web components
- **Tables and Lists**: Complex nested structures
- **Multimedia**: Images, videos, iframes

## Test Suite Features

### Content Selection Testing

```python
# Test CSS selector-based extraction (v2.0.0 async API)
from tools.html2md.api import HTML2MDConverter
import asyncio

converter = HTML2MDConverter(
    outermost_selector="article",
    ignore_selectors=["nav", ".sidebar", "footer"]
)

# Async conversion
result = asyncio.run(converter.convert_file("test.html"))
```

### Code Block Detection

- Automatic language detection from class names
- Preservation of syntax highlighting hints
- Special character handling in code

### Layout Preservation

- Nested structure maintenance
- List hierarchy preservation
- Table structure conversion
- Heading level consistency

### Edge Case Handling

- Empty HTML documents
- Malformed HTML structures
- Very long lines
- Unicode and special characters
- Missing closing tags

## Running Tests

### Quick Start

```bash
# Run all tests with the automated script
./tests/html2md_server/run_tests.sh

# This will:
# 1. Install dependencies
# 2. Start the test server
# 3. Run all pytest tests
# 4. Generate coverage report
# 5. Clean up processes
```

### Manual Testing

```bash
# Install dependencies
pip install -r tests/html2md_server/requirements.txt

# Start server in one terminal
python tests/html2md_server/server.py

# Run tests in another terminal
pytest tests/test_html2md_server.py -v

# Run with coverage
pytest tests/test_html2md_server.py --cov=tools.html2md_tool --cov-report=html
```

### Test Options

```bash
# Run specific test
pytest tests/test_html2md_server.py::TestHTML2MDConversion::test_code_examples -v

# Run with detailed output
pytest tests/test_html2md_server.py -vv -s

# Run only fast tests
pytest tests/test_html2md_server.py -m "not slow"
```

## Test Coverage

### Core Features Tested

- ✅ Basic HTML to Markdown conversion
- ✅ Async I/O operations with aiofiles
- ✅ CSS selector content extraction
- ✅ Element filtering with ignore selectors
- ✅ Complex nested HTML structures
- ✅ Code block language detection
- ✅ Table conversion (simple and complex)
- ✅ List conversion (ordered, unordered, nested)
- ✅ Special characters and HTML entities
- ✅ Unicode support
- ✅ YAML frontmatter generation
- ✅ Heading level offset adjustment
- ✅ Parallel processing with asyncio
- ✅ Configuration file loading (YAML/TOML)
- ✅ CLI argument parsing
- ✅ API mode for programmatic access
- ✅ HTTrack integration (when available)
- ✅ URL conversion from lists

### Performance Testing

- Parallel conversion of multiple files
- Large file handling
- Memory usage monitoring
- Conversion speed benchmarks

## Writing New Tests

### Adding Test Pages

1. Create HTML file in `tests/html2md_server/test_pages/`
2. Register in `server.py`:
   ```python
   TEST_PAGES = {
       'your-test': {
           'title': 'Your Test Title',
           'description': 'What this tests'
       }
   }
   ```
3. Add corresponding test case

### Test Case Structure

```python
class TestYourFeature:
    async def test_your_feature(self, test_server, temp_output_dir):
        """Test description."""
        from tools.html2md.api import HTML2MDConverter

        converter = HTML2MDConverter(
            outermost_selector="main",
            ignore_selectors=["nav", "footer"],
            add_frontmatter=True
        )

        # Perform async conversion
        results = await converter.convert_directory(
            f"{test_server.base_url}/page",
            temp_output_dir
        )

        # Assert expected results
        assert len(results) > 0
```

## Continuous Integration

### GitHub Actions Integration

```yaml
# .github/workflows/test.yml
- name: Run HTML2MD Tests
  run: |
    cd tests/html2md_server
    ./run_tests.sh
```

### Local Development

```bash
# Watch mode for development
pytest-watch tests/test_html2md_server.py

# Run with debugging
pytest tests/test_html2md_server.py --pdb
```

## Troubleshooting

### Common Issues

**Server won't start**

- Check if port 8080 is already in use
- Ensure Flask dependencies are installed
- Check Python version (3.9+ required)

**Tests fail with connection errors**

- Ensure server is running
- Check firewall settings
- Verify localhost resolution

**Coverage report issues**

- Install pytest-cov: `pip install pytest-cov`
- Ensure tools.html2md module is in Python path
- For async tests, use pytest-asyncio: `pip install pytest-asyncio`

## Future Enhancements

1. **Additional Test Pages**

   - SVG content handling
   - MathML equations
   - Microdata and structured data
   - Progressive web app features
   - WebAssembly integration tests
   - Shadow DOM content extraction

2. **Test Automation**

   - Visual regression testing
   - Performance benchmarking
   - Memory leak detection
   - Cross-platform testing

3. **Enhanced Reporting**
   - HTML test reports with screenshots
   - Conversion diff visualization
   - Performance metrics dashboard

## Contributing

To contribute to the test suite:

1. Identify untested scenarios
2. Create representative HTML test pages
3. Write comprehensive test cases
4. Document the test purpose
5. Submit PR with test results

The test suite aims to cover all real-world HTML conversion scenarios to ensure
robust and reliable Markdown output.

========================================================================================
== FILE: docs/04_scrape/40_webscraper.md
== DATE: 2025-06-12 12:50:58 | SIZE: 10.49 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: ec2cb256dc5f877d6361724221ef3baced7d1dac0339c326d4277a9f633b4e13
========================================================================================
# webscraper (Website Downloader)

A modern web scraping tool for downloading websites with multiple backend
options, async I/O, and intelligent crawling capabilities.

## Overview

The webscraper tool provides a robust solution for downloading websites for
offline viewing and analysis. Built with Python 3.10+ and modern async
architecture, it features pluggable scraper backends for different use cases.

**Primary Use Case**: Download online documentation to make it available to LLMs
(like Claude) for analysis and reference. The downloaded HTML files can be
converted to Markdown with html2md, then bundled into a single file with m1f for
optimal LLM context usage.

## Key Features

- **Multiple Scraper Backends**: Choose from BeautifulSoup (default), HTTrack,
  Scrapy, Playwright, or Selectolax
- **Async I/O**: High-performance concurrent downloading
- **Intelligent Crawling**: Automatically respects robots.txt, follows
  redirects, handles encoding
- **Metadata Preservation**: Saves HTTP headers and metadata alongside HTML
  files
- **Domain Restriction**: Automatically restricts crawling to the starting
  domain
- **Rate Limiting**: Configurable delays between requests
- **Progress Tracking**: Real-time download progress with file listing

## Quick Start

```bash
# Basic website download
m1f-scrape https://example.com -o ./downloaded_html

# Download with specific depth and page limits
m1f-scrape https://example.com -o ./html \
  --max-pages 50 \
  --max-depth 3

# Use different scraper backend
m1f-scrape https://example.com -o ./html --scraper httrack

# List downloaded files after completion
m1f-scrape https://example.com -o ./html --list-files
```

## Command Line Interface

```bash
m1f-scrape <url> -o <output> [options]
```

### Required Arguments

| Option         | Description                |
| -------------- | -------------------------- |
| `url`          | URL to start scraping from |
| `-o, --output` | Output directory           |

### Optional Arguments

| Option                  | Description                                                   | Default       |
| ----------------------- | ------------------------------------------------------------- | ------------- |
| `--scraper`             | Scraper backend to use (choices: httrack, beautifulsoup, bs4, | beautifulsoup |
|                         | selectolax, httpx, scrapy, playwright)                        |               |
| `--scraper-config`      | Path to scraper-specific config file (YAML/JSON)              | None          |
| `--max-depth`           | Maximum crawl depth                                           | 5             |
| `--max-pages`           | Maximum pages to crawl                                        | 1000          |
| `--request-delay`       | Delay between requests in seconds (for Cloudflare protection) | 15.0          |
| `--concurrent-requests` | Number of concurrent requests (for Cloudflare protection)     | 2             |
| `--user-agent`          | Custom user agent string                                      | Mozilla/5.0   |
| `--list-files`          | List all downloaded files after completion                    | False         |
| `-v, --verbose`         | Enable verbose output                                         | False         |
| `-q, --quiet`           | Suppress all output except errors                             | False         |
| `--version`             | Show version information and exit                             | -             |

## Scraper Backends

### BeautifulSoup (default)

- **Best for**: General purpose scraping, simple websites
- **Features**: Fast HTML parsing, good encoding detection
- **Limitations**: No JavaScript support

```bash
m1f-scrape https://example.com -o ./html --scraper beautifulsoup
```

### HTTrack

- **Best for**: Complete website mirroring, preserving structure
- **Features**: External links handling, advanced mirroring options
- **Limitations**: Requires HTTrack to be installed separately

```bash
m1f-scrape https://example.com -o ./html --scraper httrack
```

### Scrapy

- **Best for**: Large-scale crawling, complex scraping rules
- **Features**: Advanced crawling settings, middleware support
- **Limitations**: More complex configuration

```bash
m1f-scrape https://example.com -o ./html --scraper scrapy
```

### Playwright

- **Best for**: JavaScript-heavy sites, SPAs
- **Features**: Full browser automation, JavaScript execution
- **Limitations**: Slower, requires more resources

```bash
m1f-scrape https://example.com -o ./html --scraper playwright
```

### Selectolax

- **Best for**: Speed-critical applications
- **Features**: Fastest HTML parsing, minimal overhead
- **Limitations**: Basic feature set

```bash
m1f-scrape https://example.com -o ./html --scraper selectolax
```

## Usage Examples

### Basic Website Download

```bash
# Download a simple website
m1f-scrape https://docs.example.com -o ./docs_html

# Download with verbose output
m1f-scrape https://docs.example.com -o ./docs_html -v
```

### Controlled Crawling

```bash
# Limit crawl depth for shallow scraping
m1f-scrape https://blog.example.com -o ./blog \
  --max-depth 2 \
  --max-pages 20

# Slow crawling to be respectful
m1f-scrape https://example.com -o ./html \
  --request-delay 2.0 \
  --concurrent-requests 2
```

### Custom Configuration

```bash
# Use custom user agent
m1f-scrape https://example.com -o ./html \
  --user-agent "MyBot/1.0 (Compatible)"

# Use scraper-specific configuration
m1f-scrape https://example.com -o ./html \
  --scraper scrapy \
  --scraper-config ./scrapy-settings.yaml
```

## Output Structure

Downloaded files are organized to mirror the website structure:

```
output_directory/
├── example.com/
│   ├── index.html
│   ├── index.meta.json
│   ├── about/
│   │   ├── index.html
│   │   └── index.meta.json
│   ├── blog/
│   │   ├── post1/
│   │   │   ├── index.html
│   │   │   └── index.meta.json
│   │   └── post2/
│   │       ├── index.html
│   │       └── index.meta.json
│   └── contact/
│       ├── index.html
│       └── index.meta.json
```

### Metadata Files

Each HTML file has an accompanying `.meta.json` file containing:

```json
{
  "url": "https://example.com/about/",
  "title": "About Us - Example",
  "encoding": "utf-8",
  "status_code": 200,
  "headers": {
    "Content-Type": "text/html; charset=utf-8",
    "Last-Modified": "2024-01-15T10:30:00Z"
  },
  "metadata": {
    "description": "Learn more about Example company",
    "og:title": "About Us",
    "canonical": "https://example.com/about/"
  }
}
```

## Integration with m1f Workflow

webscraper is designed as the first step in a workflow to provide documentation
to LLMs:

```bash
# Step 1: Download documentation website
m1f-scrape https://docs.example.com -o ./html_files

# Step 2: Analyze HTML structure
m1f-html2md analyze ./html_files/*.html --suggest-selectors

# Step 3: Convert to Markdown
m1f-html2md convert ./html_files -o ./markdown \
  --content-selector "main.content" \
  --ignore-selectors "nav" ".sidebar"

# Step 4: Bundle for LLM consumption
m1f -s ./markdown -o ./docs_bundle.txt \
  --remove-scraped-metadata

# Now docs_bundle.txt contains all documentation in a single file
# that can be provided to Claude or other LLMs for analysis
```

### Complete Documentation Download Example

```bash
# Download React documentation for LLM analysis
m1f-scrape https://react.dev/learn -o ./react_docs \
  --max-pages 100 \
  --max-depth 3

# Convert to clean Markdown
m1f-html2md convert ./react_docs -o ./react_md \
  --content-selector "article" \
  --ignore-selectors "nav" "footer" ".sidebar"

# Create single file for LLM
m1f -s ./react_md -o ./react_documentation.txt

# Now you can provide react_documentation.txt to Claude:
# "Here is the React documentation: <contents of react_documentation.txt>"
```

## Best Practices

1. **Respect robots.txt**: The tool automatically respects robots.txt files
2. **Use appropriate delays**: Set `--request-delay` to avoid overwhelming
   servers (default: 15 seconds)
3. **Limit concurrent requests**: Use `--concurrent-requests` responsibly
   (default: 2 connections)
4. **Test with small crawls**: Start with `--max-pages 10` to test your settings
5. **Check output**: Use `--list-files` to verify what was downloaded

## Dealing with Cloudflare Protection

Many websites use Cloudflare or similar services to protect against bots. The
scraper now includes conservative defaults to help avoid detection:

### Default Conservative Settings

- **Request delay**: 15 seconds between requests
- **Concurrent requests**: 2 simultaneous connections
- **HTTrack backend**: Limited to 0.5 connections/second max
- **Bandwidth limiting**: 100KB/s for HTTrack backend
- **Robots.txt**: Always respected (cannot be disabled)

### For Heavy Cloudflare Protection

For heavily protected sites, manually set very conservative values:

```bash
m1f-scrape https://protected-site.com -o ./output \
  --request-delay 30 \
  --concurrent-requests 1 \
  --max-pages 50 \
  --scraper httrack
```

### Cloudflare Avoidance Tips

1. **Start conservative**: Begin with 30-60 second delays
2. **Use realistic user agents**: The default is a current Chrome browser
3. **Limit scope**: Download only what you need with `--max-pages`
4. **Single connection**: Use `--concurrent-requests 1` for sensitive sites
5. **Respect robots.txt**: Always enabled by default
6. **Add randomness**: Consider adding random delays in custom scripts

### When Cloudflare Still Blocks

If conservative settings don't work:

1. **Try Playwright backend**: Uses real browser automation

   ```bash
   m1f-scrape https://site.com -o ./output --scraper playwright
   ```

2. **Manual download**: Some sites require manual browsing
3. **API access**: Check if the site offers an API
4. **Contact site owner**: Request permission or access

## Troubleshooting

### No files downloaded

- Check if the website blocks automated access
- Try a different scraper backend
- Verify the URL is accessible

### Incomplete downloads

- Increase `--max-depth` if pages are deeply nested
- Increase `--max-pages` if hitting the limit
- Check for JavaScript-rendered content (use Playwright)

### Encoding issues

- The tool automatically detects encoding
- Check `.meta.json` files for encoding information
- Use html2md with proper encoding settings for conversion

## See Also

- [html2md Documentation](../03_html2md/30_html2md.md) - For converting
  downloaded HTML to Markdown
- [m1f Documentation](../01_m1f/00_m1f.md) - For bundling converted content for
  LLMs

========================================================================================
== FILE: docs/04_scrape/41_html2md_scraper_backends.md
== DATE: 2025-06-12 12:50:58 | SIZE: 9.82 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: d2cfe546d6990c1b7b35e65a3c2ba227d332ce5ac3b6eec20e6d18f814e38c82
========================================================================================
# Web Scraper Backends

The HTML2MD tool supports multiple web scraping backends, each optimized for
different use cases. Choose the right backend based on your specific needs for
optimal results.

## Overview

The HTML2MD scraper backend system provides flexibility to choose the most
appropriate tool for your web scraping needs:

- **Static websites**: BeautifulSoup4 (default) - Fast and lightweight
- **Complete mirroring**: HTTrack - Professional website copying
- **JavaScript-heavy sites**: Playwright (coming soon)
- **Large-scale scraping**: Scrapy (coming soon)
- **Performance-critical**: httpx + selectolax (coming soon)

## Available Backends

### BeautifulSoup4 (Default)

BeautifulSoup4 is the default backend, ideal for scraping static HTML websites.

**Pros:**

- Easy to use and lightweight
- Fast for simple websites
- Good encoding detection
- Excellent HTML parsing capabilities

**Cons:**

- No JavaScript support
- Basic crawling capabilities
- Single-threaded by default

**Usage:**

```bash
# Default backend (no need to specify)
m1f-scrape https://example.com -o output/

# Explicitly specify BeautifulSoup
m1f-scrape https://example.com -o output/ --scraper beautifulsoup

# With custom options
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --max-depth 3 \
  --max-pages 100 \
  --request-delay 1.0
```

### HTTrack

HTTrack is a professional website copier that creates complete offline mirrors.

**Pros:**

- Complete website mirroring
- Preserves directory structure
- Handles complex websites well
- Resume interrupted downloads
- Automatic robots.txt compliance

**Cons:**

- Requires system installation
- Less flexible for custom parsing
- Larger resource footprint

**Installation:**

```bash
# Ubuntu/Debian
sudo apt-get install httrack

# macOS
brew install httrack

# Windows
# Download from https://www.httrack.com/
```

**Usage:**

```bash
m1f-scrape https://example.com -o output/ --scraper httrack

# With HTTrack-specific options
m1f-scrape https://example.com -o output/ \
  --scraper httrack \
  --max-depth 5 \
  --concurrent-requests 8
```

## Configuration Options

### Command Line Options

Common options for all scrapers:

```bash
--scraper BACKEND           # Choose scraper backend (beautifulsoup, bs4, httrack,
                           # selectolax, httpx, scrapy, playwright)
--max-depth N               # Maximum crawl depth (default: 5)
--max-pages N               # Maximum pages to crawl (default: 1000)
--request-delay SECONDS     # Delay between requests (default: 15.0)
--concurrent-requests N     # Number of concurrent requests (default: 2)
--user-agent STRING         # Custom user agent
--scraper-config PATH       # Path to scraper-specific config file (YAML/JSON)
--list-files                # List all downloaded files after completion
-v, --verbose               # Enable verbose output
-q, --quiet                 # Suppress all output except errors
--version                   # Show version information
```

Note: robots.txt is always respected and cannot be disabled.

### Configuration File

You can specify scraper-specific settings in a YAML or JSON configuration file:

```yaml
# beautifulsoup-config.yaml
parser: "html.parser" # Options: "html.parser", "lxml", "html5lib"
features: "lxml"
encoding: "auto" # Or specific encoding like "utf-8"
```

```yaml
# httrack-config.yaml
mirror_options:
  - "--assume-insecure" # For HTTPS issues
  - "--robots=3" # Strict robots.txt compliance
extra_filters:
  - "+*.css"
  - "+*.js"
  - "-*.zip"
```

Use with:

```bash
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config beautifulsoup-config.yaml
```

### Backend-Specific Configuration

Each backend can have specific configuration options:

#### BeautifulSoup Configuration

Create a `beautifulsoup.yaml`:

```yaml
scraper_config:
  parser: "lxml" # Options: "html.parser", "lxml", "html5lib"
  features: "lxml"
  encoding: "auto" # Or specific encoding like "utf-8"
```

#### HTTrack Configuration

Create a `httrack.yaml`:

```yaml
scraper_config:
  mirror_options:
    - "--assume-insecure" # For HTTPS issues
    - "--robots=3" # Strict robots.txt compliance
  extra_filters:
    - "+*.css"
    - "+*.js"
    - "-*.zip"
```

## Use Cases and Recommendations

### Static Documentation Sites

For sites with mostly static HTML content:

```bash
m1f-scrape https://docs.example.com -o docs/ \
  --scraper beautifulsoup \
  --max-depth 10 \
  --request-delay 0.2
```

### Complete Website Backup

For creating a complete offline mirror:

```bash
m1f-scrape https://example.com -o backup/ \
  --scraper httrack \
  --max-pages 10000
```

### Rate-Limited APIs

For sites with strict rate limits:

```bash
m1f-scrape https://api.example.com/docs -o api-docs/ \
  --scraper beautifulsoup \
  --request-delay 2.0 \
  --concurrent-requests 1
```

## Troubleshooting

### BeautifulSoup Issues

**Encoding Problems:**

```bash
# Create a config file with UTF-8 encoding
echo 'encoding: utf-8' > bs-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config bs-config.yaml
```

**Parser Issues:**

```bash
# Create a config file with different parser
echo 'parser: html5lib' > bs-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config bs-config.yaml
```

### HTTrack Issues

**SSL Certificate Problems:**

```bash
# Create a config file to ignore SSL errors (use with caution)
echo 'mirror_options: ["--assume-insecure"]' > httrack-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper httrack \
  --scraper-config httrack-config.yaml
```

**Incomplete Downloads:** HTTrack creates a cache that allows resuming. Check
the `.httrack` directory in your output folder.

## Performance Comparison

| Backend       | Speed     | Memory Usage | JavaScript | Accuracy  |
| ------------- | --------- | ------------ | ---------- | --------- |
| BeautifulSoup | Fast      | Low          | No         | High      |
| HTTrack       | Medium    | Medium       | No         | Very High |
| Selectolax    | Fastest   | Very Low     | No         | Medium    |
| Scrapy        | Very Fast | Low-Medium   | No         | High      |
| Playwright    | Slow      | High         | Yes        | Very High |

## Additional Backends

### Selectolax (httpx + selectolax)

The fastest HTML parsing solution using httpx for networking and selectolax for
parsing.

**Pros:**

- Blazing fast performance (C-based parser)
- Minimal memory footprint
- Excellent for large-scale simple scraping
- Modern async HTTP/2 support

**Cons:**

- No JavaScript support
- Limited parsing features compared to BeautifulSoup
- Less mature ecosystem

**Installation:**

```bash
pip install httpx selectolax
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper selectolax

# With custom configuration
m1f-scrape https://example.com -o output/ \
  --scraper selectolax \
  --concurrent-requests 20 \
  --request-delay 0.1

# Using httpx alias
m1f-scrape https://example.com -o output/ --scraper httpx
```

### Scrapy

Industrial-strength web scraping framework with advanced features.

**Pros:**

- Battle-tested in production
- Built-in retry logic and error handling
- Auto-throttle based on server response
- Extensive middleware system
- Distributed crawling support
- Advanced caching and queuing

**Cons:**

- Steeper learning curve
- Heavier than simple scrapers
- Twisted-based (different async model)

**Installation:**

```bash
pip install scrapy
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper scrapy

# With auto-throttle and caching
m1f-scrape https://example.com -o output/ \
  --scraper scrapy \
  --scraper-config scrapy.yaml

# Large-scale crawling
m1f-scrape https://example.com -o output/ \
  --scraper scrapy \
  --max-pages 10000 \
  --concurrent-requests 16
```

### Playwright

Browser automation for JavaScript-heavy websites and SPAs.

**Pros:**

- Full JavaScript execution
- Handles SPAs and dynamic content
- Multiple browser engines (Chromium, Firefox, WebKit)
- Screenshot and PDF generation
- Mobile device emulation
- Network interception

**Cons:**

- High resource usage
- Slower than HTML-only scrapers
- Requires browser installation

**Installation:**

```bash
pip install playwright
playwright install  # Install browser binaries
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper playwright

# With custom browser settings
m1f-scrape https://example.com -o output/ \
  --scraper playwright \
  --scraper-config playwright.yaml

# For SPA with wait conditions
m1f-scrape https://spa-example.com -o output/ \
  --scraper playwright \
  --request-delay 2.0 \
  --concurrent-requests 2
```

## API Usage

You can also use the scraper backends programmatically:

```python
import asyncio
from tools.html2md.scrapers import create_scraper, ScraperConfig

async def scrape_example():
    # Configure scraper
    config = ScraperConfig(
        max_depth=5,
        max_pages=100,
        request_delay=0.5
    )

    # Create scraper instance
    scraper = create_scraper('beautifulsoup', config)

    # Scrape single page
    async with scraper:
        page = await scraper.scrape_url('https://example.com')
        print(f"Title: {page.title}")
        print(f"Content length: {len(page.content)}")

    # Scrape entire site
    async with scraper:
        async for page in scraper.scrape_site('https://example.com'):
            print(f"Scraped: {page.url}")

# Run the example
asyncio.run(scrape_example())
```

## Contributing

To add a new scraper backend:

1. Create a new file in `tools/html2md/scrapers/`
2. Inherit from `WebScraperBase`
3. Implement required methods: `scrape_url()` and `scrape_site()`
4. Register in `SCRAPER_REGISTRY` in `__init__.py`
5. Add tests in `tests/html2md/test_scrapers.py`
6. Update this documentation

See the BeautifulSoup implementation for a complete example.

========================================================================================
== FILE: docs/05_development/README.md
== DATE: 2025-06-10 14:50:13 | SIZE: 507 B | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: d6bab190407c67ffc7da24efeabc587cb64559643c2e7fde00c677bd07daf731
========================================================================================
# Development Documentation

This section contains guides and references for developers working on or with
the m1f toolkit.

## Contents

- [**55_version_management.md**](./55_version_management.md) - Version
  management and release process
- [**56_git_hooks_setup.md**](./56_git_hooks_setup.md) - Git hooks for automated
  bundling

## Quick Links

- [Main m1f Documentation](../01_m1f/)
- [s1f Documentation](../02_s1f/)
- [html2md Documentation](../03_html2md/)
- [Scraper Documentation](../04_scrape/)

========================================================================================
== FILE: docs/05_development/55_version_management.md
== DATE: 2025-06-10 14:50:13 | SIZE: 2.24 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: b9b8e44fdea2ae7500f14a24b4a9bd2e8da8e4aa3c6a15f97e33f6487546f63e
========================================================================================
# Version Management

This project uses centralized version management to ensure consistency across
all components.

## Structure

- **Single Source of Truth**: `tools/_version.py`
- **Automatic Syncing**: Scripts to keep all files in sync
- **Dynamic Imports**: All modules import from the central version file

## Files That Use Version

1. **Python Modules**:

   - `tools/__init__.py` - imports from `_version.py`
   - `tools/m1f/__init__.py` - imports from `../_version.py`
   - `tools/s1f/__init__.py` - imports from `../_version.py`
   - `tools/html2md/__init__.py` - imports from `../_version.py`
   - `tools/webscraper/__init__.py` - imports from `../_version.py`

2. **Setup Files**:

   - `tools/setup.py` - reads version dynamically from `_version.py`

3. **NPM Package**:

   - `package.json` - synced using `sync_version.py`

4. **Main Script**:
   - `tools/m1f.py` - imports with fallback for standalone usage

## Updating Version

### Manual Update

1. Edit `tools/_version.py` and change the version
2. Run `python scripts/sync_version.py` to sync with package.json

### Using Bump Script

```bash
# Bump patch version (3.1.0 → 3.1.1)
python scripts/bump_version.py patch

# Bump minor version (3.1.0 → 3.2.0)
python scripts/bump_version.py minor

# Bump major version (3.1.0 → 4.0.0)
python scripts/bump_version.py major

# Set specific version
python scripts/bump_version.py 3.2.0-beta1
```

The bump script will:

1. Update `tools/_version.py`
2. Automatically sync `package.json`
3. Display next steps for committing and tagging

## Benefits

1. **Single Update Point**: Change version in one place only
2. **Consistency**: All components always have the same version
3. **Automation**: Scripts handle syncing and validation
4. **Future-Proof**: Easy to add new files that need version info

## Adding New Components

When adding a new tool or module that needs version info:

1. Import from the parent package:

   ```python
   from .._version import __version__, __version_info__
   ```

2. No need to update sync scripts - they work automatically

## Version Format

- Follows semantic versioning: `MAJOR.MINOR.PATCH`
- Pre-release versions supported: `3.2.0-beta1`
- `__version__`: String format (e.g., "3.1.0")
- `__version_info__`: Tuple format (e.g., (3, 1, 0))

========================================================================================
== FILE: docs/05_development/56_git_hooks_setup.md
== DATE: 2025-06-12 12:50:58 | SIZE: 5.08 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 197832d481163616e62c39ec55df080a121b342d79ea4127b3bf6ee6b4612deb
========================================================================================
# m1f Git Hooks Setup Guide

This guide explains how to set up Git hooks for automatic m1f bundle generation
in your projects.

## Overview

The m1f Git pre-commit hook automatically runs `m1f-update` before each
commit, ensuring that your bundled files are always up-to-date with your source
code.

## Features

- **Automatic bundle generation** - Bundles are regenerated on every commit
- **Fail-safe commits** - Commits are blocked if bundle generation fails
- **Auto-staging** - Generated bundles in the `m1f/` directory are automatically
  added to commits
- **Conditional execution** - Only runs if `.m1f.config.yml` exists in your
  project

## Installation

### Method 1: Using the Installation Script (Recommended)

1. Navigate to your project root (where `.m1f.config.yml` is located)
2. Run the installation script:

```bash
# Download and run the installation script
curl -sSL https://raw.githubusercontent.com/franzundfranz/m1f/main/scripts/install-git-hooks.sh | bash

# Or if you have the m1f repository cloned
bash /path/to/m1f/scripts/install-git-hooks.sh
```

The script will:

- Check if you're in a Git repository
- Install the pre-commit hook
- Backup any existing pre-commit hook
- Make the hook executable

### Method 2: Manual Installation

1. Create the pre-commit hook file:

```bash
cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
# m1f Auto-Bundle Git Pre-Commit Hook

if [ -f ".m1f.config.yml" ]; then
    if ! command -v m1f &> /dev/null; then
        echo "Error: m1f command not found!"
        echo "Please install m1f: pip install m1f"
        exit 1
    fi

    echo "Running m1f-update..."
    if m1f-update; then
        echo "Auto-bundle completed successfully."
        [ -d "m1f" ] && git add m1f/*
    else
        echo "Auto-bundle failed. Please fix the issues before committing."
        exit 1
    fi
fi
exit 0
EOF
```

2. Make it executable:

```bash
chmod +x .git/hooks/pre-commit
```

## How It Works

When you run `git commit`, the pre-commit hook:

1. Checks if `.m1f.config.yml` exists in your repository
2. Verifies that the `m1f` command is available
3. If both conditions are met, runs `m1f-update`
4. If bundle generation succeeds:
   - Adds all files in the `m1f/` directory to the commit
   - Allows the commit to proceed
5. If bundle generation fails:
   - Displays the error message
   - Blocks the commit
   - You must fix the issues before committing

## Usage

Once installed, the hook works automatically:

```bash
# Normal commit - bundles are generated automatically
git add your-files.py
git commit -m "feat: add new feature"

# Skip the hook if needed
git commit --no-verify -m "wip: quick save"
```

## Troubleshooting

### Hook not running

1. Check if the hook is executable:

   ```bash
   ls -la .git/hooks/pre-commit
   ```

2. Make it executable if needed:
   ```bash
   chmod +x .git/hooks/pre-commit
   ```

### Bundle generation fails

1. Run auto-bundle manually to see the error:

   ```bash
   m1f-update
   ```

2. Fix any issues in your `.m1f.config.yml`

3. Try committing again

### m1f command not found

If you get "m1f command not found", ensure m1f is installed:

```bash
pip install m1f
# or for development
pip install -e /path/to/m1f
```

### Disable the hook temporarily

Use the `--no-verify` flag:

```bash
git commit --no-verify -m "your message"
```

### Remove the hook

To uninstall the pre-commit hook:

```bash
rm .git/hooks/pre-commit
```

## Best Practices

1. **Include m1f/ in version control** - This ensures bundled files are
   available to all team members and AI tools

2. **Review bundle changes** - Check the generated bundles in your diffs before
   committing

3. **Keep bundles focused** - Configure smaller, specific bundles rather than
   one large bundle

4. **Use bundle groups** - Organize related bundles into groups for better
   management

## Example Workflow

1. Set up your project with m1f:

   ```bash
   m1f-link  # Create documentation symlink
   ```

2. Create `.m1f.config.yml`:

   ```yaml
   bundles:
     project-docs:
       description: "Project documentation"
       output: "m1f/docs.txt"
       sources:
         - path: "docs"
           include_extensions: [".md"]
   ```

3. Install the Git hook:

   ```bash
   bash /path/to/m1f/scripts/install-git-hooks.sh
   ```

4. Work normally - bundles update automatically:
   ```bash
   echo "# New Feature" > docs/feature.md
   git add docs/feature.md
   git commit -m "docs: add feature documentation"
   # Bundle is regenerated and included in the commit
   ```

## Integration with CI/CD

The pre-commit hook ensures local development stays in sync. For CI/CD
pipelines, you can also run auto-bundle as a build step:

```yaml
# GitHub Actions example
- name: Install m1f
  run: pip install m1f

- name: Generate m1f bundles
  run: m1f-update
```

```bash
# GitLab CI example
before_script:
  - pip install m1f

bundle:
  script:
    - m1f-update
```

## See Also

- [Auto-Bundle Guide](../01_m1f/06_auto_bundle_guide.md) - Complete auto-bundle
  documentation
- [m1f Configuration](../01_m1f/02_m1f_presets.md) - Preset system documentation
- [Quick Reference](../01_m1f/09_quick_reference.md) - Common m1f commands

========================================================================================
== FILE: docs/99_misc/98_token_counter.md
== DATE: 2025-06-12 12:50:58 | SIZE: 4.12 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: c32771466dd79da04aeb611d2e6ac77d801edeb1c49eb4b66410852c6d382459
========================================================================================
# token_counter - Token Estimation Tool

The token_counter tool (v2.0.0) estimates token usage for LLM context planning,
helping you optimize your use of large language models by managing context
window limits.

## Overview

When working with LLMs like ChatGPT, Claude, or GPT-4, understanding token
consumption is essential for effective prompt engineering and context
management. Built with Python 3.10+, the token_counter tool allows you to
precisely measure how many tokens your combined files will use, helping you stay
within the context window limits of your chosen LLM.

## Key Features

- Uses OpenAI's tiktoken library for accurate estimates
- Supports different encoding schemes for various LLMs
- Helps optimize context usage for LLMs
- Simple command-line interface

## Quick Start

```bash
# Check token count of a file
m1f-token-counter ./combined.txt

# Use a specific encoding model
m1f-token-counter ./combined.txt -e p50k_base
```

## Command Line Options

| Option           | Description                                         |
| ---------------- | --------------------------------------------------- |
| `file_path`      | Path to the text file to analyze                    |
| `-e, --encoding` | The tiktoken encoding to use (default: cl100k_base) |

## Usage Examples

Basic usage with default encoding (cl100k_base, used by GPT-4 and ChatGPT):

```bash
m1f-token-counter combined_output.txt
```

Using a specific encoding:

```bash
m1f-token-counter myfile.txt -e p50k_base
```

## Encoding Models

The tool supports different encoding models depending on which LLM you're using:

- `cl100k_base` - Default, used by GPT-4, ChatGPT
- `p50k_base` - Used by GPT-3.5-Turbo, text-davinci-003
- `r50k_base` - Used by older GPT-3 models

## Token Limits by Model

Understanding token limits is crucial for effective usage:

| Model           | Token Limit | Recommended Encoding |
| --------------- | ----------- | -------------------- |
| GPT-4 Turbo     | 128,000     | cl100k_base          |
| GPT-4           | 8,192       | cl100k_base          |
| GPT-3.5-Turbo   | 16,385      | cl100k_base          |
| Claude 3.5 Opus | 200,000     | -                    |
| Claude 3 Opus   | 200,000     | -                    |
| Claude 3 Sonnet | 200,000     | -                    |
| Claude 3 Haiku  | 200,000     | -                    |

## Integration with m1f

The token_counter tool is particularly useful when used with m1f to check if
your combined files will fit within the token limit of your chosen LLM:

1. First, combine files with m1f:

   ```bash
   m1f -s ./project -o ./combined.txt --include-extensions .py .js
   ```

2. Then, check the token count:
   ```bash
   m1f-token-counter ./combined.txt
   ```

This workflow helps you adjust your file selection to stay within token limits
for your AI assistant.

## Optimizing Token Usage

To reduce token consumption while maintaining context quality:

1. **Be selective with files**: Include only the most relevant files for your
   prompt
2. **Use minimal separator style**: The `None` separator style uses fewer tokens
3. **Trim unnecessary content**: Remove comments, unused code, or redundant text
4. **Focus on key files**: Prioritize files that directly address your question
5. **Use file filtering**: Utilize m1f's filtering options to target specific
   files

## Architecture

Token counter v2.0.0 features a simple but effective design:

- **Module Structure**: Can be run as a module (`m1f-token-counter`)
- **Type Safety**: Full type hints for better IDE support
- **Error Handling**: Graceful handling of encoding errors and file issues
- **Performance**: Efficient token counting for large files

## Requirements

- Python 3.10 or newer
- The `tiktoken` Python package:

```bash
pip install tiktoken
```

This dependency is included in the project's requirements.txt file.

## Tips for Accurate Token Counting

1. **Model-Specific Encoding**: Always use the encoding that matches your target
   LLM
2. **Include Prompts**: Remember to count tokens in your prompts as well as the
   context
3. **Buffer Space**: Leave 10-20% buffer for model responses
4. **Regular Checks**: Re-check token counts after file modifications

========================================================================================
== FILE: tests/html2md_server/README.md
== DATE: 2025-06-12 12:50:58 | SIZE: 4.98 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 9e042a0d54c25dd3ccdd2221d89fdaa61526945dbb2170254102381346102b13
========================================================================================
# HTML2MD Test Suite

A comprehensive test suite for the html2md converter featuring a local web
server with challenging HTML test pages.

## Overview

This test suite provides:

- A Flask-based web server serving complex HTML test pages
- Modern, responsive HTML pages with various challenging structures
- Comprehensive pytest-based test cases
- Real-world documentation examples (M1F and HTML2MD docs)

## Features

### Test Pages

1. **M1F Documentation** - Complete documentation for the Make One File tool
2. **HTML2MD Documentation** - Full documentation for the HTML to Markdown
   converter
3. **Complex Layout Test** - Tests CSS Grid, Flexbox, nested structures, and
   positioning
4. **Code Examples Test** - Multiple programming languages with syntax
   highlighting
5. **Edge Cases Test** - Malformed HTML, special characters, and unusual
   structures
6. **Modern Features Test** - HTML5 elements, web components, and semantic
   markup
7. **Tables and Lists Test** - Complex tables and deeply nested lists
8. **Multimedia Test** - Images, videos, and other media elements

### Test Coverage

- ✅ CSS selector-based content extraction
- ✅ Complex nested HTML structures
- ✅ Code blocks with language detection
- ✅ Tables and lists conversion
- ✅ Special characters and Unicode
- ✅ YAML frontmatter generation
- ✅ Heading level adjustment
- ✅ Parallel processing
- ✅ Edge cases and error handling

## Setup

### Requirements

```bash
pip install flask flask-cors beautifulsoup4 markdownify pytest pytest-asyncio aiohttp
```

### Running the Test Server

```bash
# Start the test server
python tests/html2md_server/server.py

# Server will run at http://localhost:8080
```

### Running Tests

```bash
# Run all tests
pytest tests/test_html2md_server.py -v

# Run specific test
pytest tests/test_html2md_server.py::TestHTML2MDConversion::test_code_examples -v

# Run with coverage
pytest tests/test_html2md_server.py --cov=tools.mf1-html2md --cov-report=html
```

## Test Structure

```
tests/html2md_server/
├── server.py              # Flask test server
├── static/
│   ├── css/
│   │   └── modern.css    # Modern CSS with dark mode
│   └── js/
│       └── main.js       # Interactive features
├── test_pages/
│   ├── index.html        # Test suite homepage
│   ├── m1f-documentation.html
│   ├── html2md-documentation.html
│   ├── complex-layout.html
│   ├── code-examples.html
│   └── ...               # More test pages
└── README.md             # This file
```

## Usage Examples

### Manual Testing

1. Start the server:

   ```bash
   python tests/html2md_server/server.py
   ```

2. Test conversion with various options:

   ```bash
   # Basic conversion
   m1f-html2md \
     --source-dir http://localhost:8080/page \
     --destination-dir ./output

   # With content selection
   m1f-html2md \
     --source-dir http://localhost:8080/page \
     --destination-dir ./output \
     --outermost-selector "article" \
     --ignore-selectors "nav" ".sidebar" "footer"

   # Specific page with options
   m1f-html2md \
     --source-dir http://localhost:8080/page/code-examples \
     --destination-dir ./output \
     --add-frontmatter \
     --heading-offset 1
   ```

### Automated Testing

The test suite includes comprehensive pytest tests:

```python
# Example test structure
class TestHTML2MDConversion:
    async def test_basic_conversion(self, test_server, temp_output_dir):
        """Test basic HTML to Markdown conversion."""

    async def test_content_selection(self, test_server, temp_output_dir):
        """Test CSS selector-based content extraction."""

    async def test_code_examples(self, test_server, temp_output_dir):
        """Test code block conversion with various languages."""
```

## Adding New Test Pages

1. Create a new HTML file in `test_pages/`
2. Add an entry to `TEST_PAGES` in `server.py`
3. Include challenging HTML structures
4. Add corresponding test cases in `test_html2md_server.py`

Example:

```python
# In server.py
TEST_PAGES = {
    'your-new-test': {
        'title': 'Your New Test',
        'description': 'Description of what this tests'
    }
}
```

## Features Tested

### HTML Elements

- Headings (h1-h6)
- Paragraphs and text formatting
- Lists (ordered, unordered, nested)
- Tables (simple and complex)
- Code blocks and inline code
- Links and images
- Blockquotes
- Details/Summary elements

### CSS Layouts

- Flexbox
- CSS Grid
- Multi-column layouts
- Absolute/relative positioning
- Floating elements
- Sticky elements
- Overflow containers

### Special Cases

- Unicode and emoji
- HTML entities
- Special characters in code
- Very long lines
- Empty elements
- Malformed HTML
- Deeply nested structures

## Contributing

To add new test cases:

1. Identify a challenging HTML pattern
2. Create a test page demonstrating the pattern
3. Add test cases to verify correct conversion
4. Document the test purpose and expected behavior

## License

Part of the M1F project. See main project license.

========================================================================================
== FILE: tests/html2md_server/requirements.txt
== DATE: 2025-06-04 21:15:33 | SIZE: 397 B | TYPE: .txt
== ENCODING: utf-8
== CHECKSUM_SHA256: 145d5f43cbea39319a165227b43e9ca7dcdf777149901fbae77072f7f5abd049
========================================================================================
# HTML2MD Test Server Requirements

# Web Framework
flask>=2.3.0
flask-cors>=4.0.0

# HTML Processing
beautifulsoup4>=4.12.0
markdownify>=0.11.0
lxml>=4.9.0

# Testing
pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=4.1.0
pytest-timeout>=2.1.0

# HTTP Client for Tests
aiohttp>=3.8.0
requests>=2.31.0

# Utilities
pyyaml>=6.0
chardet>=5.2.0

# Development
black>=23.0.0
flake8>=6.0.0
mypy>=1.5.0 

========================================================================================
== FILE: tests/s1f/README.md
== DATE: 2025-06-12 12:50:58 | SIZE: 3.79 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 561341dbb978ecd4cfa3a01d9389433a603db8531d0daf3f1ec017b08100e037
========================================================================================
# s1f (Split One File) Test Suite

This directory contains tests for the `s1f.py` utility (the s1f tool). The test
suite verifies that files combined with m1f (`m1f.py`) using different separator
styles can be correctly extracted back to their original form.

## Directory Structure

- `source/`: Contains example files created during test setup (not used
  directly)
- `output/`: Contains combined files created with different separator styles
- `extracted/`: Target directory for extracted files during tests

## Test Setup

Before running tests, combined test files need to be created using the m1f tool
(`m1f.py`). These files serve as input for the s1f tests. Run the following
commands from the project root to create the necessary test files:

```bash
# Create combined files with different separator styles
m1f --source-directory tests/m1f/source --output-file tests/s1f/output/standard.txt --separator-style Standard --force
m1f --source-directory tests/m1f/source --output-file tests/s1f/output/detailed.txt --separator-style Detailed --force
m1f --source-directory tests/m1f/source --output-file tests/s1f/output/markdown.txt --separator-style Markdown --force
m1f --source-directory tests/m1f/source --output-file tests/s1f/output/machinereadable.txt --separator-style MachineReadable --force
```

## Running Tests

To run all tests:

```bash
# Activate the virtual environment first
.venv/Scripts/activate  # Windows
source .venv/bin/activate  # macOS/Linux

# Run tests from the project root
python tests/s1f/run_tests.py
```

Or, you can use pytest directly:

```bash
pytest tests/s1f/test_s1f.py -xvs
```

## Test Cases

The test suite includes the following test cases:

1. **Separator Style Tests**:

   - Tests extraction with Standard separator style
   - Tests extraction with Detailed separator style
   - Tests extraction with Markdown separator style
   - Tests extraction with MachineReadable separator style (optimized for AI
     processing)

2. **Feature Tests**:

   - Tests force overwrite of existing files
   - Tests setting file timestamps to original or current time

3. **Integration Tests**:
   - Tests command-line execution
   - Tests compatibility with LLM workflow patterns

## AI and LLM Integration

The s1f tool is designed to work seamlessly with files generated by m1f for LLM
context:

- **Preserves Structure**: Maintains the exact directory structure for reference
- **Integrity Verification**: Validates that files have not been altered during
  AI processing
- **Metadata Handling**: Correctly processes machine-readable metadata added for
  AI interpretation

## Recent Improvements

The following improvements have been made to the s1f utility (`s1f.py`):

- **Improved Path Extraction**: Fixed issues with path extraction in the
  Standard separator style. All separator styles now correctly extract and
  preserve the original file paths.
- **Consistent Behavior**: Ensured consistent behavior across all separator
  styles (Standard, Detailed, Markdown, and MachineReadable).
- **LLM Optimizations**: Enhanced support for AI-specific workflows and formats.
- **Documentation Updates**: Updated documentation to reflect these
  improvements.

These changes ensure that the directory structure is properly reconstructed
regardless of which separator style was used when creating the combined file.

## Verification Process

The tests verify that:

1. Files are successfully extracted to the destination directory
2. The directory structure is preserved
3. File content matches the original files (verified using SHA-256 checksums)
4. Command-line options work as expected

## Maintainer Information

- Author: Franz und Franz
- Homepage: https://franz.agency
- Project: https://m1f.dev
- License: See project LICENSE file

## Dependencies

- Python 3.9+
- pytest
- Access to the original source files in `tests/m1f/source/`

========================================================================================
== FILE: tests/html2md/expected/sample.md
== DATE: 2025-06-04 21:15:33 | SIZE: 1.61 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: bc605ca758b189a9a35fbcf4fa24da886c7c89c166e6b64b41f6b773111b86fa
========================================================================================
---
title: Sample HTML Document for Conversion
source_file: sample.html
---

# HTML to Markdown Conversion Example

This is a sample HTML document that demonstrates various HTML elements and how
they are converted to Markdown.

## Text Formatting

Here are some examples of **bold text**, _italic text_, and `inline code`.

You can also use [links to external websites](https://example.com) or
[links to other pages](another-page.md).

## Lists

### Unordered List

- First item
- Second item
- Third item with _formatted text_

### Ordered List

1. First step
2. Second step
3. Third step with [a link](details.md)

## Code Blocks

Here's a code block with syntax highlighting:

```python
def hello_world():
    print("Hello, world!")
    return True

# Call the function
result = hello_world()
```

And here's a code block with another language:

```javascript
function calculateSum(a, b) {
  return a + b;
}

// Calculate 5 + 10
const result = calculateSum(5, 10);
console.log(`The sum is: ${result}`);
```

## Blockquotes

> This is a blockquote with a single paragraph.

> This is a blockquote with multiple paragraphs.
>
> Here's the second paragraph within the same blockquote.
>
> _You can use formatting_ inside blockquotes too.

## Tables

| Name   | Description           | Value |
| ------ | --------------------- | ----- |
| Item 1 | Description of item 1 | 100   |
| Item 2 | Description of item 2 | 200   |
| Item 3 | Description of item 3 | 300   |

## Images

Here's an example of an image:

![Example image description](example-image.jpg)

And an image with a link:

[![Example thumbnail](example-image-thumbnail.jpg)](image-page.md)

========================================================================================
== FILE: tests/html2md/scraped_examples/README.md
== DATE: 2025-06-12 12:50:58 | SIZE: 1.30 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 5ea5470a69061146830985ef3cd7bd647fce8c7bb5177609410465135dcef393
========================================================================================
# HTML2MD Scraped Examples

This directory contains example markdown files generated by scraping test pages
from the local HTML2MD test server.

## Files

- `scraped_m1f-documentation.md` - M1F documentation page (simple conversion)
- `scraped_html2md-documentation.md` - HTML2MD documentation page (with code
  blocks)
- `scraped_complex-layout.md` - Complex layout page (challenging structure)
- `scraped_code-examples.md` - Code examples page (syntax highlighting test)

## Generation

These files are generated by running:

```bash
python tests/mf1-html2md/test_local_scraping.py
```

This requires the HTML2MD test server to be running:

```bash
cd tests/html2md_server && python server.py
```

## Metadata Format

These files demonstrate the new metadata format where scraped information is
placed at the **end** of each file:

```markdown
# Content goes here...

---

_Scraped from: http://localhost:8080/page/example_

_Scraped at: 2025-05-23 11:55:26_

_Source URL: http://localhost:8080/page/example_
```

## m1f Integration

These files can be processed with m1f using the `--remove-scraped-metadata`
option:

```bash
m1f -s tests/mf1-html2md/scraped_examples -o output.md \
  --include-extensions .md --remove-scraped-metadata
```

This will combine all scraped files while automatically removing the metadata
blocks.

========================================================================================
== FILE: tests/html2md/scraped_examples/scraped_code-examples.md
== DATE: 2025-06-12 12:50:58 | SIZE: 23.53 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 0fb5d403156a3e4ddc917c965c8bdaf5510a07ab443768e1cb596d02827c7a2e
========================================================================================
# Code Examples Test

Testing various code blocks, syntax highlighting, and language detection for
HTML to Markdown conversion.

## Programming Languages

### Python

```
#!/usr/bin/env python3
"""
HTML to Markdown Converter
A comprehensive tool for converting HTML files to Markdown format.
"""

import os
import sys
from pathlib import Path
from typing import List, Optional, Dict, Any
from dataclasses import dataclass
import asyncio

@dataclass
class ConversionOptions:
    """Options for HTML to Markdown conversion."""
    source_dir: Path
    destination_dir: Path
    outermost_selector: Optional[str] = None
    ignore_selectors: List[str] = None
    parallel: bool = False
    max_workers: int = 4

class HTML2MDConverter:
    def __init__(self, options: ConversionOptions):
        self.options = options
        self._setup_logging()

    async def convert_file(self, file_path: Path) -> str:
        """Convert a single HTML file to Markdown."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                html_content = f.read()

            # Parse and convert
            soup = BeautifulSoup(html_content, 'html.parser')

            if self.options.outermost_selector:
                content = soup.select_one(self.options.outermost_selector)
            else:
                content = soup.body or soup

            # Remove ignored elements
            if self.options.ignore_selectors:
                for selector in self.options.ignore_selectors:
                    for element in content.select(selector):
                        element.decompose()

            return markdownify(str(content))

        except Exception as e:
            logger.error(f"Error converting {file_path}: {e}")
            raise

# Example usage
if __name__ == "__main__":
    converter = HTML2MDConverter(
        ConversionOptions(
            source_dir=Path("./html"),
            destination_dir=Path("./markdown"),
            parallel=True
        )
    )
    asyncio.run(converter.convert_all())
```

### JavaScript / TypeScript

```
// TypeScript implementation of HTML2MD converter
interface ConversionOptions {
  sourceDir: string;
  destinationDir: string;
  outermostSelector?: string;
  ignoreSelectors?: string[];
  parallel?: boolean;
  maxWorkers?: number;
}

class HTML2MDConverter {
  private options: ConversionOptions;
  private logger: Logger;

  constructor(options: ConversionOptions) {
    this.options = {
      parallel: false,
      maxWorkers: 4,
      ...options
    };
    this.logger = new Logger('HTML2MD');
  }

  async convertFile(filePath: string): Promise {
    const html = await fs.readFile(filePath, 'utf-8');
    const $ = cheerio.load(html);

    // Apply selectors
    let content = this.options.outermostSelector
      ? $(this.options.outermostSelector)
      : $('body');

    // Remove ignored elements
    this.options.ignoreSelectors?.forEach(selector => {
      content.find(selector).remove();
    });

    // Convert to markdown
    return turndownService.turndown(content.html() || '');
  }

  async *convertDirectory(): AsyncGenerator {
    const files = await this.findHTMLFiles();

    for (const file of files) {
      try {
        const markdown = await this.convertFile(file);
        yield { file, markdown, success: true };
      } catch (error) {
        yield { file, error, success: false };
      }
    }
  }
}

// Usage example
const converter = new HTML2MDConverter({
  sourceDir: './html-docs',
  destinationDir: './markdown-docs',
  outermostSelector: 'main.content',
  ignoreSelectors: ['nav', '.sidebar', 'footer'],
  parallel: true
});

// Process files
for await (const result of converter.convertDirectory()) {
  if (result.success) {
    console.log(`✓ Converted: ${result.file}`);
  } else {
    console.error(`✗ Failed: ${result.file}`, result.error);
  }
}
```

### Bash / Shell Script

```
#!/bin/bash
# HTML2MD Batch Conversion Script
# Converts all HTML files in a directory to Markdown

set -euo pipefail

# Configuration
SOURCE_DIR="${1:-./html}"
DEST_DIR="${2:-./markdown}"
PARALLEL_JOBS="${3:-4}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# Check dependencies
check_dependencies() {
    local deps=("python3" "pip" "parallel")

    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Missing dependency: $dep"
            exit 1
        fi
    done
}

# Convert single file
convert_file() {
    local input_file="$1"
    local output_file="${input_file%.html}.md"
    output_file="${DEST_DIR}/${output_file#${SOURCE_DIR}/}"

    # Create output directory
    mkdir -p "$(dirname "$output_file")"

    # Run conversion
    if python3 tools/html2md.py \
        --input "$input_file" \
        --output "$output_file" \
        --quiet; then
        echo "✓ $input_file"
    else
        echo "✗ $input_file" >&2
        return 1
    fi
}

# Main execution
main() {
    log_info "Starting HTML to Markdown conversion"
    log_info "Source: $SOURCE_DIR"
    log_info "Destination: $DEST_DIR"

    check_dependencies

    # Find all HTML files
    mapfile -t html_files < <(find "$SOURCE_DIR" -name "*.html" -type f)

    if [[ ${#html_files[@]} -eq 0 ]]; then
        log_warning "No HTML files found in $SOURCE_DIR"
        exit 0
    fi

    log_info "Found ${#html_files[@]} HTML files"

    # Export function for parallel
    export -f convert_file log_info log_error
    export SOURCE_DIR DEST_DIR

    # Run conversions in parallel
    printf '%s\n' "${html_files[@]}" | \
        parallel -j "$PARALLEL_JOBS" convert_file

    log_info "Conversion complete!"
}

# Run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
```

### SQL

```
-- HTML2MD Conversion Tracking Database Schema
-- Track conversion history and statistics

-- Create database
CREATE DATABASE IF NOT EXISTS html2md_tracker;
USE html2md_tracker;

-- Conversion jobs table
CREATE TABLE conversion_jobs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    job_id VARCHAR(36) UNIQUE NOT NULL DEFAULT (UUID()),
    source_directory VARCHAR(500) NOT NULL,
    destination_directory VARCHAR(500) NOT NULL,
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP NULL,
    status ENUM('running', 'completed', 'failed', 'cancelled') DEFAULT 'running',
    total_files INT DEFAULT 0,
    converted_files INT DEFAULT 0,
    failed_files INT DEFAULT 0,
    options JSON,
    INDEX idx_status (status),
    INDEX idx_started (started_at)
);

-- Individual file conversions
CREATE TABLE file_conversions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    job_id VARCHAR(36) NOT NULL,
    source_path VARCHAR(1000) NOT NULL,
    destination_path VARCHAR(1000) NOT NULL,
    file_size_bytes BIGINT,
    conversion_time_ms INT,
    status ENUM('pending', 'converting', 'completed', 'failed') DEFAULT 'pending',
    error_message TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (job_id) REFERENCES conversion_jobs(job_id) ON DELETE CASCADE,
    INDEX idx_job_status (job_id, status)
);

-- Conversion statistics view
CREATE VIEW conversion_statistics AS
SELECT
    DATE(started_at) as conversion_date,
    COUNT(DISTINCT j.id) as total_jobs,
    SUM(j.converted_files) as total_converted,
    SUM(j.failed_files) as total_failed,
    AVG(TIMESTAMPDIFF(SECOND, j.started_at, j.completed_at)) as avg_job_duration_seconds,
    SUM(f.file_size_bytes) / 1048576 as total_mb_processed
FROM conversion_jobs j
LEFT JOIN file_conversions f ON j.job_id = f.job_id
WHERE j.status = 'completed'
GROUP BY DATE(started_at);

-- Example queries
-- Get recent conversion jobs
SELECT
    job_id,
    source_directory,
    status,
    CONCAT(converted_files, '/', total_files) as progress,
    TIMESTAMPDIFF(MINUTE, started_at, IFNULL(completed_at, NOW())) as duration_minutes
FROM conversion_jobs
ORDER BY started_at DESC
LIMIT 10;
```

### Go

```
package main

import (
    "context"
    "fmt"
    "io/fs"
    "log"
    "os"
    "path/filepath"
    "sync"
    "time"

    "github.com/PuerkitoBio/goquery"
    "golang.org/x/sync/errgroup"
)

// ConversionOptions holds the configuration for HTML to Markdown conversion
type ConversionOptions struct {
    SourceDir        string
    DestinationDir   string
    OutermostSelector string
    IgnoreSelectors  []string
    Parallel         bool
    MaxWorkers       int
}

// HTML2MDConverter handles the conversion process
type HTML2MDConverter struct {
    options *ConversionOptions
    logger  *log.Logger
}

// NewConverter creates a new HTML2MD converter instance
func NewConverter(opts *ConversionOptions) *HTML2MDConverter {
    if opts.MaxWorkers <= 0 {
        opts.MaxWorkers = 4
    }

    return &HTML2MDConverter{
        options: opts,
        logger:  log.New(os.Stdout, "[HTML2MD] ", log.LstdFlags),
    }
}

// ConvertFile converts a single HTML file to Markdown
func (c *HTML2MDConverter) ConvertFile(ctx context.Context, filePath string) error {
    // Read HTML file
    htmlContent, err := os.ReadFile(filePath)
    if err != nil {
        return fmt.Errorf("reading file: %w", err)
    }

    // Parse HTML
    doc, err := goquery.NewDocumentFromReader(strings.NewReader(string(htmlContent)))
    if err != nil {
        return fmt.Errorf("parsing HTML: %w", err)
    }

    // Apply selectors
    var selection *goquery.Selection
    if c.options.OutermostSelector != "" {
        selection = doc.Find(c.options.OutermostSelector)
    } else {
        selection = doc.Find("body")
    }

    // Remove ignored elements
    for _, selector := range c.options.IgnoreSelectors {
        selection.Find(selector).Remove()
    }

    // Convert to Markdown
    markdown := c.htmlToMarkdown(selection)

    // Write output file
    outputPath := c.getOutputPath(filePath)
    if err := c.writeOutput(outputPath, markdown); err != nil {
        return fmt.Errorf("writing output: %w", err)
    }

    c.logger.Printf("Converted: %s → %s", filePath, outputPath)
    return nil
}

// ConvertDirectory converts all HTML files in a directory
func (c *HTML2MDConverter) ConvertDirectory(ctx context.Context) error {
    start := time.Now()

    // Find all HTML files
    var files []string
    err := filepath.WalkDir(c.options.SourceDir, func(path string, d fs.DirEntry, err error) error {
        if err != nil {
            return err
        }

        if !d.IsDir() && filepath.Ext(path) == ".html" {
            files = append(files, path)
        }
        return nil
    })

    if err != nil {
        return fmt.Errorf("walking directory: %w", err)
    }

    c.logger.Printf("Found %d HTML files", len(files))

    // Convert files
    if c.options.Parallel {
        err = c.convertParallel(ctx, files)
    } else {
        err = c.convertSequential(ctx, files)
    }

    if err != nil {
        return err
    }

    c.logger.Printf("Conversion completed in %v", time.Since(start))
    return nil
}

func (c *HTML2MDConverter) convertParallel(ctx context.Context, files []string) error {
    g, ctx := errgroup.WithContext(ctx)

    // Create a semaphore to limit concurrent workers
    sem := make(chan struct{}, c.options.MaxWorkers)

    for _, file := range files {
        file := file // capture loop variable

        g.Go(func() error {
            select {
            case <-ctx.Done():
                return ctx.Err()
            case sem <- struct{}{}:
                defer func() { <-sem }()
                return c.ConvertFile(ctx, file)
            }
        })
    }

    return g.Wait()
}

func main() {
    converter := NewConverter(&ConversionOptions{
        SourceDir:        "./html-docs",
        DestinationDir:   "./markdown-docs",
        OutermostSelector: "article.content",
        IgnoreSelectors:  []string{"nav", ".sidebar", "footer"},
        Parallel:         true,
        MaxWorkers:       8,
    })

    ctx := context.Background()
    if err := converter.ConvertDirectory(ctx); err != nil {
        log.Fatal(err)
    }
}
```

### Rust

```
use std::fs;
use std::path::{Path, PathBuf};
use std::sync::Arc;
use tokio::fs as async_fs;
use tokio::sync::Semaphore;
use futures::stream::{self, StreamExt};
use scraper::{Html, Selector};
use anyhow::{Context, Result};

/// Options for HTML to Markdown conversion
#[derive(Debug, Clone)]
pub struct ConversionOptions {
    pub source_dir: PathBuf,
    pub destination_dir: PathBuf,
    pub outermost_selector: Option,
    pub ignore_selectors: Vec,
    pub parallel: bool,
    pub max_workers: usize,
}

/// HTML to Markdown converter
pub struct Html2MdConverter {
    options: ConversionOptions,
}

impl Html2MdConverter {
    /// Create a new converter with the given options
    pub fn new(options: ConversionOptions) -> Self {
        Self { options }
    }

    /// Convert a single HTML file to Markdown
    pub async fn convert_file(&self, file_path: &Path) -> Result {
        // Read HTML content
        let html_content = async_fs::read_to_string(file_path)
            .await
            .context("Failed to read HTML file")?;

        // Parse HTML
        let document = Html::parse_document(&html_content);

        // Apply outermost selector
        let content = if let Some(ref selector_str) = self.options.outermost_selector {
            let selector = Selector::parse(selector_str)
                .map_err(|e| anyhow::anyhow!("Invalid selector: {:?}", e))?;

            document
                .select(&selector)
                .next()
                .map(|el| el.html())
                .unwrap_or_else(|| document.html())
        } else {
            document.html()
        };

        // Remove ignored elements
        let mut processed_html = Html::parse_document(&content);
        for ignore_selector in &self.options.ignore_selectors {
            if let Ok(selector) = Selector::parse(ignore_selector) {
                // Note: In real implementation, we'd need to remove these elements
                // This is simplified for the example
            }
        }

        // Convert to Markdown (simplified)
        Ok(self.html_to_markdown(&processed_html))
    }

    /// Convert all HTML files in the source directory
    pub async fn convert_directory(&self) -> Result<()> {
        let html_files = self.find_html_files()?;
        println!("Found {} HTML files", html_files.len());

        if self.options.parallel {
            self.convert_parallel(html_files).await
        } else {
            self.convert_sequential(html_files).await
        }
    }

    /// Convert files in parallel with limited concurrency
    async fn convert_parallel(&self, files: Vec) -> Result<()> {
        let semaphore = Arc::new(Semaphore::new(self.options.max_workers));

        let tasks = stream::iter(files)
            .map(|file| {
                let sem = semaphore.clone();
                let converter = self.clone();

                async move {
                    let _permit = sem.acquire().await?;
                    converter.convert_file(&file).await
                }
            })
            .buffer_unordered(self.options.max_workers);

        tasks
            .for_each(|result| async {
                match result {
                    Ok(markdown) => println!("✓ Converted file"),
                    Err(e) => eprintln!("✗ Error: {}", e),
                }
            })
            .await;

        Ok(())
    }

    /// Find all HTML files in the source directory
    fn find_html_files(&self) -> Result> {
        let mut files = Vec::new();

        for entry in walkdir::WalkDir::new(&self.options.source_dir)
            .into_iter()
            .filter_map(|e| e.ok())
        {
            if entry.file_type().is_file() {
                if let Some(ext) = entry.path().extension() {
                    if ext == "html" || ext == "htm" {
                        files.push(entry.path().to_path_buf());
                    }
                }
            }
        }

        Ok(files)
    }
}

#[tokio::main]
async fn main() -> Result<()> {
    let options = ConversionOptions {
        source_dir: PathBuf::from("./html-docs"),
        destination_dir: PathBuf::from("./markdown-docs"),
        outermost_selector: Some("article.content".to_string()),
        ignore_selectors: vec![
            "nav".to_string(),
            ".sidebar".to_string(),
            "footer".to_string(),
        ],
        parallel: true,
        max_workers: 8,
    };

    let converter = Html2MdConverter::new(options);
    converter.convert_directory().await?;

    Ok(())
}
```

## Inline Code Tests

### Mixed Content with Inline Code

When working with HTML to Markdown conversion, you might encounter various
inline code snippets like `document.querySelector('.content')` or shell commands
like `m1f-html2md --help`. The converter should preserve these
inline code blocks.

Here's a paragraph with multiple inline code elements: The `HTML2MDConverter`
class uses `BeautifulSoup` for parsing and `markdownify` for conversion. You can
configure it with options like `--outermost-selector` and `--ignore-selectors`.

#### File Paths and Commands

- Source file: `/path/to/documents/index.html`
- Output file: `./output/index.md`
- Config file: `~/.config/html2md/settings.yaml`
- Command: `npm install -g html-to-markdown`

#### Variable Names and Functions

The function `convertFile()` takes a parameter `filePath` and returns a
`Promise<string>`. Inside, it calls `fs.readFile()` and processes the content
with `cheerio.load()`.

## Special Cases

### Code with Special Characters

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Special &amp; Characters &lt; Test &gt;</title>
    <style>
        /* CSS with special characters */
        .class[data-attr*="value"] {
            content: "Quote with \"escaped\" quotes";
            background: url('image.png');
        }
    </style>
</head>
<body>
    <h1>HTML Entities: &copy; &trade; &reg; &nbsp;</h1>
    <p>Math: 5 &lt; 10 &amp;&amp; 10 &gt; 5</p>
    <pre><code>
    // JavaScript with special characters
    const regex = /[a-z]+@[a-z]+\.[a-z]+/;
    const str = 'String with "quotes" and \'apostrophes\'';
    const obj = { "key": "value with <brackets>" };
    </code></pre>
</body>
</html>
```

### Nested Code Blocks

````
# Markdown with Code Examples

Here's how to include code in Markdown:

```python
def example():
    """This is a Python function."""
    return "Hello, World!"
````

And here's inline code: `variable = value`

## Nested Example

```html
<pre><code class="language-javascript">
// This is JavaScript inside HTML
const x = 42;
</code></pre>
```

```
### Code Without Language Specification

```

This is a code block without any language specification. It should still be
converted to a code block in Markdown. The converter should handle this
gracefully.

    Indented lines should be preserved.
    Special characters: < > & " ' should be handled correctly.

```
### Mixed Language Examples

#### Frontend (React)

```

import React, { useState, useEffect } from 'react'; import {
convertHtmlToMarkdown } from './converter';

const ConverterComponent = () => { const [html, setHtml] = useState(''); const
[markdown, setMarkdown] = useState(''); const [loading, setLoading] =
useState(false);

const handleConvert = async () => { setLoading(true); try { const result = await
convertHtmlToMarkdown(html, { outermostSelector: 'article', ignoreSelectors:
['nav', '.ads'] }); setMarkdown(result); } catch (error) {
console.error('Conversion failed:', error); } finally { setLoading(false); } };

return ( <div className="converter"> <textarea value={html} onChange={(e) =>
setHtml(e.target.value)} placeholder="Paste HTML here..." />
<button onClick={handleConvert} disabled={loading}> {loading ? 'Converting...' :
'Convert to Markdown'} </button> <pre>{markdown}</pre> </div> ); };

```

#### Backend (Node.js)

```

const express = require('express'); const { JSDOM } = require('jsdom'); const
TurndownService = require('turndown');

const app = express(); app.use(express.json());

// Initialize Turndown service const turndownService = new TurndownService({
headingStyle: 'atx', codeBlockStyle: 'fenced' });

// API endpoint for HTML to Markdown conversion app.post('/api/convert', async
(req, res) => { try { const { html, options = {} } = req.body;

    // Parse HTML with JSDOM
    const dom = new JSDOM(html);
    const document = dom.window.document;

    // Apply selectors if provided
    let content = document.body;
    if (options.outermostSelector) {
      content = document.querySelector(options.outermostSelector) || content;
    }

    // Remove ignored elements
    if (options.ignoreSelectors) {
      options.ignoreSelectors.forEach(selector => {
        content.querySelectorAll(selector).forEach(el => el.remove());
      });
    }

    // Convert to Markdown
    const markdown = turndownService.turndown(content.innerHTML);

    res.json({
      success: true,
      markdown,
      stats: {
        inputLength: html.length,
        outputLength: markdown.length
      }
    });

} catch (error) { res.status(500).json({ success: false, error: error.message
}); } });

const PORT = process.env.PORT || 3000; app.listen(PORT, () => {
console.log(`HTML2MD API running on port ${PORT}`); });

```

### Configuration Files

```

# html2md.config.yaml

# Configuration for HTML to Markdown converter

conversion:

# Source and destination directories

source_dir: ./html-docs destination_dir: ./markdown-docs

# Selector options

selectors: outermost: "main.content, article.post, div.documentation" ignore: -
"nav" - "header.site-header" - "footer.site-footer" - ".advertisement" -
".social-share" - "#comments"

# File handling

files: include\*extensions: [".html", ".htm", ".xhtml"] exclude_patterns: -
"**/node_modules/**" - "**/dist/**" - "\*\*/\_.min.html" max_file_size_mb: 10

# Processing options

processing: parallel: true max_workers: 4 encoding: utf-8 preserve_whitespace:
false

# Output options

output: add_frontmatter: true frontmatter_fields: layout: "post" generator:
"html2md" heading_offset: 0 code_block_style: "fenced"

# Logging configuration

logging: level: "info" file: "./logs/html2md.log" format: "json"

```
### JSON Configuration

```

{ "name": "html2md-converter", "version": "2.0.0", "description": "Convert HTML
files to Markdown with advanced options", "main": "index.js", "scripts": {
"start": "node index.js", "convert": "node cli.js --config html2md.config.json",
"test": "jest --coverage", "lint": "eslint src/\*_/_.js" }, "dependencies": {
"cheerio": "^1.0.0-rc.12", "turndown": "^7.1.2", "glob": "^8.0.3", "yargs":
"^17.6.2", "p-limit": "^4.0.0" }, "devDependencies": { "jest": "^29.3.1",
"eslint": "^8.30.0", "@types/node": "^18.11.18" }, "config": { "defaultOptions":
{ "parallel": true, "maxWorkers": 4, "encoding": "utf-8" } } }

```

## Edge Case Code Blocks

### Empty Code Block

### Code with Only Whitespace

```

```
### Very Long Single Line

```

const veryLongLine = "This is a very long line of code that should not wrap in
the code block but might cause horizontal scrolling in the rendered output.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua.";

```
### Unicode in Code

```

# Unicode test

emoji = "🚀 🎨 🔧 ✨" chinese = "你好世界" arabic = "مرحبا بالعالم" math =
"∑(i=1 to n) = n(n+1)/2"

def print_unicode(): print(f"Emoji: {emoji}") print(f"Chinese: {chinese}")
print(f"Arabic: {arabic}") print(f"Math: {math}") print("Special: α β γ δ ε ζ η
θ")

```




---

*Scraped from: http://localhost:8080/page/code-examples*

*Scraped at: 2025-05-23 11:55:26*

*Source URL: http://localhost:8080/page/code-examples*
```

========================================================================================
== FILE: tests/html2md/scraped_examples/scraped_complex-layout.md
== DATE: 2025-06-04 21:15:33 | SIZE: 4.36 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 756f133558570a4054c2c4447ba23e515bb6f54f96ee2cb326a67d2740cfa186
========================================================================================
## Flexbox Layouts

Testing various flexbox configurations and how they convert to Markdown.

### Flex Item 1

This is a flexible item that can grow and shrink based on available space.

- Feature 1
- Feature 2
- Feature 3

### Flex Item 2

Another flex item with different content length to test alignment.

```
const flexbox = {
  display: 'flex',
  gap: '2rem'
};
```

### Flex Item 3

Short content.

## CSS Grid Layouts

Complex grid layouts with spanning items and auto-placement.

### Large Grid Item

This item spans 2 columns and 2 rows in the grid layout.

Grid areas can contain complex content including nested elements.

#### Grid Item 2

Regular sized item.

#### Grid Item 3

`grid-template-columns`

#### Grid Item 4

Auto-placed in the grid.

#### Grid Item 5

Another auto-placed item.

## Deeply Nested Structures

Testing how deeply nested HTML elements are converted to Markdown.

### Level 1 - Outer Container

This is the outermost level of nesting.

#### Level 2 - First Nested

Content at the second level of nesting.

- Item 1
  - Subitem 1.1
  - Subitem 1.2
- Item 2

##### Level 3 - Deeply Nested

Content at the third level of nesting.

> A blockquote within nested content.
>
> > A nested blockquote for extra complexity.

###### Level 4 - Maximum Nesting

This is getting quite deep!

```
// Code within deeply nested structure
function deeplyNested() {
    return {
        level: 4,
        message: "Still readable!"
    };
}
```

#### Level 2 - Second Nested

Another branch at the second level.

| Nested | Table  |
| ------ | ------ |
| Cell 1 | Cell 2 |

## Complex Positioning

Absolute Top Left

Absolute Top Right

Absolute Bottom Center

### Relative Content

This content is within a relatively positioned container with absolutely
positioned elements.

## Multi-Column Layout

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium
doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore
veritatis et quasi architecto beatae vitae dicta sunt explicabo.

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed
quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

## Text Wrapping with Shapes

This text wraps around a circular shape using CSS shape-outside property. Lorem
ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.

After the float is cleared, text returns to normal flow.

## Masonry Layout

### Card 1

Short content

### Card 2

Medium length content that takes up more vertical space in the masonry layout.

- Point 1
- Point 2

### Card 3

Very long content that demonstrates how masonry layout handles different content
heights. This card has multiple paragraphs.

Second paragraph with more details about the masonry layout behavior.

Third paragraph to make this card even taller.

### Card 4

`masonry-auto-flow`

### Card 5

Another card with medium content.

> A quote within a masonry item.

## Overflow Containers

Testing scrollable containers with overflow content.

### Scrollable Content Area

This container has a fixed height and scrollable overflow.

1. First item in scrollable list
2. Second item in scrollable list
3. Third item in scrollable list
4. Fourth item in scrollable list
5. Fifth item in scrollable list
6. Sixth item in scrollable list
7. Seventh item in scrollable list
8. Eighth item in scrollable list
9. Ninth item in scrollable list
10. Tenth item in scrollable list

More content after the list to ensure scrolling is needed.

---

_Scraped from: http://localhost:8080/page/complex-layout_

_Scraped at: 2025-05-23 11:55:26_

_Source URL: http://localhost:8080/page/complex-layout_

========================================================================================
== FILE: tests/html2md/scraped_examples/scraped_html2md-documentation.md
== DATE: 2025-06-12 12:50:58 | SIZE: 8.75 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: a4ac1f81314b765c4e9b83eb422ac02cafbf137f57fc66864e46f34d0d1f9d59
========================================================================================
## Overview

HTML2MD is a robust Python tool that converts HTML content to Markdown format
with fine-grained control over the conversion process. It's designed for
transforming web content, documentation, and preparing content for Large
Language Models.

### 🎯 Precise Selection

Use CSS selectors to extract exactly the content you need

### 🚀 Fast Processing

Parallel processing for converting large websites quickly

### 🔧 Highly Configurable

Extensive options for customizing the conversion process

## Key Features

Content Selection & Filtering

- **CSS Selectors:** Extract specific content using `--outermost-selector`
- **Element Removal:** Remove unwanted elements with `--ignore-selectors`
- **Smart Filtering:** Automatically remove scripts, styles, and other
  non-content elements

Formatting Options

- **Heading Adjustment:** Modify heading levels with `--heading-offset`
- **YAML Frontmatter:** Add metadata to converted files
- **Code Block Detection:** Preserve syntax highlighting information
- **Link Conversion:** Smart handling of internal and external links

Performance & Scalability

- **Parallel Processing:** Convert multiple files simultaneously
- **Batch Operations:** Process entire directories recursively
- **Memory Efficient:** Stream processing for large files

## Quick Start

```
# Install html2md
pip install beautifulsoup4 markdownify chardet pyyaml

# Basic conversion
m1f-html2md --source-dir ./website --destination-dir ./markdown

# Extract main content only
m1f-html2md \
    --source-dir ./website \
    --destination-dir ./markdown \
    --outermost-selector "main" \
    --ignore-selectors "nav" "footer" ".ads"
```

## Installation

### Requirements

- Python 3.9 or newer
- pip package manager

### Dependencies

```
# Install all dependencies
pip install -r requirements.txt

# Or install individually
pip install beautifulsoup4  # HTML parsing
pip install markdownify     # HTML to Markdown conversion
pip install chardet         # Encoding detection
pip install pyyaml         # YAML frontmatter support
```

### Verify Installation

```
# Check if html2md is working
m1f-html2md --help

# Test with a simple conversion
echo '<h1>Test</h1><p>Hello World</p>' > test.html
m1f-html2md --source-dir . --destination-dir output
```

## Detailed Usage

### Command Line Options

| Option                 | Description                         | Default                         |
| ---------------------- | ----------------------------------- | ------------------------------- |
| `--source-dir`         | Directory containing HTML files     | Required                        |
| `--destination-dir`    | Output directory for Markdown files | Required                        |
| `--outermost-selector` | CSS selector for content extraction | None (full page)                |
| `--ignore-selectors`   | CSS selectors to remove             | None                            |
| `--remove-elements`    | HTML elements to remove             | script, style, iframe, noscript |
| `--include-extensions` | File extensions to process          | .html, .htm, .xhtml             |
| `--exclude-patterns`   | Patterns to exclude                 | None                            |
| `--heading-offset`     | Adjust heading levels               | 0                               |
| `--add-frontmatter`    | Add YAML frontmatter                | False                           |
| `--parallel`           | Enable parallel processing          | False                           |

### Usage Examples

#### Example 1: Documentation Site Conversion

```
m1f-html2md \
    --source-dir ./docs-site \
    --destination-dir ./markdown-docs \
    --outermost-selector "article.documentation" \
    --ignore-selectors "nav.sidebar" "div.comments" "footer" \
    --add-frontmatter \
    --frontmatter-fields "layout=docs" "category=api" \
    --heading-offset 1
```

#### Example 2: Blog Migration

```
m1f-html2md \
    --source-dir ./wordpress-export \
    --destination-dir ./blog-markdown \
    --outermost-selector "div.post-content" \
    --ignore-selectors ".social-share" ".author-bio" ".related-posts" \
    --add-frontmatter \
    --frontmatter-fields "layout=post" \
    --preserve-images \
    --parallel --max-workers 4
```

#### Example 3: Knowledge Base Extraction

```
m1f-html2md \
    --source-dir ./kb-site \
    --destination-dir ./kb-markdown \
    --outermost-selector "main#content" \
    --ignore-selectors ".edit-link" ".breadcrumb" ".toc" \
    --remove-elements "script" "style" "iframe" "form" \
    --strip-classes=False \
    --convert-code-blocks \
    --target-encoding utf-8
```

## Advanced Features

### CSS Selector Examples

#### Basic Selectors

- `main` - Select main element
- `.content` - Select by class
- `#article` - Select by ID
- `article.post` - Element with class

#### Complex Selectors

- `main > article` - Direct child
- `div.content p` - Descendant
- `h2 + p` - Adjacent sibling
- `p:not(.ad)` - Negation

#### Multiple Selectors

- `nav, .sidebar, footer` - Multiple elements
- `.ad, .popup, .modal` - Remove all
- `[data-noconvert]` - Attribute selector

### YAML Frontmatter

When `--add-frontmatter` is enabled, each file gets metadata:

```
---
title: Extracted Page Title
source_file: original-page.html
date_converted: 2024-01-15T14:30:00
date_modified: 2024-01-10T09:15:00
layout: post
category: documentation
custom_field: value
---

# Page Content Starts Here
```

### Character Encoding

HTML2MD handles various encodings intelligently:

1. **Auto-detection:** Automatically detects file encoding
2. **BOM handling:** Properly handles Byte Order Marks
3. **Conversion:** Convert to UTF-8 with `--target-encoding utf-8`
4. **Fallback:** Graceful handling of encoding errors

### Code Block Handling

The converter preserves code formatting and language hints:

#### HTML Input

```
<pre><code class="language-python">
def hello():
    print("Hello, World!")
</code></pre>
```

#### Markdown Output

````
```python
def hello():
    print("Hello, World!")
````

```



## Python API

HTML2MD can also be used programmatically:

```

from html2md import HTML2MDConverter

# Initialize converter

converter = HTML2MDConverter( outermost_selector="article",
ignore_selectors=["nav", ".sidebar"], add_frontmatter=True, heading_offset=1 )

# Convert a single file

markdown = converter.convert_file("input.html") with open("output.md", "w") as
f: f.write(markdown)

# Convert directory

converter.convert_directory( source_dir="./html_files",
destination_dir="./markdown_files", parallel=True, max_workers=4 )

# Custom processing

def custom_processor(html_content, file_path): # Custom preprocessing
html_content = html_content.replace("old_domain", "new_domain")

    # Convert
    markdown = converter.convert(html_content)

    # Custom postprocessing
    markdown = markdown.replace("TODO", "**TODO**")

    return markdown

converter.set_processor(custom_processor)

```
### Event Hooks

```

# Add event listeners

converter.on("file_start", lambda path: print(f"Processing: {path}"))
converter.on("file_complete", lambda path, size: print(f"Done: {path} ({size}
bytes)")) converter.on("error", lambda path, error: print(f"Error in {path}:
{error}"))

# Progress tracking

from tqdm import tqdm

progress_bar = None

def on_start(total_files): global progress_bar progress_bar =
tqdm(total=total_files, desc="Converting")

def on_file_complete(path, size): progress_bar.update(1)

def on_complete(): progress_bar.close()

converter.on("conversion_start", on_start) converter.on("file_complete",
on_file_complete) converter.on("conversion_complete", on_complete)

```

## Troubleshooting

#### Common Issues

No content extracted
Check your CSS selector with browser DevTools. The selector might be too specific.
Broken formatting
Some HTML might have inline styles. Use `--strip-styles` to remove them.
Missing images
Images are converted to Markdown syntax but not downloaded. Use `--download-images` if needed.
Encoding errors
Try specifying `--source-encoding` or use `--target-encoding utf-8`

### Debug Mode

```

# Enable debug output

m1f-html2md \
 --source-dir ./website \
 --destination-dir ./output \
 --verbose \
 --debug \
 --log-file conversion.log

```

## Performance Tips

### For Large Sites

- Use `--parallel` with appropriate `--max-workers`
- Process in batches with `--batch-size`
- Enable `--skip-existing` for incremental updates

### Memory Usage

- Use `--streaming` for very large files
- Set `--max-file-size` to skip huge files
- Process files individually with lower `--max-workers`

### Quality vs Speed

- Disable `--convert-code-blocks` for faster processing
- Use simple selectors instead of complex ones
- Skip `--add-frontmatter` if not needed






---

*Scraped from: http://localhost:8080/page/html2md-documentation*

*Scraped at: 2025-05-23 11:55:26*

*Source URL: http://localhost:8080/page/html2md-documentation*
```

========================================================================================
== FILE: tests/html2md/scraped_examples/scraped_m1f-documentation.md
== DATE: 2025-06-12 12:50:58 | SIZE: 8.42 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: ab53d41aff5ad9dfcbb94e6efcd70c58b282136e23a71c34edd911b3a2603936
========================================================================================
M1F - Make One File Documentation

# M1F - Make One File

A powerful tool for combining multiple files into a single, well-formatted
document

[Get Started](#quick-start) [Download](#download)

## Overview

M1F (Make One File) is a sophisticated file aggregation tool designed to combine
multiple source files into a single, well-formatted output file. It's
particularly useful for creating comprehensive documentation, preparing code for
Large Language Model (LLM) contexts, and archiving projects.

**Key Benefits:**

- Combine entire codebases into a single file for LLM analysis
- Create comprehensive documentation from multiple sources
- Archive projects with preserved structure and formatting
- Generate readable outputs with customizable separators

## Core Features

### 🔍 Smart File Discovery

Recursively scans directories with powerful glob pattern support

`*.py, **/*.js, src/**/*.{ts,tsx}`

### 🎨 Multiple Output Formats

XML, Markdown, and Plain text separators with syntax highlighting

`--separator-style XML|Markdown|Plain`

### 🚀 Performance Optimized

Parallel processing and streaming for large codebases

`--parallel --max-workers 8`

### 🔧 Highly Configurable

Extensive filtering options and customizable output

`--config config.yaml`

## Quick Start

Get up and running with M1F in seconds:

```
# Basic usage - combine all Python files
$ m1f --source-directory ./src --output-file combined.txt --include-patterns "*.py"

# Advanced usage with multiple patterns
$ m1f \
    --source-directory ./project \
    --output-file project.m1f.md \
    --include-patterns "*.py" "*.js" "*.md" \
    --exclude-patterns "*test*" "*__pycache__*" \
    --separator-style Markdown \
    --parallel
```

## Detailed Usage

### Command Line Options

| Option               | Description                 | Default             | Example              |
| -------------------- | --------------------------- | ------------------- | -------------------- |
| `--source-directory` | Directory to scan for files | Current directory   | `./src`              |
| `--output-file`      | Output file path            | combined_output.txt | `output.m1f.md`      |
| `--include-patterns` | Glob patterns to include    | None                | `"*.py" "*.js"`      |
| `--exclude-patterns` | Glob patterns to exclude    | None                | `"*test*" "*.log"`   |
| `--separator-style`  | Output format style         | XML                 | `Markdown`           |
| `--parallel`         | Enable parallel processing  | False               | `--parallel`         |
| `--max-file-size`    | Maximum file size in MB     | 10                  | `--max-file-size 50` |

### Configuration File

For complex setups, use a YAML configuration file:

```
# m1f-config.yaml
source_directory: ./src
output_file: ./output/combined.m1f.md
separator_style: Markdown

include_patterns:
  - "**/*.py"
  - "**/*.js"
  - "**/*.ts"
  - "**/*.md"
  - "**/Dockerfile"

exclude_patterns:
  - "**/__pycache__/**"
  - "**/node_modules/**"
  - "**/.git/**"
  - "**/*.test.js"
  - "**/*.spec.ts"

options:
  parallel: true
  max_workers: 4
  max_file_size: 20
  respect_gitignore: true
  include_hidden: false

metadata:
  include_timestamp: true
  include_hash: true
  hash_algorithm: sha256
```

## Real-World Examples

### Example 1: Preparing Code for LLM Analysis

Combine an entire Python project for ChatGPT or Claude analysis:

```
m1f \
    --source-directory ./my-python-project \
    --output-file project-for-llm.txt \
    --include-patterns "*.py" "*.md" "requirements.txt" "pyproject.toml" \
    --exclude-patterns "*__pycache__*" "*.pyc" ".git/*" \
    --separator-style XML \
    --metadata-include-timestamp \
    --metadata-include-hash
```

View Output Sample

```
<file path="src/main.py" hash="a1b2c3..." timestamp="2024-01-15T10:30:00">
#!/usr/bin/env python3
"""Main application entry point."""

import sys
from app import Application

def main():
    app = Application()
    return app.run(sys.argv[1:])

if __name__ == "__main__":
    sys.exit(main())
</file>

<file path="src/app.py" hash="d4e5f6..." timestamp="2024-01-15T10:25:00">
"""Application core logic."""

class Application:
    def __init__(self):
        self.config = self.load_config()

    def run(self, args):
        # Implementation details...
        pass
</file>
```

### Example 2: Creating Documentation Archive

Combine all documentation files with preserved structure:

```
m1f \
    --source-directory ./docs \
    --output-file documentation.m1f.md \
    --include-patterns "**/*.md" "**/*.rst" "**/*.txt" \
    --separator-style Markdown \
    --preserve-directory-structure \
    --add-table-of-contents
```

### Example 3: Multi-Language Project

Combine a full-stack application with multiple languages:

```
m1f \
    --config fullstack-config.yaml
```

Where `fullstack-config.yaml` contains:

```
source_directory: ./fullstack-app
output_file: ./fullstack-combined.m1f.md
separator_style: Markdown

include_patterns:
  # Backend
  - "backend/**/*.py"
  - "backend/**/*.sql"
  - "backend/**/Dockerfile"

  # Frontend
  - "frontend/**/*.js"
  - "frontend/**/*.jsx"
  - "frontend/**/*.ts"
  - "frontend/**/*.tsx"
  - "frontend/**/*.css"
  - "frontend/**/*.scss"

  # Configuration
  - "**/*.json"
  - "**/*.yaml"
  - "**/*.yml"
  - "**/.*rc"

  # Documentation
  - "**/*.md"
  - "**/README*"

exclude_patterns:
  - "**/node_modules/**"
  - "**/__pycache__/**"
  - "**/dist/**"
  - "**/build/**"
  - "**/.git/**"
  - "**/*.min.js"
  - "**/*.map"
```

## Advanced Features

### Parallel Processing

For large codebases, enable parallel processing:

```
# Parallel processing configuration
from m1f import M1F

m1f = M1F(
    parallel=True,
    max_workers=8,  # Number of CPU cores
    chunk_size=100  # Files per chunk
)

# Process large directory
m1f.process_directory(
    source_dir="/path/to/large/project",
    output_file="large_project.m1f.txt"
)
```

### Custom Separators

Define your own separator format:

```
# Custom separator function
def custom_separator(file_path, file_info):
    return f"""
╔══════════════════════════════════════════════════════════════╗
║ File: {file_path}
║ Size: {file_info['size']} bytes
║ Modified: {file_info['modified']}
╚══════════════════════════════════════════════════════════════╝
"""

m1f = M1F(separator_function=custom_separator)
```

### Streaming Mode

For extremely large outputs, use streaming mode:

```
# Stream output to avoid memory issues
m1f \
    --source-directory ./massive-project \
    --output-file output.m1f.txt \
    --streaming-mode \
    --buffer-size 8192
```

## Integration with Other Tools

### 🔄 With html2md

Convert HTML documentation to Markdown, then combine:

```
# First convert HTML to MD
m1f-html2md --source-dir ./html-docs --destination-dir ./md-docs

# Then combine with m1f
m1f --source-directory ./md-docs --output-file docs.m1f.md
```

### 🤖 With LLMs

Prepare code for AI analysis:

```
# Create context for LLM
import subprocess

# Run m1f
subprocess.run([
    "python", "tools/m1f.py",
    "--source-directory", "./src",
    "--output-file", "context.txt",
    "--max-file-size", "5"  # Keep under token limits
])

# Now use with your LLM API
with open("context.txt", "r") as f:
    context = f.read()
    # Send to OpenAI, Anthropic, etc.
```

## Troubleshooting

Common Issues and Solutions

#### Issue: Output file too large

**Solution:** Use more restrictive patterns or increase max file size limit:

`--max-file-size 100 --exclude-patterns "*.log" "*.dat"`

#### Issue: Memory errors with large projects

**Solution:** Enable streaming mode:

`--streaming-mode --buffer-size 4096`

#### Issue: Encoding errors

**Solution:** Specify encoding or skip binary files:

`--encoding utf-8 --skip-binary-files`

### Navigation

- [Overview](#overview)
- [Features](#features)
- [Quick Start](#quick-start)
- [Usage](#usage)
- [Examples](#examples)
- [Advanced](#advanced-features)
- [Integration](#integration)
- [Troubleshooting](#troubleshooting)

### Version Info

Current Version: **2.0.0**

Python: **3.9+**

### Related Tools

- [html2md](/page/html2md-documentation)
- [s1f](/page/s1f-documentation)

---

_Scraped from: http://localhost:8080/page/m1f-documentation_

_Scraped at: 2025-05-23 11:55:26_

_Source URL: http://localhost:8080/page/m1f-documentation_

========================================================================================
== FILE: tools/scrape_tool/scrapers/README.md
== DATE: 2025-06-10 14:50:13 | SIZE: 2.36 KB | TYPE: .md
== ENCODING: utf-8
== CHECKSUM_SHA256: 254c57ed9247905430ae6111a67c0025efbaaac2583338a82598b7eab32b027a
========================================================================================
# HTML2MD Web Scrapers

This module provides a pluggable architecture for web scraping backends in the
HTML2MD tool.

## Architecture

The scraper system is built around:

- `WebScraperBase`: Abstract base class defining the scraper interface
- `ScraperConfig`: Configuration dataclass for all scrapers
- `create_scraper()`: Factory function to instantiate scrapers
- `SCRAPER_REGISTRY`: Registry of available backends

## Available Scrapers

### BeautifulSoup (`beautifulsoup`, `bs4`)

- **Purpose**: General-purpose web scraping for static sites
- **Features**: Async support, encoding detection, metadata extraction
- **Best for**: Most websites without JavaScript requirements

### HTTrack (`httrack`)

- **Purpose**: Complete website mirroring
- **Features**: Professional mirroring, preserves structure
- **Best for**: Creating offline copies of entire websites
- **Requires**: System installation of HTTrack

## Usage

```python
from tools.html2md.scrapers import create_scraper, ScraperConfig

# Configure scraper
config = ScraperConfig(
    max_depth=5,
    max_pages=100,
    request_delay=0.5,
    user_agent="Mozilla/5.0 ..."
)

# Create scraper instance
scraper = create_scraper('beautifulsoup', config)

# Use scraper
async with scraper:
    # Scrape single page
    page = await scraper.scrape_url('https://example.com')

    # Scrape entire site
    async for page in scraper.scrape_site('https://example.com'):
        print(f"Scraped: {page.url}")
```

## Adding New Scrapers

To add a new scraper backend:

1. Create a new file in this directory (e.g., `playwright.py`)
2. Create a class inheriting from `WebScraperBase`
3. Implement required methods:
   - `scrape_url()`: Scrape a single URL
   - `scrape_site()`: Scrape an entire website
4. Register in `__init__.py`:

   ```python
   from .playwright import PlaywrightScraper

   SCRAPER_REGISTRY['playwright'] = PlaywrightScraper
   ```

## Configuration

All scrapers share common configuration options through `ScraperConfig`:

- `max_depth`: Maximum crawl depth
- `max_pages`: Maximum pages to scrape
- `allowed_domains`: List of allowed domains
- `exclude_patterns`: URL patterns to exclude
- `request_delay`: Delay between requests
- `concurrent_requests`: Number of concurrent requests
- `user_agent`: User agent string
- `timeout`: Request timeout in seconds

Backend-specific options can be added as needed in the scraper implementation.
