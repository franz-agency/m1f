======= README.md ======
# m1f - Make One File 🚀

**Feed your AI the whole story.** A powerful toolkit that turns messy codebases
into AI-ready context bundles.

## What's This?

Ever tried explaining your entire project to Claude or ChatGPT? Yeah, that's
what we thought. m1f makes it stupid simple to bundle your code, docs, and
whatever else into perfectly digestible chunks for LLMs.

## The Squad

### 🎯 **m1f** - The Bundler

Combines multiple files into a single, AI-friendly mega-file. Smart enough to
deduplicate content, handle any encoding, and even scan for secrets. Because
nobody wants their API keys in a ChatGPT conversation.

```bash
# Bundle your entire project (but smart about it)
m1f -s ./your-project -o context.txt --preset wordpress
```

### ✂️ **m1f-s1f** - The Splitter

Extracts files back from bundles. Perfect for when your AI assistant generates
that perfect codebase and you need it back in actual files.

```bash
# Unbundle that AI-generated masterpiece
m1f-s1f -i bundle.txt -d ./extracted
```

### 🌐 **m1f-scrape** - The Collector

Downloads entire websites for offline processing. Multiple backends for
different scenarios - from simple HTML to JavaScript-heavy SPAs.

```bash
# Grab those docs
m1f-scrape https://docs.example.com -o ./html --scraper playwright
```

### 📝 **m1f-html2md** - The Converter

Transforms HTML into clean Markdown. Analyzes structure, suggests optimal
selectors, and handles even the messiest enterprise documentation.

```bash
# Make it readable
m1f-html2md convert ./html -o ./markdown --content-selector "article"
```

### 🔢 **m1f-token-counter** - The Calculator

Counts tokens before you hit those pesky context limits. Support for all major
LLM encodings.

```bash
# Will it fit?
m1f-token-counter ./bundle.txt
```

## Real-World Magic

### Feed Documentation to Your AI Assistant

```bash
# Download → Convert → Bundle → Profit
m1f-scrape https://react.dev -o ./react-html
m1f-html2md convert ./react-html -o ./react-md
m1f -s ./react-md -o react-docs-for-claude.txt
```

### Smart WordPress Development

```bash
# Bundle your theme with intelligent filtering
m1f -s ./wp-content/themes/mytheme -o theme-context.txt \
    --preset presets/wordpress.m1f-presets.yml
```

### Auto-Bundle Your Project

```bash
# Set it and forget it
m1f-update
# Or watch for changes
./scripts/watch_and_bundle.sh
```

## Why You'll Love It

- **🧠 AI-First**: Built specifically for LLM context windows
- **⚡ Fast AF**: Async I/O, parallel processing, the works
- **🎨 Presets**: WordPress, web projects, documentation - we got you
- **🔒 Security**: Automatic secret detection (because accidents happen)
- **📦 All-in-One**: Download, convert, bundle, done

## Quick Start

### Linux/macOS (3 commands)

```bash
git clone https://github.com/franzundfriends/m1f.git
cd m1f
source ./scripts/install.sh
```

### Windows (3 commands + restart)

```powershell
git clone https://github.com/franzundfriends/m1f.git
cd m1f
.\scripts\install.ps1
# Restart PowerShell or run: . $PROFILE
```

That's it! ✨ The installer handles everything:

- ✅ Checks Python 3.10+
- ✅ Creates virtual environment
- ✅ Installs all dependencies
- ✅ Generates initial bundles
- ✅ Sets up global commands

Test it:

```bash
m1f --help
m1f-update
```

## Pro Tips

- Start small: Test with a few files before going wild
- Use presets: They're there for a reason
- Check token counts: Your LLM will thank you
- Read the docs: Seriously, they're pretty good

## Real Example: Scraping Claude's Documentation 🤖

Want to give Claude its own documentation? Here's how to scrape, process, and
bundle the Anthropic docs:

### The Full Pipeline

```bash
# 1. Download Claude's documentation
m1f-scrape https://docs.anthropic.com -o ./claude-docs-html \
  --max-pages 200 \
  --max-depth 4 \
  --request-delay 1.0

# 2. Analyze the HTML structure to find the best selectors
m1f-html2md analyze ./claude-docs-html/*.html --suggest-selectors

# 3. Convert to clean Markdown (adjust selectors based on analysis)
m1f-html2md convert ./claude-docs-html -o ./claude-docs-md \
  --content-selector "main.docs-content, article.documentation" \
  --ignore-selectors "nav" ".sidebar" ".footer" ".search-box"

# 4. Create the mega-bundle for Claude
m1f -s ./claude-docs-md -o claude-documentation.txt \
  --remove-scraped-metadata \
  --separator-style MachineReadable

# 5. Check if it fits (Claude can handle 200k tokens)
m1f-token-counter ./claude-documentation.txt
```

### Or Use the One-Liner Pro Move™

```bash
# Configure once
cat > claude-docs-config.yml << EOF
bundles:
  claude-docs:
    description: "Claude API Documentation"
    output: ".ai-context/claude-complete-docs.txt"
    sources:
      - path: "./claude-docs-md"
        include_extensions: [".md"]
    separator_style: "MachineReadable"
    priority: "high"
EOF

# Then auto-bundle whenever you need fresh docs
./scripts/auto_bundle.sh claude-docs
```

### The Result?

Now you can literally tell Claude: "Hey, here's your complete documentation" and
paste the entire context. Perfect for:

- Building Claude-powered tools with accurate API knowledge
- Creating Claude integration guides
- Having Claude help debug its own API calls
- Getting Claude to write better prompts for itself (meta!)

```bash
# Example usage in your prompt:
"Based on your documentation below, help me implement a streaming response handler:
[contents of claude-documentation.txt]"
```

### Pro tip: Keep It Fresh 🌿

Set up a weekly cron job to re-scrape and rebuild:

```bash
# Add to your crontab
0 0 * * 0 cd /path/to/m1f && ./scripts/scrape-claude-docs.sh
```

Where `scrape-claude-docs.sh` contains the full pipeline above.

## License

Apache 2.0 - Go wild, just don't blame us.

---

Built with ❤️ by [Franz Agency](https://franz.agency) for developers who talk to
robots.

======= CLAUDE.md ======
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Core Architecture

m1f is a Python toolkit for efficiently working with Large Language Models (LLMs) by managing context. Built with Python 3.10+ featuring async I/O, type hints, and modular design.

### Key Tools
- **m1f**: Combines multiple files into a single reference file with content deduplication
- **s1f**: Extracts individual files from combined files, preserving structure  
- **webscraper**: Downloads websites for offline viewing and processing
- **html2md**: HTML to Markdown converter with structure analysis
- **token_counter**: Estimates token usage for LLM context planning
- **claude_orchestrator**: Optional AI-powered automation via Claude Code

### Module Structure
Each tool follows clean architecture with separate modules:
- `config.py` / `config_loader.py`: Configuration management
- `core.py`: Main business logic
- `cli.py`: Command-line interface
- `logging.py`: Logging configuration
- `utils.py`: Utility functions
- `exceptions.py`: Custom exceptions

m1f-specific modules:
- `file_processor.py`: File processing logic
- `security_scanner.py`: Security checks
- `output_writer.py`: Output formatting
- `presets.py`: Preset system implementation
- `encoding_handler.py`: Encoding detection/conversion
- `separator_generator.py`: Generates file separators (Standard format now excludes checksums)

### Parser Architecture
s1f parsers in `tools/s1f/parsers.py`:
- `CombinedFileParser`: Orchestrates all format parsers
- Format parsers: PYMK1F, MachineReadable, Markdown, Detailed, Standard
- Code block detection: Separators inside ``` blocks are ignored

## Development Commands

### Setup
```bash
python -m venv .venv
source .venv/bin/activate  # Windows: .venv\Scripts\activate
pip install -r requirements.txt

# Install git hooks
./scripts/install-git-hooks.sh
```

### Running Tools
```bash
# Using installed commands (after running install.sh)
m1f -s ./source -o ./output.txt
m1f-s1f -i ./combined.txt -d ./extracted
m1f-scrape https://example.com -o ./html_files
m1f-html2md convert ./html ./markdown
m1f-token-counter ./file.txt

# Using Python modules directly
python -m tools.m1f -s ./source -o ./output.txt
python -m tools.s1f -i ./combined.txt -d ./extracted
python -m tools.scrape_tool https://example.com -o ./html_files
python -m tools.html2md_tool convert ./html ./markdown
m1f-token-counter ./file.txt

# Auto-bundle management
m1f auto-bundle              # Create all bundles
m1f auto-bundle --list       # List available bundles
m1f auto-bundle <name>       # Create specific bundle
m1f auto-bundle --group documentation  # Create bundles by group
```

### Testing
```bash
# Run all tests
pytest

# Run specific test categories
pytest -m unit
pytest -m integration
pytest -m "not slow"

# Run specific test files
pytest tests/m1f/test_m1f_basic.py
pytest tests/s1f/test_s1f.py

# Run a single test
pytest tests/m1f/test_m1f_basic.py::test_basic_functionality -v

# Run tests with coverage
pytest --cov=tools --cov-report=html
```

### Linting & Formatting
```bash
# Format Python code with Black
black tools/ tests/

# Check Python code style
black --check tools/ tests/

# Format Markdown files
npm run lint:md        # Auto-fix
npm run lint:md:check  # Check only
```

## Testing Architecture

- pytest-based with markers: unit, integration, slow, encoding, asyncio
- Test structure mirrors tool structure: `tests/{m1f,s1f,html2md}/`
- Test fixtures in `conftest.py` files
- 300-second default timeout (configurable per test)
- Test data in `tests/*/source/` directories

## Preset System

m1f uses hierarchical YAML presets for file-specific processing:
- Global: `~/.m1f/`
- Project: `presets/` directory
- Per-file processors: minify, strip tags, remove comments, compress whitespace

Example presets available:
- `wordpress.m1f-presets.yml`: WordPress site processing
- `web-project.m1f-presets.yml`: Web development projects
- `documentation.m1f-presets.yml`: Documentation bundles

## Auto-Bundle Configuration

The `.m1f.config.yml` file defines auto-bundle settings:
- Bundle definitions with sources, outputs, and filters
- Global exclusions and settings
- File watcher configuration
- Security check levels per file type

Bundles are automatically generated:
- On git pre-commit hook
- Via `m1f auto-bundle` command
- Through file watcher (`./scripts/watch_and_bundle.sh`)

## Recent Changes

### Separator Format Updates
- Standard separator format now shows only file path without checksum
- s1f list output no longer displays SHA256 hashes or "[Unknown]" for missing sizes
- s1f parser ignores separators inside code blocks to prevent false positives

### Key Files Modified
- `tools/m1f/separator_generator.py`: Standard format generation
- `tools/s1f/core.py`: List output formatting
- `tools/s1f/parsers.py`: Code block detection logic

## Git Workflow

Conventional commits: `<type>(<scope>): <subject>`
- - Types: feat, fix, docs, style, refactor, test, chore, perf
- 50 char subject, imperative mood
- Main branch: `main`
- Pre-commit hook runs auto-bundle to keep bundles synchronized
- No reference to Claude Code in git commits
- 

======= m1f-claude.txt ======
# m1f-claude.txt: Essential m1f Guide for Claude

This is a focused guide for Claude to help you set up and use m1f effectively in any project.

## Quick Start

m1f (Make One File) combines multiple files into a single reference file - perfect for providing context to AI assistants like Claude.

### Basic Usage

```bash
# Simple bundling
m1f -s . -o output.txt

# Bundle specific file types
m1f -s . -o code.txt --include-extensions .py .js .ts

# Use presets for smart processing
m1f -s . -o bundle.txt --preset web-project
```

## CRITICAL: Directory Context Issue

**IMPORTANT**: When m1f is installed globally, it runs from its installation directory, NOT your current directory. This causes path issues.

### Workarounds:

1. **Use Python module directly** (RECOMMENDED):
   ```bash
   m1f -s . -o output.txt
   ```

2. **Create local wrapper script** in your project:
   ```bash
   #!/bin/bash
   # Save as: m1f-local
   python /path/to/m1f/tools/m1f.py "$@"
   ```

3. **Use absolute paths**:
   ```bash
   m1f -s /absolute/path/to/project -o /absolute/path/to/output.txt
   ```

## Setting Up Auto-Bundling

Auto-bundling creates predefined bundles automatically. Essential for maintaining up-to-date context files.

### 1. Create `.m1f.config.yml` in your project root:

```yaml
# .m1f.config.yml
bundles:
  # Complete project overview
  complete:
    description: "Complete project bundle for initial AI context"
    sources:
      - path: "."
    output: "m1f/1_complete.txt"
    separator_style: "MachineReadable"
    filters:
      max_file_size: "100KB"
      exclude_extensions: [".log", ".tmp"]
    
  # Documentation only
  docs:
    description: "All documentation files"
    sources:
      - path: "."
    output: "m1f/2_docs.txt"
    separator_style: "Markdown"
    filters:
      include_extensions: [".md", ".rst", ".txt"]
      max_file_size: "50KB"
    
  # Source code focus
  code:
    description: "Source code for debugging"
    sources:
      - path: "src"
      - path: "lib"
    output: "m1f/3_code.txt"
    separator_style: "MachineReadable"
    filters:
      include_extensions: [".py", ".js", ".ts", ".jsx", ".tsx"]
      exclude_patterns:
        - "**/__pycache__/**"
        - "**/node_modules/**"
        - "**/*.test.*"
        - "**/*.spec.*"

# Global settings
global:
  exclude_patterns:
    - "**/.git/**"
    - "**/.venv/**"
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/__pycache__/**"
    - "**/*.pyc"
    - "**/.env*"
  
  security_check:
    default_level: "detect"
    file_types:
      ".env": "error"
      ".yml": "warn"
      ".json": "warn"
```

### 2. Create m1f output directory:

```bash
mkdir -p m1f
echo "m1f/" >> .gitignore  # Don't commit generated bundles
```

### 3. Generate bundles:

```bash
# List available bundles
m1f auto-bundle --list

# Generate all bundles
m1f-update

# Generate specific bundle
m1f-update code
```

## Preset Files

Presets enable file-specific processing (minification, comment removal, etc.).

### 1. Create preset file in your project:

```yaml
# myproject.m1f-presets.yml
name: "MyProject"
description: "Custom processing for my project"

# File-specific processors
file_processors:
  # Minify JavaScript
  "**/*.js":
    - minify_js
  
  # Compress CSS
  "**/*.css":
    - minify_css
    - compress_whitespace
  
  # Clean Python files
  "**/*.py":
    - remove_comments
    - strip_empty_lines
  
  # Process JSON
  "**/*.json":
    - minify_json

# Security settings
security:
  # Scan for secrets
  detect_secrets: true
  
  # Patterns to flag as errors
  error_patterns:
    - "password.*=.*['\"].*['\"]"
    - "api[_-]?key.*=.*['\"].*['\"]"
    - "secret.*=.*['\"].*['\"]"

# Encoding preferences
encoding:
  # Auto-detect encoding
  auto_detect: true
  
  # Preferred output encoding
  output_encoding: "utf-8"
  
  # Fallback encoding
  fallback_encoding: "utf-8"
```

### 2. Use the preset:

```bash
m1f -s . -o output.txt --preset myproject.m1f-presets.yml
```

## Best Practices for AI Context

### 1. Keep bundles focused and under 100KB:
```yaml
bundles:
  api:
    sources: [{ path: "api" }]
    output: "m1f/api.txt"
    filters: { max_file_size: "50KB" }
  
  frontend:
    sources: [{ path: "frontend/src" }]
    output: "m1f/frontend.txt"
    filters: { max_file_size: "50KB" }
```

### 2. Use appropriate separator styles:
- `MachineReadable`: Best for extraction/parsing
- `Markdown`: Best for human/AI reading
- `Standard`: Simple and clean
- `None`: When you just need content

### 3. Create task-specific bundles:
```yaml
bundles:
  bug_fix:
    description: "Files related to current bug"
    sources:
      - path: "src/auth"
      - path: "tests/auth"
    output: "m1f/bug_context.txt"
  
  new_feature:
    description: "Files for new feature development"
    sources:
      - path: "src/components"
      - path: "docs/api"
    output: "m1f/feature_context.txt"
```

## Common Patterns

### WordPress Project
```yaml
bundles:
  theme:
    sources: [{ path: "wp-content/themes/mytheme" }]
    output: "m1f/theme.txt"
    preset: "wordpress"
    filters:
      exclude_patterns: ["**/node_modules/**", "**/vendor/**"]
```

### Python Project
```yaml
bundles:
  core:
    sources: [{ path: "src" }]
    output: "m1f/core.txt"
    filters:
      include_extensions: [".py"]
      exclude_patterns: ["**/__pycache__/**", "**/*.pyc"]
```

### React/Vue/Angular Project
```yaml
bundles:
  components:
    sources: [{ path: "src/components" }]
    output: "m1f/components.txt"
    filters:
      include_extensions: [".jsx", ".tsx", ".vue"]
      exclude_patterns: ["**/*.test.*", "**/*.spec.*"]
```

## Troubleshooting

### "Path traversal detected" error
- m1f is running from its installation directory
- Use workarounds mentioned above

### Bundle too large
- Add `max_file_size` filter
- Split into multiple focused bundles
- Exclude test files and dependencies

### Encoding issues
- Add `--prefer-utf8` flag
- Set `encoding.auto_detect: true` in preset

### Auto-bundle not finding config
- Ensure `.m1f.config.yml` is in project root
- Check YAML syntax is valid
- Use `m1f auto-bundle --list` to verify

## Integration with Claude

### 1. Reference bundles in CLAUDE.md:
```markdown
# CLAUDE.md

## Available Context Files
- `@m1f/1_complete.txt` - Full project overview
- `@m1f/2_docs.txt` - All documentation
- `@m1f/3_code.txt` - Source code only

Use these with @ mentions for instant context.
```

### 2. Keep bundles updated:
```bash
# Add to git pre-commit hook
m1f-update --quiet

# Or use file watcher
./scripts/watch_and_bundle.sh
```

### 3. Optimize for Claude's context window:
- Keep individual bundles under 100KB
- Create topic-specific bundles
- Use clear, descriptive filenames
- Include file paths in separator style

## Quick Reference Card

```bash
# Install m1f
git clone https://github.com/FranzForstmayr/m1f.git
cd m1f && ./scripts/install.sh

# Basic commands
m1f -s . -o output.txt                    # Bundle current directory
m1f-update                                # Run auto-bundling
m1f auto-bundle --list                    # List available bundles
m1f-s1f -i bundle.txt -d extracted/       # Extract files from bundle

# With presets
m1f -s . -o out.txt --preset wordpress    # Use WordPress preset
m1f -s . -o out.txt --preset mypreset.yml # Use custom preset

# Common flags
--include-extensions .py .js              # Only specific file types
--exclude-patterns "**/test/**"           # Exclude patterns
--max-file-size 100KB                     # Limit file sizes
--separator-style Markdown                # Human-readable output
--force                                   # Overwrite existing
--minimal-output                          # Less verbose
--prefer-utf8                             # Handle encoding issues
```

Remember: Always use absolute paths or run from m1f directory when using global installation!

======= package.json ======
{
  "devDependencies": {
    "prettier": "3.5.3"
  },
  "scripts": {
    "lint:md": "prettier --write \"**/*.md\"",
    "lint:md:check": "prettier --check \"**/*.md\""
  },
  "homepage": "https://m1f.dev",
  "name": "m1f-website",
  "version": "3.2.3",
  "description": "Python Development Tools by Franz Agency",
  "main": "index.js",
  "author": "Franz Agency",
  "license": "Apache-2.0"
}

======= requirements.txt ======
aiohttp==3.12.13
application_properties==0.8.2
black==25.1.0
certifi==2025.4.26
chardet==5.2.0
charset-normalizer==3.4.2
click==8.2.0
colorama==0.4.6
Columnar==1.4.1
detect-secrets==1.5.0
idna==3.10
iniconfig==2.1.0
markdownify==0.14.1
beautifulsoup4==4.12.3
html5lib==1.1
mypy_extensions==1.1.0
packaging==25.0
pathspec==0.12.1
platformdirs==4.3.8
pluggy==1.6.0
pydantic==2.5.3
pymarkdownlnt==0.9.29
pytest==8.3.5
pytest-timeout==2.4.0
pytest-asyncio==0.25.2
PyYAML==6.0.2
regex==2024.11.6
requests==2.32.4
rich==13.7.0
tiktoken==0.9.0
tomli==2.2.1
toolz==1.0.0
typing_extensions==4.13.2
urllib3==2.5.0
wcwidth==0.2.13

# Async file operations
aiofiles==24.1.0

# Optional dependencies for additional scrapers
# Install with: pip install httpx selectolax
httpx==0.27.2
selectolax==0.3.26

# Optional: Better BeautifulSoup parser
# Install with: pip install lxml
lxml==5.3.0

# Install with: pip install scrapy
scrapy==2.12.0

# Install with: pip install playwright && playwright install
playwright==1.50.0

# Test server dependencies
flask==3.1.1
flask-cors==6.0.1

======= SETUP.md ======
# m1f Setup Guide

## Prerequisites

You only need:

- **Python 3.10+** (check with `python --version` or `python3 --version`)
- **Git** (to clone the repository)

That's all! The installer handles everything else.

## Installation (3 Commands!)

### Linux/macOS

```bash
git clone https://github.com/franz-agency/m1f.git
cd m1f
source ./scripts/install.sh
```

**Important**: Use `source` (not just `./scripts/install.sh`) to activate
commands immediately!

### Windows

```powershell
git clone https://github.com/franz-agency/m1f.git
cd m1f
.\scripts\install.ps1
```

Then either:

- Restart PowerShell (recommended), or
- Reload profile: `. $PROFILE`

## What the Installer Does

The installation script automatically:

- ✅ Checks Python version (3.10+ required)
- ✅ Creates virtual environment
- ✅ Installs all dependencies
- ✅ Generates initial m1f bundles
- ✅ Adds commands to your PATH
- ✅ Creates global command shortcuts
- ✅ Sets up symlinks (optional)

## Test Your Installation

```bash
m1f --help
m1f-update
```

## Available Commands

After installation, these commands are available globally:

- `m1f` - Main tool for combining files
- `m1f-s1f` - Split combined files back to original structure
- `m1f-html2md` - Convert HTML to Markdown
- `m1f-scrape` - Download websites for offline viewing
- `m1f-token-counter` - Count tokens in files
- `m1f-update` - Regenerate all m1f bundles
- `m1f-link` - Link m1f documentation for AI tools (Claude Code, etc.)
- `m1f-claude` - Enhance prompts with m1f knowledge for Claude
- `m1f-help` - Show help for all commands

## Uninstall

### Linux/macOS

```bash
cd /path/to/m1f
./scripts/uninstall.sh
```

### Windows

```powershell
cd C:\path\to\m1f
.\scripts\setup_m1f_aliases.ps1 -Remove
```

---

## Manual Installation (Advanced)

If you prefer to install manually or the automatic installation fails:

### 1. Prerequisites

- Python 3.10 or higher
- Git
- pip

### 2. Clone and Setup Virtual Environment

```bash
git clone https://github.com/franz-agency/m1f.git
cd m1f

# Create virtual environment
python3 -m venv .venv

# Activate virtual environment
# Linux/macOS:
source .venv/bin/activate
# Windows PowerShell:
.\.venv\Scripts\Activate.ps1
# Windows cmd:
.venv\Scripts\activate.bat

# Install dependencies
pip install -r requirements.txt
```

### 3. Generate Initial Bundles

```bash
m1f-update
```

### 4. Add to PATH

#### Linux/macOS

Add to your shell configuration file (`~/.bashrc` or `~/.zshrc`):

```bash
export PATH="/path/to/m1f/bin:$PATH"  # m1f tools
```

Then reload:

```bash
source ~/.bashrc  # or ~/.zshrc
```

#### Windows

**Option A: PowerShell Functions**

Run the setup script:

```powershell
.\scripts\setup_m1f_aliases.ps1
. $PROFILE
```

**Option B: Add to System PATH**

1. Create batch files in a directory (e.g., `C:\m1f\batch\`)
2. Add that directory to your system PATH:
   - Win + X → System → Advanced system settings
   - Environment Variables → Path → Edit → New
   - Add your batch directory path

Example batch file (`m1f.bat`):

```batch
@echo off
cd /d "C:\path\to\m1f"
call .venv\Scripts\activate.bat
m1f %*
```

Create similar batch files for:

- `m1f-s1f.bat` → `m1f-s1f %*`
- `m1f-html2md.bat` → `m1f-html2md %*`
- `m1f-scrape.bat` → `m1f-scrape %*`
- `m1f-token-counter.bat` → `m1f-token-counter %*`

## Using m1f in Other Projects

### Quick Setup for AI-Assisted Development

When using AI tools like Claude Code, Cursor, or GitHub Copilot in your project,
they need to understand how m1f works to help you effectively. The `m1f-link`
command provides this context:

```bash
cd /your/project
m1f-link
```

This creates `m1f/m1f.txt` - a symlink to the complete m1f documentation
that AI tools can read.

#### Example AI Prompts:

```bash
# Ask Claude Code to create a configuration
"Please read @m1f/m1f.txt and create a .m1f.config.yml
for my Python web project"

# Get help with specific use cases
"Based on @m1f/m1f.txt, how do I exclude all test
files but include fixture data?"

# Troubleshoot issues
"I'm getting this error: [error message]. Can you check
@m1f/m1f.txt to help me fix it?"
```

The AI will understand:

- All m1f commands and parameters
- How to create `.m1f.config.yml` files
- Preset system and file processing options
- Best practices for different project types

## Troubleshooting

### Python Version Error

Install Python 3.10+ from [python.org](https://python.org)

### PowerShell Execution Policy (Windows)

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

### Command Not Found

- Linux/macOS: Make sure you've run `source ~/.bashrc` (or `~/.zshrc`)
- Windows: Restart PowerShell or Command Prompt

### Permission Errors

- Linux/macOS: Make sure scripts are executable: `chmod +x scripts/*.sh`
- Windows: Run PowerShell as Administrator if needed

## Next Steps

- Read the
  [M1F Development Workflow](docs/01_m1f/04_m1f_development_workflow.md)
- Check out example presets in `presets/`
- Run `m1f --help` to explore options

======= wp-cli.example.yml ======
# Example configuration for WP-CLI
# Copy to `wp-cli.yml` and adjust the settings for your environment.
path: /var/www/html
url: https://example.com
user: admin

======= docs/README.md ======
# m1f Documentation

This directory contains detailed documentation for the m1f project v3.2.0.

## Contents

### Core Tools

- [m1f (Make One File)](01_m1f/00_m1f.md) - Documentation for the main tool that
  combines multiple files into a single file with content deduplication and
  async I/O
- [s1f (Split One File)](02_s1f/20_s1f.md) - Documentation for the tool that
  extracts individual files from a combined file with modern Python architecture
- [token_counter](99_misc/98_token_counter.md) - Documentation for the token
  estimation tool

### Web Scraping and HTML Conversion

- [webscraper](04_scrape/40_webscraper.md) - Download websites for offline
  viewing and processing
- [html2md Overview](03_html2md/30_html2md.md) - Comprehensive guide to the HTML
  to Markdown converter
- [html2md Guide](03_html2md/31_html2md_guide.md) - Detailed usage guide with
  examples
- [html2md Test Suite](03_html2md/33_html2md_test_suite.md) - Documentation for
  the comprehensive test suite

### Advanced Features

- [Auto Bundle Guide](01_m1f/20_auto_bundle_guide.md) - Automatic project
  bundling for AI/LLM consumption
- [Claude + m1f Workflows](01_m1f/30_claude_workflows.md) - Turn Claude into
  your personal m1f expert with smart prompt enhancement
- [Claude Code Integration](01_m1f/31_claude_code_integration.md) - Optional
  AI-powered tool automation
- [Preset System Guide](01_m1f/10_m1f_presets.md) - File-specific processing
  rules and configurations
- [Per-File-Type Settings](01_m1f/11_preset_per_file_settings.md) - Fine-grained
  control over file processing

### Development

- [Version Management](05_development/55_version_management.md) - Version
  management and release process
- [Git Hooks Setup](05_development/56_git_hooks_setup.md) - Git hooks for
  automated bundling

## Quick Navigation

### Common Workflows

- **First-time setup**: Install Python 3.10+ and requirements:
  ```bash
  python -m venv .venv
  source .venv/bin/activate  # On Windows: .venv\Scripts\activate
  pip install -r requirements.txt
  ```
- **Basic file combination**: Use
  `m1f -s ./your_project -o ./combined.txt`
- **File extraction**: Use
  `m1f-s1f -i ./combined.txt -d ./extracted_files`
- **Check token count**: Use `m1f-token-counter ./combined.txt`
- **Download website**: Use
  `m1f-scrape https://example.com -o ./html`
- **Convert HTML to Markdown**: Use
  `m1f-html2md convert ./html ./markdown`
- **Auto-bundle project**: Use `./scripts/auto_bundle.sh` or configure with
  `.m1f.config.yml`

### Key Concepts

- **Separator Styles**: Different formats for separating files in the combined
  output ([details](01_m1f/00_m1f.md#separator-styles))
- **File Filtering**: Include/exclude specific files using patterns
  ([details](01_m1f/00_m1f.md#command-line-options))
- **Security**: Scan for secrets before combining files
  ([details](01_m1f/00_m1f.md#security-check))
- **Content Selection**: Extract specific content using CSS selectors
  ([details](03_html2md/30_html2md.md#content-selection))

## Project Overview

m1f v2.0.0 is a comprehensive toolkit designed to help you work more efficiently
with Large Language Models (LLMs) by managing context. Built with modern Python
3.10+ architecture, these tools solve core challenges when working with AI
assistants.

### Key Features

- **Modern Architecture**: Complete modular rewrite with async I/O, type hints,
  and clean architecture
- **Content Deduplication**: Automatically detect and skip duplicate files based
  on SHA256 checksums
- **Performance**: Async operations and parallel processing for large projects
- **Type Safety**: Full type annotations for better IDE support and fewer
  runtime errors
- **Professional Tools**: HTTrack integration for website scraping, CSS
  selectors for content extraction

### What You Can Do

- Combine multiple project files into a single reference file with automatic
  deduplication
- Extract individual files from a combined file with preserved structure and
  metadata
- Convert entire websites to clean Markdown format with HTTrack integration
- Filter files by size, type, or custom patterns
- Detect and handle symlinks with cycle prevention
- Remove scraped metadata for clean documentation bundles
- Estimate token usage for optimal LLM context planning

======= docs/99_CHANGELOG.md ======
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to
[Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [3.2.2] - 2025-07-06

### Changed

- **Documentation**: Updated all command examples to use installed bin commands
  - Replaced `python -m tools.m1f` with `m1f`
  - Replaced `python -m tools.s1f` with `m1f-s1f`
  - Replaced `python -m tools.scrape_tool` and `python -m tools.webscraper` with `m1f-scrape`
  - Replaced `python -m tools.html2md` and `python -m tools.html2md_tool` with `m1f-html2md`
  - Replaced `python tools/token_counter.py` with `m1f-token-counter`
  - Replaced `m1f auto-bundle` with `m1f-update` where appropriate
  - Updated all documentation, scripts, and examples for consistency

### Fixed

- **Scraper Config Files**: Fixed typo in YAML configs (mf1-html2md → m1f-scrape)
- **Documentation**: Improved command consistency across all user-facing documentation

## [3.2.1] - 2025-06-07

### Fixed

- **Wrapper Scripts**: Added PYTHONPATH to all wrapper scripts to ensure proper module imports
- **Pre-commit Hook**: Updated to use python3 and properly handle virtual environments
- **Bin Scripts**: All wrapper scripts now preserve current working directory

## [3.2.0] - 2025-06-06

### Added

- **Git Hooks Integration**: Automatic bundle generation on every commit

  - Pre-commit hook that runs `m1f auto-bundle` before each commit
  - Installation script with remote download support:
    `curl -sSL https://raw.githubusercontent.com/franzundfranz/m1f/main/scripts/install-git-hooks.sh | bash`
  - Auto-detection of m1f development repository vs. installed m1f
  - Automatic staging of generated bundles in `m1f/` directory
  - Comprehensive setup guide at `docs/05_development/56_git_hooks_setup.md`

- **Bundle Directory Migration**: Moved from `.m1f/` to `m1f/` for better AI
  tool compatibility

  - AI tools like Claude Code can now access bundled files directly
  - Generated bundles are included in version control by default
  - Automatic migration of configuration paths
  - Updated `m1f-link` command to create symlinks in `m1f/` directory
  - Added `m1f/README.md` explaining auto-generated files

- **Complete Preset Parameter Support**: ALL m1f parameters can now be
  configured via presets

  - Input/Output settings: source_directory, input_file, output_file,
    input_include_files
  - Output control: add_timestamp, filename_mtime_hash, force, minimal_output,
    skip_output_file
  - Archive settings: create_archive, archive_type
  - Runtime behavior: verbose, quiet
  - CLI arguments always take precedence over preset values
  - Enables simple commands like `m1f --preset production.yml`
  - Updated template-all-settings.m1f-presets.yml with all new parameters
  - Full documentation in docs/01_m1f/12_preset_reference.md

- **Auto-Bundle Subcommand**: Integrated auto-bundle functionality directly into
  m1f

  - New `auto-bundle` subcommand for creating multiple bundles from YAML config
  - Reads `.m1f.config.yml` from project root
  - Supports creating all bundles or specific bundles by name
  - `--list` option to show available bundles with descriptions
  - `--verbose` and `--quiet` options for output control
  - `m1f-update` command provides convenient access from anywhere
  - Full compatibility with existing `.m1f.config.yml` format
  - Supports all m1f options: presets, exclude/include files, conditional
    bundles
  - Updated `watch_and_bundle.sh` to use new auto-bundle functionality

- **Simplified Installation System**: Complete installer scripts for all
  platforms

  - New `install.sh` handles entire setup process (3 commands total!)
  - New `install.ps1` for Windows with full automation
  - Automatic Python 3.10+ version checking
  - Virtual environment creation and dependency installation
  - Initial bundle generation during setup
  - Smart shell detection for immediate PATH activation
  - `uninstall.sh` for clean removal

- **PATH-based Command System**: Replaced aliases with executable wrappers

  - Created `bin/` directory with standalone executable scripts
  - Each wrapper activates venv and runs appropriate tool
  - Works consistently across all shells and platforms
  - Optional symlink creation in ~/.local/bin

- **m1f-claude Command**: Smart prompt enhancement for Claude AI

  - New `m1f-claude` command that enhances prompts with m1f knowledge
  - Automatically injects m1f documentation context into prompts
  - Interactive mode for continued conversations
  - Project structure analysis for better suggestions
  - Contextual hints based on user intent (bundling, config, WordPress, AI
    context)
  - Integration with Claude Code CLI (if installed)
  - Comprehensive workflow guide at docs/01_m1f/30_claude_workflows.md

- **Enhanced Auto-Bundle Functionality**: Improved usability and flexibility

  - Config file search now traverses from current directory up to root
  - New `--group` parameter to create bundles by group (e.g.,
    `m1f auto-bundle --group documentation`)
  - Bundle grouping support in `.m1f.config.yml` with `group: "name"` field
  - Improved error messages when config file is not found
  - Enhanced `--list` output showing bundles organized by groups
  - Comprehensive documentation in `docs/01_m1f/20_auto_bundle_guide.md`
  - Examples for server-wide bundle management and automation

- **Join Paragraphs Feature**: Markdown optimization for LLMs

  - New `JOIN_PARAGRAPHS` processing action to compress markdown
  - Intelligently joins multi-line paragraphs while preserving structure
  - Preserves code blocks, tables, lists, and other markdown elements
  - Helps maximize content in the first 200 lines that LLMs read intensively
  - Available in presets for documentation bundles

- **S1F List Command**: Display archive contents without extraction

  - New `--list` flag to show files in m1f archives
  - Displays file information including size, encoding, and type
  - No longer shows SHA256 hashes for cleaner output
  - Useful for previewing archive contents before extraction

- **Configurable UTF-8 Preference**: Made UTF-8 encoding preference for text
  files configurable

  - Added `prefer_utf8_for_text_files` option to EncodingConfig (defaults to
    True)
  - New CLI flag `--no-prefer-utf8-for-text-files` to disable UTF-8 preference
  - Configurable via preset files through `prefer_utf8_for_text_files` setting
  - Affects only text files (.md, .markdown, .txt, .rst) when encoding detection
    is ambiguous

- **Configurable Content Deduplication**: Made content deduplication optional
  - Added `enable_content_deduplication` option to OutputConfig (defaults to
    True)
  - New CLI flag `--allow-duplicate-files` to include files with identical
    content
  - Configurable via preset files through `enable_content_deduplication` setting
  - Useful when you need to preserve all files regardless of duplicate content

### Fixed

- **Security**: Comprehensive path traversal protection across all tools

  - Added path validation to prevent directory traversal attacks
  - Block paths with `../` or `..\` patterns
  - Reject absolute paths in s1f extraction
  - Validate all user-provided file paths including symlink targets
  - Allow legitimate exceptions: home directory configs (~/.m1f/), output files

- **Markdown Format**: Fixed separator and content formatting issues

  - Content now properly starts on new line after code fence in markdown format
  - Added blank line between separator and content in parallel processing mode
  - Fixed S1F markdown parser to correctly handle language hint and newline
  - Fixed closing ``` for markdown format in parallel processing

- **S1F List Output**: Simplified file information display

  - Removed SHA256 hash display from list output
  - No longer shows "[Unknown]" for missing file sizes
  - Only displays file size when available

- **Standard Separator Format**: Removed checksum from display
  - Standard format now shows only file path without SHA256
  - Simplified output for better readability
  - Parser ignores separators inside code blocks to prevent false positives

### Changed

- **Parallel File Processing**: Enhanced performance for large projects

  - Added optional `--parallel` flag for concurrent file processing
  - Implemented asyncio-based batch handling with proper thread safety
  - Added locks for thread-safe checksum operations
  - Maintained file ordering in output despite parallel processing
  - Automatic fallback to sequential processing for single files

- **Auto-bundle config file** (`.m1f.config.yml`) updated with group
  categorization

  - Documentation bundles grouped under "documentation"
  - Source code bundles grouped under "source"
  - Complete project bundle in "complete" group

- **Command Naming Standardization**: All tools now use m1f- prefix

  - `s1f` → `m1f-s1f`
  - `html2md` → `m1f-html2md`
  - `webscraper` → `m1f-scrape`
  - `token-counter` → `m1f-token-counter`
  - Prevents naming conflicts with system commands

- **Module Execution**: Fixed import errors with proper module syntax

  - All scripts now use `python -m tools.m1f` format
  - Ensures reliable imports across different environments
  - Updated all documentation examples

- **WebScraper Rate Limiting**: Conservative defaults for Cloudflare protection

  - Changed default request delay from 0.5s to 15s
  - Reduced concurrent requests from 5 to 2
  - Added bandwidth limiting (100KB/s) and connection rate limits
  - Created cloudflare.yaml config with ultra-conservative 30s delays

- **Code Quality**: Comprehensive linting and formatting
  - Applied Black formatting to all Python code
  - Applied Prettier formatting to all Markdown files
  - Added/updated license headers across all source files
  - Removed deprecated test files and debug utilities

### Security

- **Path Traversal Protection**: Comprehensive validation across all tools

  - Prevents attackers from using paths like `../../../etc/passwd`
  - Validates resolved paths against project boundaries
  - Allows legitimate exceptions for configs and output files
  - Added extensive security tests

- **Scraper Security**: Enhanced security measures
  - Enforced robots.txt compliance with caching
  - Added URL validation to prevent SSRF attacks
  - Basic JavaScript validation to block dangerous scripts
  - Sanitized command arguments in HTTrack to prevent injection

### Improved

- **HTML2MD Enhancement**: Better file path handling

  - Improved source path logic for file inputs
  - Enhanced relative path resolution for edge cases
  - Consistent output path generation with fallback mechanisms
  - Removed hardcoded Anthropic-specific navigation selectors

- **Encoding Detection**: Enhanced fallback logic

  - Default to UTF-8 if chardet fails or returns empty
  - Prefer UTF-8 over Windows-1252 for markdown files
  - Expanded encoding map for better emoji support
  - Better handling of exotic encodings

- **Async I/O Support**: Performance optimizations

  - S1F now supports optional aiofiles for async file reading
  - Better handling of deprecated asyncio methods
  - Improved concurrent operation handling

- **Testing Infrastructure**: Comprehensive test improvements
  - Reorganized test structure for better clarity
  - Added path traversal security tests
  - Fixed all test failures (100% success rate)
  - Added pytest markers for test categorization
  - Improved test documentation

### Removed

- Obsolete scripts replaced by integrated functionality:
  - `scripts/auto_bundle.py` (now `m1f auto-bundle`)
  - `scripts/auto_bundle.sh` (now `m1f auto-bundle`)
  - `scripts/auto_bundle.ps1` (now `m1f auto-bundle`)
  - `scripts/update_m1f_files.sh` (now `m1f-update`)
  - `setup_m1f_aliases.sh` (replaced by bin/ directory)
  - Deprecated test files and debug utilities (~3000 lines removed)

## [3.1.0] - 2025-06-04

### Added - html2md

- **Custom Extractor System**: Site-specific content extraction
  - Pluggable extractor architecture for optimal HTML parsing
  - Support for function-based and class-based extractors
  - Extract, preprocess, and postprocess hooks
  - Dynamic loading of Python extractor files
  - Default extractor for basic navigation removal
- **Workflow Integration**: Organized .scrapes directory structure
  - Standard directory layout: html/, md/, extractors/
  - .scrapes directory added to .gitignore
  - Supports Claude-assisted extractor development
- **CLI Enhancement**: `--extractor` option for custom extraction logic
- **API Enhancement**: Extractor parameter in Html2mdConverter constructor

### Changed - html2md

- Removed all Anthropic-specific code from core modules
- Cleaned up api.py to remove hardcoded navigation selectors
- Improved modularity with separate extractor system

### Added - m1f

- **Multiple Exclude/Include Files Support**: Enhanced file filtering
  capabilities
  - `exclude_paths_file` and `include_paths_file` now accept multiple files
  - Files are merged in order, non-existent files are gracefully skipped
  - Include files work as whitelists - only matching files are processed
  - Full backward compatibility with single file syntax
  - CLI supports multiple files: `--exclude-paths-file file1 file2 file3`
  - YAML config supports both single file and list syntax

### Changed

- Enhanced file processor to handle pattern merging from multiple sources
- Updated CLI arguments to accept multiple files with `nargs="+"`
- Improved pattern matching for exact path excludes/includes

## [3.0.1] - 2025-06-04

### Fixed

- **Configuration Parsing**: Fixed YAML syntax error in .m1f.config.yml
  - Corrected array item syntax in include_files sections
  - Removed erroneous hyphens within square bracket array notation

## [3.0.0] - 2025-06-03

### Added

- **Python-based auto_bundle.py**: Cross-platform bundling implementation
  - Pure Python alternative to shell scripts
  - Improved include-extensions handling
  - Dynamic watcher ignores based on configuration
  - Global excludes support
  - Better error handling and logging
- **Enhanced Bundling Configuration**: Advanced m1f.config.yml structure
  - Config-based directory setup
  - Refined source rules for s1f-code and all bundles
  - Improved path handling for m1f/s1f separation
- **Depth-based Sorting**: Files and directories now sorted by depth for better
  organization
- **Improved Documentation**: Comprehensive updates to m1f documentation
  - Added CLI reference and troubleshooting guides
  - Enhanced preset system documentation
  - Clarified script invocation methods
  - Added quick reference guides
- **Testing Improvements**: Enhanced asyncio handling across test suites
  - Better pytest configuration for async tests
  - Preset configuration support in scrapers
  - Fixed import and linting issues
- **License Change**: Migrated from MIT to Apache 2.0 License
  - Added NOTICE file with proper attribution
  - Updated all license references throughout codebase

### Changed

- **Refactored Web Scraping Architecture**: Separated webscraper from HTML2MD
  - Cleaner separation of concerns
  - Better modularity for each tool
  - Improved maintainability
- **Build System Enhancements**: Overhauled build configuration
  - Optimized bundling for tool segregation
  - Added quiet flag to suppress unnecessary log file creation
  - Enhanced PowerShell support with auto_bundle.ps1
- **Documentation Structure**: Reorganized docs for better navigation
  - Renamed files for improved sorting
  - Moved changelog to dedicated location
  - Updated all references to new structure

### Fixed

- **Script Issues**: Multiple fixes for auto-bundling scripts
  - Corrected include-extensions parameter handling
  - Fixed config file parsing and argument handling
  - Resolved path resolution issues
- **Test Errors**: All test suite issues resolved
  - Fixed async test handling
  - Corrected import statements
  - Resolved linting issues (Black and Markdown)
- **Configuration Issues**: Fixed various config problems
  - Corrected output paths in m1f.config.yml
  - Fixed switch handling in scripts
  - Updated autobundler configurations

### Dependencies

- Updated aiohttp to 3.10.11 for security and performance improvements
- Added new packages to support enhanced functionality

---

### Original 3.0.0 Features (from earlier development)

- **Pluggable Web Scraper Backends**: HTML2MD now supports multiple scraper
  backends for different use cases
  - **Selectolax** (httpx + selectolax): Blazing fast HTML parsing with minimal
    resource usage
  - **Scrapy**: Industrial-strength web scraping framework with middleware
    support
  - **Playwright**: Browser automation for JavaScript-heavy sites and SPAs
  - Each scraper is optimized for specific scenarios:
    - Selectolax: Maximum performance for simple HTML (20+ concurrent requests)
    - Scrapy: Complex crawling with retry logic, caching, and auto-throttle
    - Playwright: Full JavaScript execution with multiple browser support
  - CLI option `--scraper` to select backend (beautifulsoup, httrack,
    selectolax, scrapy, playwright)
  - Backend-specific configuration files in `scrapers/configs/`
  - Graceful fallback when optional dependencies are not installed

### Changed

- **HTML2MD Version**: Bumped to 3.0.0 for major feature addition
- **Scraper Architecture**: Refactored to plugin-based system with abstract base
  class
- **Documentation**: Comprehensive updates for all scraper backends with
  examples
- **CLI**: Extended to support new scraper options and configuration
- **HTTrack Integration**: Replaced Python HTTrack module with native Linux
  httrack command
  - Now uses real HTTrack command-line tool for professional-grade website
    mirroring
  - Better performance, reliability, and standards compliance
  - Requires system installation: `sudo apt-get install httrack`
  - Enhanced command-line options mapping for HTTrack features

### Documentation

- Added Web Scraper Backends Guide (`docs/html2md_scraper_backends.md`)
- Updated HTML2MD documentation with new scraper examples
- Added configuration examples for each scraper backend

## [2.1.1] - 2025-05-25

### Changed

- Small documentation update
- Improved example consistency across documentation
- Updated file paths in test fixtures
- Cleaned up outdated references

## [2.1.0] - 2025-05-25

### Added

- **Preset System**: Flexible file-specific processing rules

  - Hierarchical preset loading: global (~/.m1f/) → user → project
  - Global settings: encoding, separator style, line endings, includes/excludes
  - Extension-specific processing: HTML minification, CSS compression, comment
    stripping
  - Built-in actions: minify, strip_tags, strip_comments, compress_whitespace,
    remove_empty_lines
  - Custom processors: truncate, redact_secrets, extract_functions
  - CLI options: `--preset`, `--preset-group`, `--disable-presets`
  - Example presets: WordPress, web projects, documentation
  - **Per-file-type overrides**: Different settings for different extensions
    - `security_check`: Enable/disable security scanning per file type
    - `max_file_size`: Different size limits for CSS, JS, PHP, etc.
    - `remove_scraped_metadata`: Clean HTML2MD files selectively
    - `include_dot_paths`, `include_binary_files`: File-type specific filtering
  - **Auto-bundling with presets**: New scripts and VS Code tasks
    - `scripts/auto_bundle_preset.sh` - Preset-based intelligent bundling
    - `tasks/auto_bundle.json` - 11 VS Code tasks for automated bundling
    - Focus areas: WordPress, web projects, documentation
    - Integration with preset system for file-specific processing
  - **Test suite**: Basic preset functionality tests
    - Global settings and file filtering tests
    - File-specific action processing tests
    - Integration verification

- **Auto-bundling System**: Automatic project organization for AI/LLM
  consumption
  - `scripts/auto_bundle.sh` - Basic bundling with predefined categories
  - `scripts/auto_bundle_v2.sh` - Advanced bundling with YAML configuration
  - `.m1f.config.yml` - Customizable bundle definitions and priorities
  - `scripts/watch_and_bundle.sh` - File watcher for automatic updates
  - Bundle types: docs, src, tests, complete, and custom focus areas
- **Claude Code Integration** (optional): AI-powered tool automation

  - `tools/claude_orchestrator.py` - Natural language command processing
  - Integration with Claude Code CLI for workflow automation
  - Project-specific `.claude/settings.json` configuration
  - Example workflows and documentation

- **HTML2MD Preprocessing System**: Configurable HTML cleaning
  - `tools/html2md/analyze_html.py` - Analyze HTML for preprocessing patterns
  - `tools/html2md/preprocessors.py` - Generic preprocessing framework
  - Removed hardcoded project-specific logic
  - Support for custom preprocessing configurations per project

### Changed

- HTML2MD now uses configurable preprocessing instead of hardcoded rules
- Updated documentation structure to include new features

### Fixed

- Preset `strip_tags` action now properly strips all HTML tags when no specific
  tags are specified
- Added missing `get_file_specific_settings` method to PresetManager class

### Documentation

- Added Preset System Guide (`docs/m1f_presets.md`)
- Added Auto Bundle Guide (`docs/AUTO_BUNDLE_GUIDE.md`)
- Added Claude Code Integration Guide (`docs/CLAUDE_CODE_INTEGRATION.md`)
- Added example workflows (`examples/claude_workflows.md`)
- Updated main documentation index with new features

## [2.0.1] - 2025-05-25

### Fixed

- All test suite failures now pass (100% success rate)
  - S1F: Fixed content normalization and timestamp tolerance issues
  - M1F: Fixed encoding test with proper binary file handling
  - HTML2MD: Fixed server tests and API implementation
  - Security: Fixed warning log format detection with ANSI codes
- Documentation formatting and consistency issues

### Changed

- Applied Black formatting to all Python code
- Applied Prettier formatting to all Markdown files
- Updated all documentation to consistently use module execution syntax

### Documentation

- Updated all docs to reflect v2.0.0 architecture changes
- Added architecture sections to all tool documentation
- Modernized API examples with async/await patterns
- Updated token limits for latest LLM models

## [2.0.0] - 2025-05-25

### 🚀 Major Architectural Overhaul

This is a major release featuring complete architectural modernization of the
m1f project, bringing it to Python 3.10+ standards with significant performance
improvements and new features.

### Added

- **HTML2MD Converter**: New tool for converting HTML to Markdown with HTTrack
  integration for website scraping
  - CSS selector-based content extraction
  - Configurable crawl depth and domain restrictions
  - Metadata preservation and frontmatter generation
  - Integration with m1f for bundle creation
- **Content Deduplication**: Automatic detection and removal of duplicate file
  content based on SHA256 checksums
- **Symlink Support**: Smart symlink handling with cycle detection
- **File Size Filtering**: New `--max-file-size` parameter with unit support (B,
  KB, MB, GB, TB)
- **Metadata Removal**: New `--remove-scraped-metadata` option for cleaning
  HTML2MD scraped content
- **Colorized Output**: Beautiful console output with progress indicators
- **Async I/O**: Concurrent file operations for better performance
- **Type Hints**: Comprehensive type annotations using Python 3.10+ features
- **Test Infrastructure**: pytest-timeout for reliable test execution

### Changed

- **Complete Architecture Rewrite**:
  - m1f transformed from monolithic script to modular package
  - s1f transformed from monolithic script to modular package
  - Clean architecture with dependency injection and SOLID principles
- **Python Requirements**: Now requires Python 3.10+ (previously 3.9+)
- **Enhanced Security**: Improved security scanning and validation
- **Better Error Handling**: Custom exception hierarchies with specific error
  types
- **Improved Logging**: Structured logging with configurable levels and colors

### Fixed

- All test suite failures (205 tests now passing)
- S1F content normalization and timestamp tolerance issues
- M1F encoding tests with proper binary file support
- HTML2MD frontmatter generation and CLI integration
- Security warning log format handling
- Path resolution issues in tests
- Memory efficiency for large file handling

### Security

- Removed dangerous placeholder directory creation
- Enhanced input validation
- Better path sanitization
- Improved handling of sensitive data detection

### Breaking Changes

- Internal APIs completely reorganized (CLI remains compatible)
- Module structure changed from single files to packages
- Python 3.10+ now required (was 3.9+)
- Some internal functions renamed or relocated

---

## [1.4.0] - 2025-05-19

### Added

- WordPress content export functionality (`wp_export_md.py`)
- Support for exporting WordPress posts, pages, and custom post types
- Conversion of WordPress HTML content to clean Markdown
- Preservation of WordPress metadata (author, date, categories, tags)
- Flexible filtering options for content export

### Changed

- Improved documentation structure
- Enhanced error handling in export tools

### Fixed

- Various minor bug fixes and improvements

---

## [1.3.0] - 2025-05-18

### Added

- `--max-file-size` parameter for filtering large files
- Size unit support (B, KB, MB, GB, TB)
- Recommended 50KB limit for text file merging

### Changed

- Improved file size handling and validation
- Better error messages for size-related issues

### Fixed

- File size calculation accuracy
- Edge cases in size parsing

---

## [1.2.0] - 2025-05-17

### Added

- Symlink handling with `--include-symlinks` and `--ignore-symlinks` options
- Cycle detection for symlinks to prevent infinite loops
- `--security-check` option with configurable levels (skip, warn, fail)
- Integration with detect-secrets for sensitive data detection

### Changed

- Improved file path resolution
- Better handling of special file types

### Fixed

- Symlink recursion issues
- Security scanning false positives

---

## [1.1.0] - 2025-05-16

### Added

- Content deduplication feature
- `--filename-mtime-hash` option for tracking file changes
- Better support for various text encodings
- Custom argument parser with improved error messages

### Changed

- Optimized file reading for better performance
- Improved separator style formatting
- Enhanced logging output

### Fixed

- Encoding detection issues
- Hash generation consistency
- Memory usage for large projects

---

## [1.0.0] - 2025-05-15

### Added

- Initial release of m1f (Make One File)
- s1f (Split One File) companion tool
- Basic file combination functionality
- Multiple separator styles (XML, Markdown, Plain)
- Gitignore support
- Archive creation (ZIP, TAR)
- Token counting for LLM context estimation

### Features

- Combine multiple files into single output
- Preserve file structure and metadata
- Configurable file filtering
- Multiple output formats
- Cross-platform compatibility

======= presets/ai-context.m1f-presets.yml ======
# AI Context Generation Preset
# Optimized for creating context bundles for Claude, ChatGPT, and other LLMs

# For code review and analysis
code_review:
  description: "Code bundle for AI review and analysis"
  enabled: true
  priority: 20
  
  global_settings:
    encoding: "utf-8"
    separator_style: "MachineReadable"  # Best for AI parsing
    security_check: "warn"  # Warn but don't stop
    
    # Exclude generated and dependency files
    exclude_patterns:
      - "**/node_modules/**"
      - "**/venv/**"
      - "**/__pycache__/**"
      - "**/dist/**"
      - "**/build/**"
      - "**/.git/**"
      - "**/*.min.js"
      - "**/*.min.css"
      - "**/*.map"
    
    # Size limits for AI context windows
    max_file_size: "500KB"  # Keep individual files reasonable
    
    # Extension-specific defaults
    extensions:
      .py:
        actions:
          - strip_comments  # Remove comments but keep docstrings
          - remove_empty_lines
      .js:
        actions:
          - strip_comments
          - compress_whitespace
      .tsx:
        actions:
          - strip_comments
          - compress_whitespace
      .jsx:
        actions:
          - strip_comments
          - compress_whitespace
  
  presets:
    # Source code
    source:
      patterns:
        - "src/**/*"
        - "lib/**/*"
        - "app/**/*"
      exclude_patterns:
        - "**/*.test.*"
        - "**/*.spec.*"
        - "**/__tests__/**"
      separator_style: "MachineReadable"
      include_metadata: true
    
    # Configuration and setup
    config:
      patterns:
        - "package.json"
        - "tsconfig*.json"
        - "webpack.config.*"
        - "vite.config.*"
        - ".eslintrc*"
        - "pyproject.toml"
        - "requirements*.txt"
        - "Makefile"
        - "docker-compose*.yml"
      actions: []  # Keep configs as-is
      include_metadata: true
    
    # Documentation
    docs:
      patterns:
        - "README*"
        - "docs/**/*.md"
        - "*.md"
      actions:
        - join_paragraphs  # Compress for AI
        - remove_empty_lines
      max_lines: 500  # Limit doc length
    
    # Tests - just structure
    tests:
      patterns:
        - "**/*.test.*"
        - "**/*.spec.*"
        - "**/test_*.py"
      actions:
        - custom
      custom_processor: "extract_functions"
      max_lines: 50

# For documentation chat
docs_chat:
  description: "Documentation bundle optimized for Q&A"
  enabled: true
  priority: 15
  
  global_settings:
    encoding: "utf-8"
    separator_style: "Markdown"  # Better for chat context
    security_check: null  # No secrets in docs
    remove_scraped_metadata: true
    
    exclude_patterns:
      - "_build/**"
      - "site/**"
      - ".tox/**"
  
  presets:
    # All markdown files
    markdown:
      patterns:
        - "**/*.md"
        - "**/*.mdx"
        - "**/*.markdown"
      actions:
        - join_paragraphs
        - remove_empty_lines
      max_file_size: "1MB"
      separator_style: "Markdown"
    
    # Code examples in docs
    examples:
      patterns:
        - "**/examples/**/*"
        - "**/snippets/**/*"
      actions:
        - strip_comments
        - compress_whitespace
      max_lines: 100
    
    # API reference
    api_ref:
      patterns:
        - "**/api/**/*.md"
        - "**/reference/**/*.md"
      actions:
        - compress_whitespace
      max_file_size: "2MB"

# For debugging and problem-solving
debug_context:
  description: "Include everything relevant for debugging"
  enabled: false  # Enable with --preset-group debug_context
  priority: 30
  
  global_settings:
    encoding: "utf-8"
    separator_style: "Detailed"  # Maximum detail
    security_check: "warn"
    
    # Include more for debugging
    include_dot_paths: true  # Include .env, .config, etc
    max_file_size: "10MB"   # Allow larger files
    
    # Less strict excludes
    exclude_patterns:
      - "**/node_modules/**"
      - "**/.git/objects/**"
      - "**/*.log"
  
  presets:
    # Everything in the current directory
    all_files:
      patterns:
        - "**/*"
      actions: []  # No processing - keep original
      include_metadata: true
      separator_style: "Detailed"
    
    # Logs and debug output
    logs:
      patterns:
        - "**/*.log"
        - "**/debug/**/*"
        - "**/logs/**/*"
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 10000  # Last 10KB of logs
      max_lines: 500

# Usage examples:
# m1f -s . -o ai-context.txt --preset ai-context.m1f-presets.yml
# m1f -s ./docs -o docs-qa.txt --preset ai-context.m1f-presets.yml --preset-group docs_chat
# m1f -s . -o debug.txt --preset ai-context.m1f-presets.yml --preset-group debug_context

======= presets/docs-bundle.m1f-presets.yml ======
# Documentation bundle preset group
# Claude prefers valid markdown. However, there are LLMs that only read the first 200 lines of a file and then
# decide whether to continue. This means you need to fit a lot of information into those first 200 lines.
docs_bundle:
  name: "Documentation Bundle"
  description: "Optimizes markdown files by joining paragraphs into single lines for better LLM processing"
  priority: 10
  enabled: true
  
  # Global settings for documentation bundles
  global_settings:
    encoding: "utf-8"
    separator_style: "Standard"
    security_check: null  # Docs rarely have secrets
    remove_scraped_metadata: true  # Clean up scraped docs
    
    # Exclude build outputs
    exclude_patterns:
      - "_build/**"
      - "build/**"
      - "site/**"
      - "public/**"
  
  presets:
    markdown_processor:
      patterns: 
        - "**/*.md"
        - "**/*.markdown"
        - "**/README*"
      actions:
        - "join_paragraphs"  # Compress paragraphs to single lines
        - "remove_empty_lines"
      separator_style: "Standard"
      max_file_size: "2MB"

======= presets/documentation.m1f-presets.yml ======
# Documentation Project Preset Configuration for m1f
# Optimized for documentation and knowledge base projects

documentation:
  description: "Documentation project processing"
  enabled: true
  priority: 20  # Higher priority for documentation-focused projects
  
  # Global settings for documentation projects
  global_settings:
    encoding: "utf-8"
    separator_style: "Standard"
    security_check: null  # Documentation rarely has secrets
    
    # Documentation-specific excludes
    exclude_patterns:
      - "_build/**"
      - "build/**"
      - ".tox/**"
      - "htmlcov/**"
      - "site/**"  # MkDocs build output
      - "public/**"  # Hugo/Jekyll output
      - "*.pyc"
      - "__pycache__/**"
    
    # Allow larger documentation files
    max_file_size: "5MB"
    
    # Keep all metadata by default
    remove_scraped_metadata: false
  
  presets:
    # Markdown files - main content
    markdown:
      extensions: [".md", ".mdx", ".markdown"]
      actions:
        - remove_empty_lines
      separator_style: "Standard"
      include_metadata: true
    
    # reStructuredText
    rst:
      extensions: [".rst", ".rest"]
      actions:
        - remove_empty_lines
      separator_style: "Standard"
    
    # Code examples in docs
    code_examples:
      patterns:
        - "examples/**/*"
        - "snippets/**/*"
        - "code/**/*"
      actions:
        - strip_comments
        - compress_whitespace
      # Keep examples concise but useful
      max_lines: 100  # Show more of examples
      separator_style: "Standard"
      max_file_size: "200KB"
    
    # API documentation
    api_docs:
      patterns:
        - "api/**/*.md"
        - "reference/**/*.md"
        - "openapi*.yml"
        - "swagger*.json"
      actions:
        - compress_whitespace
      separator_style: "Standard"
      max_file_size: "1MB"  # API docs can be large
    
    # Jupyter notebooks
    notebooks:
      extensions: [".ipynb"]
      actions:
        - custom
      custom_processor: "extract_markdown_cells"
      separator_style: "Markdown"
    
    # HTML documentation
    html_docs:
      extensions: [".html"]
      patterns:
        - "build/html/**/*.html"
        - "_build/**/*.html"
      actions:
        - strip_tags
        - minify
      strip_tags:
        - "script"
        - "style"
        - "nav"
        - "header"
        - "footer"
      preserve_tags:
        - "main"
        - "article"
        - "pre"
        - "code"
    
    # Images in documentation
    images:
      extensions: [".png", ".jpg", ".jpeg", ".gif", ".svg"]
      patterns:
        - "images/**/*"
        - "assets/**/*"
        - "_static/**/*"
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 200  # Show path and alt text if available
      include_metadata: true
    
    # Configuration files
    config:
      patterns:
        - "mkdocs.yml"
        - "docusaurus.config.js"
        - "conf.py"  # Sphinx
        - "_config.yml"  # Jekyll
        - "book.toml"  # mdBook
      actions: []
      include_metadata: true
    
    default:
      actions: []
      include_metadata: true
      separator_style: "Standard"

# Technical writing specific
technical_writing:
  description: "Technical documentation with special formatting"
  enabled: false  # Enable when needed
  priority: 15
  
  global_settings:
    encoding: "utf-8"
    separator_style: "Standard"
    max_file_size: "10MB"  # LaTeX files can be large
  
  presets:
    # AsciiDoc files
    asciidoc:
      extensions: [".adoc", ".asciidoc", ".asc"]
      actions:
        - remove_empty_lines
      separator_style: "Standard"
    
    # LaTeX documents
    latex:
      extensions: [".tex", ".latex"]
      actions:
        - strip_comments
        - compress_whitespace
      separator_style: "Standard"
    
    # Diagrams as code
    diagrams:
      extensions: [".puml", ".plantuml", ".mermaid", ".dot"]
      actions:
        - strip_comments
      separator_style: "Standard"
      
    default:
      actions: []
      include_metadata: true

======= presets/example-globals.m1f-presets.yml ======
# Example preset with global settings
# Shows how global defaults can be overridden locally

web_project:
  description: "Web project with global HTML processing"
  priority: 10
  
  # Global settings that apply to all files
  global_settings:
    # General settings
    encoding: "utf-8"
    separator_style: "Detailed"
    line_ending: "lf"
    
    # Global include/exclude patterns
    exclude_patterns:
      - "*.min.js"
      - "*.min.css"
      - "*.map"
    exclude_extensions:
      - ".log"
      - ".tmp"
      - ".cache"
    
    # File filtering options
    include_dot_paths: false        # Include hidden files/directories
    include_binary_files: false     # Include binary files
    include_symlinks: false         # Follow symbolic links
    no_default_excludes: false      # Disable default exclusions (node_modules, etc)
    max_file_size: "10MB"          # Skip files larger than this
    # Use multiple exclude files - they are merged
    exclude_paths_file:
      - ".gitignore"
      - ".m1fignore"
    
    # Processing options
    remove_scraped_metadata: true   # Remove HTML2MD metadata
    abort_on_encoding_error: false  # Continue on encoding errors
    
    # Security options
    security_check: "warn"          # Check for secrets: abort, skip, warn
    
    # Extension-specific defaults
    extensions:
      # All HTML files get these settings by default
      .html:
        actions:
          - strip_tags
          - minify
        strip_tags:
          - "script"
          - "style"
          - "meta"
          - "link"
        preserve_tags:
          - "main"
          - "article"
      
      # All CSS files get minified by default
      .css:
        actions:
          - minify
          - strip_comments
      
      # All JS files get comments stripped by default
      .js:
        actions:
          - strip_comments
          - compress_whitespace
  
  presets:
    # Documentation HTML - override global settings
    docs:
      patterns:
        - "docs/**/*.html"
        - "documentation/**/*.html"
      # Override global - don't strip any tags from docs
      strip_tags: []
      actions:
        - compress_whitespace  # Only compress, no tag stripping
    
    # Main site HTML - use global defaults
    site:
      patterns:
        - "public/**/*.html"
        - "dist/**/*.html"
      # Inherits global HTML settings (strip_tags, minify)
    
    # Development JS - override global
    dev_scripts:
      patterns:
        - "src/**/*.js"
        - "dev/**/*.js"
      actions: []  # No processing for dev files
      
    # Vendor CSS - keep as-is
    vendor_styles:
      patterns:
        - "vendor/**/*.css"
        - "node_modules/**/*.css"
      actions: []  # Override global - no processing
    
    # Default for other files
    default:
      actions:
        - remove_empty_lines

# Another group showing m1f project exception
m1f_project:
  description: "Special rules for m1f project itself"
  priority: 20  # Higher priority than web_project
  
  global_settings:
    # Override encoding for this project
    encoding: "utf-8"
    
    extensions:
      .html:
        # For m1f project, don't strip tags from HTML
        actions:
          - compress_whitespace
  
  presets:
    # Test HTML files need full content
    test_html:
      patterns:
        - "tests/**/*.html"
      actions: []  # No processing at all
      
    # Example HTML files
    examples:
      patterns:
        - "examples/**/*.html"
      # Uses global (only compress_whitespace)

======= presets/example-use-cases.m1f-presets.yml ======
# Example Use Cases for m1f Presets
# This file demonstrates the specific use cases mentioned

# Use Case 1: Different security settings per file type
# "I want to disable security_check for all *.md files, but keep it for PHP files"
security_per_type:
  description: "Different security settings for different file types"
  priority: 10
  
  global_settings:
    # Default security setting for all files
    security_check: "abort"  # Strict by default
    
    # Per-extension overrides
    extensions:
      # Disable security check for documentation
      .md:
        security_check: null  # Disabled for markdown
      .txt:
        security_check: null  # Disabled for text files
      .rst:
        security_check: null  # Disabled for reStructuredText
        
      # Keep strict security for code files
      .php:
        security_check: "abort"  # Very strict for PHP
      .js:
        security_check: "warn"   # Warning only for JavaScript
      .py:
        security_check: "abort"  # Strict for Python
      
      # Special handling for config files
      .env:
        security_check: "abort"  # Always check .env files
      .json:
        security_check: "warn"   # Warn for JSON configs
      .yml:
        security_check: "warn"   # Warn for YAML configs

# Use Case 2: Different size limits per file type
# "I want to exclude all CSS files over 50KB, but include PHP files that are larger"
size_limits_per_type:
  description: "Different file size limits for different file types"
  priority: 10
  
  global_settings:
    # Default size limit
    max_file_size: "1MB"
    
    # Per-extension size limits
    extensions:
      # Strict limits for frontend assets
      .css:
        max_file_size: "50KB"   # Exclude CSS files over 50KB
        actions: [minify]       # Also minify them
      .js:
        max_file_size: "100KB"  # 100KB limit for JS
        actions: [strip_comments, compress_whitespace]
      
      # More lenient for backend code
      .php:
        max_file_size: "5MB"    # Allow larger PHP files
        actions: [strip_comments]
      .py:
        max_file_size: "2MB"    # Python files up to 2MB
      
      # Very strict for certain files
      .log:
        max_file_size: "100KB"  # Small log files only
        actions: [custom]
        custom_processor: "truncate"
        processor_args:
          max_chars: 5000
      
      # Large data files
      .sql:
        max_file_size: "10MB"   # Allow large SQL dumps
        max_lines: 1000         # But truncate to 1000 lines

# Combined example: Full project configuration
web_project_complete:
  description: "Complete web project with mixed requirements"
  priority: 15
  
  global_settings:
    # General settings
    encoding: "utf-8"
    separator_style: "Detailed"
    security_check: "warn"  # Default: warn
    max_file_size: "2MB"    # Default: 2MB
    
    # Global excludes
    exclude_patterns:
      - "*.min.js"
      - "*.min.css"
      - "vendor/**"
      - "node_modules/**"
    
    # Extension-specific rules
    extensions:
      # Documentation - no security check, clean metadata
      .md:
        security_check: null
        remove_scraped_metadata: true
        max_file_size: "500KB"
        actions: [remove_empty_lines]
      
      # Frontend assets - strict size limits
      .css:
        max_file_size: "50KB"
        security_check: "skip"
        actions: [minify, strip_comments]
      .js:
        max_file_size: "100KB"
        security_check: "warn"
        actions: [strip_comments, compress_whitespace]
      
      # Backend code - larger files allowed, strict security
      .php:
        max_file_size: "5MB"
        security_check: "abort"
        actions: [strip_comments, remove_empty_lines]
      
      # Config files - strict security, moderate size
      .env:
        max_file_size: "10KB"
        security_check: "abort"
        include_dot_paths: true  # Include .env files
      .json:
        max_file_size: "1MB"
        security_check: "warn"
        actions: [compress_whitespace]
      
      # Binary/data files
      .sql:
        max_file_size: "10MB"
        security_check: null  # No point checking SQL
        max_lines: 2000
      .csv:
        max_file_size: "5MB"
        security_check: null
        max_lines: 1000
  
  presets:
    # Override for test files - more lenient
    test_files:
      patterns:
        - "test/**/*"
        - "tests/**/*"
        - "*.test.*"
        - "*.spec.*"
      security_check: null  # No security check for tests
      max_file_size: "10MB"  # Allow larger test files
    
    # Override for production builds - stricter
    production:
      patterns:
        - "dist/**/*"
        - "build/**/*"
        - "public/**/*"
      actions: [minify, strip_comments, compress_whitespace]
      max_file_size: "200KB"  # Strict for production
      security_check: "abort"
    
    # Third-party code - skip most processing
    vendor:
      patterns:
        - "vendor/**/*"
        - "node_modules/**/*"
        - "bower_components/**/*"
      actions: []  # No processing
      max_file_size: "50KB"  # Only include small vendor files
      security_check: null  # Don't check vendor code

# v3.2 feature example: Control deduplication and encoding
v3_2_features:
  description: "Demonstrating v3.2 features"
  priority: 20
  
  global_settings:
    # v3.2: Control content deduplication
    enable_content_deduplication: false  # Include duplicate files
    
    # v3.2: Control UTF-8 preference
    prefer_utf8_for_text_files: false  # Use detected encoding
    
    
    # v3.2: Enhanced security options
    security_check: "error"  # Strictest mode
  
  presets:
    # Legacy encoding files
    legacy_files:
      patterns:
        - "legacy/**/*.txt"
        - "legacy/**/*.md"
      # Will use windows-1252 if detected, not force UTF-8
      prefer_utf8_for_text_files: false
    
    # Test files that might have duplicates
    test_files:
      patterns:
        - "test/**/*"
        - "tests/**/*"
      # Allow duplicate test fixtures
      enable_content_deduplication: false

# Usage examples:
# m1f -s . -o bundle.txt --preset example-use-cases.m1f-presets.yml --preset-group security_per_type
# m1f -s . -o bundle.txt --preset example-use-cases.m1f-presets.yml --preset-group size_limits_per_type
# m1f -s . -o bundle.txt --preset example-use-cases.m1f-presets.yml --preset-group web_project_complete
# m1f -s . -o bundle.txt --preset example-use-cases.m1f-presets.yml --preset-group v3_2_features

======= presets/template-all-settings.m1f-presets.yml ======
# Complete m1f Preset Template
# This file contains ALL available preset settings with explanations
# Copy and modify this template for your own projects

# Each preset file can contain multiple preset groups
# Groups are processed by priority (higher numbers first)

# Group name - can be any valid YAML key
example_group_name:
  # Group description (optional)
  description: "Comprehensive example showing all available settings"
  
  # Whether this group is enabled (default: true)
  enabled: true
  
  # Priority for this group (higher = processed first)
  # When multiple groups match a file, higher priority wins
  priority: 10
  
  # Base path for relative patterns (optional)
  # All patterns in this group will be relative to this path
  base_path: "src"
  
  # Global settings that apply to all files in this group
  global_settings:
    # === ENCODING AND FORMATTING ===
    
    # Target character encoding for all files
    # Options: utf-8, utf-16, utf-16-le, utf-16-be, ascii, latin-1, cp1252
    encoding: "utf-8"
    
    # Separator style between files in output
    # Options: Standard, Detailed, Markdown, MachineReadable, None
    separator_style: "Detailed"
    
    # Line ending style for generated content
    # Options: lf, crlf
    line_ending: "lf"
    
    # === INPUT/OUTPUT SETTINGS ===
    
    # Source directory path (overrides CLI -s/--source-directory)
    # source_directory: "/path/to/source"
    
    # Input file path (overrides CLI -i/--input-file)
    # input_file: "/path/to/input-list.txt"
    
    # Output file path (overrides CLI -o/--output-file)
    # output_file: "/path/to/output.txt"
    
    # Intro files to include at beginning (single file or list)
    # Single file:
    # input_include_files: "README.md"
    # Multiple files:
    # input_include_files:
    #   - "README.md"
    #   - "intro.txt"
    
    # === OUTPUT CONTROL ===
    
    # Add timestamp to output filename (default: false)
    add_timestamp: false
    
    # Add hash of file modification times to filename (default: false)
    filename_mtime_hash: false
    
    # Force overwrite existing output file (default: false)
    force: false
    
    # Only create main output file, skip auxiliary files (default: false)
    minimal_output: false
    
    # Skip creating main output file (default: false)
    skip_output_file: false
    
    # === ARCHIVE SETTINGS ===
    
    # Create backup archive of processed files (default: false)
    create_archive: false
    
    # Archive format when create_archive is true
    # Options: zip, tar.gz
    archive_type: "zip"
    
    # === RUNTIME BEHAVIOR ===
    
    # Enable verbose output (default: false)
    verbose: false
    
    # Suppress all output (default: false)
    quiet: false
    
    # === INCLUDE/EXCLUDE PATTERNS ===
    
    # Patterns to include (gitignore-style patterns)
    include_patterns:
      - "src/**/*.js"
      - "lib/**/*.py"
      - "!src/vendor/**"  # Exclude even if matched above
    
    # Patterns to exclude (gitignore-style patterns)
    exclude_patterns:
      - "*.min.js"
      - "*.map"
      - "build/"
      - "dist/"
      - "**/*.log"
    
    # File extensions to include (with or without dot)
    include_extensions:
      - ".py"
      - ".js"
      - ".jsx"
      - ".ts"
      - ".tsx"
      - ".md"
    
    # File extensions to exclude (with or without dot)
    exclude_extensions:
      - ".log"
      - ".tmp"
      - ".cache"
      - ".bak"
      - ".swp"
    
    # === FILE FILTERING OPTIONS ===
    
    # Include files/directories starting with dot (default: false)
    include_dot_paths: false
    
    # Include binary files (default: false)
    include_binary_files: false
    
    # Follow symbolic links (default: false)
    # WARNING: Be careful of symlink cycles!
    include_symlinks: false
    
    # Disable default exclusions like node_modules, .git, etc (default: false)
    no_default_excludes: false
    
    # v3.2 features
    enable_content_deduplication: true  # Deduplicate files by content
    prefer_utf8_for_text_files: true    # Prefer UTF-8 for .md, .txt files
    
    # Maximum file size to include
    # Supports: B, KB, MB, GB, TB (e.g., "50KB", "10MB", "1.5GB")
    max_file_size: "10MB"
    
    # Path(s) to file(s) containing additional exclude patterns
    # Can be a .gitignore file or custom exclude file
    # Single file:
    exclude_paths_file: ".gitignore"
    # Multiple files (merged in order):
    # exclude_paths_file:
    #   - ".gitignore"
    #   - ".m1fignore"
    #   - "exclude-patterns.txt"
    
    # Path(s) to file(s) containing include patterns
    # Only files matching these patterns will be included
    # Single file:
    # include_paths_file: "include-patterns.txt"
    # Multiple files (merged in order):
    # include_paths_file:
    #   - ".m1f-include"
    #   - "include-patterns.txt"
    
    # === PROCESSING OPTIONS ===
    
    # Remove scraped metadata from HTML2MD files (default: false)
    # Removes URL, timestamp, source info from end of markdown files
    remove_scraped_metadata: true
    
    # Abort processing if encoding conversion fails (default: false)
    # If false, problematic characters are replaced with placeholders
    abort_on_encoding_error: false
    
    # === SECURITY OPTIONS ===
    
    # Scan files for secrets before including
    # Options: abort (stop processing), skip (skip file), warn (include with warning), null (disable)
    security_check: "warn"
    
    # === EXTENSION-SPECIFIC DEFAULTS ===
    # Define default processing for specific file extensions
    extensions:
      # HTML files
      .html:
        actions:
          - strip_tags      # Remove HTML tags
          - minify         # Remove unnecessary whitespace
          - compress_whitespace
        strip_tags:
          - "script"       # Remove script tags
          - "style"        # Remove style tags
          - "meta"
          - "link"
        preserve_tags:
          - "pre"          # Keep pre tags
          - "code"         # Keep code tags
        # File-specific overrides
        max_file_size: "500KB"  # HTML-specific size limit
        security_check: "warn"  # Less strict for HTML
      
      # Markdown files
      .md:
        actions:
          - remove_empty_lines
        separator_style: "Markdown"  # Override separator for markdown
        security_check: null  # Disable security check for docs
        remove_scraped_metadata: true  # Clean scraped content
      
      # CSS files
      .css:
        actions:
          - minify
          - strip_comments
      
      # JavaScript files
      .js:
        actions:
          - strip_comments
          - compress_whitespace
      
      # Python files
      .py:
        actions:
          - strip_comments    # Removes # comments, preserves docstrings
          - remove_empty_lines
      
      # JSON files
      .json:
        actions:
          - compress_whitespace
      
      # Log files
      .log:
        actions:
          - custom
        custom_processor: "truncate"
        processor_args:
          max_chars: 5000
  
  # Individual file presets (matched by pattern or extension)
  presets:
    # Preset name (for identification)
    documentation:
      # File extensions this preset applies to
      extensions: [".md", ".rst", ".txt"]
      
      # Glob patterns this preset applies to
      patterns:
        - "docs/**/*"
        - "README*"
        - "*.md"
      
      # Processing actions to apply (in order)
      actions:
        - remove_empty_lines
        - compress_whitespace
        - join_paragraphs  # v3.2: Compress paragraphs for LLMs
      
      # Override separator style for these files
      separator_style: "Markdown"
      
      # Include file metadata in output
      include_metadata: true
      
      # Maximum lines to include (truncate after this)
      max_lines: 1000
      
      # File-specific overrides
      security_check: null  # No security check for docs
      remove_scraped_metadata: true
    
    # Configuration files
    config_files:
      patterns:
        - "*.json"
        - "*.yml"
        - "*.yaml"
        - "*.toml"
        - "*.ini"
        - ".env*"
      actions:
        - custom
      custom_processor: "redact_secrets"
      processor_args:
        patterns:
          # Regex patterns to find and redact
          - "(?i)(api[_-]?key|secret|password|token)\\s*[:=]\\s*[\"']?[\\w-]+[\"']?"
          - "(?i)bearer\\s+[\\w-]+"
    
    # Source code
    source_code:
      extensions: [".py", ".js", ".jsx", ".ts", ".tsx", ".java", ".c", ".cpp"]
      actions:
        - strip_comments
        - remove_empty_lines
      include_metadata: true
    
    # Minified files - skip processing
    minified:
      patterns:
        - "*.min.js"
        - "*.min.css"
      actions: []  # Empty list = no processing
      include_metadata: false
    
    # Large data files
    data_files:
      extensions: [".sql", ".csv", ".xml"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 10000
      max_lines: 500
    
    # Binary files that somehow got included
    binary_fallback:
      extensions: [".png", ".jpg", ".gif", ".pdf", ".zip"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 100  # Just show file info
    
    # Default preset for unmatched files
    default:
      actions:
        - remove_empty_lines
      include_metadata: true
      separator_style: "Standard"

# Second group example - Production settings
production:
  description: "Production build settings - aggressive optimization"
  enabled: false  # Enable with --preset-group production
  priority: 20    # Higher priority than example_group_name
  
  global_settings:
    # Override encoding for production
    encoding: "utf-8"
    separator_style: "MachineReadable"
    
    # Exclude all development files
    exclude_patterns:
      - "test/**"
      - "tests/**"
      - "spec/**"
      - "*.test.*"
      - "*.spec.*"
      - "__tests__/**"
      - "node_modules/**"
      - ".git/**"
    
    # Strict file size limits
    max_file_size: "1MB"
    
    # Security settings
    security_check: "abort"  # Strict for production
    abort_on_encoding_error: true
  
  presets:
    # Aggressive minification for all web assets
    web_assets:
      extensions: [".html", ".css", ".js"]
      actions:
        - minify
        - strip_tags
        - strip_comments
        - compress_whitespace
      strip_tags: ["script", "style", "meta", "link", "comment"]

# Third group example - Development settings
development:
  description: "Development settings - preserve readability"
  enabled: false  # Enable with --preset-group development
  priority: 15
  
  global_settings:
    # Keep everything readable
    separator_style: "Detailed"
    
    # Include test files
    include_patterns:
      - "test/**"
      - "tests/**"
      - "*.test.*"
      - "*.spec.*"
    
    # Include hidden files for development
    include_dot_paths: true
    
    # More lenient size limits
    max_file_size: "50MB"
    
    # Security as warning only
    security_check: "warn"
  
  presets:
    # Keep source code readable
    source:
      extensions: [".py", ".js", ".jsx", ".ts", ".tsx"]
      actions: []  # No processing - keep as-is
      include_metadata: true

# Available Processing Actions:
# - minify: Remove unnecessary whitespace (HTML, CSS, JS)
# - strip_tags: Remove specified HTML tags
# - strip_comments: Remove comments based on file type
# - compress_whitespace: Normalize whitespace
# - remove_empty_lines: Remove all empty lines
# - custom: Apply custom processor

# Built-in Custom Processors:
# - truncate: Limit content to max_chars
# - redact_secrets: Remove sensitive information
# - extract_functions: Extract only function definitions (Python)

# Usage Examples:
# m1f -s . -o bundle.txt --preset this-file.yml
# m1f -s . -o prod.txt --preset this-file.yml --preset-group production
# m1f -s . -o dev.txt --preset this-file.yml --preset-group development

======= presets/web-project.m1f-presets.yml ======
# Web Project Preset Configuration for m1f
# General web development project processing rules

frontend:
  description: "Frontend web project processing"
  enabled: true
  priority: 10
  
  # Global settings for frontend projects
  global_settings:
    encoding: "utf-8"
    separator_style: "Standard"
    security_check: "warn"
    
    # Common frontend excludes
    exclude_patterns:
      - "node_modules/**"
      - "dist/**"
      - "build/**"
      - ".next/**"
      - ".nuxt/**"
      - "coverage/**"
      - "*.log"
      - ".cache/**"
      - ".parcel-cache/**"
    
    # Default size limits for frontend assets
    max_file_size: "1MB"
    
    # Extension defaults
    extensions:
      .js:
        max_file_size: "200KB"
      .css:
        max_file_size: "100KB"
  
  presets:
    # React/Vue/Angular components
    components:
      extensions: [".jsx", ".tsx", ".vue"]
      patterns:
        - "src/components/**/*"
        - "src/pages/**/*"
      actions:
        - strip_comments
        - compress_whitespace
      separator_style: "Detailed"
    
    # HTML files
    html:
      extensions: [".html", ".htm"]
      actions:
        - minify
        - strip_tags
      strip_tags:
        - "script"
        - "link"
        - "meta"
      preserve_tags:
        - "main"
        - "article"
        - "section"
    
    # Stylesheets
    styles:
      extensions: [".css", ".scss", ".sass", ".less"]
      patterns:
        - "src/**/*.css"
        - "styles/**/*"
      actions:
        - minify
      exclude_patterns:
        - "*.min.css"
        - "node_modules/**"
    
    # TypeScript/JavaScript
    scripts:
      extensions: [".js", ".ts", ".mjs"]
      patterns:
        - "src/**/*.js"
        - "src/**/*.ts"
      actions:
        - strip_comments
        - remove_empty_lines
      exclude_patterns:
        - "*.min.js"
        - "dist/**"
        - "build/**"
    
    # JSON data files
    data:
      extensions: [".json"]
      actions:
        - compress_whitespace
      # Truncate large data files
      max_lines: 100
      max_file_size: "50KB"
      patterns:
        - "src/data/**/*.json"
        - "mock/**/*.json"
        - "fixtures/**/*.json"
    
    # Images - just include reference
    images:
      extensions: [".png", ".jpg", ".jpeg", ".gif", ".svg", ".webp"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 100  # Just show filename and basic info
      include_metadata: true
      max_file_size: "10KB"  # Only process small images
    
    # Configuration
    config:
      patterns:
        - "package.json"
        - "tsconfig*.json"
        - "webpack.config.*"
        - "vite.config.*"
        - ".env*"
      actions:
        - custom
      custom_processor: "redact_secrets"
      include_metadata: true
    
    default:
      actions: []
      include_metadata: true

backend:
  description: "Backend API project processing"
  enabled: true
  priority: 5
  
  # Global settings for backend projects
  global_settings:
    encoding: "utf-8"
    separator_style: "Standard"
    security_check: "abort"  # Stricter for backend
    
    # Backend-specific excludes
    exclude_patterns:
      - "node_modules/**"
      - "venv/**"
      - "__pycache__/**"
      - "*.pyc"
      - ".pytest_cache/**"
      - "coverage/**"
      - "*.log"
      - ".env*"
      - "*.sqlite"
      - "*.db"
    
    max_file_size: "5MB"  # Allow larger backend files
  
  presets:
    # API routes
    routes:
      patterns:
        - "routes/**/*.js"
        - "api/**/*.py"
        - "controllers/**/*"
      actions:
        - strip_comments
        - custom
      custom_processor: "extract_functions"
      separator_style: "Detailed"
      max_file_size: "500KB"
    
    # Database models
    models:
      patterns:
        - "models/**/*"
        - "entities/**/*"
        - "schemas/**/*"
      actions:
        - strip_comments
        - remove_empty_lines
      separator_style: "Detailed"
    
    # Tests - only structure
    tests:
      patterns:
        - "test/**/*"
        - "tests/**/*"
        - "__tests__/**/*"
      actions:
        - custom
      custom_processor: "extract_functions"
      max_lines: 50
    
    # SQL/Migrations
    database:
      extensions: [".sql"]
      patterns:
        - "migrations/**/*.sql"
        - "db/**/*.sql"
      actions:
        - strip_comments
      max_lines: 200
      exclude_patterns:
        - "**/backups/**"
        - "**/dumps/**"
    
    default:
      actions:
        - remove_empty_lines
      include_metadata: true

======= presets/wordpress.m1f-presets.yml ======
# WordPress Project Preset Configuration for m1f
# This preset defines how different file types should be processed when bundling

wordpress:
  description: "WordPress project processing rules"
  enabled: true
  priority: 10
  
  # Global settings for WordPress projects
  global_settings:
    # Default encoding and formatting
    encoding: "utf-8"
    separator_style: "Standard"
    line_ending: "lf"
    
    # Security - warn for WordPress since config files may have keys
    security_check: "warn"
    
    
    # WordPress-specific excludes
    exclude_patterns:
      - "wp-content/uploads/**"
      - "wp-content/cache/**"
      - "wp-content/upgrade/**"
      - "wp-content/backups/**"
      - "wp-content/backup-*/**"
      - "wp-content/wflogs/**"  # Wordfence logs
      - "wp-content/updraft/**"  # UpdraftPlus backups
      - "*.log"
      - "error_log"
      - "debug.log"
      - ".htaccess"  # Usually contains sensitive server configs
      - "wp-config.php"  # Contains database credentials
    
    # Common WordPress file extensions to exclude
    exclude_extensions:
      - ".exe"
      - ".dll"
      - ".so"
      - ".dylib"
      - ".zip"
      - ".tar"
      - ".gz"
      - ".sql"
      - ".sql.gz"
      - ".bak"
      - ".tmp"
    
    # Extension-specific processing defaults
    extensions:
      .php:
        actions:
          - remove_empty_lines
      .js:
        actions:
          - strip_comments
          - compress_whitespace
      .css:
        actions:
          - minify
          - strip_comments
  
  presets:
    # PHP files - WordPress core and plugins
    php:
      extensions: [".php"]
      patterns:
        - "*.php"
        - "wp-content/plugins/**/*.php"
        - "wp-content/themes/**/*.php"
      actions:
        - remove_empty_lines
      include_metadata: true
      separator_style: "Standard"
      # Exclude vendor and library files
      exclude_patterns:
        - "wp-includes/**"  # WordPress core
        - "wp-admin/**"      # WordPress admin
        - "**/vendor/**"     # Composer dependencies
    
    # HTML templates and output
    html:
      extensions: [".html", ".htm"]
      patterns:
        - "*.html"
        - "wp-content/themes/**/*.html"
      actions:
        - minify
        - strip_tags
      strip_tags:
        - "script"
        - "style"
        - "noscript"
      preserve_tags:
        - "pre"
        - "code"
      separator_style: "Standard"
    
    # Markdown documentation
    md:
      extensions: [".md", ".markdown"]
      patterns:
        - "*.md"
        - "README*"
        - "docs/**/*.md"
      actions:
        - remove_empty_lines
      include_metadata: true
      separator_style: "Markdown"
    
    # JavaScript files
    js:
      extensions: [".js"]
      patterns:
        - "wp-content/themes/**/*.js"
        - "wp-content/plugins/**/*.js"
      actions:
        - strip_comments
        - compress_whitespace
      # Exclude minified and vendor files
      exclude_patterns:
        - "*.min.js"
        - "**/vendor/**"
        - "**/node_modules/**"
      separator_style: "Standard"
    
    # CSS files
    css:
      extensions: [".css", ".scss", ".sass"]
      patterns:
        - "wp-content/themes/**/*.css"
      actions:
        - minify
        - strip_comments
      exclude_patterns:
        - "*.min.css"
      separator_style: "Standard"
    
    # Configuration files - exclude most sensitive ones
    config:
      patterns:
        - "*.json"
        - "*.yml"
        - "*.yaml"
        - "composer.json"
        - "package.json"
      actions:
        - compress_whitespace
      # wp-config.php is excluded globally for security
      exclude_patterns:
        - "wp-config*.php"
        - ".env*"
      include_metadata: true
      max_file_size: "100KB"
    
    # SQL files
    sql:
      extensions: [".sql"]
      actions:
        - strip_comments
        - compress_whitespace
      # Truncate large dump files
      max_lines: 500  # Truncate large SQL dumps
    
    # Default for unmatched files
    default:
      actions:
        - remove_empty_lines
      include_metadata: true
      separator_style: "Standard"

======= tasks/README.md ======
# AI Context File Generator & Auto-Bundling System

## Overview

This directory contains tasks for creating selective file bundles that serve as
context for AI interactions. The system includes:

1. **Manual Selection** - Create bundles from carefully selected files
2. **Auto-Bundling** - Automatically organize project content into topic-based
   bundles
3. **Preset System** - Apply file-specific processing rules
4. **Watch Mode** - Automatically regenerate bundles when files change

Using the `m1f` tool and auto-bundling scripts, you can create optimized
context files for AI assistants.

## VS Code Setup

To use these tasks in VS Code:

1. Create a `.vscode` directory in your project root (if it doesn't exist)
2. Copy the example tasks configuration:
   ```bash
   cp tasks/example.tasks.json .vscode/tasks.json
   ```
3. Now you can access all tasks via the Command Palette (`Ctrl+Shift+P` →
   "Tasks: Run Task")

The `example.tasks.json` file references all available task definitions:

- `m1f.json` - Manual file selection tasks
- `auto_bundle.json` - Automated bundling tasks with preset support
- `linting.json` - Code quality and linting tasks

**Note**: The `.vscode` directory is typically gitignored, so each developer can
customize their tasks.json as needed.

## When to Use This Tool

**Do NOT use this tool if:**

- You only have a few files to work with (just reference them directly)
- You want to include your entire project (this will overwhelm the AI with
  irrelevant information)

**DO use this tool when:**

- You have a large project (hundreds or thousands of files)
- You need to provide context from ~50 key files that are most relevant to your
  current task
- You want to give the AI a focused understanding of specific parts of your
  codebase

## Purpose

When working with AI assistants (like those in Windsurf, Cursor, VS Code, or
other AI-enabled editors), providing selective but sufficient context is
essential. This tool helps you to:

1. Select and combine only the most important files into a single document
2. Include metadata that helps AI systems understand file relationships
3. Create machine-readable formats optimized for Large Language Models
4. Efficiently manage context limitations by focusing on what matters

## Available Task Files

This directory contains several task definition files:

### Task Definition Files

1. **m1f.json** - Core context generation tasks for manual file selection
2. **auto_bundle.json** - Automated bundling tasks with 11 different bundle
   types
3. **linting.json** - Code quality and linting tasks
4. **example.tasks.json** - Example VS Code tasks.json that integrates all task
   files

### Supporting Files

- **ai_context_files.txt** - Example list of files for manual context creation
- **wp\_\*.txt** - WordPress-specific include/exclude patterns

### m1f.json - Core Context Generation Tasks

The `m1f.json` file defines core tasks for manual file selection:

### 1. AI Context: Create Combined File

This task combines files from your project with common exclusions:

- **Source**: Project directory with extensive filtering
- **Output**: `.gen/ai_context.m1f.txt`
- **Excludes**: Non-relevant directories (`node_modules`, `.git`, `.venv`, etc.)
- **Format**: Machine-readable format with clear file separators
- **Optimization**: Uses `--minimal-output` to generate only the combined file
  without extra logs or lists
- **Best for**: Initial exploration when you're unsure which files are important

### 2. AI Context: Create From Input List (Recommended)

This task combines only the specific files you select:

- **Source**: Files explicitly listed in `tasks/ai_context_files.txt`
- **Output**: `.gen/ai_context_custom.m1f.txt`
- **Format**: Same machine-readable format
- **Efficiency**: Uses `--minimal-output --quiet` for silent operation with no
  auxiliary files
- **Best for**: Focused work when you know which ~20-50 files are most relevant

## Practical Usage Guide

### Step 1: Identify Key Files

Start by identifying the most important files for your current task:

- **Core files**: Main entry points, key modules, and configuration files
- **Relevant to your task**: Files you're actively working on or need to
  understand
- **Context providers**: Files that explain project structure or domain concepts
- **Aim for 20-50 files**: This provides enough context without overwhelming the
  AI

### Step 2: Create Your Custom File List

The recommended approach is to create a task-specific file list in
`ai_context_files.txt`:

```
# Core modules for authentication feature
${workspaceFolder}/auth/user.py
${workspaceFolder}/auth/permissions.py
${workspaceFolder}/auth/tokens.py

# Configuration
${workspaceFolder}/config/settings.py

# Related utilities
${workspaceFolder}/utils/crypto.py
```

### Step 3: Generate the Context File

1. Open Windsurf/VS Code Command Palette (`Ctrl+Shift+P`)
2. Type "Tasks: Run Task" and press Enter
3. Select "AI Context: Create From Input List" (recommended)
4. The task will run and create the output file in the `.gen` directory

### Step 4: Use with AI

1. Open the generated `.m1f.txt` file in your editor
2. In your AI-enabled editor (Windsurf, Cursor, VS Code):
   - Include this file in the AI's context using the editor's method
   - In Windsurf: Type `@filename` in chat or use the "Add to Context" option

### auto_bundle.json - Automated Topic-Based Bundling

The `auto_bundle.json` file provides tasks for automatic bundle generation:

#### Available Auto-Bundle Tasks:

1. **Auto Bundle: Docs Bundle** - All documentation, READMEs, and markdown files
2. **Auto Bundle: Source Bundle** - All source code files
3. **Auto Bundle: Tests Bundle** - All test files and fixtures
4. **Auto Bundle: Complete Bundle** - Combined documentation, source, and tests
5. **Auto Bundle: Custom Focus** - Topic-specific bundles (html2md, m1f, s1f,
   etc.)
6. **Auto Bundle: Watch and Update** - Monitor changes and regenerate bundles
7. **Auto Bundle: With Preset** - Apply processing rules during bundling
8. **Auto Bundle: Generate All Bundles** - Creates all standard bundles in one
   go
9. **Auto Bundle: Preset - All Standard** - Creates all standard preset-based
   bundles
10. **Auto Bundle: Preset - Focused** - Creates focused bundles using presets
11. **Auto Bundle: List Presets** - Lists all available presets and their groups

#### Using Auto-Bundle Tasks:

1. Open VS Code Command Palette (`Ctrl+Shift+P`)
2. Type "Tasks: Run Task"
3. Select an auto-bundle task (e.g., "Auto Bundle: Complete Bundle")
4. The bundle will be created in `.ai-context/`

#### Configuration:

Auto-bundling is configured via `.m1f.config.yml`. See the
[Auto Bundle Guide](../docs/01_m1f/06_auto_bundle_guide.md) for details.

#### Preset-Based Auto-Bundling:

The preset-based tasks (9-11) use the `scripts/auto_bundle_preset.sh` script
which leverages the m1f preset system:

- **Intelligent file filtering** - Presets apply smart includes/excludes based
  on file type
- **Per-file-type processing** - Different settings for different file
  extensions
- **Security scanning control** - Enable/disable security checks per file type
- **Size limit management** - Different size limits for CSS vs PHP files
- **Processing actions** - Minify, strip tags, compress whitespace per file type

Example preset usage:

```bash
# Create all standard bundles using presets
m1f-update all

# Create WordPress-specific bundles
m1f-update focus wordpress

# Use specific preset with group
m1f auto-bundle preset web-project frontend
```

Available presets:

- `wordpress` - WordPress themes and plugins with appropriate excludes
- `web-project` - Modern web projects with frontend/backend separation
- `documentation` - Documentation-focused bundles
- `example-globals` - Example with comprehensive global settings

See [m1f Presets Documentation](../docs/01_m1f/02_m1f_presets.md) for detailed
preset information.

## Best Practices for Effective AI Context

### For Manual Selection:

1. **Be selective**: Choose only the most important 20-50 files for your current
   task
2. **Include structure files**: Add README.md, configuration files, and key
   interfaces
3. **Group related files**: When customizing your list, organize files by
   related functionality
4. **Comment your file lists**: Add comments in `ai_context_files.txt` to
   explain why files are included

### For Auto-Bundling:

1. **Use focused bundles**: Start with topic-specific bundles (docs, src) before
   using complete
2. **Configure properly**: Customize `.m1f.config.yml` for your project
   structure
3. **Apply presets**: Use the preset system to optimize file processing
4. **Watch mode**: Use watch tasks during active development
5. **Refresh regularly**: Regenerate bundles after significant changes

## Customizing the Process

You can customize the tasks by editing `m1f.json` for your specific needs:

- Modify output file locations and naming conventions
- Adjust file exclusion patterns for your project structure
- Add task-specific configurations for different project components

## Additional Options

Consider these advanced options from `m1f` for specific needs:

- `--include-dot-paths`: Useful for including WordPress-specific configuration
  files like `.htaccess` or other dot files and directories (e.g., `.config/`,
  `.github/`) if they are relevant to your context. By default, all files and
  directories starting with a dot are excluded.
- `--separator-style`: While `MachineReadable` is generally recommended for AI
  context files, you can explore other styles if needed.
- `--skip-output-file`: Executes all operations (logs, additional files, etc.)
  but skips writing the final .m1f.txt output file. Useful when you're only
  interested in generating the file and directory listings or logs, but not the
  combined content file itself.

For a complete list of all available options and their detailed descriptions,
run:

```
m1f --help
```

## Machine-Readable Format

The default separator style "MachineReadable" optimizes the combined file for AI
understanding:

```
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
METADATA_JSON:
{
    "original_filepath": "relative/path.ext",
    "original_filename": "path.ext",
    "timestamp_utc_iso": "2023-01-01T12:00:00Z",
    "type": ".ext",
    "size_bytes": 1234,
    "checksum_sha256": "abc123..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---

[file content]

--- PYMK1F_END_FILE_CONTENT_BLOCK_f84a9c25-b8cf-4e6a-a39d-842d7fe3b6e1 ---
```

This format ensures the AI can clearly identify file boundaries and understand
metadata about each file, making it more effective in processing your selected
files. The JSON metadata includes the original filepath, filename, timestamp in
ISO format, file type, size in bytes, and SHA256 checksum for data integrity
verification. It's particularly suitable for automated processing and splitting
back into individual files.

## Author

Franz und Franz - https://franz.agency

## Use Case: WordPress Theme/Plugin Context File

When developing WordPress themes or plugins, you often need to provide an AI
assistant with the context of your specific theme/plugin files. Here's how you
can create a single context file for this purpose using `m1f.py`:

### 1. Strategically Select WordPress Files

To create an effective AI context for WordPress development, carefully select
files that represent the functionality or problem area you're focusing on.
Consider these categories:

- **Core Theme Files**:

  - `style.css` (for theme identity and metadata)
  - `functions.php` (critical for theme logic, hooks, and filters)
  - `index.php`, `header.php`, `footer.php`, `sidebar.php` (main template
    structure)
  - Specific template files relevant to your task: `single.php`, `page.php`,
    `archive.php`, `category.php`, `tag.php`, `search.php`, `404.php`,
    `front-page.php`, `home.php`.
  - Template parts (e.g., files in `template-parts/` directory like
    `content-page.php`).
  - Customizer settings and controls if relevant (`inc/customizer.php`).
  - Key JavaScript (e.g., `assets/js/custom.js`) and CSS files.

- **Core Plugin Files**:

  - The main plugin file (e.g., `your-plugin-name/your-plugin-name.php`) which
    includes the plugin header.
  - Files containing main classes, action/filter hooks, shortcodes, and admin
    panel logic.
  - AJAX handlers, REST API endpoint definitions.
  - Files related to Custom Post Types (CPTs) or taxonomies defined by the
    plugin.
  - Key JavaScript and CSS files specific to the plugin's functionality.

- **Feature-Specific Files**: If you are working on a particular feature (e.g.,
  WooCommerce integration, a custom contact form, a specific admin page):

  - Include all files directly related to that feature from both your theme and
    any relevant plugins.
  - For example, for WooCommerce: relevant template overrides in
    `your-theme/woocommerce/`, custom functions related to WooCommerce in
    `functions.php` or a plugin.

- **Problem-Specific Files**: If debugging, include files involved in the error
  stack trace or areas where the bug is suspected.

- **Important Note on Parent/Child Themes**:
  - If using a child theme, include relevant files from _both_ the child theme
    and parent theme that interact or are being overridden.

### 2. Structure Your Input File List (`my_wp_context_files.txt`)

Create a plain text file (e.g., `my_wp_context_files.txt`) listing the absolute
or relative paths to your selected files. Organize and comment this list for
clarity, especially if you plan to reuse or modify it.

**Example `my_wp_context_files.txt` for a theme feature and a related plugin:**

```plaintext
# Paths should be relative to your project root, or absolute.
# For VS Code tasks, ${workspaceFolder} can be used.

# =====================================
# My Custom Theme: "AwesomeTheme"
# Working on: Homepage Slider Feature
# =====================================

# Core Theme Files
wp-content/themes/AwesomeTheme/style.css
wp-content/themes/AwesomeTheme/functions.php
wp-content/themes/AwesomeTheme/header.php
wp-content/themes/AwesomeTheme/footer.php
wp-content/themes/AwesomeTheme/front-page.php

# Homepage Slider Specifics
wp-content/themes/AwesomeTheme/template-parts/homepage-slider.php
wp-content/themes/AwesomeTheme/includes/slider-customizer-settings.php
wp-content/themes/AwesomeTheme/assets/js/homepage-slider.js
wp-content/themes/AwesomeTheme/assets/css/homepage-slider.css

# =====================================
# Related Plugin: "UtilityPlugin"
# Used by: Homepage Slider for data
# =====================================
wp-content/plugins/UtilityPlugin/utility-plugin.php
wp-content/plugins/UtilityPlugin/includes/class-data-provider.php
wp-content/plugins/UtilityPlugin/includes/cpt-slides.php

# =====================================
# General WordPress Context (Optional)
# =====================================
# Consider adding if debugging core interactions, but be selective:
# wp-includes/post.php
# wp-includes/query.php
```

**Tips for your list:**

- Use comments (`#`) to organize sections or explain choices.
- Start with a small, focused set of files and expand if the AI needs more
  context.
- Paths are typically relative to where you run the `m1f.py` script, or from the
  `${workspaceFolder}` if using VS Code tasks.

### 3. Generate the Combined Context File

Run `m1f` from your terminal, pointing to your input file list and specifying
an output file. It's recommended to use the `MachineReadable` separator style.

```bash
m1f \
  --input-file my_wp_context_files.txt \
  --output-file .gen/wordpress_context.m1f.txt \
  --separator-style MachineReadable \
  --force \
  --minimal-output
```

**Explanation of options:**

- `--input-file my_wp_context_files.txt`: Specifies the list of files to
  include.
- `--output-file .gen/wordpress_context.m1f.txt`: Defines where the combined
  file will be saved. Using a `.gen` or `.ai-context` subfolder is good
  practice.
- `--separator-style MachineReadable`: Ensures the output is easily parsable by
  AI tools.
- `--force`: Overwrites the output file if it already exists.
- `--minimal-output`: Prevents the script from generating auxiliary files like
  file lists or logs, keeping your project clean.

You can also generate only the auxiliary files (file list and directory list)
without creating the combined file:

```bash
m1f \
  --input-file my_wp_context_files.txt \
  --output-file .gen/wordpress_auxiliary_only.m1f.txt \
  --skip-output-file \
  --verbose
```

This will create `wordpress_auxiliary_only_filelist.txt` and
`wordpress_auxiliary_only_dirlist.txt` files but won't generate the combined
content file.

### 4. Using the Context File with Your AI Assistant

Once `wordpress_context.m1f.txt` is generated:

1.  Open the file in your AI-enabled editor (e.g., Cursor, VS Code with AI
    extensions).
2.  Use your editor's features to add this file to the AI's context. For
    example, in Cursor, you can type `@wordpress_context.m1f.txt` in the chat or
    use the "Add to Context" option.
3.  Now, when you ask the AI questions or request code related to your WordPress
    theme/plugin, it will have the specific context of your selected files.

### Example: Creating a VS Code Task

You can automate this process by creating a VS Code task in your
`.vscode/tasks.json` file:

```json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "WordPress: Generate AI Context from List",
      "type": "shell",
      "command": "python",
      "args": [
        "${workspaceFolder}/tools/m1f.py",
        "--input-file",
        "${workspaceFolder}/my_wp_context_files.txt",
        "--output-file",
        "${workspaceFolder}/.gen/wordpress_context.m1f.txt",
        "--separator-style",
        "MachineReadable",
        "--force",
        "--minimal-output",
        "--quiet"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "detail": "Combines specified WordPress theme/plugin files into a single context file for AI."
    },
    {
      "label": "WordPress: Generate File Lists Only",
      "type": "shell",
      "command": "python",
      "args": [
        "${workspaceFolder}/tools/m1f.py",
        "--input-file",
        "${workspaceFolder}/my_wp_context_files.txt",
        "--output-file",
        "${workspaceFolder}/.gen/wordpress_auxiliary.m1f.txt",
        "--skip-output-file",
        "--verbose"
      ],
      "problemMatcher": [],
      "group": "build",
      "detail": "Generates file and directory lists without creating the combined file."
    }
  ]
}
```

With this task, you can simply run "WordPress: Generate AI Context from List"
from the VS Code Command Palette to update your context file. Remember to
maintain your `my_wp_context_files.txt` list as your project evolves.

This approach helps you provide targeted and relevant information to your AI
assistant, leading to more accurate and helpful responses for your WordPress
development tasks.

## Example: Organizing a Large Project with `m1f`

When dealing with a project that contains hundreds or thousands of files, start
by generating a complete file and directory listing without creating the merged
context file. Run the **Project Review: Generate Lists** task. It calls
`m1f` with `--skip-output-file` and saves two inventory files to the
`m1f` directory:

- `m1f/project_review_filelist.txt`
- `m1f/project_review_dirlist.txt`

Review these lists and decide which areas of the project you want to load into
your AI assistant. Typical numbered context files might include:

- `1_doc.txt` – the full documentation bundle
- `2_template.txt` – template files from your theme
- `3_plugin.txt` – a specific plugin or a group of plugins

Store each generated context file in the `m1f` folder with a number prefix for
quick referencing in Windsurf, Cursor, or Claude (for example `@m1f/1_doc.txt`).

To keep the inventory current during development, launch **Project Review: Watch
for Changes**. This background watcher reruns the list generation whenever files
are modified.

Remember to add `m1f/` (and `.1f/` if used) to your `.gitignore` so these helper
files stay out of version control.

======= tasks/ai_context_files.txt ======
# This is an example file list for AI context bundling
# Group related files by feature/functionality with comments

# Core project documentation
/path/to/project/README.md
/path/to/project/ARCHITECTURE.md
/path/to/project/docs/api_reference.md

# Authentication feature
/path/to/project/auth/models.py           # Data models for users and permissions
/path/to/project/auth/views.py            # Authentication API endpoints
/path/to/project/auth/middleware.py       # Auth verification middleware
/path/to/project/auth/tests/test_auth.py  # Key tests that explain requirements

# Database configuration
/path/to/project/config/database.py       # Database connection settings
/path/to/project/db/migrations/001_init.py # Shows schema structure
/path/to/project/db/models/base.py        # Base model classes

# Frontend components
/path/to/project/frontend/components/AuthForm.jsx
/path/to/project/frontend/components/Dashboard.jsx
/path/to/project/frontend/services/api.js # API integration points

# Utility functions
/path/to/project/utils/logging.py
/path/to/project/utils/validators.py

# Configuration files
/path/to/project/.env.example             # Shows required environment variables
/path/to/project/config/settings.py       # Application settings

# Main application entry points
/path/to/project/app.py                   # Main application initialization
/path/to/project/server.py                # Server startup code

# Add task-specific files here as needed

======= tasks/auto_bundle.json ======
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Auto Bundle: Docs Bundle",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle.sh",
            "args": ["docs"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a documentation bundle with all README files, docs/, and markdown content"
        },
        {
            "label": "Auto Bundle: Source Bundle",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle.sh",
            "args": ["src"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a source code bundle with all Python scripts and modules"
        },
        {
            "label": "Auto Bundle: Tests Bundle",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle.sh",
            "args": ["tests"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a test suite bundle with all test files and fixtures"
        },
        {
            "label": "Auto Bundle: Complete Bundle",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle.sh",
            "args": ["complete"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a complete project bundle with all documentation, source, and tests"
        },
        {
            "label": "Auto Bundle: Custom Focus",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle.sh",
            "args": ["${input:bundleFocus}"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a custom bundle based on focus area (html2md, m1f, s1f, etc.)"
        },
        {
            "label": "Auto Bundle: Watch and Update",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/watch_and_bundle.sh",
            "args": ["${input:watchBundleType}"],
            "problemMatcher": [],
            "isBackground": true,
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Watches for file changes and automatically regenerates the specified bundle"
        },
        {
            "label": "Auto Bundle: Generate All Bundles",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c",
                "for type in docs src tests complete; do echo \"=== Generating $type bundle ===\"; ${workspaceFolder}/scripts/auto_bundle.sh $type; done"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Generates all standard bundles (docs, src, tests, complete) in one go"
        },
        {
            "label": "Auto Bundle: With Preset",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--source-directory",
                "${workspaceFolder}",
                "--output-file",
                "${workspaceFolder}/.ai-context/bundle_with_preset_${input:presetType}.m1f.txt",
                "--preset",
                "${workspaceFolder}/presets/${input:presetFile}",
                "--preset-group",
                "${input:presetGroup}",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--minimal-output"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a bundle using the preset system for file-specific processing"
        },
        {
            "label": "Auto Bundle: Preset - All Standard",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle_preset.sh",
            "args": ["all"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates all standard preset-based bundles (docs, source, complete)"
        },
        {
            "label": "Auto Bundle: Preset - Focused",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle_preset.sh",
            "args": ["focus", "${input:focusArea}"],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates focused bundles for specific area using presets"
        },
        {
            "label": "Auto Bundle: List Presets",
            "type": "shell",
            "command": "${workspaceFolder}/scripts/auto_bundle_preset.sh",
            "args": ["list"],
            "problemMatcher": [],
            "group": {
                "kind": "none"
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Lists all available presets and their groups"
        }
    ],
    "inputs": [
        {
            "id": "bundleFocus",
            "type": "pickString",
            "description": "Select bundle focus area",
            "options": [
                "html2md",
                "m1f", 
                "s1f",
                "presets",
                "auto-bundle",
                "claude-code"
            ]
        },
        {
            "id": "watchBundleType",
            "type": "pickString",
            "description": "Select bundle type to watch",
            "options": [
                "docs",
                "src",
                "tests",
                "complete"
            ],
            "default": "complete"
        },
        {
            "id": "presetType",
            "type": "promptString",
            "description": "Enter preset type (e.g., wordpress, web, docs)",
            "default": "web"
        },
        {
            "id": "presetFile",
            "type": "pickString",
            "description": "Select preset file",
            "options": [
                "wordpress.m1f-presets.yml",
                "web-project.m1f-presets.yml",
                "documentation.m1f-presets.yml",
                "example-globals.m1f-presets.yml",
                "template-all-settings.m1f-presets.yml",
                "example-use-cases.m1f-presets.yml"
            ]
        },
        {
            "id": "presetGroup",
            "type": "promptString",
            "description": "Enter preset group name (optional)",
            "default": ""
        },
        {
            "id": "focusArea",
            "type": "pickString",
            "description": "Select focus area for preset bundling",
            "options": [
                "wordpress",
                "web",
                "docs"
            ]
        }
    ]
}

======= tasks/example.tasks.json ======
{
    "version": "2.0.0",
    "tasks": [
        {
            "$ref": "../tasks/m1f.json#/tasks/0"
        },
        {
            "$ref": "../tasks/m1f.json#/tasks/1"
        },
        {
            "$ref": "../tasks/m1f.json#/tasks/2"
        },
        {
            "$ref": "../tasks/m1f.json#/tasks/3"
        },
        {
            "$ref": "../tasks/m1f.json#/tasks/4"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/0"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/1"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/2"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/3"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/4"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/5"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/6"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/7"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/8"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/9"
        },
        {
            "$ref": "../tasks/auto_bundle.json#/tasks/10"
        },
        {
            "$ref": "../tasks/linting.json#/tasks/0"
        },
        {
            "$ref": "../tasks/linting.json#/tasks/1"
        },
        {
            "$ref": "../tasks/linting.json#/tasks/2"
        }
    ]
}

======= tasks/linting.json ======
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Lint: Format JSON/Markdown with Prettier",
            "type": "shell",
            "command": "npx",
            "args": [
                "prettier",
                "--write",
                "${workspaceFolder}/**/*.{json,md,yaml,yml}"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "test",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Formats all JSON/Markdown/YAML files using Prettier according to the .prettierrc.yaml configuration."
        }
    ]
} 

======= tasks/m1f.json ======
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "AI Context: Create From Selected Files (Recommended)",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--input-file",
                "${workspaceFolder}/tasks/ai_context_files.txt",
                "--output-file",
                "${workspaceFolder}/.gen/ai_context_selective.m1f.txt",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--minimal-output",
                "--quiet"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates an AI context file from your carefully selected 20-50 most important files. Best for focused tasks."
        },
        {
            "label": "AI Context: Create With Default Filtering",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--source-directory",
                "${workspaceFolder}",
                "--output-file",
                "${workspaceFolder}/.gen/ai_context_filtered.m1f.txt",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--verbose",
                "--minimal-output",
                "--additional-excludes", 
                "node_modules", 
                ".git", 
                ".venv", 
                ".idea", 
                "__pycache__",
                "dist",
                "build",
                "cache"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates an AI context file by automatically filtering project files. Use only for initial exploration."
        },
        {
            "label": "AI Context: Create Feature-Specific Bundle",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--input-file",
                "${workspaceFolder}/tasks/feature_context_files.txt",
                "--output-file",
                "${workspaceFolder}/.gen/ai_context_feature.m1f.txt",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--minimal-output",
                "--add-timestamp"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Creates a feature-specific context bundle using paths in feature_context_files.txt. Includes timestamp for versioning."
        },
        {
            "label": "WordPress: Generate Theme Context",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--source-directory",
                "${workspaceFolder}/wp-content/themes/mytheme",
                "--exclude-paths-file",
                "${workspaceFolder}/tasks/wp_excludes.txt",
                "--output-file",
                "${workspaceFolder}/.ai-context/mytheme.m1f.txt",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--minimal-output",
                "--quiet"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build"
            },
            "presentation": {
                "reveal": "silent",
                "panel": "shared",
                "clear": true
            },
            "detail": "Creates an AI context file containing all files from the mytheme WordPress theme."
        },
        {
            "label": "WordPress: Generate Plugin Context",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--source-directory",
                "${workspaceFolder}/wp-content/plugins/myplugin",
                "--exclude-paths-file",
                "${workspaceFolder}/tasks/wp_excludes.txt",
                "--output-file",
                "${workspaceFolder}/.ai-context/myplugin.m1f.txt",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--minimal-output",
                "--quiet"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build"
            },
            "presentation": {
                "reveal": "silent",
                "panel": "shared",
                "clear": true
            },
            "detail": "Creates an AI context file containing all files from the myplugin WordPress plugin."
        },
        {
            "label": "WordPress: Generate Both Theme and Plugin Context",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--input-file",
                "${workspaceFolder}/tasks/wp_theme_plugin_includes.txt",
                "--exclude-paths-file",
                "${workspaceFolder}/tasks/wp_excludes.txt",
                "--output-file",
                "${workspaceFolder}/.ai-context/wordpress_project.m1f.txt",
                "--separator-style",
                "MachineReadable",
                "--force",
                "--minimal-output",
                "--quiet"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build"
            },
            "presentation": {
                "reveal": "silent",
                "panel": "shared",
                "clear": true
            },
            "detail": "Creates a combined AI context file containing both theme and plugin files for a complete WordPress project."
        },
        {
            "label": "Project Review: Generate Lists",
            "type": "shell",
            "command": "python",
            "args": [
                "${workspaceFolder}/tools/m1f.py",
                "--source-directory",
                "${workspaceFolder}",
                "--output-file",
                "${workspaceFolder}/.m1f/project_review.m1f.txt",
                "--skip-output-file",
                "--verbose"
            ],
            "problemMatcher": [],
            "group": "build",
            "detail": "Generates full project file and directory listings in the m1f directory."
        },
        {
            "label": "Project Review: Watch for Changes",
            "type": "shell",
            "command": "watchmedo",
            "args": [
                "shell-command",
                "--patterns=*.py;*.md;*",
                "--recursive",
                "--command",
                "python ${workspaceFolder}/tools/m1f.py --source-directory ${workspaceFolder} --output-file ${workspaceFolder}/.m1f/project_review.m1f.txt --skip-output-file --quiet"
            ],
            "problemMatcher": [],
            "isBackground": true,
            "group": "build",
            "presentation": {
                "reveal": "silent",
                "panel": "shared"
            },
            "detail": "Watches for file changes and regenerates the project review lists."
        }
    ]
}

======= tasks/wp_excludes.txt ======
# WordPress Paths to Exclude

# Core WordPress system files
wp-admin/
wp-includes/

# Uploads directory (usually too large and contains only binary media files)
wp-content/uploads/

# Cache files
wp-content/cache/
wp-content/advanced-cache.php
wp-content/wp-cache-config.php
wp-content/object-cache.php

# Default and inactive themes
wp-content/themes/twentytwenty/
wp-content/themes/twentytwentyone/
wp-content/themes/twentytwentytwo/
wp-content/themes/twentytwentythree/
wp-content/themes/twentytwentyfour/

# Common plugins not relevant for development
wp-content/plugins/akismet/
wp-content/plugins/hello-dolly/
wp-content/plugins/wordpress-seo/
wp-content/plugins/wp-super-cache/
wp-content/plugins/wordfence/
wp-content/plugins/elementor/
wp-content/plugins/woocommerce/

# Language files
wp-content/languages/plugins/
wp-content/languages/themes/
wp-content/languages/continents-cities*.po
wp-content/languages/admin*.po

# Backup files
*.bak
*.backup
*.old
*-backup.*
~*

# Plugin/theme development build artifacts
node_modules/
dist/
build/
vendor/
.git/
.github/
.vscode/

# Logs and temporary files
*.log
*.tmp
.DS_Store
Thumbs.db

# Database dumps
*.sql

# Minified files (keep the source files, exclude minified versions)
*.min.js
*.min.css 

======= tasks/wp_plugin_includes.txt ======
# WordPress Plugin Files to Include

# Main plugin file
wp-content/plugins/myplugin/myplugin.php

# Plugin structure
wp-content/plugins/myplugin/includes/*.php
wp-content/plugins/myplugin/admin/*.php
wp-content/plugins/myplugin/public/*.php
wp-content/plugins/myplugin/includes/class-*.php
wp-content/plugins/myplugin/admin/class-*.php
wp-content/plugins/myplugin/public/class-*.php

# API and REST endpoints
wp-content/plugins/myplugin/includes/api/*.php
wp-content/plugins/myplugin/includes/rest-api/*.php

# Templates and partials
wp-content/plugins/myplugin/templates/*.php
wp-content/plugins/myplugin/partials/*.php

# Assets
wp-content/plugins/myplugin/assets/js/*.js
wp-content/plugins/myplugin/assets/css/*.css
wp-content/plugins/myplugin/admin/js/*.js
wp-content/plugins/myplugin/admin/css/*.css
wp-content/plugins/myplugin/public/js/*.js
wp-content/plugins/myplugin/public/css/*.css

# Blocks (if using Gutenberg blocks)
wp-content/plugins/myplugin/blocks/*.php
wp-content/plugins/myplugin/blocks/*.js
wp-content/plugins/myplugin/blocks/*.json

# Languages and internationalization
wp-content/plugins/myplugin/languages/*.pot
wp-content/plugins/myplugin/languages/*.po
wp-content/plugins/myplugin/languages/*.mo

# Configuration
wp-content/plugins/myplugin/config/*.php
wp-content/plugins/myplugin/uninstall.php 

======= tasks/wp_theme_includes.txt ======
# WordPress Theme Files to Include

# Core theme files
wp-content/themes/mytheme/style.css
wp-content/themes/mytheme/functions.php
wp-content/themes/mytheme/index.php
wp-content/themes/mytheme/header.php
wp-content/themes/mytheme/footer.php
wp-content/themes/mytheme/sidebar.php
wp-content/themes/mytheme/page.php
wp-content/themes/mytheme/single.php
wp-content/themes/mytheme/archive.php
wp-content/themes/mytheme/search.php
wp-content/themes/mytheme/404.php
wp-content/themes/mytheme/comments.php

# Template parts
wp-content/themes/mytheme/template-parts/*.php

# Theme includes and functionality
wp-content/themes/mytheme/inc/*.php
wp-content/themes/mytheme/includes/*.php

# Theme assets
wp-content/themes/mytheme/assets/js/*.js
wp-content/themes/mytheme/assets/css/*.css
wp-content/themes/mytheme/assets/scss/*.scss

# WooCommerce templates (if used)
wp-content/themes/mytheme/woocommerce/*.php

# Block patterns and templates
wp-content/themes/mytheme/patterns/*.php
wp-content/themes/mytheme/block-templates/*.html
wp-content/themes/mytheme/block-template-parts/*.html

# Configuration files
wp-content/themes/mytheme/theme.json 

======= tasks/wp_theme_plugin_includes.txt ======
# WordPress Theme Files to Include

# Core theme files
wp-content/themes/mytheme/style.css
wp-content/themes/mytheme/functions.php
wp-content/themes/mytheme/index.php
wp-content/themes/mytheme/header.php
wp-content/themes/mytheme/footer.php
wp-content/themes/mytheme/sidebar.php
wp-content/themes/mytheme/page.php
wp-content/themes/mytheme/single.php
wp-content/themes/mytheme/archive.php
wp-content/themes/mytheme/search.php
wp-content/themes/mytheme/404.php
wp-content/themes/mytheme/comments.php

# Template parts
wp-content/themes/mytheme/template-parts/*.php

# Theme includes and functionality
wp-content/themes/mytheme/inc/*.php
wp-content/themes/mytheme/includes/*.php

# Theme assets
wp-content/themes/mytheme/assets/js/*.js
wp-content/themes/mytheme/assets/css/*.css
wp-content/themes/mytheme/assets/scss/*.scss

# WooCommerce templates (if used)
wp-content/themes/mytheme/woocommerce/*.php

# Block patterns and templates
wp-content/themes/mytheme/patterns/*.php
wp-content/themes/mytheme/block-templates/*.html
wp-content/themes/mytheme/block-template-parts/*.html

# Configuration files
wp-content/themes/mytheme/theme.json
# WordPress Plugin Files to Include

# Main plugin file
wp-content/plugins/myplugin/myplugin.php

# Plugin structure
wp-content/plugins/myplugin/includes/*.php
wp-content/plugins/myplugin/admin/*.php
wp-content/plugins/myplugin/public/*.php
wp-content/plugins/myplugin/includes/class-*.php
wp-content/plugins/myplugin/admin/class-*.php
wp-content/plugins/myplugin/public/class-*.php

# API and REST endpoints
wp-content/plugins/myplugin/includes/api/*.php
wp-content/plugins/myplugin/includes/rest-api/*.php

# Templates and partials
wp-content/plugins/myplugin/templates/*.php
wp-content/plugins/myplugin/partials/*.php

# Assets
wp-content/plugins/myplugin/assets/js/*.js
wp-content/plugins/myplugin/assets/css/*.css
wp-content/plugins/myplugin/admin/js/*.js
wp-content/plugins/myplugin/admin/css/*.css
wp-content/plugins/myplugin/public/js/*.js
wp-content/plugins/myplugin/public/css/*.css

# Blocks (if using Gutenberg blocks)
wp-content/plugins/myplugin/blocks/*.php
wp-content/plugins/myplugin/blocks/*.js
wp-content/plugins/myplugin/blocks/*.json

# Languages and internationalization
wp-content/plugins/myplugin/languages/*.pot
wp-content/plugins/myplugin/languages/*.po
wp-content/plugins/myplugin/languages/*.mo

# Configuration
wp-content/plugins/myplugin/config/*.php
wp-content/plugins/myplugin/uninstall.php

======= docs/01_m1f/README.md ======
# m1f Documentation

Welcome to the m1f (Make One File) documentation. This tool combines multiple
text files into a single output file, perfect for providing context to Large
Language Models (LLMs) and creating bundled documentation.

## What's New in v3.2

- **Enhanced Security**: Path traversal protection, SSRF prevention, automatic
  robots.txt compliance
- **Performance**: Parallel file processing enabled by default (3-5x faster)
- **Flexibility**: Control content deduplication and UTF-8 encoding preferences
- **Reliability**: Improved error handling and security scanning

See the [v3.2 Features Guide](./41_version_3_2_features.md) for details.

## Table of Contents

### Getting Started

- [**00_m1f.md**](00_m1f.md) - Main documentation with features, usage examples,
  and architecture
- [**01_quick_reference.md**](./01_quick_reference.md) - Quick command reference
  and common patterns
- [**02_cli_reference.md**](./02_cli_reference.md) - Complete command-line
  parameter reference
- [**03_troubleshooting.md**](./03_troubleshooting.md) - Common issues and
  solutions

### Preset System

- [**10_m1f_presets.md**](./10_m1f_presets.md) - Comprehensive preset system
  guide
- [**11_preset_per_file_settings.md**](./11_preset_per_file_settings.md) -
  Advanced per-file processing configuration
- [**12_preset_reference.md**](./12_preset_reference.md) - Complete preset
  reference with all settings, features, and clarifications

### Features & Tools

- [**20_auto_bundle_guide.md**](./20_auto_bundle_guide.md) - Automated bundling
  with configuration files
- [**21_development_workflow.md**](./21_development_workflow.md) - Best
  practices for development workflows

### AI Integration

- [**30_claude_workflows.md**](./30_claude_workflows.md) - Working with Claude
  and LLMs
- [**31_claude_code_integration.md**](./31_claude_code_integration.md) -
  Integration with Claude Code for AI-assisted development

### Advanced Topics

- [**40_security_best_practices.md**](./40_security_best_practices.md) -
  Security guidelines and protective measures
- [**41_version_3_2_features.md**](./41_version_3_2_features.md) - Comprehensive
  v3.2 feature documentation and migration guide

## Quick Start

```bash
# Basic usage (parallel processing is automatic in v3.2)
m1f -s ./your_project -o ./combined.txt

# With file type filtering
m1f -s ./src -o code.txt --include-extensions .py .js

# Using presets
m1f -s . -o bundle.txt --preset wordpress.m1f-presets.yml

# v3.2 features: Allow duplicate files + custom encoding
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Security scanning with warning mode
m1f -s ./src -o bundle.txt --security-check warn
```

For detailed information, start with the [main documentation](00_m1f.md) or jump
to the [quick reference](./01_quick_reference.md) for common commands.

======= docs/01_m1f/00_m1f.md ======
# m1f (Make One File)

A modern, high-performance tool that combines multiple files into a single file
with rich metadata, content deduplication, and async I/O support.

## Overview

The m1f tool (v3.2.0) solves a common challenge when working with LLMs:
providing sufficient context without exceeding token limits. Built with Python
3.10+ and modern architecture patterns, it creates optimized reference files
from multiple sources while automatically handling duplicates and providing
comprehensive metadata.

## Key Features

- **Content Deduplication**: Automatically detects and skips duplicate files
  based on SHA256 checksums
- **Async I/O**: High-performance file operations with concurrent processing
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Modular package structure with clean separation of
  concerns
- **Smart Filtering**: Advanced file filtering with size limits, extensions, and
  patterns
- **Symlink Support**: Intelligent symlink handling with cycle detection
- **Professional Security**: Integration with detect-secrets for sensitive data
  detection
- **Colorized Output**: Beautiful console output with progress indicators

## Quick Start

```bash
# Basic usage with a source directory
m1f -s ./your_project -o ./combined.txt

# Include only specific file types
m1f -s ./your_project -o ./combined.txt --include-extensions .py .js .md

# Exclude specific directories
m1f -s ./your_project -o ./combined.txt --excludes "node_modules/" "build/" "dist/"

# Filter by file size (new in v2.0.0)
m1f -s ./your_project -o ./combined.txt --max-file-size 50KB
```

> **Note**: For a complete reference of all available options, see the
> [CLI Reference](./07_cli_reference.md). For troubleshooting, see the
> [Troubleshooting Guide](./08_troubleshooting.md).

## Command Line Options

| Option                      | Description                                                                                                                                                                                                                                                      |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-s, --source-directory`    | Path to the directory containing files to process                                                                                                                                                                                                                |
| `-i, --input-file`          | Path to a file containing a list of files/directories to process. Can be used together with --source-directory to resolve relative paths in the input file against the source directory                                                                          |
| `-o, --output-file`         | Path for the combined output file                                                                                                                                                                                                                                |
| `-f, --force`               | Force overwrite of existing output file without prompting                                                                                                                                                                                                        |
| `-t, --add-timestamp`       | Add a timestamp (\_YYYYMMDD_HHMMSS) to the output filename. Useful for versioning and preventing accidental overwrite of previous output files                                                                                                                   |
| `--filename-mtime-hash`     | Append a hash of file modification timestamps to the filename. The hash is created using all filenames and their modification dates, enabling caching mechanisms. Hash only changes when files are added/removed or their content changes                        |
| `--include-extensions`      | Space-separated list of file extensions to include (e.g., `--include-extensions .py .js .html` will only process files with these extensions)                                                                                                                    |
| `--exclude-extensions`      | Space-separated list of file extensions to exclude (e.g., `--exclude-extensions .log .tmp .bak` will skip these file types)                                                                                                                                      |
| `--max-file-size`           | Skip files larger than the specified size (e.g., `--max-file-size 50KB` will exclude files over 50 kilobytes). Supports units: B, KB, MB, GB, TB. Useful for filtering out large generated files, logs, or binary data when merging text files for LLM context   |
| `--exclude-paths-file`      | Path to file containing paths or patterns to exclude. Supports both exact path lists and gitignore-style pattern formats. Can use a .gitignore file directly                                                                                                     |
| `--no-default-excludes`     | Disable default directory exclusions. By default, the following directories are excluded: vendor, node_modules, build, dist, cache, .git, .svn, .hg, \***\*pycache\*\***                                                                                         |
| `--excludes`                | Space-separated list of paths to exclude. Supports directory names, exact file paths, and gitignore-style patterns (e.g., `--excludes logs "config/settings.json" "*.log" "build/" "!important.log"`)                                                            |
| `--include-dot-paths`       | Include files and directories that start with a dot (e.g., .gitignore, .hidden/). By default, all dot files and directories are excluded.                                                                                                                        |
| `--include-binary-files`    | Attempt to include files with binary extensions                                                                                                                                                                                                                  |
| `--remove-scraped-metadata` | Remove scraped metadata (URL, timestamp) from HTML2MD files during processing. Automatically detects and removes metadata blocks at the end of markdown files created by HTML scraping tools                                                                     |
| `--separator-style`         | Style of separators between files (`Standard`, `Detailed`, `Markdown`, `MachineReadable`, `None`)                                                                                                                                                                |
| `--line-ending`             | Line ending for script-generated separators (`lf` or `crlf`)                                                                                                                                                                                                     |
| `--convert-to-charset`      | Convert all files to the specified character encoding (`utf-8` [default], `utf-16`, `utf-16-le`, `utf-16-be`, `ascii`, `latin-1`, `cp1252`). The original encoding is automatically detected and included in the metadata when using compatible separator styles |
| `--abort-on-encoding-error` | Abort processing if encoding conversion errors occur. Without this flag, characters that cannot be represented will be replaced                                                                                                                                  |
| `-v, --verbose`             | Enable verbose logging. Without this flag, only summary information is shown, and detailed file-by-file logs are written to the log file instead of the console                                                                                                  |
| `--minimal-output`          | Generate only the combined output file (no auxiliary files)                                                                                                                                                                                                      |
| `--skip-output-file`        | Execute operations but skip writing the final output file                                                                                                                                                                                                        |
| `-q, --quiet`               | Suppress all console output                                                                                                                                                                                                                                      |
| `--create-archive`          | Create a backup archive of all processed files                                                                                                                                                                                                                   |
| `--archive-type`            | Type of archive to create (`zip` or `tar.gz`)                                                                                                                                                                                                                    |
| `--security-check`          | Scan files for secrets before merging (`abort`, `skip`, `warn`)                                                                                                                                                                                                  |
| `--preset`                  | One or more preset configuration files for file-specific processing. Files are loaded in order with later files overriding earlier ones                                                                                                                          |
| `--preset-group`            | Specific preset group to use from the configuration. If not specified, all matching presets from all groups are considered                                                                                                                                       |
| `--disable-presets`         | Disable all preset processing even if preset files are loaded                                                                                                                                                                                                    |

## Preset System

The preset system allows you to define file-specific processing rules for
different file types within the same bundle. This is particularly useful for
projects with mixed content types.

### Preset Hierarchy

Presets are loaded in the following order (highest priority wins):

1. **Global Presets** (~/.m1f/global-presets.yml) - Lowest priority
2. **User Presets** (~/.m1f/presets/\*.yml) - Medium priority
3. **Project Presets** (via --preset parameter) - Highest priority

### Quick Preset Examples

```bash
# Use built-in WordPress preset
m1f -s ./wp-site -o bundle.txt --preset presets/wordpress.m1f-presets.yml

# Use specific preset group
m1f -s ./project -o bundle.txt --preset my-presets.yml --preset-group production

# Load multiple preset files (merged in order)
m1f -s . -o out.txt --preset defaults.yml project.yml overrides.yml
```

### Available Processing Actions

- **minify** - Remove unnecessary whitespace (HTML, CSS, JS)
- **strip_tags** - Remove specified HTML tags
- **strip_comments** - Remove comments based on file type
- **compress_whitespace** - Normalize whitespace
- **remove_empty_lines** - Remove all empty lines
- **custom** - Apply custom processors

For detailed preset documentation, see:

- [Preset System Guide](02_m1f_presets.md) - Complete preset documentation
- [Per-File-Type Settings](03_m1f_preset_per_file_settings.md) - File-specific
  overrides

## Usage Examples

### Basic Operations

```bash
# Basic command using a source directory
m1f --source-directory /path/to/your/code \
  --output-file /path/to/combined_output.txt

# Using an input file containing paths to process (one per line)
m1f -i filelist.txt -o combined_output.txt

# Using both source directory and input file together
m1f -s ./source_code -i ./file_list.txt -o ./combined.txt

# Remove scraped metadata from HTML2MD files (new in v2.0.0)
m1f -s ./scraped_docs -o ./clean_docs.txt \
  --include-extensions .md --remove-scraped-metadata
```

### Advanced Operations

```bash
# Using MachineReadable style with verbose logging
m1f -s ./my_project -o ./output/bundle.m1f.txt \
  --separator-style MachineReadable --force --verbose

# Creating a combined file and a backup zip archive
m1f -s ./source_code -o ./dist/combined.txt \
  --create-archive --archive-type zip

# Only include text files under 50KB to avoid large generated files
m1f -s ./project -o ./text_only.txt \
  --max-file-size 50KB --include-extensions .py .js .md .txt .json

# Handle symlinks with cycle detection (new in v2.0.0)
m1f -s ./project -o ./output.txt \
  --include-symlinks --verbose
```

## Security Check

The `--security-check` option scans files for potential secrets using
`detect-secrets` if the library is installed. When secrets are detected you can
decide how the script proceeds:

- `abort` – stop processing immediately and do not create the output file.
- `skip` – omit files that contain secrets from the final output.
- `warn` – include all files but print a summary warning at the end.

If `detect-secrets` is not available, a simplified pattern-based scan is used as
a fallback.

## Output Files

By default, `m1f.py` creates several output files to provide comprehensive
information about the processed files:

1. **Primary output file** - The combined file specified by `--output-file`
   containing all processed files with separators
2. **Log file** - A `.log` file with the same base name as the output file,
   containing detailed processing information
3. **File list** - A `_filelist.txt` file containing the paths of all included
   files
4. **Directory list** - A `_dirlist.txt` file containing all unique directories
   from the included files
5. **Archive file** - An optional backup archive (zip or tar.gz) if
   `--create-archive` is specified

To create only the primary output file and skip the auxiliary files, use the
`--minimal-output` option:

```bash
# Create only the combined output file without any auxiliary files
m1f -s ./src -o ./combined.txt --minimal-output
```

## Common Use Cases

### Documentation Compilation

```bash
# Create a complete documentation bundle from all markdown files
m1f -s ./docs -o ./doc_bundle.m1f.txt --include-extensions .md
```

### Code Review Preparation

```bash
# Bundle specific components for code review
m1f -i code_review_files.txt -o ./review_bundle.m1f.txt
```

### WordPress Development

```bash
# Combine theme or plugin files for AI analysis
m1f -s ./wp-content/themes/my-theme -o ./theme_context.m1f.txt \
  --include-extensions .php .js .css --exclude-paths-file ./exclude_build_files.txt
```

### Project Knowledge Base

```bash
# Create a searchable knowledge base from project documentation
m1f -s ./project -o ./knowledge_base.m1f.txt \
  --include-extensions .md .txt .rst --minimal-output
```

### HTML2MD Integration

```bash
# Combine scraped markdown files and remove metadata
m1f -s ./scraped_content -o ./clean_content.m1f.txt \
  --include-extensions .md --remove-scraped-metadata

# Merge multiple scraped websites into a clean documentation bundle
m1f -s ./web_content -o ./web_docs.m1f.txt \
  --include-extensions .md --remove-scraped-metadata --separator-style Markdown
```

## Separator Styles

The `--separator-style` option allows you to choose how files are separated in
the combined output file. Each style is designed for specific use cases, from
human readability to automated parsing.

### Standard Style

A simple, concise separator that shows only the file path:

```
======= path/to/file.py ======
```

### Detailed Style (Default)

A more comprehensive separator that includes file metadata:

```
========================================================================================
== FILE: path/to/file.py
== DATE: 2025-05-15 14:30:21 | SIZE: 2.50 KB | TYPE: .py
== CHECKSUM_SHA256: abcdef1234567890...
========================================================================================
```

### Markdown Style

Formats the metadata as Markdown with proper code blocks, using the file
extension to set syntax highlighting:

````markdown
## path/to/file.py

**Date Modified:** 2025-05-15 14:30:21 | **Size:** 2.50 KB | **Type:** .py |
**Checksum (SHA256):** abcdef1234567890...

```python
# File content starts here
def example():
    return "Hello, world!"
```
````

### MachineReadable Style

A robust format designed for reliable automated parsing and processing:

```text
--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
METADATA_JSON:
{
    "original_filepath": "path/to/file.py",
    "original_filename": "file.py",
    "timestamp_utc_iso": "2025-05-15T14:30:21Z",
    "type": ".py",
    "size_bytes": 2560,
    "checksum_sha256": "abcdef1234567890..."
}
--- PYMK1F_END_FILE_METADATA_BLOCK_12345678-1234-1234-1234-123456789abc ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---

# File content here

--- PYMK1F_END_FILE_CONTENT_BLOCK_12345678-1234-1234-1234-123456789abc ---
```

### None Style

Files are concatenated directly without any separators between them.

## Additional Notes

### Binary File Handling

While the script can include binary files using the `--include-binary-files`
option, these are read as text (UTF-8 with error ignoring). This can result in
garbled/unreadable content in the output and significantly increase file size.

### Encoding Behavior

The script uses UTF-8 as the default encoding for reading and writing files.
When using `--convert-to-charset`, the original encoding of each file is
automatically detected and recorded in the file metadata.

### Line Ending Behavior

The `--line-ending` option only affects the line endings generated by the script
(in separators and blank lines), not those in the original files. The line
endings of original files remain unchanged.

### Archive Creation

When `--create-archive` is used, the archive will contain all files selected for
inclusion in the main output file, using their relative paths within the
archive.

### Architecture

The m1f tool has been completely rewritten as a modular Python package:

```
tools/m1f/
├── __init__.py          # Package initialization
├── cli.py               # Command-line interface
├── core.py              # Main orchestration logic
├── config.py            # Configuration management
├── constants.py         # Constants and enums
├── exceptions.py        # Custom exceptions
├── file_processor.py    # File handling with async I/O
├── encoding_handler.py  # Smart encoding detection
├── security_scanner.py  # Secret detection integration
├── output_writer.py     # Output generation
├── archive_creator.py   # Archive functionality
├── separator_generator.py # Separator formatting
├── logging.py           # Structured logging
└── utils.py             # Utility functions
```

### Performance Considerations

With the new async I/O architecture, m1f can handle large projects more
efficiently:

- Concurrent file reading and processing
- Memory-efficient streaming for large files
- Smart caching to avoid redundant operations
- Content deduplication saves space and processing time

For extremely large directories with tens of thousands of files or very large
individual files, the script might take some time to process.

## Preset System

The preset system provides powerful file-specific processing capabilities:

### Key Features

- **Hierarchical Configuration**: Settings cascade from global → project → CLI
- **File-Type Processing**: Apply different rules to different file extensions
- **Processing Actions**:
  - `minify` - Reduce file size by removing unnecessary characters
  - `strip_tags` - Remove HTML tags
  - `strip_comments` - Remove code comments
  - `compress_whitespace` - Reduce multiple spaces/newlines
  - `remove_empty_lines` - Clean up empty lines
- **Per-File Settings**: Override security, size limits, and filters per file
  type
- **Custom Processors**: Extend with your own processing functions

### Quick Start

1. Create a preset file in your project (`.m1f-presets.yml`):

```yaml
globals:
  global_settings:
    include_extensions: [.js, .css, .html, .php]
    security_check: warn
    max_file_size: 1MB

  presets:
    frontend:
      extensions: [.js, .css, .html]
      actions: [minify]

    backend:
      extensions: [.php]
      security_check: fail
      max_file_size: 500KB
```

2. Use the preset:

```bash
m1f -s ./src -o output.txt --preset .m1f-presets.yml
```

### Documentation

**Core Documentation:**

- [Quick Reference](./09_quick_reference.md) - Common commands and patterns
- [CLI Reference](./07_cli_reference.md) - Complete command-line reference
- [Troubleshooting Guide](./08_troubleshooting.md) - Common issues and solutions

**Preset System:**

- [Complete Preset Guide](02_m1f_presets.md) - Full preset system documentation
- [Per-File Settings](03_m1f_preset_per_file_settings.md) - Advanced file-type
  overrides
- [Example Presets](../presets/) - Ready-to-use preset templates

**Workflows and Integration:**

- [Development Workflow](./21_development_workflow.md) - Best practices
- [Claude Code Integration](./31_claude_code_integration.md) - AI-assisted
  development
- [Auto Bundle Guide](./20_auto_bundle_guide.md) - Automated bundling

======= docs/01_m1f/01_quick_reference.md ======
# m1f Quick Reference

## Most Common Commands

### Basic File Combination

```bash
# Combine all files in current directory
m1f -s . -o output.txt

# Combine specific directory
m1f -s ./src -o bundle.txt

# Force overwrite existing output
m1f -s . -o output.txt -f
```

### Using Presets (v3.2.0+)

```bash
# Use a preset file (can define ALL parameters)
m1f --preset production.yml -o output.txt

# Preset can even define source and output
m1f --preset full-config.yml

# Override preset values with CLI
m1f --preset prod.yml -o custom-output.txt -v
```

### File Type Filtering

```bash
# Only Python files
m1f -s . -o code.txt --include-extensions .py

# Multiple file types
m1f -s . -o docs.txt --include-extensions .md .txt .rst

# Exclude certain types
m1f -s . -o output.txt --exclude-extensions .pyc .log
```

### Directory and Pattern Exclusions

```bash
# Exclude specific directories
m1f -s . -o output.txt --excludes "tests/" "docs/"

# Exclude patterns
m1f -s . -o output.txt --excludes "*.test.js" "*/tmp/*"

# Use gitignore file
m1f -s . -o output.txt --exclude-paths-file .gitignore
```

### Output Formatting

```bash
# Markdown format
m1f -s . -o output.md --separator-style Markdown

# Machine-readable JSON metadata
m1f -s . -o output.txt --separator-style MachineReadable

# No separators
m1f -s . -o output.txt --separator-style None
```

### Size Management

```bash
# Skip large files
m1f -s . -o output.txt --max-file-size 100KB

# Include only small text files
m1f -s . -o small.txt --max-file-size 50KB --include-extensions .txt .md
```

### Archive Creation

```bash
# Create zip backup
m1f -s . -o output.txt --create-archive

# Create tar.gz backup
m1f -s . -o output.txt --create-archive --archive-type tar.gz
```

### Using Presets

```bash
# Use single preset
m1f -s . -o output.txt --preset wordpress.m1f-presets.yml

# Use preset group
m1f -s . -o output.txt --preset web.yml --preset-group frontend

# Multiple presets (merged in order)
m1f -s . -o output.txt --preset base.yml project.yml
```

## Common Patterns

### Documentation Bundle

```bash
m1f -s ./docs -o documentation.txt \
    --include-extensions .md .rst .txt \
    --separator-style Markdown
```

### Source Code Bundle

```bash
m1f -s ./src -o source-code.txt \
    --include-extensions .py .js .ts .jsx .tsx \
    --excludes "*.test.*" "*.spec.*" \
    --max-file-size 500KB
```

### WordPress Theme/Plugin

```bash
m1f -s ./wp-content/themes/mytheme -o theme.txt \
    --include-extensions .php .js .css \
    --excludes "node_modules/" "vendor/" \
    --preset presets/wordpress.m1f-presets.yml
```

### Clean Documentation Export

```bash
m1f -s ./scraped_docs -o clean-docs.txt \
    --include-extensions .md \
    --remove-scraped-metadata \
    --separator-style Markdown
```

### Multiple Exclude/Include Files

```bash
# Multiple exclude files (merged)
m1f -s . -o output.txt \
    --exclude-paths-file .gitignore .dockerignore custom-excludes.txt

# Whitelist mode with include files
m1f -s . -o api-bundle.txt \
    --include-paths-file api-files.txt core-files.txt \
    --exclude-paths-file .gitignore
```

### Working with File Lists (-i)

```bash
# Single input file
m1f -s . -i files.txt -o output.txt

# Merge multiple file lists (Bash)
m1f -s . -i <(cat critical.txt important.txt nice-to-have.txt) -o output.txt

# Combine with filters (input files bypass filters)
m1f -s . -i must-include.txt -o output.txt \
    --exclude-paths-file .gitignore
```

### CI/CD Integration

```bash
# Create timestamped output
m1f -s . -o build.txt -t

# Minimal output for automation
m1f -s . -o output.txt --minimal-output --quiet

# With security check
m1f -s . -o output.txt --security-check abort
```

## Quick Option Reference

| Short | Long                 | Purpose                   |
| ----- | -------------------- | ------------------------- |
| `-s`  | `--source-directory` | Source directory          |
| `-i`  | `--input-file`       | File list input           |
| `-o`  | `--output-file`      | Output file (required)    |
| `-f`  | `--force`            | Overwrite existing        |
| `-t`  | `--add-timestamp`    | Add timestamp to filename |
| `-v`  | `--verbose`          | Detailed output           |
| `-q`  | `--quiet`            | Suppress output           |

## Separator Styles

- **Standard**: Simple filename separator
- **Detailed**: Full metadata (default)
- **Markdown**: Markdown formatting
- **MachineReadable**: JSON metadata
- **None**: No separators

## Size Units

- `B`: Bytes
- `KB`: Kilobytes (1024 bytes)
- `MB`: Megabytes
- `GB`: Gigabytes

Example: `--max-file-size 1.5MB`

## Exit on Success

```bash
m1f -s . -o output.txt && echo "Success!"
```

## Aliases Setup

Add to your shell profile:

```bash
alias m1f='python /path/to/m1f/tools/m1f.py'
alias m1f-docs='m1f -s . -o docs.txt --include-extensions .md .txt'
alias m1f-code='m1f -s . -o code.txt --include-extensions .py .js'
```

## Need Help?

- Full options: `m1f --help`
- [Complete CLI Reference](./02_cli_reference.md)
- [Troubleshooting Guide](./03_troubleshooting.md)
- [Preset Documentation](./10_m1f_presets.md)

======= docs/01_m1f/02_cli_reference.md ======
# m1f CLI Reference

This is a comprehensive reference for all command-line parameters and flags
available in m1f v3.2.0.

## Synopsis

```bash
m1f [-h] [--version] [-s DIR] [-i FILE] -o FILE
    [--input-include-files [FILE ...]]
    [--separator-style {Standard,Detailed,Markdown,MachineReadable,None}]
    [--line-ending {lf,crlf}] [-t] [--filename-mtime-hash]
    [--excludes [PATTERN ...]] [--exclude-paths-file FILE ...]
    [--include-paths-file FILE ...]
    [--include-extensions [EXT ...]] [--exclude-extensions [EXT ...]]
    [--include-dot-paths] [--include-binary-files] [--include-symlinks]
    [--max-file-size SIZE] [--no-default-excludes]
    [--remove-scraped-metadata]
    [--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}]
    [--abort-on-encoding-error] [--no-prefer-utf8-for-text-files]
    [--security-check {error,warn,skip}]
    [--create-archive] [--archive-type {zip,tar.gz}] [-f]
    [--minimal-output] [--skip-output-file] [--allow-duplicate-files]
    [-v] [-q]
    [--preset FILE [FILE ...]] [--preset-group GROUP]
    [--disable-presets]
```

## General Options

### `--help`, `-h`

Show help message and exit.

### `--version`

Show program version and exit. Current version: v3.2.0

## Input/Output Options

### `--source-directory DIR`, `-s DIR`

Path to the directory containing files to combine. Can be used multiple times to
process multiple directories.

### `--input-file FILE`, `-i FILE`

Path to a text file containing a list of files/directories to process, one per
line. These files are explicitly included and bypass all filter rules.

**Note**: At least one of `-s` (source directory) or `-i` (input file) must be
specified. When using `-i` alone, relative paths in the input file are resolved
relative to the current working directory. When both `-s` and `-i` are used,
relative paths in the input file are resolved relative to the source directory.

Example input file:

```
# Comments are supported
src/main.py          # Relative to source directory
/absolute/path.txt   # Absolute path
docs/**/*.md         # Glob patterns supported
```

**Merging multiple file lists with Bash**:

```bash
# Create temporary merged file
cat files1.txt files2.txt files3.txt > merged_files.txt
m1f -s . -i merged_files.txt -o output.txt

# Or use process substitution (Linux/Mac)
m1f -s . -i <(cat files1.txt files2.txt files3.txt) -o output.txt

# Remove duplicates while merging
m1f -s . -i <(cat files1.txt files2.txt | sort -u) -o output.txt
```

### `--output-file FILE`, `-o FILE` (REQUIRED)

Path where the combined output file will be created. This is the only required
parameter.

### `--input-include-files [FILE ...]`

Files to include at the beginning of the output. The first file is treated as an
introduction/header.

## Output Formatting

### `--separator-style {Standard,Detailed,Markdown,MachineReadable,None}`

Format of the separator between files. Default: `Detailed`

- **Standard**: Simple separator with filename
- **Detailed**: Includes file metadata (date, size, type, checksum)
- **Markdown**: Markdown-formatted headers and metadata
- **MachineReadable**: JSON metadata blocks for programmatic parsing
- **None**: No separators (files concatenated directly)

### `--line-ending {lf,crlf}`

Line ending style for generated content. Default: `lf`

- **lf**: Unix/Linux/Mac style (\n)
- **crlf**: Windows style (\r\n)

### `--add-timestamp`, `-t`

Add timestamp to output filename in format `_YYYYMMDD_HHMMSS`.

### `--filename-mtime-hash`

Add hash of file modification times to output filename. Useful for
cache-busting.

## File Filtering

### `--excludes [PATTERN ...]`

Paths, directories, or glob patterns to exclude. Supports wildcards.

Example: `--excludes "*/tests/*" "*.pyc" "node_modules/"`

### `--exclude-paths-file FILE ...`

File(s) containing paths to exclude (supports gitignore format). Each pattern on
a new line. Multiple files can be specified and will be merged. Non-existent
files are skipped gracefully.

Examples:

```bash
# Single file
m1f -s . -o output.txt --exclude-paths-file .gitignore

# Multiple files
m1f -s . -o output.txt --exclude-paths-file .gitignore .m1fignore custom-excludes.txt
```

### `--include-paths-file FILE ...`

File(s) containing patterns to include (supports gitignore format). When
specified, only files matching these patterns will be included (whitelist mode).
Multiple files can be specified and will be merged. Non-existent files are
skipped gracefully.

**Processing Order**:

1. Files from `-i` (input-file) are always included, bypassing all filters
2. Files from `-s` (source directory) are filtered by include patterns first
3. Then exclude patterns are applied

**Path Resolution**: Same as `-i` - relative paths are resolved relative to the
source directory (`-s`).

Example include file:

```
# Include all Python files
*.py
# Include specific directories
src/**/*
api/**/*
# Exclude tests even if they match above
!test_*.py
```

Examples:

```bash
# Single file
m1f -s . -o output.txt --include-paths-file important-files.txt

# Multiple files
m1f -s . -o output.txt --include-paths-file core-files.txt api-files.txt

# Combined with input file (input file takes precedence)
m1f -s . -i explicit-files.txt -o output.txt --include-paths-file patterns.txt
```

### `--include-extensions [EXT ...]`

Only include files with these extensions. Extensions should include the dot.

Example: `--include-extensions .py .js .md`

### `--exclude-extensions [EXT ...]`

Exclude files with these extensions.

Example: `--exclude-extensions .pyc .pyo`

### `--include-dot-paths`

Include files and directories starting with a dot (hidden files). By default,
these are excluded.

### `--include-binary-files`

Attempt to include binary files. Use with caution as this may produce unreadable
output.

### `--include-symlinks`

Follow symbolic links. Be careful of infinite loops!

### `--max-file-size SIZE`

Skip files larger than specified size. Supports KB, MB, GB suffixes.

Examples: `10KB`, `1.5MB`, `2GB`

### `--no-default-excludes`

Disable default exclusions. By default, m1f excludes:

- `.git/`, `.svn/`, `.hg/`
- `node_modules/`, `venv/`, `.venv/`
- `__pycache__/`, `*.pyc`
- `.DS_Store`, `Thumbs.db`

### `--remove-scraped-metadata`

Remove scraped metadata (URL, timestamp) from HTML2MD files during processing.
Useful when processing scraped content.

## Character Encoding

### `--convert-to-charset {utf-8,utf-16,utf-16-le,utf-16-be,ascii,latin-1,cp1252}`

Convert all files to specified encoding. Default behavior is to detect and
preserve original encoding.

### `--abort-on-encoding-error`

Abort if encoding conversion fails. By default, files with encoding errors are
skipped with a warning.

### `--no-prefer-utf8-for-text-files`

Disable UTF-8 preference for text files (.md, .txt, .rst) when encoding is
ambiguous. By default, m1f prefers UTF-8 encoding for these file types when
chardet detects windows-1252 with less than 95% confidence, as these files often
contain UTF-8 emojis or special characters.

## Security Options

### `--security-check {error,warn,skip}`

Check for sensitive information in files using detect-secrets.

- **error**: Stop processing if secrets are found (default in v3.2)
- **warn**: Include files but show warnings
- **skip**: Disable security scanning (not recommended)

## Archive Options

### `--create-archive`

Create backup archive of processed files in addition to the combined output.

### `--archive-type {zip,tar.gz}`

Type of archive to create. Default: `zip`

## Output Control

### `--force`, `-f`

Force overwrite of existing output file without prompting.

### `--minimal-output`

Only create the combined file (no auxiliary files like file lists or directory
structure).

### `--skip-output-file`

Skip creating the main output file. Useful when only creating an archive.

### `--allow-duplicate-files`

Allow files with identical content to be included in the output. By default, m1f
deduplicates files based on their content checksum to save space and tokens.
With this flag, all files are included even if they have identical content.

### `--verbose`, `-v`

Enable verbose output with detailed processing information.

### `--quiet`, `-q`

Suppress all console output except errors.

## Preset Configuration

### `--preset FILE [FILE ...]`

Load preset configuration file(s) for file-specific processing. Multiple files
are merged in order.

### `--preset-group GROUP`

Use a specific preset group from the configuration file.

### `--disable-presets`

Disable all preset processing, even if preset files are specified.

## Exit Codes

- **0**: Success
- **1**: General error (M1FError base)
- **2**: File not found (FileNotFoundError)
- **3**: Permission denied (PermissionError)
- **4**: Encoding error (EncodingError)
- **5**: Configuration error (ConfigurationError)
- **6**: Validation error (ValidationError)
- **7**: Security check failed (SecurityError)
- **8**: Archive creation failed (ArchiveError)
- **130**: Operation cancelled by user (Ctrl+C)

## Environment Variables

**Note**: The following environment variables are documented for future
implementation but are not currently supported in v3.2.0:

- `M1F_DEFAULT_PRESET` - Path to default preset file (not implemented)
- `M1F_SECURITY_CHECK` - Default security check mode (not implemented)
- `M1F_MAX_FILE_SIZE` - Default maximum file size limit (not implemented)

## Subcommands

### `auto-bundle`

Create multiple m1f bundles based on a YAML configuration file
(`.m1f.config.yml`).

```bash
# Create all bundles
m1f auto-bundle

# Create specific bundle
m1f auto-bundle BUNDLE_NAME

# List available bundles
m1f auto-bundle --list

# With options
m1f auto-bundle --verbose
m1f auto-bundle --quiet
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle` that can be used interchangeably:

```bash
# These are equivalent:
m1f auto-bundle
m1f-update

# With specific bundle:
m1f auto-bundle code
m1f-update code
```

**Options:**

- `BUNDLE_NAME`: Name of specific bundle to create (optional)
- `--list`: List available bundles from configuration
- `--verbose`, `-v`: Enable verbose output
- `--quiet`, `-q`: Suppress all console output

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for detailed configuration
instructions.

## Notes

1. **Module Invocation**: You can use either `m1f` or
   `python -m tools.m1f`, or set up the `m1f` alias as described in the
   development workflow.

2. **Input Requirements**: At least one of `-s` (source directory) or `-i`
   (input file) must be specified. If neither is provided, m1f will show an
   error message.

3. **Gitignore**: m1f respects .gitignore files by default unless
   `--no-default-excludes` is used.

4. **Performance**: For large projects, use `--include-extensions` to limit
   processing to specific file types.

======= docs/01_m1f/03_troubleshooting.md ======
# Troubleshooting Guide

This guide covers common issues and error messages you might encounter when
using m1f.

## Common Issues

### Module Import Error

**Problem**: Running `m1f` results in:

```
ModuleNotFoundError: No module named 'm1f'
```

**Solution**: Use the direct script invocation instead:

```bash
m1f [options]
```

Or set up the alias as described in the
[Development Workflow](./21_development_workflow.md).

### Permission Denied

**Problem**: Error when trying to write output file:

```
PermissionError: [Errno 13] Permission denied: '/path/to/output.txt'
```

**Solutions**:

1. Check write permissions in the output directory
2. Use a different output location
3. Run with appropriate permissions (avoid using sudo unless necessary)

### File Not Found

**Problem**: Source directory or input file not found.

**Solutions**:

1. Verify the path exists: `ls -la /path/to/source`
2. Use absolute paths to avoid confusion
3. Check for typos in the path

### Encoding Errors

**Problem**: `UnicodeDecodeError` when processing files.

**Solutions**:

1. Use `--convert-to-charset utf-8` to force UTF-8 encoding
2. Skip problematic files with proper exclusion patterns
3. Use `--abort-on-encoding-error` to identify problematic files

Example:

```bash
m1f -s . -o output.txt --convert-to-charset utf-8
```

### Memory Issues with Large Projects

**Problem**: Memory usage is too high or process is killed.

**Solutions**:

1. Use `--max-file-size` to limit individual file sizes
2. Process specific directories instead of entire project
3. Use `--include-extensions` to limit file types
4. Enable minimal output mode: `--minimal-output`

Example:

```bash
m1f -s . -o output.txt --max-file-size 1MB --include-extensions .py .md
```

### Symlink Cycles

**Problem**: Infinite loop when following symlinks.

**Solutions**:

1. Don't use `--include-symlinks` unless necessary
2. Exclude directories with circular symlinks
3. m1f has built-in cycle detection, but it's better to avoid the issue

### Security Check Failures

**Problem**: Files contain sensitive information.

**Solutions**:

1. Review the detected secrets
2. Use `--security-check skip` to skip files with secrets
3. Use `--security-check warn` to include but get warnings
4. Add sensitive files to exclusions

Example:

```bash
m1f -s . -o output.txt --security-check warn --excludes ".env" "config/secrets.yml"
```

## Error Messages

### "Output file already exists"

**Meaning**: The specified output file exists and would be overwritten.

**Solution**: Use `-f` or `--force` to overwrite, or choose a different output
filename.

### "No files found to process"

**Meaning**: No files matched the inclusion criteria.

**Solutions**:

1. Check your source directory contains files
2. Verify extension filters aren't too restrictive
3. Check exclusion patterns aren't excluding everything
4. Use `--verbose` to see what's being processed

### "File size exceeds maximum allowed"

**Meaning**: A file is larger than the specified `--max-file-size`.

**Solution**: The file is automatically skipped. Adjust `--max-file-size` if
needed.

### "Failed to create archive"

**Meaning**: Archive creation failed (disk space, permissions, etc.).

**Solutions**:

1. Check available disk space
2. Verify write permissions
3. Try a different archive format
4. Skip archive creation and create output file only

### "Preset file not found"

**Meaning**: The specified preset configuration file doesn't exist.

**Solutions**:

1. Check the preset file path
2. Use absolute paths for preset files
3. Verify preset file exists: `ls -la presets/`

## Performance Optimization

### Slow Processing

**Solutions**:

1. Use `--include-extensions` to limit file types
2. Exclude large directories like `node_modules`
3. Use `--max-file-size` to skip large files
4. Enable minimal output: `--minimal-output`
5. Disable security checks if not needed

### High Memory Usage

**Solutions**:

1. Process smaller directory trees
2. Use file size limits
3. Exclude binary files
4. Process in batches using input file lists

## Debug Mode

For detailed debugging information:

```bash
m1f -s . -o output.txt --verbose
```

This will show:

- Files being processed
- Files being skipped and why
- Processing times
- Detailed error messages

## Getting Help

1. Check the [CLI Reference](./02_cli_reference.md) for parameter details
2. Review [examples in the main documentation](00_m1f.md#common-use-cases)
3. Check the [preset documentation](./10_m1f_presets.md) for configuration
   issues
4. Report issues at the project repository

## Exit Codes

Understanding exit codes can help in scripting:

- `0`: Success
- `1`: General error
- `2`: Invalid arguments
- `3`: File not found
- `4`: Permission denied
- `5`: Security check failed

Use in scripts:

```bash
if m1f -s . -o output.txt; then
    echo "Success"
else
    echo "Failed with exit code: $?"
fi
```

======= docs/01_m1f/10_m1f_presets.md ======
# m1f Preset System Documentation

The m1f preset system allows you to define file-specific processing rules,
enabling different handling for different file types within the same bundle.

## Overview

Instead of applying the same settings to all files, presets let you:

- Minify HTML files while preserving source code formatting
- Strip comments from production code but keep them in documentation
- Apply different separator styles for different file types
- Truncate large data files while keeping full source code
- **NEW**: Override security checks and size limits per file type
- **NEW**: Integrate with auto-bundling for intelligent project organization

## Quick Start

1. **Use a built-in preset**:

   ```bash
   m1f -s ./my-project -o bundle.txt --preset presets/wordpress.m1f-presets.yml
   ```

2. **Specify a preset group**:

   ```bash
   m1f -s ./site -o bundle.txt --preset presets/web-project.m1f-presets.yml --preset-group frontend
   ```

3. **Use multiple preset files**:
   ```bash
   m1f -s . -o bundle.txt --preset company-presets.yml project-presets.yml
   ```

## Preset Configuration File

Preset files are YAML documents that define processing rules:

```yaml
# Group name
my_project:
  description: "Processing rules for my project"
  enabled: true
  priority: 10 # Higher priority groups are checked first
  base_path: "src" # Optional base path for patterns

  presets:
    # Preset for Python files
    python:
      extensions: [".py"]
      patterns:
        - "*.py"
        - "lib/**/*.py"
      actions:
        - strip_comments
        - remove_empty_lines
      separator_style: "Detailed"
      include_metadata: true

    # Preset for HTML files
    html:
      extensions: [".html", ".htm"]
      actions:
        - minify
        - strip_tags
      strip_tags: ["script", "style"]
      preserve_tags: ["pre", "code"]
      max_lines: 500 # Truncate after 500 lines

    # Default preset for unmatched files
    default:
      actions: []
      include_metadata: true
```

## Available Actions

### Built-in Actions

1. **`minify`** - Reduces file size by removing unnecessary whitespace

   - HTML: Removes comments, compresses whitespace
   - CSS: Removes comments, compresses rules
   - JS: Basic minification (removes comments and newlines)

2. **`strip_tags`** - Removes HTML tags

   - Use `strip_tags` to list tags to remove
   - Use `preserve_tags` to protect specific tags

3. **`strip_comments`** - Removes comments based on file type

   - Python: Removes # comments (preserves docstrings)
   - JS/Java/C/C++: Removes // and /\* \*/ comments

4. **`compress_whitespace`** - Normalizes whitespace

   - Replaces multiple spaces with single space
   - Reduces multiple newlines to double newline

5. **`remove_empty_lines`** - Removes all empty lines

6. **`custom`** - Apply custom processor
   - Specify processor with `custom_processor`
   - Pass arguments with `processor_args`

### Built-in Custom Processors

1. **`truncate`** - Limit content length

   ```yaml
   actions:
     - custom
   custom_processor: "truncate"
   processor_args:
     max_chars: 1000
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   actions:
     - custom
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)api[_-]?key\s*[:=]\s*["\']?[\w-]+["\']?'
   ```

3. **`extract_functions`** - Extract only function definitions (Python)
   ```yaml
   actions:
     - custom
   custom_processor: "extract_functions"
   ```

## Preset Options

### File Matching

- **`extensions`**: List of file extensions (e.g., `[".py", ".js"]`)
- **`patterns`**: Glob patterns for matching files (e.g., `["src/**/*.py"]`)

### Processing Options

- **`actions`**: List of processing actions to apply
- **`strip_tags`**: HTML tags to remove
- **`preserve_tags`**: HTML tags to keep when stripping
- **`separator_style`**: Override default separator ("Standard", "Detailed",
  "Markdown", "None")
- **`include_metadata`**: Whether to include file metadata (default: true)
- **`max_lines`**: Truncate file after N lines

### Custom Processing

- **`custom_processor`**: Name of custom processor
- **`processor_args`**: Arguments for custom processor

## Examples

### WordPress Project

```yaml
wordpress:
  description: "WordPress project processing"

  presets:
    php:
      extensions: [".php"]
      actions:
        - strip_comments
        - remove_empty_lines

    config:
      patterns: ["wp-config*.php", ".env*"]
      actions:
        - custom
      custom_processor: "redact_secrets"

    sql:
      extensions: [".sql"]
      actions:
        - strip_comments
      max_lines: 1000 # Truncate large dumps
```

### Frontend Project

```yaml
frontend:
  description: "React/Vue/Angular project"

  presets:
    components:
      extensions: [".jsx", ".tsx", ".vue"]
      actions:
        - strip_comments
        - compress_whitespace

    styles:
      extensions: [".css", ".scss"]
      actions:
        - minify
      # Note: exclude_patterns is available in global_settings, not in presets

    images:
      extensions: [".png", ".jpg", ".svg"]
      actions:
        - custom
      custom_processor: "truncate"
      processor_args:
        max_chars: 50 # Just filename
```

### Documentation Project

```yaml
documentation:
  description: "Documentation processing"

  presets:
    markdown:
      extensions: [".md", ".mdx"]
      actions:
        - remove_empty_lines
      separator_style: "Markdown"

    code_examples:
      patterns: ["examples/**/*"]
      actions:
        - strip_comments
      max_lines: 50 # Keep examples concise
```

## Priority and Selection

When multiple preset groups are loaded:

1. Groups are checked by priority (highest first)
2. Within a group, presets are checked in order:
   - Extension matches
   - Pattern matches
   - Default preset
3. First matching preset is used
4. If no preset matches, standard m1f processing applies

## Command Line Usage

```bash
# Use single preset file
m1f -s . -o out.txt --preset my-presets.yml

# Use specific group
m1f -s . -o out.txt --preset presets.yml --preset-group backend

# Multiple preset files (merged in order)
m1f -s . -o out.txt --preset base.yml project.yml

# Disable all presets
m1f -s . -o out.txt --preset presets.yml --disable-presets
```

## Complete List of Supported Settings

### Global Settings

These apply to all files unless overridden:

```yaml
global_settings:
  # Encoding and formatting
  encoding: "utf-8"
  separator_style: "Detailed"
  line_ending: "lf"

  # Include/exclude patterns
  include_patterns: ["src/**/*", "lib/**/*"]
  exclude_patterns: ["*.min.js", "*.map"]
  include_extensions: [".py", ".js", ".md"]
  exclude_extensions: [".log", ".tmp"]

  # File filtering
  include_dot_paths: false
  include_binary_files: false
  include_symlinks: false
  no_default_excludes: false
  max_file_size: "10MB"

  # Exclude/include file(s) - can be single file or list
  exclude_paths_file: ".gitignore"
  # Or multiple files:
  # exclude_paths_file:
  #   - ".gitignore"
  #   - ".m1fignore"
  #   - "custom-excludes.txt"

  # Include file(s) for whitelist mode
  # include_paths_file: "important-files.txt"
  # Or multiple files:
  # include_paths_file:
  #   - "core-files.txt"
  #   - "api-files.txt"

  # Processing options
  remove_scraped_metadata: true
  abort_on_encoding_error: false

  # Security
  security_check: "warn" # abort, skip, warn
```

### Extension-Specific Settings

All file-specific settings can now be overridden per extension in
global_settings or in individual presets:

```yaml
global_settings:
  extensions:
    .md:
      actions: [remove_empty_lines]
      security_check: null # Disable security checks for markdown
      remove_scraped_metadata: true
    .php:
      actions: [strip_comments]
      security_check: "abort" # Strict security for PHP
      max_file_size: "5MB"
    .css:
      actions: [minify]
      max_file_size: "50KB" # Stricter size limit for CSS
    .log:
      include_dot_paths: true # Include hidden log files
      max_file_size: "100KB"

presets:
  sensitive_code:
    extensions: [".env", ".key", ".pem"]
    security_check: "abort"
    include_binary_files: false

  documentation:
    extensions: [".md", ".txt", ".rst"]
    security_check: null # No security check for docs
    remove_scraped_metadata: true
```

## Advanced Examples

### Security Check per File Type

Disable security checks for documentation but keep them for code:

```yaml
security_example:
  global_settings:
    security_check: "abort" # Default: strict

    extensions:
      .md:
        security_check: null # Disable for markdown
      .txt:
        security_check: null # Disable for text
      .rst:
        security_check: null # Disable for reStructuredText
      .php:
        security_check: "abort" # Keep strict for PHP
      .js:
        security_check: "warn" # Warn only for JS
      .env:
        security_check: "abort" # Very strict for env files
```

### Size Limits per File Type

Different size limits for different file types:

```yaml
size_limits:
  global_settings:
    max_file_size: "1MB" # Default limit

    extensions:
      .css:
        max_file_size: "50KB" # Stricter for CSS
      .js:
        max_file_size: "100KB" # JavaScript limit
      .php:
        max_file_size: "5MB" # More lenient for PHP
      .sql:
        max_file_size: "10MB" # Large SQL dumps allowed
      .log:
        max_file_size: "500KB" # Log file limit

  presets:
    # Override for specific patterns
    vendor_files:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      max_file_size: "10KB" # Very small for vendor files
```

### Different Processing by Location

Process files differently based on their location:

```yaml
conditional:
  presets:
    # Production files - minify and strip
    production:
      patterns: ["dist/**/*", "build/**/*"]
      actions: [minify, strip_comments]

    # Development files - keep readable
    development:
      patterns: ["src/**/*", "dev/**/*"]
      actions: [remove_empty_lines]

    # Vendor files - skip processing
    vendor:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      actions: [] # No processing
```

### Combining Multiple Presets

You can load multiple preset files that build on each other:

```bash
m1f -s . -o bundle.txt \
  --preset base-rules.yml \
  --preset project-specific.yml \
  --preset production-overrides.yml
```

## Creating Custom Presets

1. **Start with a template**:

   ```bash
   # Use the comprehensive template with all available settings
   cp presets/template-all-settings.m1f-presets.yml my-project.m1f-presets.yml

   # Or start from a simpler example
   cp presets/web-project.m1f-presets.yml my-project.m1f-presets.yml
   ```

2. **Customize for your project**:

   - Identify file types needing special handling
   - Choose appropriate actions
   - Test with a small subset first

3. **Tips**:
   - Use `max_lines` for generated or data files
   - Apply `minify` only to production builds
   - Keep `preserve_tags` for code examples in HTML
   - Use high priority for project-specific rules

## Integration with CI/CD

```yaml
# GitHub Actions example
- name: Create bundle with presets
  run: |
    m1f \
      -s . \
      -o release-bundle.txt \
      --preset .github/release-presets.yml \
      --preset-group production
```

## Troubleshooting

### Preset not applying

- Check file extension includes the dot (`.py` not `py`)
- Verify pattern matches with `--verbose` flag
- Ensure preset group is enabled

### Wrong preset selected

- Check priority values (higher = checked first)
- Use specific patterns over broad extensions
- Use `--preset-group` to target specific group

### Processing errors

- Some actions may not work on all file types
- Binary files skip most processing
- Use `--verbose` to see which presets are applied

## Auto-Bundling Integration

The preset system integrates seamlessly with the auto-bundling scripts:

### Using Presets with Auto-Bundle

1. **With VS Code Tasks**:

   - Use the "Auto Bundle: With Preset" task
   - Select your preset file and optional group
   - The bundle will apply file-specific processing

2. **With m1f-update Command**:

   ```bash
   # Create all bundles with auto-bundle
   m1f-update

   # Create specific bundle
   m1f-update wordpress

   # List available bundles
   m1f-update --list
   ```

3. **Available Preset Bundles**:
   - `wordpress` - Theme and plugin development
   - `web-project` - Frontend/backend web projects
   - `documentation` - Documentation-focused bundles
   - Custom presets in `presets/` directory

### Benefits

- **Intelligent Filtering**: Each preset knows which files to include
- **Optimized Processing**: Apply minification only where beneficial
- **Security Control**: Different security levels for different file types
- **Size Management**: Appropriate size limits per file type

See the [Auto Bundle Guide](20_auto_bundle_guide.md) for more details on the
bundling system.

## See Also

- [**Preset System Complete Reference**](./10_preset_reference.md) -
  Comprehensive reference with all settings, undocumented features, and advanced
  patterns
- [**Per-File Settings Guide**](./11_preset_per_file_settings.md) - Deep dive
  into per-file processing
- [**Auto Bundle Guide**](./20_auto_bundle_guide.md) - Automated bundling with
  presets

======= docs/01_m1f/11_preset_per_file_settings.md ======
# Per-File-Type Settings in m1f Presets

The m1f preset system supports fine-grained control over processing settings on
a per-file-type basis. This allows you to apply different rules to different
file types within the same bundle.

## Overview

You can override almost any m1f setting for specific file extensions or
patterns. This is particularly useful for:

- Disabling security checks for documentation while keeping them for code
- Setting different size limits for CSS vs PHP files
- Applying different processing rules based on file type
- Handling sensitive files differently from public files

## Supported Per-File Settings

The following settings can be overridden on a per-file basis:

### Processing Settings

- `actions` - List of processing actions (minify, strip_comments, etc.)
- `strip_tags` - HTML tags to remove
- `preserve_tags` - HTML tags to preserve
- `separator_style` - Override separator style for specific files
- `include_metadata` - Whether to include file metadata
- `max_lines` - Truncate after N lines

### Security & Filtering

- `security_check` - Override security scanning (`"abort"`, `"skip"`, `"warn"`,
  `null`)
- `max_file_size` - File-specific size limit (e.g., `"50KB"`, `"5MB"`)
- `remove_scraped_metadata` - Remove HTML2MD metadata for specific files
- `include_dot_paths` - Include hidden files for this type
- `include_binary_files` - Include binary files for this type

### Custom Processing

- `custom_processor` - Name of custom processor to use
- `processor_args` - Arguments for the custom processor

## Configuration Methods

### Method 1: Global Extension Settings

Define defaults for all files of a specific extension:

```yaml
my_project:
  global_settings:
    # Default settings for all files
    security_check: "abort"
    max_file_size: "1MB"

    # Extension-specific overrides
    extensions:
      .md:
        security_check: null # Disable for markdown
        remove_scraped_metadata: true
        max_file_size: "500KB"

      .php:
        security_check: "abort" # Keep strict for PHP
        max_file_size: "5MB"
        actions: [strip_comments]

      .css:
        max_file_size: "50KB" # Strict limit for CSS
        actions: [minify, strip_comments]

      .env:
        security_check: "abort"
        include_dot_paths: true # Include .env files
        max_file_size: "10KB"
```

### Method 2: Preset-Specific Settings

Define settings for files matching specific patterns:

```yaml
my_project:
  presets:
    documentation:
      extensions: [".md", ".rst", ".txt"]
      patterns: ["docs/**/*", "README*"]
      security_check: null # No security check
      remove_scraped_metadata: true
      max_file_size: "1MB"

    sensitive_files:
      extensions: [".env", ".key", ".pem"]
      patterns: ["config/**/*", "secrets/**/*"]
      security_check: "abort"
      max_file_size: "50KB"
      include_dot_paths: true

    vendor_code:
      patterns: ["vendor/**/*", "node_modules/**/*"]
      security_check: null # Don't check third-party code
      max_file_size: "100KB" # Only include small files
      actions: [] # No processing
```

## Real-World Examples

### Example 1: Web Project with Mixed Content

```yaml
web_project:
  global_settings:
    # Defaults
    security_check: "warn"
    max_file_size: "2MB"

    extensions:
      # Documentation - relaxed rules
      .md:
        security_check: null
        remove_scraped_metadata: true
        actions: [remove_empty_lines]

      # Frontend - strict size limits
      .css:
        max_file_size: "50KB"
        security_check: "skip"
        actions: [minify]

      .js:
        max_file_size: "100KB"
        security_check: "warn"
        actions: [strip_comments, compress_whitespace]

      # Backend - larger files, strict security
      .php:
        max_file_size: "5MB"
        security_check: "abort"
        actions: [strip_comments]

      # Data files - very different handling
      .sql:
        max_file_size: "10MB"
        security_check: null
        max_lines: 1000 # Truncate large dumps
```

### Example 2: Documentation Project

```yaml
documentation:
  global_settings:
    # Default: include everything for docs
    security_check: null
    remove_scraped_metadata: true

    extensions:
      # Markdown files
      .md:
        actions: [remove_empty_lines]
        separator_style: "Markdown"

      # Code examples in docs
      .py:
        max_lines: 50 # Keep examples short
        actions: [strip_comments]

      # Config examples
      .json:
        actions: [compress_whitespace]
        max_lines: 30

      # Log file examples
      .log:
        max_file_size: "100KB"
        max_lines: 100
```

### Example 3: Security-Focused Configuration

```yaml
secure_project:
  global_settings:
    # Very strict by default
    security_check: "abort"
    abort_on_encoding_error: true

    extensions:
      # Public documentation - can be relaxed
      .md:
        security_check: null

      # Code files - different levels
      .js:
        security_check: "warn" # Client-side code

      .php:
        security_check: "abort" # Server-side code

      .env:
        security_check: "abort"
        max_file_size: "10KB" # Env files should be small

      # Config files - careful handling
      .json:
        security_check: "warn"
        actions: [custom]
        custom_processor: "redact_secrets"
```

## Priority and Precedence

When multiple settings could apply to a file, they are resolved in this order:

1. **File-specific preset settings** (highest priority)
   - Settings in a preset that matches the file
2. **Global extension settings**
   - Settings in `global_settings.extensions`
3. **Global defaults** (lowest priority)
   - Settings in `global_settings`

Example:

```yaml
my_project:
  global_settings:
    max_file_size: "1MB" # Default for all

    extensions:
      .js:
        max_file_size: "500KB" # Override for JS files

  presets:
    vendor_js:
      patterns: ["vendor/**/*.js"]
      max_file_size: "2MB" # Override for vendor JS (highest priority)
```

## Best Practices

1. **Start with sensible defaults** in `global_settings`
2. **Use extension settings** for broad file-type rules
3. **Use presets** for location or context-specific overrides
4. **Document your choices** with comments
5. **Test incrementally** with `--verbose` to see which rules apply

## Limitations

- Settings cascade down but don't merge collections (e.g., `actions` lists
  replace, not extend)
- Some settings only make sense for certain file types
- Binary file detection happens before preset processing

## See Also

- [Preset System Guide](10_m1f_presets.md) - General preset documentation
- [Preset Template](../../presets/template-all-settings.m1f-presets.yml) -
  Complete example with all settings
- [Use Case Examples](../../presets/example-use-cases.m1f-presets.yml) -
  Real-world scenarios

======= docs/01_m1f/12_preset_reference.md ======
# m1f Preset System Complete Reference

This document provides a comprehensive reference for the m1f preset system,
including all available settings, clarifications, and advanced usage patterns.

## Table of Contents

- [Quick Start](#quick-start)
- [Preset File Format](#preset-file-format)
- [All Available Settings](#all-available-settings)
- [Available Actions](#available-actions)
- [Pattern Matching](#pattern-matching)
- [Processing Order](#processing-order)
- [Important Clarifications](#important-clarifications)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Debugging and Best Practices](#debugging-and-best-practices)

## Quick Start

The m1f preset system allows you to define file-specific processing rules and
configurations. Here's a minimal example:

```yaml
# my-preset.yml
web_assets:
  description: "Process web assets"
  presets:
    javascript:
      extensions: [".js", ".jsx"]
      actions: ["minify", "strip_comments"]
```

Use it with:

```bash
# Module invocation (recommended)
m1f -s ./src -o bundle.txt --preset my-preset.yml

# Direct command invocation (if installed)
m1f -s ./src -o bundle.txt --preset my-preset.yml
```

## Preset File Format

### Modern Format (Recommended)

```yaml
# Group name - can be selected with --preset-group
group_name:
  description: "Optional description of this preset group"
  enabled: true # Can disable entire group
  priority: 10 # Higher numbers are processed first (default: 0)
  base_path: "src" # Optional base path for all patterns in this group

  presets:
    # Preset name (for internal reference)
    preset_name:
      patterns: ["*.js", "*.jsx"] # Glob patterns
      extensions: [".js", ".jsx"] # Extension matching (with or without dot)
      actions:
        - minify
        - strip_comments
        - compress_whitespace

      # Per-file overrides
      security_check: "warn" # error, skip, warn
      max_file_size: "500KB"
      include_dot_paths: true
      include_binary_files: false
      remove_scraped_metadata: true

      # Custom processor with arguments
      custom_processor: "truncate"
      processor_args:
        max_lines: 100
        add_marker: true

# Global settings (apply to all groups)
globals:
  global_settings:
    # Input/Output settings (NEW in v3.2.0)
    source_directory: "./src"
    input_file: "files_to_process.txt"
    output_file: "bundle.txt"
    input_include_files:
      - "README.md"
      - "INTRO.txt"

    # Output control (NEW in v3.2.0)
    add_timestamp: true
    filename_mtime_hash: false
    force: false
    minimal_output: false
    skip_output_file: false

    # Archive settings (NEW in v3.2.0)
    create_archive: false
    archive_type: "zip" # zip or tar.gz

    # Runtime behavior (NEW in v3.2.0)
    verbose: false
    quiet: false

    # Default file processing
    security_check: "warn"
    max_file_size: "1MB"

    # Per-extension settings
    extensions:
      .py:
        security_check: "error"
        max_file_size: "2MB"
      .env:
        security_check: "skip"
        actions: ["redact_secrets"]
```

## All Available Settings

### Group-Level Settings

| Setting             | Type    | Default | Description                     |
| ------------------- | ------- | ------- | ------------------------------- |
| `description`       | string  | none    | Human-readable description      |
| `enabled`           | boolean | true    | Enable/disable this group       |
| `priority`          | integer | 0       | Processing order (higher first) |
| `base_path`         | string  | none    | Base path for pattern matching  |
| `enabled_if_exists` | string  | none    | Only enable if this path exists |

### Global Settings (NEW in v3.2.0)

These settings can be specified in the `global_settings` section and override
CLI defaults:

#### Input/Output Settings

| Setting               | Type        | Default | Description                                 |
| --------------------- | ----------- | ------- | ------------------------------------------- |
| `source_directory`    | string      | none    | Source directory path                       |
| `input_file`          | string      | none    | Input file listing paths to process         |
| `output_file`         | string      | none    | Output file path                            |
| `input_include_files` | string/list | []      | Files to include at beginning (intro files) |

#### Output Control Settings

| Setting                 | Type    | Default | Description                          |
| ----------------------- | ------- | ------- | ------------------------------------ |
| `add_timestamp`         | boolean | false   | Add timestamp to output filename     |
| `filename_mtime_hash`   | boolean | false   | Add hash of file mtimes to filename  |
| `force`                 | boolean | false   | Force overwrite existing output file |
| `minimal_output`        | boolean | false   | Only create main output file         |
| `skip_output_file`      | boolean | false   | Skip creating main output file       |
| `allow_duplicate_files` | boolean | false   | Allow duplicate content (v3.2)       |

#### Archive Settings

| Setting          | Type    | Default | Description                       |
| ---------------- | ------- | ------- | --------------------------------- |
| `create_archive` | boolean | false   | Create backup archive of files    |
| `archive_type`   | string  | "zip"   | Archive format: "zip" or "tar.gz" |

#### Runtime Settings

| Setting   | Type    | Default | Description                 |
| --------- | ------- | ------- | --------------------------- |
| `verbose` | boolean | false   | Enable verbose output       |
| `quiet`   | boolean | false   | Suppress all console output |

#### File Processing Settings

| Setting                        | Type    | Default | Description                         |
| ------------------------------ | ------- | ------- | ----------------------------------- |
| `encoding`                     | string  | "utf-8" | Target encoding for all files       |
| `separator_style`              | string  | none    | File separator style                |
| `line_ending`                  | string  | "lf"    | Line ending style (lf/crlf)         |
| `security_check`               | string  | "warn"  | How to handle secrets               |
| `max_file_size`                | string  | none    | Maximum file size to process        |
| `enable_content_deduplication` | boolean | true    | Enable content deduplication (v3.2) |
| `prefer_utf8_for_text_files`   | boolean | true    | Prefer UTF-8 for text files (v3.2)  |

### Preset-Level Settings

| Setting                   | Type    | Default | Description                                 |
| ------------------------- | ------- | ------- | ------------------------------------------- |
| `patterns`                | list    | []      | Glob patterns to match files                |
| `extensions`              | list    | []      | File extensions to match                    |
| `actions`                 | list    | []      | Processing actions to apply                 |
| `security_check`          | string  | "warn"  | How to handle secrets                       |
| `max_file_size`           | string  | none    | Maximum file size to process                |
| `include_dot_paths`       | boolean | false   | Include hidden files                        |
| `include_binary_files`    | boolean | false   | Process binary files                        |
| `remove_scraped_metadata` | boolean | false   | Remove HTML2MD metadata                     |
| `custom_processor`        | string  | none    | Name of custom processor                    |
| `processor_args`          | dict    | {}      | Arguments for custom processor              |
| `line_ending`             | string  | "lf"    | Convert line endings (lf, crlf)             |
| `separator_style`         | string  | none    | Override default separator style            |
| `include_metadata`        | boolean | true    | Include file metadata in output             |
| `max_lines`               | integer | none    | Truncate file after N lines                 |
| `strip_tags`              | list    | []      | HTML tags to remove (for strip_tags action) |
| `preserve_tags`           | list    | []      | HTML tags to preserve when stripping        |

## Available Actions

### Built-in Actions

1. **`minify`** - Remove unnecessary whitespace and formatting

   - Reduces file size
   - Maintains functionality
   - Best for: JS, CSS, HTML

2. **`strip_tags`** - Remove HTML/XML tags

   - Extracts text content only
   - Preserves text between tags
   - Best for: HTML, XML, Markdown with HTML

3. **`strip_comments`** - Remove code comments

   - Removes single and multi-line comments
   - Language-aware (JS, Python, CSS, etc.)
   - Best for: Production code bundles

4. **`compress_whitespace`** - Reduce multiple spaces/newlines

   - Converts multiple spaces to single space
   - Reduces multiple newlines to double newline
   - Best for: Documentation, logs

5. **`remove_empty_lines`** - Remove blank lines
   - Removes lines with only whitespace
   - Keeps single blank lines between sections
   - Best for: Clean documentation

### Custom Processors

Currently implemented:

1. **`truncate`** - Limit file length

   ```yaml
   custom_processor: "truncate"
   processor_args:
     max_lines: 100
     max_chars: 10000
     add_marker: true # Add "... truncated ..." marker
   ```

2. **`redact_secrets`** - Remove sensitive data

   ```yaml
   custom_processor: "redact_secrets"
   processor_args:
     patterns:
       - '(?i)(api[_-]?key|secret|password|token)\\s*[:=]\\s*["\\']?[\\w-]+["\\']?'
       - '(?i)bearer\\s+[\\w-]+'
     replacement: "[REDACTED]"
   ```

3. **`extract_functions`** - Extract function definitions
   ```yaml
   custom_processor: "extract_functions"
   processor_args:
     languages: ["python", "javascript"]
     include_docstrings: true
   ```

Note: Other processors mentioned in examples (like `extract_code_cells`) are
illustrative and would need to be implemented.

## Pattern Matching

### Pattern Types

1. **Extension Matching**

   ```yaml
   extensions: [".py", ".pyx", "py"] # All are equivalent
   ```

2. **Glob Patterns**

   ```yaml
   patterns:
     - "*.test.js" # All test files
     - "src/**/*.js" # All JS in src/
   ```

3. **Combined Matching**
   ```yaml
   # File must match BOTH extension AND pattern
   extensions: [".js"]
   patterns: ["src/**/*"]
   ```

### Base Path Behavior

```yaml
group_name:
  base_path: "src"
  presets:
    example:
      patterns: ["components/*.js"] # Actually matches: src/components/*.js
```

## Processing Order

1. **Group Priority** - Higher priority groups are checked first
2. **Preset Order** - Within a group, presets are checked in definition order
3. **First Match Wins** - First matching preset is applied
4. **Action Order** - Actions are applied in the order listed

### Setting Precedence

1. CLI arguments (highest priority)
2. Preset-specific settings
3. Global per-extension settings
4. Global default settings
5. m1f defaults (lowest priority)

**Note**: CLI arguments ALWAYS override preset values.

## Important Clarifications

### Pattern Matching Limitations

**Exclude patterns with `!` prefix are not supported in preset patterns**. To
exclude files:

1. **Use Global Settings** (Recommended):

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js", "*.map", "dist/**/*"]
   ```

2. **Use CLI Arguments**:
   ```bash
   m1f -s . -o out.txt --exclude-patterns "*.min.js" "*.map"
   ```

### Settings Hierarchy

Understanding where settings can be applied:

1. **Global Settings Level** (`globals.global_settings`):

   - `include_patterns` / `exclude_patterns`
   - `include_extensions` / `exclude_extensions`
   - All general m1f settings

2. **Preset Level** (individual presets):

   - `patterns` and `extensions` (for matching)
   - `actions` (processing actions)
   - Override settings like `security_check`

3. **Extension-Specific Global Settings**
   (`globals.global_settings.extensions.{ext}`):
   - All preset-level settings per extension

### Common Misconceptions

1. **Exclude Patterns in Presets**

   ❌ **Incorrect**:

   ```yaml
   presets:
     my_preset:
       exclude_patterns: ["*.min.js"] # Doesn't work here
   ```

   ✅ **Correct**:

   ```yaml
   globals:
     global_settings:
       exclude_patterns: ["*.min.js"] # Works here
   ```

2. **Actions vs Settings**

   **Actions** (go in `actions` list):

   - `minify`, `strip_tags`, `strip_comments`, etc.

   **Settings** (separate fields):

   - `strip_tags: ["script", "style"]` (configuration)
   - `max_lines: 100` (configuration)

## Advanced Features

### Conditional Presets

```yaml
production:
  enabled_if_exists: ".env.production" # Only active in production
  presets:
    minify_all:
      extensions: [".js", ".css", ".html"]
      actions: ["minify", "strip_comments"]
```

### Multiple Preset Files

```bash
# Files are merged in order (later files override earlier ones)
m1f -s . -o out.txt \
  --preset base.yml \
  --preset project.yml \
  --preset overrides.yml
```

### Preset Locations

1. **Project presets**: `./presets/*.m1f-presets.yml`
2. **Local preset**: `./.m1f-presets.yml`
3. **User presets**: `~/m1f/*.m1f-presets.yml`
4. **Specified presets**: Via `--preset` flag

### Complete Parameter Control (v3.2.0+)

Starting with v3.2.0, ALL m1f parameters can be controlled via presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production build configuration"

  global_settings:
    # Define all inputs/outputs
    source_directory: "./src"
    output_file: "dist/bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Enable production features
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true

    # Production optimizations
    minimal_output: true
    quiet: true

    # File processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    security_check: "error"
```

Usage comparison:

**Before v3.2.0** (long command):

```bash
m1f -s ./src -o dist/bundle.txt \
  --input-include-files README.md LICENSE \
  --add-timestamp --create-archive --archive-type tar.gz \
  --force --minimal-output --quiet \
  --separator-style MachineReadable \
  --security-check error
```

**After v3.2.0** (simple command):

```bash
m1f --preset production.m1f-presets.yml -o output.txt
```

## Examples

### Web Development Preset

```yaml
web_development:
  description: "Modern web development bundle"

  presets:
    # Minify production assets
    production_assets:
      patterns: ["dist/**/*", "build/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]

    # Source code - keep readable
    source_code:
      patterns: ["src/**/*"]
      extensions: [".js", ".jsx", ".ts", ".tsx"]
      actions: ["strip_comments"]
      security_check: "error"

    # Documentation
    docs:
      extensions: [".md", ".mdx"]
      actions: ["compress_whitespace", "remove_empty_lines"]

    # Configuration files
    config:
      patterns: ["*.json", "*.yml", "*.yaml"]
      security_check: "error"
      custom_processor: "redact_secrets"
```

### Data Science Preset

```yaml
data_science:
  presets:
    # Large data files - truncate
    data_files:
      extensions: [".csv", ".json", ".parquet"]
      max_file_size: "100KB"
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000

    # Scripts - full content
    scripts:
      extensions: [".py", ".r", ".jl"]
      actions: ["strip_comments"]
```

### Multiple Environment Presets

```yaml
# environments.m1f-presets.yml
development:
  priority: 10
  global_settings:
    source_directory: "./src"
    output_file: "dev-bundle.txt"
    verbose: true
    include_dot_paths: true
    security_check: "warn"

staging:
  priority: 20
  global_settings:
    source_directory: "./src"
    output_file: "stage-bundle.txt"
    create_archive: true
    security_check: "error"

production:
  priority: 30
  global_settings:
    source_directory: "./dist"
    output_file: "prod-bundle.txt"
    minimal_output: true
    quiet: true
    create_archive: true
    archive_type: "tar.gz"
```

Use with `--preset-group`:

```bash
# Development build
m1f --preset environments.yml --preset-group development

# Production build
m1f --preset environments.yml --preset-group production
```

## Debugging and Best Practices

### Debugging Tips

1. **Verbose Mode**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose
   ```

   Shows which preset is applied to each file and processing details.

2. **Check What's Applied**

   ```bash
   m1f -s . -o out.txt --preset my.yml --verbose 2>&1 | grep "Applying preset"
   ```

3. **Validate YAML**

   ```bash
   python -c "import yaml; yaml.safe_load(open('my-preset.yml'))"
   ```

4. **Test Small First** Create a test directory with a few files to verify
   preset behavior before running on large codebases.

### Best Practices

1. **Start Simple** - Begin with basic actions, add complexity as needed
2. **Test Thoroughly** - Use verbose mode to verify behavior
3. **Layer Presets** - Use multiple files for base + overrides
4. **Document Presets** - Add descriptions to groups and complex presets
5. **Version Control** - Keep presets in your repository
6. **Performance First** - Apply expensive actions only where needed
7. **Use Priority Wisely** - Higher priority groups are checked first

### Common Issues

1. **Preset not applied**

   - Check pattern matching
   - Verify preset group is enabled
   - Use verbose mode to debug

2. **Wrong action order**

   - Actions are applied sequentially
   - Order matters (e.g., minify before strip_comments)

3. **Performance issues**
   - Limit expensive actions to necessary files
   - Use `max_file_size` to skip large files
   - Consider `minimal_output` mode

## Version Information

This documentation is accurate as of m1f version 3.2.0.

======= docs/01_m1f/20_auto_bundle_guide.md ======
# Auto-Bundle Guide

The m1f auto-bundle feature allows you to automatically generate predefined
bundles of files based on configuration. This is especially useful for
maintaining consistent documentation bundles, creating project snapshots, and
managing multiple projects on a server.

## Configuration File

Auto-bundle looks for a `.m1f.config.yml` file in your project. The tool
searches from the current directory upward to the root, allowing flexible
project organization.

### Basic Configuration Structure

```yaml
# .m1f.config.yml

# Global settings that apply to all bundles
global:
  global_excludes:
    - "**/*.pyc"
    - "**/*.log"
    - "**/tmp/**"

# Bundle definitions
bundles:
  docs:
    description: "Project documentation"
    output: "m1f/docs/manual.txt"
    sources:
      - path: "docs"
        include_extensions: [".md", ".txt"]

  code:
    description: "Source code bundle"
    output: "m1f/src/code.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts"]
```

## Command Usage

### Create All Bundles

```bash
m1f auto-bundle
# Or use the convenient alias:
m1f-update
```

### Create Specific Bundle

```bash
m1f auto-bundle docs
# Or use the convenient alias:
m1f-update docs
```

### List Available Bundles

```bash
m1f auto-bundle --list
```

### Create Bundles by Group

```bash
m1f auto-bundle --group documentation
# Or use the convenient alias:
m1f-update --group documentation
```

**Note**: The `m1f-update` command is a convenient alias for `m1f auto-bundle` that provides a simpler way to regenerate bundles.

## Bundle Groups

You can organize bundles into groups for easier management:

```yaml
bundles:
  user-docs:
    description: "User documentation"
    group: "documentation"
    output: "m1f/docs/user.txt"
    sources:
      - path: "docs/user"

  api-docs:
    description: "API documentation"
    group: "documentation"
    output: "m1f/docs/api.txt"
    sources:
      - path: "docs/api"

  frontend-code:
    description: "Frontend source code"
    group: "source"
    output: "m1f/src/frontend.txt"
    sources:
      - path: "frontend"
```

Then create all documentation bundles:

```bash
m1f auto-bundle --group documentation
```

## Server-Wide Usage

### Managing Multiple Projects

For server environments with multiple projects, you can create a management
script:

```bash
#!/bin/bash
# update-all-bundles.sh

# Find all projects with .m1f.config.yml
for config in $(find /home/projects -name ".m1f.config.yml" -type f); do
    project_dir=$(dirname "$config")
    echo "Updating bundles in: $project_dir"

    cd "$project_dir"
    m1f-update --quiet
done
```

### Project-Specific Bundles

Create project-specific configurations by using groups:

```yaml
# Project A - .m1f.config.yml
bundles:
  all:
    description: "Complete project bundle"
    group: "project-a"
    output: "m1f/project-a-complete.txt"
    sources:
      - path: "."
```

Then update only specific projects:

```bash
cd /path/to/project-a
m1f-update --group project-a
```

### Automated Bundle Updates

Set up a cron job for automatic updates:

```bash
# Update all project bundles daily at 2 AM
0 2 * * * /usr/local/bin/update-all-bundles.sh
```

### Centralized Bundle Storage

Configure bundles to output to a central location:

```yaml
bundles:
  project-bundle:
    description: "Project bundle for central storage"
    output: "/var/m1f-bundles/myproject/latest.txt"
    sources:
      - path: "."
```

## Advanced Features

### Conditional Bundles

Enable bundles only when specific files exist:

```yaml
bundles:
  python-docs:
    description: "Python documentation"
    enabled_if_exists: "setup.py"
    output: "m1f/python-docs.txt"
    sources:
      - path: "."
        include_extensions: [".py"]
```

### Multiple Source Configurations

Combine files from different locations with different settings:

```yaml
bundles:
  complete:
    description: "Complete project documentation"
    output: "m1f/complete.txt"
    sources:
      - path: "docs"
        include_extensions: [".md"]
      - path: "src"
        include_extensions: [".py"]
        excludes: ["**/test_*.py"]
      - path: "."
        include_files: ["README.md", "CHANGELOG.md"]
```

### Using Presets

Apply presets for advanced file processing:

```yaml
bundles:
  web-bundle:
    description: "Web project bundle"
    output: "m1f/web.txt"
    preset: "presets/web-project.m1f-presets.yml"
    preset_group: "production"
    sources:
      - path: "."
```

## Automatic Bundle Generation with Git Hooks

m1f provides a Git pre-commit hook that automatically runs auto-bundle before
each commit. This ensures your bundles are always in sync with your source code.

### Installing the Git Hook

```bash
# Run from your project root (where .m1f.config.yml is located)
bash /path/to/m1f/scripts/install-git-hooks.sh
```

The hook will:

- Run `m1f-update` before each commit
- Add generated bundles to the commit automatically
- Block commits if bundle generation fails

For detailed setup instructions, see the
[Git Hooks Setup Guide](../05_development/56_git_hooks_setup.md).

## Best Practices

1. **Organize with Groups**: Use groups to categorize bundles logically
2. **Version Control**: Include `.m1f.config.yml` in version control
3. **Include m1f/ Directory**: Keep generated bundles in version control for AI
   tool access
4. **Use Descriptive Names**: Make bundle names self-explanatory
5. **Regular Updates**: Use Git hooks or schedule automatic updates for
   frequently changing projects
6. **Review Bundle Changes**: Check generated bundle diffs before committing

## Troubleshooting

### Config Not Found

If you see "No .m1f.config.yml configuration found!", the tool couldn't find a
config file searching from the current directory up to the root. Create a
`.m1f.config.yml` in your project root.

### Bundle Not Created

Check the verbose output:

```bash
m1f-update --verbose
```

Common issues:

- Incorrect file paths
- Missing source directories
- Invalid YAML syntax
- Disabled bundles

### Group Not Found

If using `--group` and no bundles are found:

1. Check that bundles have the `group` field
2. Verify the group name matches exactly
3. Use `--list` to see available groups

## Examples

### Documentation Site Bundle

```yaml
bundles:
  docs-site:
    description: "Documentation site content"
    group: "documentation"
    output: "m1f/docs-site.txt"
    sources:
      - path: "content"
        include_extensions: [".md", ".mdx"]
      - path: "src/components"
        include_extensions: [".jsx", ".tsx"]
    excludes:
      - "**/node_modules/**"
      - "**/.next/**"
```

### Multi-Language Project

```yaml
bundles:
  python-code:
    description: "Python backend code"
    group: "backend"
    output: "m1f/backend/python.txt"
    sources:
      - path: "backend"
        include_extensions: [".py"]

  javascript-code:
    description: "JavaScript frontend code"
    group: "frontend"
    output: "m1f/frontend/javascript.txt"
    sources:
      - path: "frontend"
        include_extensions: [".js", ".jsx", ".ts", ".tsx"]

  all-code:
    description: "All source code"
    output: "m1f/all-code.txt"
    sources:
      - path: "."
        include_extensions: [".py", ".js", ".jsx", ".ts", ".tsx"]
```

### WordPress Plugin Bundle

```yaml
bundles:
  wp-plugin:
    description: "WordPress plugin files"
    group: "wordpress"
    output: "m1f/wp-plugin.txt"
    preset: "presets/wordpress.m1f-presets.yml"
    sources:
      - path: "."
        include_extensions: [".php", ".js", ".css"]
    excludes:
      - "**/vendor/**"
      - "**/node_modules/**"
```

======= docs/01_m1f/21_development_workflow.md ======
# m1f Development Workflow

This document describes the recommended workflow for developing with m1f and
using it in other projects.

## Overview

The m1f project provides a self-contained development environment with:

- Pre-generated m1f bundles of its own source code
- Shell aliases for convenient access from anywhere
- Symlink system for using m1f documentation in other projects

## Prerequisites

For initial setup instructions, see the [SETUP.md](../../SETUP.md) guide.

## Using m1f in Other Projects

### Method 1: Using Aliases (Recommended)

From any directory, you can use m1f directly:

```bash
cd /path/to/your/project
m1f -s . -o combined.txt
```

### Method 2: Providing m1f Documentation to AI Tools (Claude Code, etc.)

When you want to use m1f in a project with AI assistance (like Claude Code,
Cursor, or other AI-powered development tools), the AI needs to understand how
m1f works and what parameters are available. The `m1f-link` command solves this
by creating a symlink to the complete m1f documentation.

#### Why this is important:

- AI tools need context to understand how to use m1f
- The documentation contains all parameters, options, and examples
- AI can help create custom configurations and commands

#### How to use:

1. Navigate to your project:

   ```bash
   cd /path/to/your/project
   ```

2. Create documentation symlink:

   ```bash
   m1f-link
   ```

   This creates: `m1f/m1f.txt -> /path/to/m1f/m1f/m1f/87_m1f_only_docs.txt`

3. Reference the documentation in your AI tool:

   ```bash
   # For Claude Code, Cursor, or similar AI assistants:
   @m1f/m1f.txt

   # Example prompts:
   "Please read @m1f/m1f.txt and help me create a .m1f.config.yml
   for bundling my Python project"

   "Based on @m1f/m1f.txt, what's the best way to exclude test
   files while keeping documentation?"

   "Using @m1f/m1f.txt as reference, help me set up auto-bundling
   for a WordPress theme"
   ```

This single documentation file contains:

- Complete m1f usage guide and all parameters
- Examples and best practices
- Preset system documentation
- Auto-bundle configuration guide
- All tool documentation (m1f, s1f, html2md, webscraper)

The AI can then:

- Understand all m1f parameters and options
- Help create custom `.m1f.config.yml` configurations
- Suggest appropriate presets for your project type
- Generate complex m1f commands with correct syntax
- Troubleshoot issues based on error messages

## Development Workflow

### When Developing m1f

1. Always work in the development environment:

   ```bash
   cd /path/to/m1f
   source .venv/bin/activate
   ```

2. Test changes directly:

   ```bash
   python -m tools.m1f -s test_dir -o output.txt
   ```

3. Run tests:

   ```bash
   pytest tests/
   ```

4. Update bundle files after significant changes:
   ```bash
   m1f-update
   ```

### When Using m1f in Projects

1. Use the global aliases:

   ```bash
   m1f -s src -o bundle.txt --preset documentation
   ```

2. Or create project-specific configuration:

   ```bash
   # Create .m1f directory in your project
   mkdir .m1f

   # Create m1f preset
   cat > .m1f/project.m1f-presets.yml << 'EOF'
   presets:
     my-bundle:
       source_directory: "."
       include_extensions: [".py", ".md", ".txt"]
       excludes: ["*/node_modules/*", "*/__pycache__/*"]
   EOF

   # Use preset
   m1f --preset .m1f/project.m1f-presets.yml --preset-group my-bundle -o bundle.txt
   ```

## Directory Structure

```
m1f/
├── .m1f/                      # Pre-generated m1f bundles
│   ├── m1f/                   # Tool bundles
│   └── m1f-doc/
│       └── 99_m1fdocs.txt    # Complete documentation
├── bin/                       # Executable commands
│   ├── m1f
│   ├── m1f-s1f
│   ├── m1f-html2md
│   ├── scrape_tool
│   └── ...
├── scripts/
│   ├── install.sh            # Installation script
│   └── watch_and_bundle.sh   # File watcher for auto-bundling
└── tools/                    # m1f source code
    ├── m1f/
    ├── s1f/
    └── html2md/

your-project/
└── .m1f/
    └── m1f -> /path/to/m1f/.m1f/  # Symlink to m1f bundles
```

## Best Practices

1. **Keep Bundles Updated**: Run `m1f-update` after significant changes to m1f
2. **Use Aliases**: The shell aliases handle virtual environment activation
   automatically
3. **Project Organization**: Keep project-specific m1f configurations in `.m1f/`
   directory
4. **Version Control**: The `.m1f/` directory is already in `.gitignore`

## Troubleshooting

### Aliases Not Working

If aliases don't work after setup:

1. Make sure you've reloaded your shell configuration
2. Check that the aliases were added to your shell config file
3. Verify the m1f project path is correct in the aliases

### Virtual Environment Issues

The aliases automatically activate the virtual environment. If you encounter
issues:

1. Ensure the virtual environment exists at `/path/to/m1f/.venv`
2. Check that all dependencies are installed

### Symlink Issues

If `m1f-link` fails:

1. Ensure you have write permissions in the current directory
2. Check that the m1f project path is accessible
3. Remove any existing `.m1f/m1f` symlink and try again

## Advanced Usage

### Custom Bundle Generation

Create custom bundles for specific use cases:

```bash
# Bundle only specific file types
m1f -s /path/to/project -o api-docs.txt \
    --include-extensions .py .yaml \
    --excludes "*/tests/*" \
    --separator-style Markdown

# Create compressed archive
m1f -s . -o project.txt --create-archive --archive-type tar.gz
```

### Integration with CI/CD

Add m1f to your CI pipeline:

```yaml
# Example GitHub Actions
- name: Generate Documentation Bundle
  run: |
    python -m tools.m1f -s docs -o docs-bundle.txt

- name: Upload Bundle
  uses: actions/upload-artifact@v2
  with:
    name: documentation
    path: docs-bundle.txt
```

======= docs/01_m1f/30_claude_workflows.md ======
# Claude + m1f: Your AI-Powered Project Assistant 🤖

Ever wished you had an AI buddy who actually understands your project structure?
That's what happens when you combine Claude with m1f. This guide shows you how
to turn Claude into your personal project assistant who knows exactly how to
bundle, organize, and process your code.

## The Power of m1f v3.2 + Claude ✨

With m1f v3.2's enhanced features, Claude can help you:

- Configure comprehensive security scanning
- Set up parallel processing for faster bundling
- Create sophisticated preset configurations
- Manage content deduplication strategies
- Handle complex encoding scenarios

## Getting Started with Claude

### Step 1: Give Claude the Power

First, let's get Claude up to speed on what m1f can do:

```bash
cd /your/awesome/project
m1f-link  # Creates m1f/m1f.txt symlink
```

Boom! 💥 Now you've got the complete m1f documentation sitting in your project.
Claude can read this and instantly become an m1f expert.

### Step 2: Start the Conversation

Here's where it gets fun. Just tell Claude what you need:

```
Hey Claude, I need help setting up m1f for my project.
Check out @m1f/m1f.txt to see what m1f can do.

My project is a Python web app with:
- Backend API in /api
- Frontend React code in /frontend
- Tests scattered around
- Some docs in /docs

Can you create a .m1f.config.yml that bundles these intelligently?
```

Claude will read the docs and create a perfect config for your project
structure. No more guessing at parameters!

## Real-World Workflows That Actually Work 🚀

### The "Security-First Bundle" Workflow

```
Claude, I need to create bundles for external review.
Using m1f v3.2's security features:

1. Create a config that scans for secrets (security_check: error)
2. Exclude any files with sensitive data
3. Set up proper path validation
4. Ensure no internal IPs or credentials leak through

Focus on making it safe to share with contractors.
```

### The "Performance Optimization" Workflow

```
Claude, my project has 5000+ files and bundling is slow.
Help me optimize using m1f v3.2's features:

1. Leverage parallel processing (enabled by default)
2. Set up smart file size limits
3. Use content deduplication to reduce bundle size
4. Create targeted bundles instead of one massive file

The goal is sub-10 second bundle generation.
```

### The "Multi-Environment Setup" Workflow

```
Claude, I need different bundles for dev/staging/prod.
Using m1f v3.2's preset system:

1. Create environment-specific presets
2. Use conditional presets (enabled_if_exists)
3. Set different security levels per environment
4. Configure appropriate output formats

Make it so I can just run: m1f --preset env.yml --preset-group production
```

## Using m1f-claude: The Smart Assistant 🧠

We've supercharged Claude with m1f knowledge. Here's how to use it:

```bash
# Basic usage - Claude already knows about m1f!
m1f-claude "Bundle my Python project for code review"

# Interactive mode - have a conversation
m1f-claude -i
> Help me organize my WordPress theme files
> Now create a bundle for just the custom post types
> Can you exclude all the vendor files?
```

### What Makes m1f-claude Special?

When you use `m1f-claude`, it automatically:

- Knows where to find m1f documentation
- Understands your project structure
- Suggests optimal parameters
- Can execute commands directly (with your permission)

## Working with Claude Code

If you're using Claude Code (claude.ai/code), you can leverage its file reading
capabilities:

```
# In Claude Code, you can directly reference files
Claude, please read my current .m1f.config.yml and suggest improvements
based on m1f v3.2 features like:
- Better security scanning
- Optimized performance settings
- Advanced preset configurations
```

## Advanced v3.2 Patterns 🎯

### The "Complete Configuration via Presets"

With v3.2, you can control everything through presets:

```yaml
# production.m1f-presets.yml
production:
  description: "Production-ready bundles with full security"

  global_settings:
    # Input/Output
    source_directory: "./src"
    output_file: "dist/prod-bundle.txt"
    input_include_files: ["README.md", "LICENSE"]

    # Security (v3.2)
    security_check: "error" # Stop on any secrets

    # Performance (v3.2)
    enable_content_deduplication: true
    prefer_utf8_for_text_files: true

    # Output control
    add_timestamp: true
    create_archive: true
    archive_type: "tar.gz"
    force: true
    minimal_output: true
    quiet: true

    # Processing
    separator_style: "MachineReadable"
    encoding: "utf-8"
    max_file_size: "1MB"

    # Exclusions
    exclude_patterns:
      - "**/*.test.js"
      - "**/*.spec.ts"
      - "**/node_modules/**"
      - "**/.env*"

  presets:
    minify_production:
      patterns: ["dist/**/*"]
      extensions: [".js", ".css"]
      actions: ["minify", "strip_comments"]
```

### The "AI Context Optimization" Pattern

```yaml
bundles:
  ai-context:
    description: "Optimized for Claude and other LLMs"
    output: "m1f/ai-context.txt"
    sources:
      - path: "src"
        include_extensions: [".py", ".js", ".ts", ".jsx", ".tsx"]
        exclude_patterns:
          - "**/*.test.*"
          - "**/*.spec.*"
          - "**/test/**"

    # v3.2 optimizations
    global_settings:
      # Security first
      security_check: "warn"

      # Performance
      enable_content_deduplication: true # Reduce token usage

      # AI-friendly format
      separator_style: "Markdown"
      max_file_size: "100KB" # Keep context focused

      # Clean output
      remove_scraped_metadata: true
      allow_duplicate_files: false
```

### The "Encoding-Aware Bundle" Pattern

```yaml
bundles:
  legacy-code:
    description: "Handle mixed encoding legacy code"
    output: "m1f/legacy-bundle.txt"

    global_settings:
      # v3.2 encoding features
      prefer_utf8_for_text_files: false # Respect original encoding
      convert_to_charset: "utf-8" # But convert output
      abort_on_encoding_error: false # Continue on errors

      # Include everything
      include_binary_files: false
      include_dot_paths: true
```

## Pro Tips for Claude Interactions 💪

### 1. Let Claude Learn Your Project

First time? Let Claude explore:

```
Claude, analyze my project structure and suggest
how to organize it with m1f bundles. Consider:
- What files change together
- Logical groupings for different use cases
- Size limits for AI context windows

Use @m1f/m1f.txt to understand all available options.
```

### 2. Provide Clear Context

```
Claude, here's my project structure from m1f:
- Total files: 500
- Main languages: Python (60%), JavaScript (30%), Docs (10%)
- Special requirements: HIPAA compliance, no credential exposure
- Target use: Sharing with external auditors

Create a secure bundling strategy using m1f v3.2's security features.
Check @m1f/m1f.txt for security parameters.
```

### 3. Iterative Refinement

```
Claude, the bundle is too large (50MB). Help me:
1. Use content deduplication more aggressively
2. Set up file size limits
3. Create multiple smaller bundles by component
4. Exclude generated files and build artifacts
```

### 4. Preset Composition

```
Claude, I want layered presets:
1. base.yml - Company-wide standards
2. project.yml - Project-specific rules
3. personal.yml - My personal preferences

Show me how to use them together with proper override behavior.
```

## Security-First Workflows 🔒

### Preparing Code for Review

```
Claude, I need to share code with a contractor. Create a config that:
1. Runs strict security scanning (security_check: error)
2. Validates all file paths
3. Excludes .env files and secrets
4. Redacts any hardcoded credentials
5. Creates an audit trail

Use m1f v3.2's security features to make this bulletproof.
```

### Automated Security Checks

```
Claude, write a Git pre-commit hook that:
1. Runs m1f with security scanning
2. Blocks commits if secrets are found
3. Auto-generates safe bundles
4. Updates the m1f/ directory

Make it work with m1f v3.2's git hooks setup.
```

## Performance Optimization Strategies 🚀

### Large Codebase Handling

```
Claude, optimize m1f for our monorepo (10K+ files):

1. Set up smart exclusion patterns
2. Use size-based filtering
3. Create focused bundles per team
4. Leverage parallel processing
5. Implement caching strategies

Goal: Bundle generation under 30 seconds.
```

### Memory-Efficient Processing

```yaml
# Claude might suggest this for large files
large_files:
  description: "Handle massive log files"

  global_settings:
    max_file_size: "10MB" # Skip huge files
    enable_content_deduplication: true

  presets:
    truncate_logs:
      extensions: [".log", ".txt"]
      custom_processor: "truncate"
      processor_args:
        max_lines: 1000
        add_marker: true
```

## Troubleshooting with Claude 🔧

### Common Issues and Solutions

```
Claude, m1f is flagging false positives for secrets. Help me:
1. Configure security_check levels appropriately
2. Create patterns to exclude test fixtures
3. Set up per-file security overrides
4. Document why certain warnings are acceptable
```

### Performance Debugging

```
Claude, bundling takes 5 minutes. Analyze this verbose output
and suggest optimizations:
[paste m1f --verbose output]

Consider:
- File count and sizes
- Duplicate detection overhead
- Encoding detection delays
- Security scanning bottlenecks
```

## Integration Patterns 🔌

### CI/CD Integration

```
Claude, create a GitHub Action that:
1. Triggers on PR creation
2. Generates comparison bundles (before/after)
3. Posts bundle statistics as PR comment
4. Fails if bundle size increases >10%
5. Runs security scanning on changed files

Use m1f v3.2's features for efficiency.
```

### Documentation Automation

```
Claude, automate our documentation workflow:
1. Scrape our docs site weekly
2. Convert HTML to Markdown
3. Bundle by section with m1f
4. Remove outdated metadata
5. Create versioned archives

Leverage m1f's web scraping and processing features.
```

## Quick Reference Commands 🎪

Some powerful one-liners for common tasks:

```bash
# Give Claude m1f superpowers
m1f-link

# Quick m1f setup for your project
m1f-claude "Setup m1f for a typical Python project with tests and docs"

# Interactive Claude session
m1f-claude -i

# Security audit bundle
m1f -s . -o audit.txt --security-check error --minimal-output

# Fast development bundle (no security checks)
m1f -s ./src -o dev.txt --security-check skip

# Documentation bundle with metadata
m1f -s ./docs -o docs.txt --separator-style Detailed

# Clean bundle for AI consumption
m1f -s . -o ai-context.txt --allow-duplicate-files false

# Help me understand this codebase
m1f-claude "Create bundles to help a new developer understand this project"

# Prep for the AI apocalypse
m1f-claude "Optimize my project for AI assistants with proper context windows"
```

## Your Turn! 🎮

Now you're ready to turn Claude into your personal m1f expert. Remember:

1. Always start with `m1f-link` to give Claude the docs
2. Be specific about what you want to achieve
3. Let Claude suggest optimal configurations based on the documentation
4. Iterate and refine based on results
5. Test security settings thoroughly before sharing

The best part? Claude remembers your conversations, so it gets better at
understanding your project over time.

Happy bundling! 🚀

---

_P.S. - If Claude suggests something that seems off, just ask "Are you sure
about that? Check @m1f/m1f.txt again." Works every time! 😉_

======= docs/01_m1f/31_claude_code_integration.md ======
# Claude Code Integration Guide

This guide explains how to integrate Claude Code as an optional AI assistant for
the m1f tools project.

## Overview

Claude Code can help automate complex workflows by understanding natural
language prompts and executing the appropriate tools with correct parameters.

## Installation

### Prerequisites

- Node.js installed on your system
- An Anthropic API key (get one at https://console.anthropic.com)

### Install Claude Code

```bash
npm install -g @anthropic-ai/claude-code
```

### Initial Setup

1. Start Claude Code:

   ```bash
   claude
   ```

2. Login with your API key:

   ```
   /login
   ```

3. Configure Claude Code for this project:
   ```bash
   cd /path/to/m1f
   claude config
   ```

## Project Configuration

Create `.claude/settings.json` in the project root:

```json
{
  "model": "claude-opus-4",
  "customInstructions": "You are helping with the m1f tools project. Key tools available: m1f.py (file bundler), s1f.py (file splitter), mf1-html2md (HTML to Markdown converter), wp_export_md.py (WordPress exporter).",
  "permissions": {
    "write": true,
    "execute": true
  }
}
```

## Using Claude Code with m1f Tools

### Basic Commands

1. **Bundle files into m1f**:

   ```bash
   claude -p "Bundle all Python files in the tools directory into a single m1f file"
   ```

2. **Convert HTML to Markdown**:

   ```bash
   claude -p "Convert all HTML files in ~/docs to Markdown with preprocessing"
   ```

3. **Analyze and preprocess HTML**:
   ```bash
   claude -p "Analyze the HTML files in the docs folder and create a preprocessing config"
   ```

### Advanced Workflows

1. **Complete documentation conversion workflow**:

   ```bash
   claude -p "I have scraped HTML documentation in ~/docs/html. Please:
   1. Analyze a few sample files to understand the structure
   2. Create a preprocessing configuration
   3. Convert all HTML to Markdown
   4. Create thematic m1f bundles (concepts, reference, installation, etc.)"
   ```

2. **Export WordPress site**:
   ```bash
   claude -p "Export my WordPress site at example.com to Markdown, organizing by categories"
   ```

## Programmatic Usage

### Using Claude Code in Scripts

```python
#!/usr/bin/env python3
import subprocess
import json

def claude_command(prompt):
    """Execute a Claude Code command and return the result."""
    result = subprocess.run(
        ['claude', '-p', prompt, '--output-format', 'json'],
        capture_output=True,
        text=True
    )
    return json.loads(result.stdout)

# Example: Get optimal m1f parameters
response = claude_command(
    "What are the optimal m1f parameters for bundling a Python project with tests?"
)
print(response)
```

### Integration with m1f Tools

Create `tools/claude_orchestrator.py`:

```python
#!/usr/bin/env python3
"""Orchestrate m1f tools using Claude Code."""

import subprocess
import json
from pathlib import Path

class ClaudeOrchestrator:
    def __init__(self):
        self.tools = {
            'm1f': 'tools/m1f.py',
            's1f': 'tools/s1f.py',
            'mf1-html2md': 'tools/mf1-html2md',
            'wp_export': 'tools/wp_export_md.py'
        }

    def analyze_request(self, user_prompt):
        """Use Claude to analyze user request and determine actions."""
        analysis_prompt = f"""
        Analyze this request and return a JSON with:
        1. tool: which tool to use ({', '.join(self.tools.keys())})
        2. parameters: dict of parameters for the tool
        3. steps: list of steps to execute

        Request: {user_prompt}
        """

        result = subprocess.run(
            ['claude', '-p', analysis_prompt, '--output-format', 'json'],
            capture_output=True,
            text=True
        )
        return json.loads(result.stdout)

    def execute_workflow(self, user_prompt):
        """Execute a complete workflow based on user prompt."""
        plan = self.analyze_request(user_prompt)

        for step in plan['steps']:
            print(f"Executing: {step['description']}")
            # Execute the actual command
            subprocess.run(step['command'], shell=True)
```

## Best Practices

1. **Create project-specific instructions** in `.claude/settings.json`
2. **Use Claude for complex workflows** that require multiple steps
3. **Leverage Claude's understanding** of file patterns and project structure
4. **Combine with shell pipes** for powerful automation

## Example Workflows

### 1. Documentation Processing Pipeline

```bash
# Complete pipeline with Claude
claude -p "Process the scraped documentation in ~/scraped-docs:
1. Analyze HTML structure
2. Create preprocessing config
3. Convert to Markdown preserving structure
4. Create m1f bundles by topic
5. Generate a summary report"
```

### 2. Project Analysis

```bash
# Analyze project for bundling
claude -p "Analyze this Python project and suggest:
1. Which files should be bundled together
2. Optimal m1f parameters
3. Any files that should be excluded"
```

### 3. Automated Testing

```bash
# Run tests and fix issues
claude -p "Run the test suite, identify any failures, and fix them"
```

## Environment Variables

Set these in your shell profile for persistent configuration:

```bash
export ANTHROPIC_MODEL="claude-sonnet-4-20250514"
export CLAUDE_CODE_PROJECT_ROOT="/path/to/m1f"
```

## Troubleshooting

1. **Permission errors**: Ensure Claude Code has write permissions in settings
2. **Model selection**: Use Claude Opus 4 for the most complex analysis, Claude
   Sonnet 4 for balanced performance
3. **Rate limits**: Be mindful of API usage limits

## Security Considerations

1. **Never commit API keys** to version control
2. **Use `.claude/settings.local.json`** for personal settings
3. **Review Claude's actions** before executing in production

## Further Resources

- [Claude Code Documentation](https://docs.anthropic.com/en/docs/claude-code)
- [m1f Tools Documentation](00_m1f.md)
- [html2md Documentation](../03_html2md/30_html2md.md)

======= docs/01_m1f/40_security_best_practices.md ======
# Security Best Practices Guide for m1f Toolkit

## Overview

This guide documents security best practices and protective measures implemented
in the m1f toolkit v3.2. Following these practices ensures safe operation and
prevents common security vulnerabilities.

## Path Validation and Traversal Protection

### Why It Matters

Path traversal attacks can allow malicious actors to access files outside
intended directories, potentially exposing sensitive system files or overwriting
critical data.

### Best Practices

1. **Always validate resolved paths**:

   ```python
   # Good practice - validate after resolving
   from tools.m1f.utils import validate_safe_path

   target_path = Path(user_input).resolve()
   validate_safe_path(target_path, base_path)
   ```

2. **Use the provided validation utilities**:

   - `validate_safe_path()` in `tools/m1f/utils.py` ensures paths stay within
     allowed boundaries
   - All user-provided paths should be validated before use

3. **Symlink safety**:
   - Symlinks are resolved and validated to prevent escaping directories
   - Target of symlinks must be within the allowed base path

### Common Pitfalls to Avoid

- Never use user input directly in file paths without validation
- Don't trust relative paths without resolving and validating them
- Always validate paths from configuration files and presets

## Web Scraping Security

### SSRF (Server-Side Request Forgery) Protection

The toolkit blocks access to:

- Private IP ranges (10.x.x.x, 172.16.x.x, 192.168.x.x)
- Localhost and loopback addresses (127.0.0.1, ::1)
- Link-local addresses (169.254.x.x)
- Cloud metadata endpoints (169.254.169.254)

### SSL/TLS Validation

1. **Default behavior**: SSL certificates are validated by default
2. **Disabling validation** (use with caution):

   ```bash
   # Only for trusted internal sites or testing
   m1f-scrape --ignore-https-errors https://internal-site.com
   ```

   ⚠️ **Warning**: Disabling SSL validation exposes you to man-in-the-middle
   attacks. Only use for trusted internal resources.

### robots.txt Compliance

All scrapers automatically respect robots.txt files:

- Automatically fetched and parsed for each domain
- Scraping is blocked for disallowed paths
- User-agent specific rules are respected
- This is always enabled - no configuration option to disable

### JavaScript Execution Safety

When using Playwright with custom scripts:

- Scripts are validated for dangerous patterns
- Avoid executing untrusted JavaScript code
- Use built-in actions instead of custom scripts when possible

## Command Injection Prevention

### Safe Command Execution

The toolkit uses proper escaping for all system commands:

```python
# Good - using shlex.quote()
import shlex
command = f"httrack {shlex.quote(url)} -O {shlex.quote(output_dir)}"

# Bad - direct string interpolation
command = f"httrack {url} -O {output_dir}"  # DON'T DO THIS
```

## Preset System Security

### File Size Limits

- Preset files are limited to 10MB to prevent memory exhaustion
- Large preset files are rejected with an error

### Path Validation in Presets

- All paths in preset files are validated
- Paths cannot escape the project directory
- Absolute paths outside the project are blocked

### Custom Processor Validation

- Processor names must be alphanumeric with underscores only
- Special characters that could enable code injection are blocked

## Secure Temporary File Handling

The toolkit uses Python's `tempfile` module for all temporary files:

- Temporary directories are created with restricted permissions
- All temporary files are cleaned up after use
- No sensitive data is left in temporary locations

## Security Scanning for Sensitive Data

### Built-in Secret Detection

m1f includes automatic scanning for:

- API keys and tokens
- Passwords and credentials
- Private keys
- High-entropy strings that might be secrets

### Security Check Modes

1. **Error mode** (default): Stops processing if secrets are found

   ```bash
   m1f -s ./src -o output.txt --security-check error
   ```

2. **Warn mode**: Logs warnings but continues processing

   ```bash
   m1f -s ./src -o output.txt --security-check warn
   ```

3. **Skip mode**: Disables security scanning (not recommended)
   ```bash
   m1f -s ./src -o output.txt --security-check skip
   ```

### Handling False Positives

If legitimate content is flagged as sensitive:

1. Review the warnings carefully
2. Use `--security-check warn` if you're certain the content is safe
3. Consider refactoring code to avoid patterns that trigger detection

## Input Validation Best Practices

### File Type Validation

- Use include/exclude patterns to limit processed file types
- Be explicit about allowed file extensions
- Validate file contents match expected formats

### Size and Resource Limits

- Set appropriate limits for file sizes
- Use `--max-file-size` to prevent processing huge files
- Monitor memory usage for large file sets

### Encoding Safety

- The toolkit automatically detects file encodings
- UTF-8 is preferred for text files by default
- Binary files are handled safely without interpretation

## Deployment Security Recommendations

### Environment Configuration

1. Run with minimal required permissions
2. Use dedicated service accounts when possible
3. Avoid running as root/administrator

### Network Security

1. Use HTTPS for all web scraping when possible
2. Configure firewall rules to limit outbound connections
3. Monitor for unusual network activity

### Logging and Monitoring

1. Enable verbose logging for security-sensitive operations
2. Review logs regularly for suspicious patterns
3. Set up alerts for security check failures

## Reporting Security Issues

If you discover a security vulnerability in m1f:

1. Do NOT open a public issue
2. Email security details to the maintainers
3. Include steps to reproduce the issue
4. Allow time for a fix before public disclosure

## Security Checklist for Users

Before running m1f in production:

- [ ] Validate all input paths and patterns
- [ ] Review security check mode settings
- [ ] Enable SSL validation for web scraping
- [ ] Set appropriate file size limits
- [ ] Use minimal required permissions
- [ ] Review preset files for suspicious content
- [ ] Test security scanning on sample data
- [ ] Configure proper logging and monitoring
- [ ] Keep the toolkit updated to the latest version

## Updates and Security Patches

Stay informed about security updates:

- Check the CHANGELOG for security-related fixes
- Update to new versions promptly
- Review breaking changes that might affect security

Remember: Security is a shared responsibility. While m1f implements many
protective measures, proper configuration and usage are essential for
maintaining a secure environment.

======= docs/01_m1f/41_version_3_2_features.md ======
# m1f v3.2 Feature Documentation

## Overview

Version 3.2 of the m1f toolkit introduces significant security enhancements,
performance improvements, and new configuration options. This document provides
a comprehensive overview of all v3.2 features and changes.

## Major Security Enhancements

### 1. Path Traversal Protection

- **What's New**: Comprehensive validation of all file paths to prevent
  directory traversal attacks
- **Impact**: Prevents malicious actors from accessing files outside intended
  directories
- **Implementation**:
  - New `validate_safe_path()` utility function
  - Applied to all user inputs, preset paths, and configuration files
  - Symlink targets are now validated

### 2. SSRF Protection in Web Scrapers

- **What's New**: Blocks access to private IP ranges and cloud metadata
  endpoints
- **Protected Ranges**:
  - Private networks (10.x.x.x, 172.16.x.x, 192.168.x.x)
  - Localhost (127.0.0.1, ::1)
  - Link-local (169.254.x.x)
  - Cloud metadata (169.254.169.254)
- **Applies to**: All web scraping tools (BeautifulSoup, Playwright, Scrapy,
  Selectolax)

### 3. robots.txt Compliance

- **What's New**: All scrapers now automatically respect robots.txt files
- **Features**:
  - Automatic robots.txt fetching and parsing
  - Per-path access validation
  - User-agent specific rule support
  - No configuration needed - always enabled
- **Previously**: Only HTTrack respected robots.txt

### 4. SSL/TLS Certificate Validation

- **What's New**: SSL validation is now enabled by default
- **Configuration**:
  - New `--ignore-https-errors` flag for exceptions
  - Per-scraper SSL configuration
- **Security**: Prevents man-in-the-middle attacks

### 5. Command Injection Prevention

- **What's New**: Proper escaping of all shell commands
- **Implementation**: Uses `shlex.quote()` for all user inputs in commands
- **Affected Tools**: HTTrack scraper, git operations

### 6. JavaScript Execution Safety

- **What's New**: Validation of custom JavaScript in Playwright scraper
- **Features**:
  - Detects dangerous patterns (eval, Function constructor)
  - Warns about custom script execution
  - Encourages use of built-in actions

### 7. Custom Processor Validation

- **What's New**: Validates processor names to prevent injection attacks
- **Rules**: Only alphanumeric characters and underscores allowed
- **Impact**: Prevents code injection through preset files

## Performance Improvements

### 1. Parallel File Processing

- **Enabled by Default**: Parallel processing is now always active
- **Features**:
  - Concurrent file reading with automatic batch size optimization
  - Thread-safe checksum deduplication
  - Maintains deterministic file order in output
- **Performance**: Up to 3-5x faster for large file sets

### 2. Optimized Checksum Verification

- **What's Changed**: Stream-based file reading for checksums
- **Benefits**:
  - Reduced memory usage for large files
  - Prevents out-of-memory errors
  - 8KB chunk processing

### 3. Concurrent Write Limits in s1f

- **What's New**: Semaphore-based write limiting
- **Default**: 10 concurrent file operations
- **Benefits**: Prevents "too many open files" errors

### 4. Async I/O Improvements

- **Updates**:
  - Uses `aiofiles` for truly async file operations
  - Modern async patterns (asyncio.run())
  - Proper exception handling in async contexts

## Configuration Enhancements

### 1. Content Deduplication Control

- **New CLI Option**: `--allow-duplicate-files`
- **Preset Setting**: `enable_content_deduplication`
- **Default**: Deduplication enabled (False for allow-duplicate)
- **Use Case**: When you need to preserve duplicate content

### 2. UTF-8 Preference Control

- **New CLI Option**: `--no-prefer-utf8-for-text-files`
- **Preset Setting**: `prefer_utf8_for_text_files`
- **Default**: UTF-8 preferred (True)
- **Use Case**: Working with legacy encodings like windows-1252

### 3. Security Check Modes

- **Options**:
  - `error` (default): Stop on security issues
  - `warn`: Log warnings but continue
  - `skip`: Disable security scanning
- **CLI**: `--security-check {error|warn|skip}`
- **Preset**: `security_check` setting

### 4. File Size Limits

- **Preset Files**: Limited to 10MB
- **Benefits**: Prevents memory exhaustion attacks
- **Error Handling**: Clear error messages for oversized files

## Improved Patterns and Flexibility

### 1. Flexible Metadata Stripping

- **What's New**: More flexible regex for scraped content metadata
- **Supports**:
  - Various horizontal rule styles (`---`, `___`, `***`)
  - Different emphasis markers
  - Multiple formatting variations

### 2. Code Block Detection in s1f

- **What's New**: Ignores separators inside code blocks
- **Benefits**: Prevents false positive file detection
- **Applies to**: Markdown code blocks (```)

### 3. Timezone-Aware Timestamps

- **What's Changed**: All timestamps now use UTC
- **Implementation**: `datetime.now(timezone.utc)`
- **Benefits**: Consistent timestamps across timezones

## CLI Updates

### New Options Summary

```bash
# Performance
--allow-duplicate-files         # Disable content deduplication

# Encoding
--no-prefer-utf8-for-text-files # Disable UTF-8 preference

# Security
--security-check {error|warn|skip}  # Security scanning mode
--ignore-https-errors              # Disable SSL validation (scraping)

# Existing options work as before
--source-directory, -s          # Source directory
--output-file, -o              # Output file
--preset                       # Use preset configuration
```

## Breaking Changes

### 1. Standard Separator Format

- **Change**: File separators no longer include checksums
- **Before**: `=== path/to/file.txt === SHA256: abc123...`
- **After**: `=== path/to/file.txt ===`
- **Impact**: s1f can still read old format files

### 2. SSL Validation Default

- **Change**: SSL validation now enabled by default
- **Impact**: May break scraping of sites with invalid certificates
- **Migration**: Use `--ignore-https-errors` if needed

### 3. Security Scanning Default

- **Change**: Security scanning in error mode by default
- **Impact**: Processing stops on sensitive data detection
- **Migration**: Use `--security-check warn` for old behavior

## Preset System Enhancements

### New Preset Settings

```yaml
# Performance
enable_content_deduplication: false # Allow duplicate files

# Encoding
prefer_utf8_for_text_files: false # Disable UTF-8 preference

# Security
security_check: warn # Security check mode

# Per-file settings still work
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Test Suite Improvements

- Fixed test isolation issues
- Added proper async test support
- Improved test server connectivity handling
- Enhanced security test coverage

## Migration Guide

### From v3.1 to v3.2

1. **Review Security Settings**:

   - Default security scanning may flag legitimate content
   - Use `--security-check warn` during migration

2. **Check SSL Requirements**:

   - Sites with self-signed certificates need `--ignore-https-errors`
   - Review and update scraping scripts

3. **Update Separator Parsing**:

   - If you parse m1f output, update to handle new separator format
   - s1f handles both formats automatically

4. **Performance Tuning**:
   - Parallel processing is automatic - no configuration needed
   - Monitor memory usage with large file sets

## Examples

### Using New Features

```bash
# Security in warn mode (parallel processing is automatic)
m1f -s ./src -o bundle.txt --security-check warn

# Allow duplicates with custom encoding handling
m1f -s ./legacy -o output.txt --allow-duplicate-files --no-prefer-utf8-for-text-files

# Secure web scraping (robots.txt compliance is automatic)
m1f-scrape https://example.com -o ./scraped

# Using new features in presets
m1f -s . -o bundle.txt --preset my-preset.yml
```

### Sample v3.2 Preset

```yaml
name: "Modern Web Project v3.2"
version: "3.2"

# Global settings with v3.2 features
settings:
  enable_content_deduplication: true
  prefer_utf8_for_text_files: true
  security_check: error

# File patterns remain the same
include_patterns:
  - "src/**/*.{js,ts,jsx,tsx}"
  - "**/*.md"

exclude_patterns:
  - "**/node_modules/**"
  - "**/.git/**"

# Per-file settings with processors
per_file_settings:
  "*.min.js":
    processors:
      - minify_content
```

## Performance Benchmarks

Typical improvements with v3.2:

- **Parallel Processing**: 3-5x faster for 1000+ files
- **Memory Usage**: 50% reduction for large files
- **s1f Extraction**: 2x faster with concurrent writes
- **Checksum Calculation**: Constant memory usage regardless of file size

## Security Audit Results

v3.2 addresses all HIGH and MEDIUM priority security issues:

- ✅ Path traversal vulnerabilities fixed
- ✅ SSRF protection implemented
- ✅ Command injection prevented
- ✅ SSL validation enforced
- ✅ robots.txt compliance added
- ✅ JavaScript execution validated
- ✅ Race conditions eliminated

## Support and Resources

- [Security Best Practices Guide](./40_security_best_practices.md)
- [CLI Reference](./02_cli_reference.md)
- [Preset System Guide](./10_m1f_presets.md)
- [Troubleshooting Guide](./03_troubleshooting.md)

For questions or issues, please refer to the project repository.

======= docs/02_s1f/20_s1f.md ======
# s1f (Split One File)

A modern file extraction tool with async I/O that reconstructs original files
from combined archives with full metadata preservation.

## Overview

The s1f tool (v2.0.0) is the counterpart to m1f, designed to extract and
reconstruct original files from a combined file. Built with Python 3.10+ and
modern async architecture, it ensures reliable extraction with checksum
verification and proper encoding handling.

## Key Features

- **Async I/O**: High-performance concurrent file writing
- **Smart Parser Framework**: Automatic format detection with dedicated parsers
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Clean modular design with dependency injection
- **Checksum Verification**: SHA256 integrity checking with line ending
  normalization
- **Encoding Support**: Intelligent encoding detection and conversion
- **Error Recovery**: Graceful fallbacks and detailed error reporting
- **Progress Tracking**: Real-time extraction statistics

## Quick Start

```bash
# Basic extraction (positional arguments - recommended)
m1f-s1f ./combined.txt ./extracted_files

# Basic extraction (option-style arguments)
m1f-s1f -i ./combined.txt -d ./extracted_files

# List files without extracting
m1f-s1f --list ./combined.txt

# Force overwrite of existing files
m1f-s1f ./combined.txt ./extracted_files -f

# Verbose output to see detailed extraction progress
m1f-s1f ./combined.txt ./extracted_files -v

# Extract with specific encoding (new in v2.0.0)
m1f-s1f ./combined.txt ./extracted_files --target-encoding utf-16-le
```

## Architecture

S1F v2.0.0 features a modern, modular architecture:

```
tools/s1f/
├── __init__.py       # Package initialization
├── __main__.py       # Entry point for module execution
├── cli.py            # Command-line interface
├── config.py         # Configuration management
├── core.py           # Core extraction logic with async I/O
├── exceptions.py     # Custom exceptions
├── logging.py        # Structured logging
├── models.py         # Data models (ExtractedFile, etc.)
├── parsers.py        # Abstract parser framework
├── utils.py          # Utility functions
└── writers.py        # Output writers (file, stdout)
```

### Key Components

- **Async I/O**: Concurrent file operations for better performance
- **Parser Framework**: Extensible system for handling different file formats
- **Type Safety**: Full type hints and dataclass models
- **Clean Architecture**: Separation of concerns with dependency injection

## Command Line Options

s1f supports both positional and option-style arguments for flexibility:

### Positional Arguments (recommended)

```bash
s1f <input_file> <destination_directory>
```

### Option-Style Arguments (backward compatibility)

```bash
s1f -i <input_file> -d <destination_directory>
```

### All Options

| Option                        | Description                                                                                                                                                                                                   |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `-i, --input-file`            | Path to the combined input file (can also be specified as first positional argument)                                                                                                                          |
| `-d, --destination-directory` | Directory where extracted files will be saved (can also be specified as second positional argument)                                                                                                           |
| `-l, --list`                  | List files in the archive without extracting them. When used, destination directory is not required                                                                                                           |
| `-f, --force`                 | Force overwrite of existing files without prompting                                                                                                                                                           |
| `-v, --verbose`               | Enable verbose output                                                                                                                                                                                         |
| `--version`                   | Show version information and exit                                                                                                                                                                             |
| `--timestamp-mode`            | How to set file timestamps (`original` or `current`). Original preserves timestamps from when files were combined, current uses the current time                                                              |
| `--ignore-checksum`           | Skip checksum verification for MachineReadable files. Useful when files were intentionally modified after being combined                                                                                      |
| `--respect-encoding`          | Try to use the original file encoding when writing extracted files. If enabled and original encoding information is available, files will be written using that encoding instead of UTF-8                     |
| `--target-encoding`           | Explicitly specify the character encoding to use for all extracted files (e.g., `utf-8`, `latin-1`, `utf-16-le`). This overrides the `--respect-encoding` option and any encoding information in the metadata |

## Usage Examples

### Basic Operations

```bash
# Basic command (positional arguments)
m1f-s1f /path/to/combined_output.txt /path/to/output_folder

# Basic command (option-style)
m1f-s1f --input-file /path/to/combined_output.txt \
  --destination-directory /path/to/output_folder

# List files in archive without extracting
m1f-s1f --list ./output/bundle.m1f.txt

# Splitting a MachineReadable file with force overwrite and verbose output
m1f-s1f ./output/bundle.m1f.txt ./extracted_project -f -v

# Check version
m1f-s1f --version
```

### Advanced Operations

```bash
# Using current system time for timestamps
m1f-s1f -i ./combined_file.txt -d ./extracted_files \
  --timestamp-mode current

# Preserving original file encodings
m1f-s1f -i ./with_encodings.txt -d ./extracted_files \
  --respect-encoding

# Using a specific encoding for all extracted files
m1f-s1f -i ./combined_file.txt -d ./extracted_files \
  --target-encoding utf-8

# Ignoring checksum verification (when files were intentionally modified)
m1f-s1f -i ./modified_bundle.m1f.txt -d ./extracted_files \
  --ignore-checksum
```

## Supported File Formats

The s1f tool can extract files from combined files created with any of the m1f
separator styles:

- **Standard Style** - Simple separators with file paths and checksums
- **Detailed Style** - Comprehensive separators with full metadata
- **Markdown Style** - Formatted with Markdown syntax for documentation
- **MachineReadable Style** - Structured format with JSON metadata and UUID
  boundaries
- **None Style** - Files combined without separators (limited extraction
  capability)

For the most reliable extraction, use files created with the MachineReadable
separator style, as these contain complete metadata and checksums for
verification.

## Common Workflows

### Extract and Verify

This workflow is useful when you want to ensure the integrity of extracted
files:

```bash
# Step 1: Extract the files with verification
m1f-s1f -i ./project_bundle.m1f.txt -d ./extracted_project -v

# Step 2: Check for any checksum errors in the output
# If any errors are reported, consider using --ignore-checksum if appropriate
```

### Multiple Extraction Targets

When you need to extract the same combined file to different locations:

```bash
# Extract for development
m1f-s1f -i ./project.m1f.txt -d ./dev_workspace

# Extract for backup with original timestamps
m1f-s1f -i ./project.m1f.txt -d ./backup --timestamp-mode original
```

## Performance

S1F v2.0.0 includes significant performance improvements:

- **Async I/O**: Concurrent file writing for 3-5x faster extraction on SSDs
- **Optimized Parsing**: Efficient line-by-line processing with minimal memory
  usage
- **Smart Buffering**: Adaptive buffer sizes based on file characteristics

## Error Handling

The tool provides comprehensive error handling:

- **Checksum Verification**: Automatic integrity checking with clear error
  messages
- **Encoding Fallbacks**: Graceful handling of encoding issues with multiple
  fallback strategies
- **Permission Errors**: Clear reporting of file system permission issues
- **Partial Recovery**: Continue extraction even if individual files fail

======= docs/03_html2md/30_html2md.md ======
# html2md (HTML to Markdown Converter)

A modern HTML to Markdown converter with HTML structure analysis, custom
extractors, async I/O, and parallel processing capabilities.

## Overview

The html2md tool (v3.1.0) provides a robust solution for converting HTML content
to Markdown format, with fine-grained control over the conversion process. Built
with Python 3.10+ and modern async architecture, it focuses on intelligent
content extraction and conversion.

**New in v3.1.0:** Custom extractor plugin system for site-specific content
extraction.

**Note:** Web scraping functionality has been moved to the separate `webscraper`
tool for better modularity. Use `webscraper` to download websites, then
`html2md` to convert the downloaded HTML files.

## Key Features

- **Custom Extractor System**: Create site-specific extractors for optimal
  content extraction
- **HTML Structure Analysis**: Analyze HTML files to find optimal content
  selectors
- **Intelligent Content Extraction**: Use CSS selectors to extract specific
  content
- **Async I/O**: High-performance concurrent file processing
- **API Mode**: Programmatic access for integration with other tools
- **Type Safety**: Full type annotations throughout the codebase
- **Modern Architecture**: Clean modular design
- **Workflow Integration**: .scrapes directory structure for organized
  processing
- Recursive directory scanning for batch conversion
- Smart internal link handling (HTML → Markdown)
- Customizable element filtering and removal
- YAML frontmatter generation
- Heading level adjustment
- Code block language detection
- Character encoding detection and conversion
- Parallel processing for faster conversion

## Quick Start

```bash
# Basic conversion of all HTML files in a directory
m1f-html2md convert ./website -o ./docs

# Use a custom extractor for site-specific conversion
m1f-html2md convert ./website -o ./docs \
  --extractor ./extractors/custom_extractor.py

# Extract only main content from HTML files
m1f-html2md convert ./website -o ./docs \
  --content-selector "main.content" --ignore-selectors nav .sidebar footer

# Skip YAML frontmatter and adjust heading levels
m1f-html2md convert ./website -o ./docs \
  --no-frontmatter --heading-offset 1

# Analyze HTML structure to find best selectors
m1f-html2md analyze ./html/*.html --suggest-selectors

# Analyze with detailed structure output
m1f-html2md analyze ./html/*.html --show-structure --common-patterns

# Generate a configuration file
m1f-html2md config -o config.yaml
```

### Complete Workflow Example with .scrapes Directory

```bash
# Step 1: Create project structure
mkdir -p .scrapes/my-project/{html,md,extractors}

# Step 2: Download website using webscraper
m1f-scrape https://example.com -o .scrapes/my-project/html

# Step 3: Analyze HTML structure (optional)
m1f-html2md analyze .scrapes/my-project/html/*.html --suggest-selectors

# Step 4: Create custom extractor (optional)
# Use Claude to analyze and create site-specific extractor:
claude -p "Analyze these HTML files and create a custom extractor for html2md" \
  --files .scrapes/my-project/html/*.html

# Step 5: Convert with custom extractor
m1f-html2md convert .scrapes/my-project/html -o .scrapes/my-project/md \
  --extractor .scrapes/my-project/extractors/custom_extractor.py
```

## Command Line Interface

The html2md tool uses subcommands for different operations:

### Convert Command

Convert local HTML files to Markdown:

```bash
m1f-html2md convert <source> -o <output> [options]
```

| Option               | Description                                                   |
| -------------------- | ------------------------------------------------------------- |
| `source`             | Source file or directory                                      |
| `-o, --output`       | Output file or directory (required)                           |
| `-c, --config`       | Configuration file path (YAML format)                         |
| `--format`           | Output format: markdown, m1f_bundle, json (default: markdown) |
| `--extractor`        | Path to custom extractor Python file                          |
| `--content-selector` | CSS selector for main content                                 |
| `--ignore-selectors` | CSS selectors to ignore (space-separated)                     |
| `--heading-offset`   | Offset heading levels (default: 0)                            |
| `--no-frontmatter`   | Don't add YAML frontmatter                                    |
| `--parallel`         | Enable parallel processing                                    |
| `--log-file`         | Log to file                                                   |
| `-v, --verbose`      | Enable verbose output                                         |
| `-q, --quiet`        | Suppress all output except errors                             |
| `--version`          | Show version information and exit                             |

### Analyze Command

Analyze HTML structure for optimal content extraction:

```bash
m1f-html2md analyze <files> [options]
```

| Option                | Description                                                          |
| --------------------- | -------------------------------------------------------------------- |
| `files`               | HTML files to analyze (2-3 files recommended)                        |
| `--show-structure`    | Show detailed HTML structure                                         |
| `--common-patterns`   | Find common patterns across files                                    |
| `--suggest-selectors` | Suggest CSS selectors for content extraction (default if no options) |
| `-v, --verbose`       | Enable verbose output                                                |
| `-q, --quiet`         | Suppress all output except errors                                    |
| `--log-file`          | Log to file                                                          |

### Config Command

Generate a configuration file template:

```bash
m1f-html2md config [options]
```

| Option         | Description                                            |
| -------------- | ------------------------------------------------------ |
| `-o, --output` | Output configuration file (default: config.yaml)       |
| `--format`     | Configuration format: yaml, toml, json (default: yaml) |

## Usage Examples

### Basic Conversion

```bash
# Simple conversion of all HTML files in a directory
m1f-html2md convert ./website -o ./docs

# Convert files with verbose logging
m1f-html2md convert ./website -o ./docs --verbose

# Convert to m1f bundle format
m1f-html2md convert ./website -o ./docs.m1f --format m1f_bundle

# Convert to JSON format for processing
m1f-html2md convert ./website -o ./data.json --format json
```

### Content Selection

```bash
# Extract only the main content and ignore navigation elements
m1f-html2md convert ./website -o ./docs \
  --content-selector "main" --ignore-selectors nav .sidebar footer

# Extract article content from specific selectors
m1f-html2md convert ./website -o ./docs \
  --content-selector "article.content" \
  --ignore-selectors .author-bio .share-buttons .related-articles
```

### HTML Analysis

```bash
# Analyze HTML files to find optimal selectors
m1f-html2md analyze ./html/*.html

# Show detailed structure of HTML files
m1f-html2md analyze ./html/*.html --show-structure

# Find common patterns across multiple files
m1f-html2md analyze ./html/*.html --common-patterns

# Get all analysis options
m1f-html2md analyze ./html/*.html \
  --show-structure --common-patterns --suggest-selectors
```

### File Filtering

```bash
# Process only specific file types
m1f-html2md convert ./website -o ./docs \
  -c config.yaml  # Use a configuration file for file filtering
```

### Formatting Options

```bash
# Adjust heading levels (e.g., h1 → h2, h2 → h3)
m1f-html2md convert ./website -o ./docs \
  --heading-offset 1

# Skip frontmatter generation
m1f-html2md convert ./website -o ./docs \
  --no-frontmatter

# Use configuration file for advanced formatting options
m1f-html2md convert ./website -o ./docs -c config.yaml

# Log conversion process to file
m1f-html2md convert ./website -o ./docs \
  --log-file conversion.log
```

### Performance Optimization

```bash
# Use parallel processing for faster conversion of large sites
m1f-html2md convert ./website -o ./docs \
  --parallel
```

## Custom Extractors

The custom extractor system allows you to create site-specific content
extraction logic for optimal results. Extractors can be simple functions or full
classes.

### Creating a Custom Extractor

#### Function-based Extractor

```python
# extractors/simple_extractor.py
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    """Extract main content from HTML."""
    # Remove navigation elements
    for nav in soup.find_all(['nav', 'header', 'footer']):
        nav.decompose()

    # Find main content
    main = soup.find('main') or soup.find('article')
    if main:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    """Clean up the converted markdown."""
    # Remove duplicate newlines
    import re
    return re.sub(r'\n{3,}', '\n\n', markdown)
```

#### Class-based Extractor

```python
# extractors/advanced_extractor.py
from tools.html2md.extractors import BaseExtractor
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

class Extractor(BaseExtractor):
    """Custom extractor for specific website."""

    def extract(self, soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
        """Extract content with site-specific logic."""
        # Custom extraction logic
        return soup

    def preprocess(self, html: str, config: Optional[Dict[str, Any]] = None) -> str:
        """Preprocess raw HTML before parsing."""
        # Fix common HTML issues
        return html.replace('&nbsp;', ' ')

    def postprocess(self, markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
        """Post-process converted markdown."""
        # Clean up site-specific artifacts
        return markdown
```

### Using Custom Extractors

```bash
# Use with CLI
m1f-html2md convert ./html -o ./markdown \
  --extractor ./extractors/my_extractor.py

# Use with API
from tools.html2md.api import Html2mdConverter
from pathlib import Path

converter = Html2mdConverter(
    config,
    extractor=Path("./extractors/my_extractor.py")
)
```

### .scrapes Directory Structure

The recommended workflow uses a `.scrapes` directory (gitignored) for organizing
scraping projects:

```
.scrapes/
└── project-name/
    ├── html/         # Raw HTML files from scraping
    ├── md/           # Converted Markdown files
    └── extractors/   # Custom extraction scripts
        └── custom_extractor.py
```

This structure keeps scraped content organized and separate from your main
codebase.

## Advanced Features

### YAML Frontmatter

By default, the converter adds YAML frontmatter to each Markdown file,
including:

- Title extracted from HTML title tag or first h1 element
- Source filename
- Conversion date
- Original file modification date

To disable frontmatter generation, use the `--no-frontmatter` option:

```bash
m1f-html2md convert ./website -o ./docs --no-frontmatter
```

The generated frontmatter looks like:

```yaml
---
title: Extracted from HTML
source_file: original.html
date_converted: 2023-06-15T14:30:21
date_modified: 2023-06-12T10:15:33
---
```

### Heading Level Adjustment

The `--heading-offset` option allows you to adjust the hierarchical structure of
the document by incrementing or decrementing heading levels. This is useful
when:

- Integrating content into an existing document with its own heading hierarchy
- Making h1 headings become h2 headings for better document structure
- Ensuring proper nesting of headings for better semantics

Positive values increase heading levels (e.g., h1 → h2), while negative values
decrease them (e.g., h2 → h1).

### Code Block Language Detection

The converter can automatically detect language hints from HTML code blocks that
use language classes, such as:

```html
<pre><code class="language-python">def example():
    return "Hello, world!"
</code></pre>
```

This will be converted to a properly formatted Markdown code block with language
hint:

````markdown
```python
def example():
    return "Hello, world!"
```
````

### Character Encoding Handling

The converter provides robust character encoding detection and conversion:

1. Automatically detects the encoding of source HTML files
2. Properly handles UTF-8, UTF-16, and other encodings
3. All output files are written in UTF-8 encoding
4. Handles BOM (Byte Order Mark) detection for Unicode files

## Architecture

HTML2MD v3.1.0 features a modern, modular architecture:

```
tools/html2md/
├── __init__.py       # Package initialization
├── __main__.py       # Entry point for module execution
├── api.py            # Programmatic API for other tools
├── cli.py            # Command-line interface
├── config/           # Configuration management
│   ├── __init__.py
│   ├── loader.py     # Config file loader
│   └── models.py     # Config data models
├── core.py           # Core conversion logic
├── extractors.py     # Custom extractor system
├── preprocessors.py  # HTML preprocessing
├── analyze_html.py   # HTML structure analysis
└── utils.py          # Utility functions

.scrapes/             # Project scrapes directory (gitignored)
└── project-name/
    ├── html/         # Raw HTML files
    ├── md/           # Converted Markdown
    └── extractors/   # Custom extractors
```

### Key Components

- **API Mode**: Use as a library in other Python projects
- **Custom Extractors**: Pluggable extractor system for site-specific logic
- **Type Safety**: Full type hints and dataclass models
- **Clean Architecture**: Separation of concerns with dependency injection
- **Async Support**: Modern async/await for high performance
- **Workflow Integration**: Organized .scrapes directory structure

## Integration with m1f

The html2md tool works well with the m1f (Make One File) tool for comprehensive
documentation handling:

1. First convert HTML files to Markdown:

   ```bash
   m1f-html2md convert ./html-docs -o ./markdown-docs
   ```

2. Then use m1f to combine the Markdown files:
   ```bash
   m1f -s ./markdown-docs -o ./combined-docs.m1f.txt \
     --separator-style Markdown
   ```

This workflow is ideal for:

- Converting documentation from HTML to Markdown format
- Consolidating documentation from multiple sources
- Preparing content for LLM context windows
- Creating searchable knowledge bases

## Performance Considerations

- For large websites with many HTML files, use the `--parallel` option
- Conversion speed depends on file size, complexity, and number of files
- Memory usage scales with file sizes when parallel processing is enabled
- The tool uses async I/O for efficient file operations

## Programmatic API

Use html2md in your Python projects:

```python
from tools.html2md.api import Html2mdConverter
from tools.html2md.config import Config
from tools.html2md.extractors import BaseExtractor
from pathlib import Path

# Create converter with configuration
config = Config(
    source=Path("./html"),
    destination=Path("./markdown")
)
converter = Html2mdConverter(config)

# Convert with custom extractor
converter = Html2mdConverter(
    config,
    extractor=Path("./extractors/custom_extractor.py")
)

# Or with inline extractor
class MyExtractor(BaseExtractor):
    def extract(self, soup, config=None):
        # Custom logic
        return soup

converter = Html2mdConverter(config, extractor=MyExtractor())

# Convert a single file
output_path = converter.convert_file(Path("page.html"))
print(f"Converted to: {output_path}")

# Convert entire directory
results = converter.convert_directory()
print(f"Converted {len(results)} files")
```

## Requirements and Dependencies

- Python 3.10 or newer
- Required packages:
  - beautifulsoup4: For HTML parsing
  - markdownify: For HTML to Markdown conversion
  - aiofiles: For async file operations
  - rich: For console output
  - pydantic: For configuration models
- Optional packages:
  - chardet: For encoding detection
  - pyyaml: For YAML configuration files
  - toml: For TOML configuration files

Install dependencies:

```bash
pip install beautifulsoup4 markdownify chardet pyyaml aiofiles rich pydantic
```

**Note**: For web scraping functionality, use the separate `webscraper` tool
which provides multiple backend options including HTTrack.

======= docs/03_html2md/31_html2md_guide.md ======
# HTML to Markdown Converter Guide

The `html2md` tool (v3.1.0) is a modern, async converter designed to transform
HTML content into clean Markdown format. Built with Python 3.10+ and modern
async architecture, it focuses on intelligent content extraction and conversion.

**Note:** Web scraping functionality has been moved to the separate `webscraper`
tool. Use `webscraper` to download websites, then `html2md` to convert the
downloaded HTML files.

## Table of Contents

- [Installation](#installation)
- [Quick Start](#quick-start)
- [Command Line Usage](#command-line-usage)
- [Configuration](#configuration)
- [Python API](#python-api)
- [Custom Extractors](#custom-extractors)
- [Advanced Features](#advanced-features)
- [Examples](#examples)
- [Troubleshooting](#troubleshooting)

## Installation

### Python Dependencies

```bash
pip install beautifulsoup4 markdownify pydantic rich httpx chardet pyyaml aiofiles

# Optional dependencies
pip install toml      # For TOML configuration files
```

### Installation

```bash
pip install beautifulsoup4 markdownify pydantic rich chardet pyyaml aiofiles

# Optional dependencies
pip install toml      # For TOML configuration files
```

## Quick Start

### Convert a Single File

```bash
m1f-html2md convert index.html -o index.md
```

### Convert a Directory

```bash
m1f-html2md convert ./html_docs/ -o ./markdown_docs/
```

### Analyze HTML Structure

```bash
m1f-html2md analyze ./html/*.html --suggest-selectors
```

### Generate Configuration

```bash
m1f-html2md config -o config.yaml
```

## Command Line Usage

The tool provides three main commands:

### `convert` - Convert Files or Directories

```bash
m1f-html2md convert [source] -o [output] [options]

Options:
  -c, --config FILE         Configuration file (YAML format)
  --format FORMAT          Output format (markdown, m1f_bundle, json)
  --content-selector SEL    CSS selector for main content
  --ignore-selectors SEL    CSS selectors to ignore (space-separated)
  --heading-offset N        Offset heading levels by N
  --no-frontmatter         Don't add YAML frontmatter
  --parallel               Enable parallel processing
  --extractor FILE         Path to custom extractor Python file
  --log-file FILE          Log to file
  -v, --verbose            Enable verbose output
  -q, --quiet              Suppress all output except errors
```

### `analyze` - Analyze HTML Structure

```bash
m1f-html2md analyze [files] [options]

Options:
  --show-structure         Show detailed HTML structure
  --common-patterns        Find common patterns across files
  --suggest-selectors      Suggest CSS selectors (default)
  -v, --verbose            Enable verbose output
```

### `config` - Generate Configuration File

```bash
m1f-html2md config [options]

Options:
  -o, --output FILE        Output file (default: config.yaml)
  --format FORMAT          Config format (yaml, toml, json)
```

## Configuration

### Configuration File Structure

Create a `config.yaml` file:

```yaml
# Basic settings (v3.1.0 format)
source: ./html_docs
destination: ./markdown_docs
output_format: markdown

# Content extraction
extractor:
  content_selector: "article.content, main, .documentation"
  ignore_selectors:
    - nav
    - header
    - footer
    - .sidebar
    - .ads
    - "#comments"
  remove_elements:
    - script
    - style
    - iframe
  extract_metadata: true
  extract_opengraph: true

# Markdown processing
processor:
  heading_offset: 0
  add_frontmatter: true
  heading_style: atx
  link_handling: convert
  link_extensions:
    .html: .md
    .htm: .md
  normalize_whitespace: true
  fix_encoding: true

# Parallel processing
parallel: true

# Logging
verbose: false
quiet: false
log_file: ./conversion.log
```

### Configuration Options Explained

#### Extractor Configuration

- `content_selector`: CSS selector(s) to find main content
- `ignore_selectors`: Elements to remove before conversion
- `remove_elements`: HTML tags to completely remove
- `preserve_attributes`: HTML attributes to keep
- `extract_metadata`: Extract meta tags and title
- `extract_opengraph`: Extract OpenGraph metadata

#### Processor Configuration

- `heading_offset`: Adjust heading levels (e.g., h1→h2)
- `link_handling`: How to process links (convert/preserve/absolute/relative)
- `normalize_whitespace`: Clean up extra whitespace
- `fix_encoding`: Fix common encoding issues

#### Processing Configuration

- `parallel`: Enable parallel processing for multiple files
- `verbose`: Enable verbose logging
- `quiet`: Suppress all output except errors
- `log_file`: Path to log file

## Python API

### Basic Usage

```python
from tools.html2md.api import HTML2MDConverter
import asyncio

# Create converter with configuration
converter = HTML2MDConverter(
    outermost_selector="main",
    ignore_selectors=["nav", "footer"],
    add_frontmatter=True
)

# Convert a directory (async)
results = asyncio.run(converter.convert_directory("./html", "./markdown"))

# Convert a single file (async)
result = asyncio.run(converter.convert_file("index.html"))

# Convert with custom extractor
from pathlib import Path

converter = HTML2MDConverter(
    outermost_selector="main",
    extractor=Path("./extractors/custom_extractor.py")
)

result = asyncio.run(converter.convert_file("index.html"))
```

### Advanced Configuration

```python
from tools.html2md.config.models import HTML2MDConfig

# Create configuration with v3.1.0 models
config = HTML2MDConfig(
    source_dir="./html",
    destination_dir="./output",
    outermost_selector="div.documentation",
    ignore_selectors=[".nav-menu", ".footer"],
    strip_attributes=True,
    heading_offset=1,
    add_frontmatter=True,
    parallel=True,
    max_workers=4
)

converter = HTML2MDConverter.from_config(config)
```

### Convenience Functions

```python
from tools.html2md.api import convert_file, convert_directory
import asyncio

# Simple file conversion (async)
result = asyncio.run(convert_file("page.html", destination="page.md"))

# Directory conversion with options (async)
results = asyncio.run(convert_directory(
    source="./html",
    destination="./markdown",
    outermost_selector="article",
    parallel=True
))
```

## Custom Extractors

The custom extractor system allows you to create site-specific content
extraction logic:

### Function-based Extractor

```python
# extractors/my_extractor.py
from bs4 import BeautifulSoup

def extract(soup: BeautifulSoup, config=None):
    """Extract main content."""
    # Custom extraction logic
    main = soup.find('main')
    if main:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup
    return soup

def postprocess(markdown: str, config=None):
    """Clean up converted markdown."""
    import re
    return re.sub(r'\n{3,}', '\n\n', markdown)
```

### Using Custom Extractors

```bash
m1f-html2md convert ./html -o ./markdown \
  --extractor ./extractors/my_extractor.py
```

## Advanced Features

### Content Extraction with CSS Selectors

Target specific content areas:

```yaml
extractor:
  content_selector: |
    article.post-content,
    div.documentation-body,
    main[role="main"],
    #content:not(.sidebar)
```

### Link Handling Strategies

1. **Convert**: Change `.html` to `.md`

   ```yaml
   processor:
     link_handling: convert
     link_extensions:
       .html: .md
       .php: .md
   ```

2. **Preserve**: Keep original links

   ```yaml
   processor:
     link_handling: preserve
   ```

3. **Absolute**: Make all links absolute
   ```yaml
   processor:
     link_handling: absolute
   ```

### Metadata Extraction

The tool can extract and preserve:

- Page title
- Meta description
- OpenGraph data
- Schema.org structured data
- Custom meta tags

### m1f Bundle Creation

Generate m1f bundles directly:

```yaml
output_format: m1f_bundle
m1f:
  create_bundle: true
  bundle_name: my-documentation
  include_assets: true
  generate_index: true
  metadata:
    project: My Project Docs
    version: 1.0.0
```

## Examples

### Example 1: Convert Documentation Site

```bash
# Create configuration
cat > docs-config.yaml << EOF
source: ./python-docs-html
destination: ./python-docs-md
extractor:
  content_selector: "div.document"
  ignore_selectors:
    - ".sphinxsidebar"
    - ".related"
processor:
  heading_offset: 1
  add_frontmatter: true
parallel: true
EOF

# Run conversion
m1f-html2md convert ./python-docs-html -o ./python-docs-md -c docs-config.yaml
```

### Example 2: Convert Blog with Specific Content

```python
from tools.html2md.api import HTML2MDConverter
import asyncio

converter = HTML2MDConverter(
    outermost_selector="article.post",
    ignore_selectors=[
        ".post-navigation",
        ".comments-section",
        ".social-share"
    ],
    add_frontmatter=True,
    heading_offset=0
)

# Convert all blog posts (async)
results = asyncio.run(converter.convert_directory(
    "./blog-html",
    "./blog-markdown"
))
```

### Example 3: Create m1f Bundle from HTML

```bash
# First download the website using webscraper
m1f-scrape https://docs.example.com -o ./html

# Then convert to m1f bundle
m1f-html2md convert ./html \
  -o ./output.m1f \
  --format m1f_bundle \
  --content-selector "main.content" \
  --ignore-selectors nav footer
```

## Troubleshooting

### Common Issues

1. **Content selector not matching**

   ```
   WARNING: Content selector 'article' not found
   ```

   Solution: Use the analyze command to find the right selectors:

   ```bash
   m1f-html2md analyze ./html/*.html --suggest-selectors
   ```

2. **Encoding issues**

   ```
   UnicodeDecodeError: 'utf-8' codec can't decode
   ```

   Solution: The tool auto-detects encoding, but HTML files may have mixed
   encodings. All output is converted to UTF-8.

3. **Large directories timing out**

   Solution: Use parallel processing:

   ```bash
   m1f-html2md convert ./html -o ./md --parallel
   ```

4. **Missing content after conversion**

   Solution: Check your ignore selectors - they may be too broad:

   ```bash
   m1f-html2md convert ./html -o ./md \
     --content-selector "body" \
     --ignore-selectors .ads .cookie-notice
   ```

### Debug Mode

Enable verbose logging for debugging:

```bash
m1f-html2md convert ./html -o ./md -v --log-file debug.log
```

Or in configuration:

```yaml
verbose: true
log_file: ./conversion-debug.log
```

### Performance Tips

1. **Use parallel processing** for large directories:

   ```yaml
   parallel: true
   ```

2. **Target specific content** to reduce processing:

   ```yaml
   extractor:
     content_selector: "article.documentation"
   ```

3. **Use custom extractors** for complex sites to optimize extraction

## Integration with m1f

The converted Markdown files are optimized for m1f bundling:

1. Clean, consistent formatting
2. Preserved metadata in frontmatter
3. Proper link structure
4. UTF-8 encoding

To create an m1f bundle after conversion:

```bash
# Download website first
m1f-scrape https://docs.example.com -o ./html/

# Convert to Markdown
m1f-html2md convert ./html/ -o ./docs/

# Create m1f bundle
m1f -s ./docs/ -o documentation.m1f.txt
```

Or convert directly to m1f bundle format:

```bash
m1f-html2md convert ./html/ \
  -o ./docs.m1f \
  --format m1f_bundle
```

======= docs/03_html2md/32_html2md_workflow_guide.md ======
# HTML2MD Workflow Guide

This guide explains the recommended workflow for converting websites to Markdown
using html2md with custom extractors.

## Overview

The html2md tool now supports a flexible workflow that separates concerns:

1. HTML acquisition (scraping or external)
2. Content analysis and extractor development
3. Conversion with site-specific extraction

## Directory Structure

All scraping projects use the `.scrapes` directory (gitignored):

```
.scrapes/
└── project-name/
    ├── html/         # Raw HTML files
    ├── md/           # Converted Markdown files
    └── extractors/   # Custom extraction scripts
```

## Complete Workflow

### Step 1: Set Up Project Structure

```bash
# Create project directories
mkdir -p .scrapes/my-docs/{html,md,extractors}
```

### Step 2: Acquire HTML Content

You have several options:

#### Option A: Use webscraper tool

```bash
m1f-scrape https://example.com \
  -o .scrapes/my-docs/html \
  --max-pages 50 \
  --scraper playwright
```

#### Option B: Manual download

- Save HTML files directly to `.scrapes/my-docs/html/`
- Use browser "Save As" or wget/curl
- Any method that gets HTML files

#### Option C: External scraping

- Use any scraping tool you prefer
- Just ensure HTML files end up in the html/ directory

### Step 3: Analyze HTML Structure (Optional)

Understand the HTML structure before creating extractors:

```bash
# Analyze a few sample files
m1f-html2md analyze \
  .scrapes/my-docs/html/*.html \
  --suggest-selectors

# Get detailed structure analysis
m1f-html2md analyze \
  .scrapes/my-docs/html/*.html \
  --show-structure \
  --common-patterns
```

### Step 4: Create Custom Extractor (Optional)

#### Manual Creation

Create `.scrapes/my-docs/extractors/custom_extractor.py`:

```python
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    """Extract main content from HTML."""
    # Remove site-specific navigation
    for selector in ['nav', '.sidebar', '#header', '#footer']:
        for elem in soup.select(selector):
            elem.decompose()

    # Find main content area
    main = soup.find('main') or soup.find('article') or soup.find('.content')
    if main:
        # Create clean soup with just main content
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(main)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    """Clean up converted markdown."""
    lines = markdown.split('\n')
    cleaned = []

    for line in lines:
        # Remove "Copy" buttons before code blocks
        if line.strip() == 'Copy':
            continue
        cleaned.append(line)

    return '\n'.join(cleaned)
```

#### Claude-Assisted Creation

Use Claude to analyze HTML and create a custom extractor:

```bash
# Have Claude analyze the HTML structure
claude -p "Analyze these HTML files and create a custom extractor for html2md. \
The extractor should:
1. Remove all navigation, headers, footers, and sidebars
2. Extract only the main content
3. Clean up any site-specific artifacts in the markdown
4. Handle the specific structure of this website

Write the extractor to .scrapes/my-docs/extractors/custom_extractor.py" \
--files .scrapes/my-docs/html/*.html
```

### Step 5: Convert HTML to Markdown

#### With Custom Extractor

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md \
  --extractor extractors/custom_extractor.py
```

#### With Default Extractor

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md
```

#### With CSS Selectors Only

```bash
cd .scrapes/my-docs
m1f-html2md convert html -o md \
  --content-selector "main.content" \
  --ignore-selectors "nav" ".sidebar" ".ads"
```

### Step 6: Review and Refine

1. Check the converted Markdown files
2. If quality needs improvement:
   - Update the custom extractor
   - Re-run the conversion
   - Iterate until satisfied

## Example: Documentation Site

Here's a complete example for converting a documentation site:

```bash
# 1. Setup
mkdir -p .scrapes/docs-site/{html,md,extractors}

# 2. Download documentation
m1f-scrape https://docs.example.com \
  -o .scrapes/docs-site/html \
  --max-pages 100 \
  --scraper playwright

# 3. Analyze structure
m1f-html2md analyze \
  .scrapes/docs-site/html/*.html \
  --suggest-selectors

# 4. Create extractor for docs site
cat > .scrapes/docs-site/extractors/docs_extractor.py << 'EOF'
from bs4 import BeautifulSoup
from typing import Optional, Dict, Any

def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Remove docs-specific elements
    for selector in [
        '.docs-nav', '.docs-sidebar', '.docs-header',
        '.docs-footer', '.edit-page', '.feedback',
        '[class*="navigation"]', '[id*="toc"]'
    ]:
        for elem in soup.select(selector):
            elem.decompose()

    # Extract article content
    article = soup.find('article') or soup.find('.docs-content')
    if article:
        new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
        new_soup.body.append(article)
        return new_soup

    return soup

def postprocess(markdown: str, config: Optional[Dict[str, Any]] = None) -> str:
    # Clean up docs-specific patterns
    import re

    # Remove "Copy" buttons
    markdown = re.sub(r'^Copy\s*\n', '', markdown, flags=re.MULTILINE)

    # Remove "On this page" sections
    markdown = re.sub(r'^On this page.*?(?=^#|\Z)', '', markdown,
                      flags=re.MULTILINE | re.DOTALL)

    return markdown.strip()
EOF

# 5. Convert with custom extractor
cd .scrapes/docs-site
m1f-html2md convert html -o md \
  --extractor extractors/docs_extractor.py

# 6. Create m1f bundle (optional)
m1f -s md -o docs-bundle.txt
```

## Best Practices

### 1. Start Small

- Test with a few HTML files first
- Refine the extractor before processing everything

### 2. Iterative Development

- Create basic extractor
- Convert a sample
- Identify issues
- Update extractor
- Repeat until satisfied

### 3. Extractor Tips

- Use specific CSS selectors for the site
- Remove navigation early in extraction
- Handle site-specific patterns in postprocess
- Test with different page types

### 4. Organization

- Keep each project in its own directory
- Document site-specific quirks
- Save working extractors for reuse

### 5. Performance

- Use `--parallel` for large conversions
- Process in batches if needed
- Monitor memory usage

## Troubleshooting

### Common Issues

**Issue**: Navigation elements still appear in Markdown

- **Solution**: Add more specific selectors to the extractor
- Check for dynamic class names or IDs

**Issue**: Missing content

- **Solution**: Verify content selector is correct
- Check if content is loaded dynamically (use playwright scraper)

**Issue**: Broken formatting

- **Solution**: Adjust extraction logic
- Use postprocess to fix patterns

**Issue**: Encoding errors

- **Solution**: Ensure HTML files are UTF-8
- Use `--target-encoding utf-8` if needed

### Debug Tips

1. **Test extractor standalone**:

```python
from bs4 import BeautifulSoup
from pathlib import Path

# Load your extractor
import sys
sys.path.append('.scrapes/my-docs/extractors')
import custom_extractor

# Test on single file
html = Path('.scrapes/my-docs/html/sample.html').read_text()
soup = BeautifulSoup(html, 'html.parser')
result = custom_extractor.extract(soup)
print(result.prettify())
```

2. **Use verbose mode**:

```bash
m1f-html2md convert html -o md \
  --extractor extractors/custom_extractor.py \
  --verbose
```

3. **Process single file**:

```bash
m1f-html2md convert html/single-file.html \
  -o test.md \
  --extractor extractors/custom_extractor.py
```

## Advanced Techniques

### Multi-Stage Extraction

For complex sites, use multiple extraction stages:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Stage 1: Remove obvious non-content
    remove_selectors = ['script', 'style', 'nav', 'header', 'footer']
    for selector in remove_selectors:
        for elem in soup.select(selector):
            elem.decompose()

    # Stage 2: Find content container
    container = soup.select_one('.main-container') or soup.body

    # Stage 3: Clean within container
    for elem in container.select('.ads, .social-share, .related'):
        elem.decompose()

    # Stage 4: Extract final content
    content = container.select_one('article') or container

    new_soup = BeautifulSoup('<html><body></body></html>', 'html.parser')
    new_soup.body.append(content)
    return new_soup
```

### Conditional Extraction

Handle different page types:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Detect page type
    if soup.find('article', class_='blog-post'):
        return extract_blog_post(soup)
    elif soup.find('div', class_='documentation'):
        return extract_documentation(soup)
    elif soup.find('div', class_='api-reference'):
        return extract_api_reference(soup)
    else:
        return extract_generic(soup)
```

### Metadata Preservation

Keep important metadata:

```python
def extract(soup: BeautifulSoup, config: Optional[Dict[str, Any]] = None) -> BeautifulSoup:
    # Preserve title
    title = soup.find('title')

    # Extract content
    content = soup.find('main')

    # Create new soup with metadata
    new_soup = BeautifulSoup('<html><head></head><body></body></html>', 'html.parser')
    if title:
        new_soup.head.append(title)
    if content:
        new_soup.body.append(content)

    return new_soup
```

## Conclusion

The html2md workflow provides maximum flexibility:

- Separate HTML acquisition from conversion
- Site-specific extractors for optimal results
- Iterative refinement process
- Integration with other tools (webscraper, m1f)

This approach ensures you can handle any website structure and produce clean,
readable Markdown output.

======= docs/03_html2md/33_html2md_test_suite.md ======
# HTML2MD Test Suite Documentation

A comprehensive test suite for validating the html2md converter (v2.0.0) with
challenging real-world HTML structures.

## Overview

The HTML2MD test suite provides a robust testing framework consisting of:

- A Flask-based web server serving complex HTML test pages
- Comprehensive pytest test cases covering all conversion features including
  async operations
- Real-world documentation examples with challenging HTML structures
- Automated test runner with coverage reporting
- Full support for testing async/await patterns and parallel processing

## Architecture

```
tests/
├── html2md_server/
│   ├── server.py              # Flask test server
│   ├── requirements.txt       # Test suite dependencies
│   ├── run_tests.sh          # Automated test runner
│   ├── README.md             # Test suite documentation
│   ├── static/
│   │   ├── css/
│   │   │   └── modern.css    # Modern CSS with dark mode
│   │   └── js/
│   │       └── main.js       # Interactive features
│   └── test_pages/
│       ├── index.html        # Test suite homepage
│       ├── m1f-documentation.html
│       ├── html2md-documentation.html
│       ├── complex-layout.html
│       ├── code-examples.html
│       └── ...               # Additional test pages
└── test_html2md_server.py    # Pytest test cases
```

## Test Server

### Features

- Modern Flask-based web server
- RESTful API endpoints for test page discovery
- CORS enabled for cross-origin testing
- Dynamic page generation support
- Static asset serving with proper MIME types

### Running the Server

```bash
# Start server on default port 8080
python tests/html2md_server/server.py

# Server provides:
# - http://localhost:8080/            # Test suite homepage
# - http://localhost:8080/page/{name} # Individual test pages
# - http://localhost:8080/api/test-pages # JSON API
```

## Test Pages

### 1. M1F Documentation (`m1f-documentation.html`)

Tests real documentation conversion with:

- Complex heading hierarchies
- Code examples in multiple languages
- Nested structures and feature grids
- Command-line documentation tables
- Advanced layout with inline styles

### 2. HTML2MD Documentation (`html2md-documentation.html`)

Comprehensive documentation page testing:

- Multi-level navigation structures
- API documentation with code examples
- Complex tables and option grids
- Details/Summary elements
- Sidebar navigation

### 3. Complex Layout Test (`complex-layout.html`)

CSS layout challenges:

- **Flexbox layouts**: Multi-item flex containers
- **CSS Grid**: Complex grid with spanning items
- **Nested structures**: Up to 4 levels deep
- **Positioning**: Absolute, relative, sticky elements
- **Multi-column layouts**: CSS columns with rules
- **Masonry layouts**: Pinterest-style card layouts
- **Overflow containers**: Scrollable areas

### 4. Code Examples Test (`code-examples.html`)

Programming language support:

- **Languages tested**: Python, TypeScript, JavaScript, Bash, SQL, Go, Rust
- **Inline code**: Mixed with regular text
- **Code with special characters**: HTML entities, Unicode
- **Configuration files**: YAML, JSON examples
- **Edge cases**: Empty blocks, long lines, whitespace-only

### 5. Additional Test Pages (Planned)

- **Edge Cases**: Malformed HTML, special characters
- **Modern Features**: HTML5 elements, web components
- **Tables and Lists**: Complex nested structures
- **Multimedia**: Images, videos, iframes

## Test Suite Features

### Content Selection Testing

```python
# Test CSS selector-based extraction (v2.0.0 async API)
from tools.html2md.api import HTML2MDConverter
import asyncio

converter = HTML2MDConverter(
    outermost_selector="article",
    ignore_selectors=["nav", ".sidebar", "footer"]
)

# Async conversion
result = asyncio.run(converter.convert_file("test.html"))
```

### Code Block Detection

- Automatic language detection from class names
- Preservation of syntax highlighting hints
- Special character handling in code

### Layout Preservation

- Nested structure maintenance
- List hierarchy preservation
- Table structure conversion
- Heading level consistency

### Edge Case Handling

- Empty HTML documents
- Malformed HTML structures
- Very long lines
- Unicode and special characters
- Missing closing tags

## Running Tests

### Quick Start

```bash
# Run all tests with the automated script
./tests/html2md_server/run_tests.sh

# This will:
# 1. Install dependencies
# 2. Start the test server
# 3. Run all pytest tests
# 4. Generate coverage report
# 5. Clean up processes
```

### Manual Testing

```bash
# Install dependencies
pip install -r tests/html2md_server/requirements.txt

# Start server in one terminal
python tests/html2md_server/server.py

# Run tests in another terminal
pytest tests/test_html2md_server.py -v

# Run with coverage
pytest tests/test_html2md_server.py --cov=tools.html2md_tool --cov-report=html
```

### Test Options

```bash
# Run specific test
pytest tests/test_html2md_server.py::TestHTML2MDConversion::test_code_examples -v

# Run with detailed output
pytest tests/test_html2md_server.py -vv -s

# Run only fast tests
pytest tests/test_html2md_server.py -m "not slow"
```

## Test Coverage

### Core Features Tested

- ✅ Basic HTML to Markdown conversion
- ✅ Async I/O operations with aiofiles
- ✅ CSS selector content extraction
- ✅ Element filtering with ignore selectors
- ✅ Complex nested HTML structures
- ✅ Code block language detection
- ✅ Table conversion (simple and complex)
- ✅ List conversion (ordered, unordered, nested)
- ✅ Special characters and HTML entities
- ✅ Unicode support
- ✅ YAML frontmatter generation
- ✅ Heading level offset adjustment
- ✅ Parallel processing with asyncio
- ✅ Configuration file loading (YAML/TOML)
- ✅ CLI argument parsing
- ✅ API mode for programmatic access
- ✅ HTTrack integration (when available)
- ✅ URL conversion from lists

### Performance Testing

- Parallel conversion of multiple files
- Large file handling
- Memory usage monitoring
- Conversion speed benchmarks

## Writing New Tests

### Adding Test Pages

1. Create HTML file in `tests/html2md_server/test_pages/`
2. Register in `server.py`:
   ```python
   TEST_PAGES = {
       'your-test': {
           'title': 'Your Test Title',
           'description': 'What this tests'
       }
   }
   ```
3. Add corresponding test case

### Test Case Structure

```python
class TestYourFeature:
    async def test_your_feature(self, test_server, temp_output_dir):
        """Test description."""
        from tools.html2md.api import HTML2MDConverter

        converter = HTML2MDConverter(
            outermost_selector="main",
            ignore_selectors=["nav", "footer"],
            add_frontmatter=True
        )

        # Perform async conversion
        results = await converter.convert_directory(
            f"{test_server.base_url}/page",
            temp_output_dir
        )

        # Assert expected results
        assert len(results) > 0
```

## Continuous Integration

### GitHub Actions Integration

```yaml
# .github/workflows/test.yml
- name: Run HTML2MD Tests
  run: |
    cd tests/html2md_server
    ./run_tests.sh
```

### Local Development

```bash
# Watch mode for development
pytest-watch tests/test_html2md_server.py

# Run with debugging
pytest tests/test_html2md_server.py --pdb
```

## Troubleshooting

### Common Issues

**Server won't start**

- Check if port 8080 is already in use
- Ensure Flask dependencies are installed
- Check Python version (3.9+ required)

**Tests fail with connection errors**

- Ensure server is running
- Check firewall settings
- Verify localhost resolution

**Coverage report issues**

- Install pytest-cov: `pip install pytest-cov`
- Ensure tools.html2md module is in Python path
- For async tests, use pytest-asyncio: `pip install pytest-asyncio`

## Future Enhancements

1. **Additional Test Pages**

   - SVG content handling
   - MathML equations
   - Microdata and structured data
   - Progressive web app features
   - WebAssembly integration tests
   - Shadow DOM content extraction

2. **Test Automation**

   - Visual regression testing
   - Performance benchmarking
   - Memory leak detection
   - Cross-platform testing

3. **Enhanced Reporting**
   - HTML test reports with screenshots
   - Conversion diff visualization
   - Performance metrics dashboard

## Contributing

To contribute to the test suite:

1. Identify untested scenarios
2. Create representative HTML test pages
3. Write comprehensive test cases
4. Document the test purpose
5. Submit PR with test results

The test suite aims to cover all real-world HTML conversion scenarios to ensure
robust and reliable Markdown output.

======= docs/04_scrape/40_webscraper.md ======
# webscraper (Website Downloader)

A modern web scraping tool for downloading websites with multiple backend
options, async I/O, and intelligent crawling capabilities.

## Overview

The webscraper tool provides a robust solution for downloading websites for
offline viewing and analysis. Built with Python 3.10+ and modern async
architecture, it features pluggable scraper backends for different use cases.

**Primary Use Case**: Download online documentation to make it available to LLMs
(like Claude) for analysis and reference. The downloaded HTML files can be
converted to Markdown with html2md, then bundled into a single file with m1f for
optimal LLM context usage.

## Key Features

- **Multiple Scraper Backends**: Choose from BeautifulSoup (default), HTTrack,
  Scrapy, Playwright, or Selectolax
- **Async I/O**: High-performance concurrent downloading
- **Intelligent Crawling**: Automatically respects robots.txt, follows
  redirects, handles encoding
- **Metadata Preservation**: Saves HTTP headers and metadata alongside HTML
  files
- **Domain Restriction**: Automatically restricts crawling to the starting
  domain
- **Rate Limiting**: Configurable delays between requests
- **Progress Tracking**: Real-time download progress with file listing

## Quick Start

```bash
# Basic website download
m1f-scrape https://example.com -o ./downloaded_html

# Download with specific depth and page limits
m1f-scrape https://example.com -o ./html \
  --max-pages 50 \
  --max-depth 3

# Use different scraper backend
m1f-scrape https://example.com -o ./html --scraper httrack

# List downloaded files after completion
m1f-scrape https://example.com -o ./html --list-files
```

## Command Line Interface

```bash
m1f-scrape <url> -o <output> [options]
```

### Required Arguments

| Option         | Description                |
| -------------- | -------------------------- |
| `url`          | URL to start scraping from |
| `-o, --output` | Output directory           |

### Optional Arguments

| Option                  | Description                                                   | Default       |
| ----------------------- | ------------------------------------------------------------- | ------------- |
| `--scraper`             | Scraper backend to use (choices: httrack, beautifulsoup, bs4, | beautifulsoup |
|                         | selectolax, httpx, scrapy, playwright)                        |               |
| `--scraper-config`      | Path to scraper-specific config file (YAML/JSON)              | None          |
| `--max-depth`           | Maximum crawl depth                                           | 5             |
| `--max-pages`           | Maximum pages to crawl                                        | 1000          |
| `--request-delay`       | Delay between requests in seconds (for Cloudflare protection) | 15.0          |
| `--concurrent-requests` | Number of concurrent requests (for Cloudflare protection)     | 2             |
| `--user-agent`          | Custom user agent string                                      | Mozilla/5.0   |
| `--list-files`          | List all downloaded files after completion                    | False         |
| `-v, --verbose`         | Enable verbose output                                         | False         |
| `-q, --quiet`           | Suppress all output except errors                             | False         |
| `--version`             | Show version information and exit                             | -             |

## Scraper Backends

### BeautifulSoup (default)

- **Best for**: General purpose scraping, simple websites
- **Features**: Fast HTML parsing, good encoding detection
- **Limitations**: No JavaScript support

```bash
m1f-scrape https://example.com -o ./html --scraper beautifulsoup
```

### HTTrack

- **Best for**: Complete website mirroring, preserving structure
- **Features**: External links handling, advanced mirroring options
- **Limitations**: Requires HTTrack to be installed separately

```bash
m1f-scrape https://example.com -o ./html --scraper httrack
```

### Scrapy

- **Best for**: Large-scale crawling, complex scraping rules
- **Features**: Advanced crawling settings, middleware support
- **Limitations**: More complex configuration

```bash
m1f-scrape https://example.com -o ./html --scraper scrapy
```

### Playwright

- **Best for**: JavaScript-heavy sites, SPAs
- **Features**: Full browser automation, JavaScript execution
- **Limitations**: Slower, requires more resources

```bash
m1f-scrape https://example.com -o ./html --scraper playwright
```

### Selectolax

- **Best for**: Speed-critical applications
- **Features**: Fastest HTML parsing, minimal overhead
- **Limitations**: Basic feature set

```bash
m1f-scrape https://example.com -o ./html --scraper selectolax
```

## Usage Examples

### Basic Website Download

```bash
# Download a simple website
m1f-scrape https://docs.example.com -o ./docs_html

# Download with verbose output
m1f-scrape https://docs.example.com -o ./docs_html -v
```

### Controlled Crawling

```bash
# Limit crawl depth for shallow scraping
m1f-scrape https://blog.example.com -o ./blog \
  --max-depth 2 \
  --max-pages 20

# Slow crawling to be respectful
m1f-scrape https://example.com -o ./html \
  --request-delay 2.0 \
  --concurrent-requests 2
```

### Custom Configuration

```bash
# Use custom user agent
m1f-scrape https://example.com -o ./html \
  --user-agent "MyBot/1.0 (Compatible)"

# Use scraper-specific configuration
m1f-scrape https://example.com -o ./html \
  --scraper scrapy \
  --scraper-config ./scrapy-settings.yaml
```

## Output Structure

Downloaded files are organized to mirror the website structure:

```
output_directory/
├── example.com/
│   ├── index.html
│   ├── index.meta.json
│   ├── about/
│   │   ├── index.html
│   │   └── index.meta.json
│   ├── blog/
│   │   ├── post1/
│   │   │   ├── index.html
│   │   │   └── index.meta.json
│   │   └── post2/
│   │       ├── index.html
│   │       └── index.meta.json
│   └── contact/
│       ├── index.html
│       └── index.meta.json
```

### Metadata Files

Each HTML file has an accompanying `.meta.json` file containing:

```json
{
  "url": "https://example.com/about/",
  "title": "About Us - Example",
  "encoding": "utf-8",
  "status_code": 200,
  "headers": {
    "Content-Type": "text/html; charset=utf-8",
    "Last-Modified": "2024-01-15T10:30:00Z"
  },
  "metadata": {
    "description": "Learn more about Example company",
    "og:title": "About Us",
    "canonical": "https://example.com/about/"
  }
}
```

## Integration with m1f Workflow

webscraper is designed as the first step in a workflow to provide documentation
to LLMs:

```bash
# Step 1: Download documentation website
m1f-scrape https://docs.example.com -o ./html_files

# Step 2: Analyze HTML structure
m1f-html2md analyze ./html_files/*.html --suggest-selectors

# Step 3: Convert to Markdown
m1f-html2md convert ./html_files -o ./markdown \
  --content-selector "main.content" \
  --ignore-selectors "nav" ".sidebar"

# Step 4: Bundle for LLM consumption
m1f -s ./markdown -o ./docs_bundle.txt \
  --remove-scraped-metadata

# Now docs_bundle.txt contains all documentation in a single file
# that can be provided to Claude or other LLMs for analysis
```

### Complete Documentation Download Example

```bash
# Download React documentation for LLM analysis
m1f-scrape https://react.dev/learn -o ./react_docs \
  --max-pages 100 \
  --max-depth 3

# Convert to clean Markdown
m1f-html2md convert ./react_docs -o ./react_md \
  --content-selector "article" \
  --ignore-selectors "nav" "footer" ".sidebar"

# Create single file for LLM
m1f -s ./react_md -o ./react_documentation.txt

# Now you can provide react_documentation.txt to Claude:
# "Here is the React documentation: <contents of react_documentation.txt>"
```

## Best Practices

1. **Respect robots.txt**: The tool automatically respects robots.txt files
2. **Use appropriate delays**: Set `--request-delay` to avoid overwhelming
   servers (default: 15 seconds)
3. **Limit concurrent requests**: Use `--concurrent-requests` responsibly
   (default: 2 connections)
4. **Test with small crawls**: Start with `--max-pages 10` to test your settings
5. **Check output**: Use `--list-files` to verify what was downloaded

## Dealing with Cloudflare Protection

Many websites use Cloudflare or similar services to protect against bots. The
scraper now includes conservative defaults to help avoid detection:

### Default Conservative Settings

- **Request delay**: 15 seconds between requests
- **Concurrent requests**: 2 simultaneous connections
- **HTTrack backend**: Limited to 0.5 connections/second max
- **Bandwidth limiting**: 100KB/s for HTTrack backend
- **Robots.txt**: Always respected (cannot be disabled)

### For Heavy Cloudflare Protection

For heavily protected sites, manually set very conservative values:

```bash
m1f-scrape https://protected-site.com -o ./output \
  --request-delay 30 \
  --concurrent-requests 1 \
  --max-pages 50 \
  --scraper httrack
```

### Cloudflare Avoidance Tips

1. **Start conservative**: Begin with 30-60 second delays
2. **Use realistic user agents**: The default is a current Chrome browser
3. **Limit scope**: Download only what you need with `--max-pages`
4. **Single connection**: Use `--concurrent-requests 1` for sensitive sites
5. **Respect robots.txt**: Always enabled by default
6. **Add randomness**: Consider adding random delays in custom scripts

### When Cloudflare Still Blocks

If conservative settings don't work:

1. **Try Playwright backend**: Uses real browser automation

   ```bash
   m1f-scrape https://site.com -o ./output --scraper playwright
   ```

2. **Manual download**: Some sites require manual browsing
3. **API access**: Check if the site offers an API
4. **Contact site owner**: Request permission or access

## Troubleshooting

### No files downloaded

- Check if the website blocks automated access
- Try a different scraper backend
- Verify the URL is accessible

### Incomplete downloads

- Increase `--max-depth` if pages are deeply nested
- Increase `--max-pages` if hitting the limit
- Check for JavaScript-rendered content (use Playwright)

### Encoding issues

- The tool automatically detects encoding
- Check `.meta.json` files for encoding information
- Use html2md with proper encoding settings for conversion

## See Also

- [html2md Documentation](../03_html2md/30_html2md.md) - For converting
  downloaded HTML to Markdown
- [m1f Documentation](../01_m1f/00_m1f.md) - For bundling converted content for
  LLMs

======= docs/04_scrape/41_html2md_scraper_backends.md ======
# Web Scraper Backends

The HTML2MD tool supports multiple web scraping backends, each optimized for
different use cases. Choose the right backend based on your specific needs for
optimal results.

## Overview

The HTML2MD scraper backend system provides flexibility to choose the most
appropriate tool for your web scraping needs:

- **Static websites**: BeautifulSoup4 (default) - Fast and lightweight
- **Complete mirroring**: HTTrack - Professional website copying
- **JavaScript-heavy sites**: Playwright (coming soon)
- **Large-scale scraping**: Scrapy (coming soon)
- **Performance-critical**: httpx + selectolax (coming soon)

## Available Backends

### BeautifulSoup4 (Default)

BeautifulSoup4 is the default backend, ideal for scraping static HTML websites.

**Pros:**

- Easy to use and lightweight
- Fast for simple websites
- Good encoding detection
- Excellent HTML parsing capabilities

**Cons:**

- No JavaScript support
- Basic crawling capabilities
- Single-threaded by default

**Usage:**

```bash
# Default backend (no need to specify)
m1f-scrape https://example.com -o output/

# Explicitly specify BeautifulSoup
m1f-scrape https://example.com -o output/ --scraper beautifulsoup

# With custom options
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --max-depth 3 \
  --max-pages 100 \
  --request-delay 1.0
```

### HTTrack

HTTrack is a professional website copier that creates complete offline mirrors.

**Pros:**

- Complete website mirroring
- Preserves directory structure
- Handles complex websites well
- Resume interrupted downloads
- Automatic robots.txt compliance

**Cons:**

- Requires system installation
- Less flexible for custom parsing
- Larger resource footprint

**Installation:**

```bash
# Ubuntu/Debian
sudo apt-get install httrack

# macOS
brew install httrack

# Windows
# Download from https://www.httrack.com/
```

**Usage:**

```bash
m1f-scrape https://example.com -o output/ --scraper httrack

# With HTTrack-specific options
m1f-scrape https://example.com -o output/ \
  --scraper httrack \
  --max-depth 5 \
  --concurrent-requests 8
```

## Configuration Options

### Command Line Options

Common options for all scrapers:

```bash
--scraper BACKEND           # Choose scraper backend (beautifulsoup, bs4, httrack,
                           # selectolax, httpx, scrapy, playwright)
--max-depth N               # Maximum crawl depth (default: 5)
--max-pages N               # Maximum pages to crawl (default: 1000)
--request-delay SECONDS     # Delay between requests (default: 15.0)
--concurrent-requests N     # Number of concurrent requests (default: 2)
--user-agent STRING         # Custom user agent
--scraper-config PATH       # Path to scraper-specific config file (YAML/JSON)
--list-files                # List all downloaded files after completion
-v, --verbose               # Enable verbose output
-q, --quiet                 # Suppress all output except errors
--version                   # Show version information
```

Note: robots.txt is always respected and cannot be disabled.

### Configuration File

You can specify scraper-specific settings in a YAML or JSON configuration file:

```yaml
# beautifulsoup-config.yaml
parser: "html.parser" # Options: "html.parser", "lxml", "html5lib"
features: "lxml"
encoding: "auto" # Or specific encoding like "utf-8"
```

```yaml
# httrack-config.yaml
mirror_options:
  - "--assume-insecure" # For HTTPS issues
  - "--robots=3" # Strict robots.txt compliance
extra_filters:
  - "+*.css"
  - "+*.js"
  - "-*.zip"
```

Use with:

```bash
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config beautifulsoup-config.yaml
```

### Backend-Specific Configuration

Each backend can have specific configuration options:

#### BeautifulSoup Configuration

Create a `beautifulsoup.yaml`:

```yaml
scraper_config:
  parser: "lxml" # Options: "html.parser", "lxml", "html5lib"
  features: "lxml"
  encoding: "auto" # Or specific encoding like "utf-8"
```

#### HTTrack Configuration

Create a `httrack.yaml`:

```yaml
scraper_config:
  mirror_options:
    - "--assume-insecure" # For HTTPS issues
    - "--robots=3" # Strict robots.txt compliance
  extra_filters:
    - "+*.css"
    - "+*.js"
    - "-*.zip"
```

## Use Cases and Recommendations

### Static Documentation Sites

For sites with mostly static HTML content:

```bash
m1f-scrape https://docs.example.com -o docs/ \
  --scraper beautifulsoup \
  --max-depth 10 \
  --request-delay 0.2
```

### Complete Website Backup

For creating a complete offline mirror:

```bash
m1f-scrape https://example.com -o backup/ \
  --scraper httrack \
  --max-pages 10000
```

### Rate-Limited APIs

For sites with strict rate limits:

```bash
m1f-scrape https://api.example.com/docs -o api-docs/ \
  --scraper beautifulsoup \
  --request-delay 2.0 \
  --concurrent-requests 1
```

## Troubleshooting

### BeautifulSoup Issues

**Encoding Problems:**

```bash
# Create a config file with UTF-8 encoding
echo 'encoding: utf-8' > bs-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config bs-config.yaml
```

**Parser Issues:**

```bash
# Create a config file with different parser
echo 'parser: html5lib' > bs-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper beautifulsoup \
  --scraper-config bs-config.yaml
```

### HTTrack Issues

**SSL Certificate Problems:**

```bash
# Create a config file to ignore SSL errors (use with caution)
echo 'mirror_options: ["--assume-insecure"]' > httrack-config.yaml
m1f-scrape https://example.com -o output/ \
  --scraper httrack \
  --scraper-config httrack-config.yaml
```

**Incomplete Downloads:** HTTrack creates a cache that allows resuming. Check
the `.httrack` directory in your output folder.

## Performance Comparison

| Backend       | Speed     | Memory Usage | JavaScript | Accuracy  |
| ------------- | --------- | ------------ | ---------- | --------- |
| BeautifulSoup | Fast      | Low          | No         | High      |
| HTTrack       | Medium    | Medium       | No         | Very High |
| Selectolax    | Fastest   | Very Low     | No         | Medium    |
| Scrapy        | Very Fast | Low-Medium   | No         | High      |
| Playwright    | Slow      | High         | Yes        | Very High |

## Additional Backends

### Selectolax (httpx + selectolax)

The fastest HTML parsing solution using httpx for networking and selectolax for
parsing.

**Pros:**

- Blazing fast performance (C-based parser)
- Minimal memory footprint
- Excellent for large-scale simple scraping
- Modern async HTTP/2 support

**Cons:**

- No JavaScript support
- Limited parsing features compared to BeautifulSoup
- Less mature ecosystem

**Installation:**

```bash
pip install httpx selectolax
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper selectolax

# With custom configuration
m1f-scrape https://example.com -o output/ \
  --scraper selectolax \
  --concurrent-requests 20 \
  --request-delay 0.1

# Using httpx alias
m1f-scrape https://example.com -o output/ --scraper httpx
```

### Scrapy

Industrial-strength web scraping framework with advanced features.

**Pros:**

- Battle-tested in production
- Built-in retry logic and error handling
- Auto-throttle based on server response
- Extensive middleware system
- Distributed crawling support
- Advanced caching and queuing

**Cons:**

- Steeper learning curve
- Heavier than simple scrapers
- Twisted-based (different async model)

**Installation:**

```bash
pip install scrapy
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper scrapy

# With auto-throttle and caching
m1f-scrape https://example.com -o output/ \
  --scraper scrapy \
  --scraper-config scrapy.yaml

# Large-scale crawling
m1f-scrape https://example.com -o output/ \
  --scraper scrapy \
  --max-pages 10000 \
  --concurrent-requests 16
```

### Playwright

Browser automation for JavaScript-heavy websites and SPAs.

**Pros:**

- Full JavaScript execution
- Handles SPAs and dynamic content
- Multiple browser engines (Chromium, Firefox, WebKit)
- Screenshot and PDF generation
- Mobile device emulation
- Network interception

**Cons:**

- High resource usage
- Slower than HTML-only scrapers
- Requires browser installation

**Installation:**

```bash
pip install playwright
playwright install  # Install browser binaries
```

**Usage:**

```bash
# Basic usage
m1f-scrape https://example.com -o output/ --scraper playwright

# With custom browser settings
m1f-scrape https://example.com -o output/ \
  --scraper playwright \
  --scraper-config playwright.yaml

# For SPA with wait conditions
m1f-scrape https://spa-example.com -o output/ \
  --scraper playwright \
  --request-delay 2.0 \
  --concurrent-requests 2
```

## API Usage

You can also use the scraper backends programmatically:

```python
import asyncio
from tools.html2md.scrapers import create_scraper, ScraperConfig

async def scrape_example():
    # Configure scraper
    config = ScraperConfig(
        max_depth=5,
        max_pages=100,
        request_delay=0.5
    )

    # Create scraper instance
    scraper = create_scraper('beautifulsoup', config)

    # Scrape single page
    async with scraper:
        page = await scraper.scrape_url('https://example.com')
        print(f"Title: {page.title}")
        print(f"Content length: {len(page.content)}")

    # Scrape entire site
    async with scraper:
        async for page in scraper.scrape_site('https://example.com'):
            print(f"Scraped: {page.url}")

# Run the example
asyncio.run(scrape_example())
```

## Contributing

To add a new scraper backend:

1. Create a new file in `tools/html2md/scrapers/`
2. Inherit from `WebScraperBase`
3. Implement required methods: `scrape_url()` and `scrape_site()`
4. Register in `SCRAPER_REGISTRY` in `__init__.py`
5. Add tests in `tests/html2md/test_scrapers.py`
6. Update this documentation

See the BeautifulSoup implementation for a complete example.

======= docs/05_development/README.md ======
# Development Documentation

This section contains guides and references for developers working on or with
the m1f toolkit.

## Contents

- [**55_version_management.md**](./55_version_management.md) - Version
  management and release process
- [**56_git_hooks_setup.md**](./56_git_hooks_setup.md) - Git hooks for automated
  bundling

## Quick Links

- [Main m1f Documentation](../01_m1f/)
- [s1f Documentation](../02_s1f/)
- [html2md Documentation](../03_html2md/)
- [Scraper Documentation](../04_scrape/)

======= docs/05_development/55_version_management.md ======
# Version Management

This project uses centralized version management to ensure consistency across
all components.

## Structure

- **Single Source of Truth**: `tools/_version.py`
- **Automatic Syncing**: Scripts to keep all files in sync
- **Dynamic Imports**: All modules import from the central version file

## Files That Use Version

1. **Python Modules**:

   - `tools/__init__.py` - imports from `_version.py`
   - `tools/m1f/__init__.py` - imports from `../_version.py`
   - `tools/s1f/__init__.py` - imports from `../_version.py`
   - `tools/html2md/__init__.py` - imports from `../_version.py`
   - `tools/webscraper/__init__.py` - imports from `../_version.py`

2. **Setup Files**:

   - `tools/setup.py` - reads version dynamically from `_version.py`

3. **NPM Package**:

   - `package.json` - synced using `sync_version.py`

4. **Main Script**:
   - `tools/m1f.py` - imports with fallback for standalone usage

## Updating Version

### Manual Update

1. Edit `tools/_version.py` and change the version
2. Run `python scripts/sync_version.py` to sync with package.json

### Using Bump Script

```bash
# Bump patch version (3.1.0 → 3.1.1)
python scripts/bump_version.py patch

# Bump minor version (3.1.0 → 3.2.0)
python scripts/bump_version.py minor

# Bump major version (3.1.0 → 4.0.0)
python scripts/bump_version.py major

# Set specific version
python scripts/bump_version.py 3.2.0-beta1
```

The bump script will:

1. Update `tools/_version.py`
2. Automatically sync `package.json`
3. Display next steps for committing and tagging

## Benefits

1. **Single Update Point**: Change version in one place only
2. **Consistency**: All components always have the same version
3. **Automation**: Scripts handle syncing and validation
4. **Future-Proof**: Easy to add new files that need version info

## Adding New Components

When adding a new tool or module that needs version info:

1. Import from the parent package:

   ```python
   from .._version import __version__, __version_info__
   ```

2. No need to update sync scripts - they work automatically

## Version Format

- Follows semantic versioning: `MAJOR.MINOR.PATCH`
- Pre-release versions supported: `3.2.0-beta1`
- `__version__`: String format (e.g., "3.1.0")
- `__version_info__`: Tuple format (e.g., (3, 1, 0))

======= docs/05_development/56_git_hooks_setup.md ======
# m1f Git Hooks Setup Guide

This guide explains how to set up Git hooks for automatic m1f bundle generation
in your projects.

## Overview

The m1f Git pre-commit hook automatically runs `m1f-update` before each
commit, ensuring that your bundled files are always up-to-date with your source
code.

## Features

- **Automatic bundle generation** - Bundles are regenerated on every commit
- **Fail-safe commits** - Commits are blocked if bundle generation fails
- **Auto-staging** - Generated bundles in the `m1f/` directory are automatically
  added to commits
- **Conditional execution** - Only runs if `.m1f.config.yml` exists in your
  project

## Installation

### Method 1: Using the Installation Script (Recommended)

1. Navigate to your project root (where `.m1f.config.yml` is located)
2. Run the installation script:

```bash
# Download and run the installation script
curl -sSL https://raw.githubusercontent.com/franzundfranz/m1f/main/scripts/install-git-hooks.sh | bash

# Or if you have the m1f repository cloned
bash /path/to/m1f/scripts/install-git-hooks.sh
```

The script will:

- Check if you're in a Git repository
- Install the pre-commit hook
- Backup any existing pre-commit hook
- Make the hook executable

### Method 2: Manual Installation

1. Create the pre-commit hook file:

```bash
cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
# m1f Auto-Bundle Git Pre-Commit Hook

if [ -f ".m1f.config.yml" ]; then
    if ! command -v m1f &> /dev/null; then
        echo "Error: m1f command not found!"
        echo "Please install m1f: pip install m1f"
        exit 1
    fi

    echo "Running m1f-update..."
    if m1f-update; then
        echo "Auto-bundle completed successfully."
        [ -d "m1f" ] && git add m1f/*
    else
        echo "Auto-bundle failed. Please fix the issues before committing."
        exit 1
    fi
fi
exit 0
EOF
```

2. Make it executable:

```bash
chmod +x .git/hooks/pre-commit
```

## How It Works

When you run `git commit`, the pre-commit hook:

1. Checks if `.m1f.config.yml` exists in your repository
2. Verifies that the `m1f` command is available
3. If both conditions are met, runs `m1f-update`
4. If bundle generation succeeds:
   - Adds all files in the `m1f/` directory to the commit
   - Allows the commit to proceed
5. If bundle generation fails:
   - Displays the error message
   - Blocks the commit
   - You must fix the issues before committing

## Usage

Once installed, the hook works automatically:

```bash
# Normal commit - bundles are generated automatically
git add your-files.py
git commit -m "feat: add new feature"

# Skip the hook if needed
git commit --no-verify -m "wip: quick save"
```

## Troubleshooting

### Hook not running

1. Check if the hook is executable:

   ```bash
   ls -la .git/hooks/pre-commit
   ```

2. Make it executable if needed:
   ```bash
   chmod +x .git/hooks/pre-commit
   ```

### Bundle generation fails

1. Run auto-bundle manually to see the error:

   ```bash
   m1f-update
   ```

2. Fix any issues in your `.m1f.config.yml`

3. Try committing again

### m1f command not found

If you get "m1f command not found", ensure m1f is installed:

```bash
pip install m1f
# or for development
pip install -e /path/to/m1f
```

### Disable the hook temporarily

Use the `--no-verify` flag:

```bash
git commit --no-verify -m "your message"
```

### Remove the hook

To uninstall the pre-commit hook:

```bash
rm .git/hooks/pre-commit
```

## Best Practices

1. **Include m1f/ in version control** - This ensures bundled files are
   available to all team members and AI tools

2. **Review bundle changes** - Check the generated bundles in your diffs before
   committing

3. **Keep bundles focused** - Configure smaller, specific bundles rather than
   one large bundle

4. **Use bundle groups** - Organize related bundles into groups for better
   management

## Example Workflow

1. Set up your project with m1f:

   ```bash
   m1f-link  # Create documentation symlink
   ```

2. Create `.m1f.config.yml`:

   ```yaml
   bundles:
     project-docs:
       description: "Project documentation"
       output: "m1f/docs.txt"
       sources:
         - path: "docs"
           include_extensions: [".md"]
   ```

3. Install the Git hook:

   ```bash
   bash /path/to/m1f/scripts/install-git-hooks.sh
   ```

4. Work normally - bundles update automatically:
   ```bash
   echo "# New Feature" > docs/feature.md
   git add docs/feature.md
   git commit -m "docs: add feature documentation"
   # Bundle is regenerated and included in the commit
   ```

## Integration with CI/CD

The pre-commit hook ensures local development stays in sync. For CI/CD
pipelines, you can also run auto-bundle as a build step:

```yaml
# GitHub Actions example
- name: Install m1f
  run: pip install m1f

- name: Generate m1f bundles
  run: m1f-update
```

```bash
# GitLab CI example
before_script:
  - pip install m1f

bundle:
  script:
    - m1f-update
```

## See Also

- [Auto-Bundle Guide](../01_m1f/06_auto_bundle_guide.md) - Complete auto-bundle
  documentation
- [m1f Configuration](../01_m1f/02_m1f_presets.md) - Preset system documentation
- [Quick Reference](../01_m1f/09_quick_reference.md) - Common m1f commands

======= docs/99_misc/98_token_counter.md ======
# token_counter - Token Estimation Tool

The token_counter tool (v2.0.0) estimates token usage for LLM context planning,
helping you optimize your use of large language models by managing context
window limits.

## Overview

When working with LLMs like ChatGPT, Claude, or GPT-4, understanding token
consumption is essential for effective prompt engineering and context
management. Built with Python 3.10+, the token_counter tool allows you to
precisely measure how many tokens your combined files will use, helping you stay
within the context window limits of your chosen LLM.

## Key Features

- Uses OpenAI's tiktoken library for accurate estimates
- Supports different encoding schemes for various LLMs
- Helps optimize context usage for LLMs
- Simple command-line interface

## Quick Start

```bash
# Check token count of a file
m1f-token-counter ./combined.txt

# Use a specific encoding model
m1f-token-counter ./combined.txt -e p50k_base
```

## Command Line Options

| Option           | Description                                         |
| ---------------- | --------------------------------------------------- |
| `file_path`      | Path to the text file to analyze                    |
| `-e, --encoding` | The tiktoken encoding to use (default: cl100k_base) |

## Usage Examples

Basic usage with default encoding (cl100k_base, used by GPT-4 and ChatGPT):

```bash
m1f-token-counter combined_output.txt
```

Using a specific encoding:

```bash
m1f-token-counter myfile.txt -e p50k_base
```

## Encoding Models

The tool supports different encoding models depending on which LLM you're using:

- `cl100k_base` - Default, used by GPT-4, ChatGPT
- `p50k_base` - Used by GPT-3.5-Turbo, text-davinci-003
- `r50k_base` - Used by older GPT-3 models

## Token Limits by Model

Understanding token limits is crucial for effective usage:

| Model           | Token Limit | Recommended Encoding |
| --------------- | ----------- | -------------------- |
| GPT-4 Turbo     | 128,000     | cl100k_base          |
| GPT-4           | 8,192       | cl100k_base          |
| GPT-3.5-Turbo   | 16,385      | cl100k_base          |
| Claude 3.5 Opus | 200,000     | -                    |
| Claude 3 Opus   | 200,000     | -                    |
| Claude 3 Sonnet | 200,000     | -                    |
| Claude 3 Haiku  | 200,000     | -                    |

## Integration with m1f

The token_counter tool is particularly useful when used with m1f to check if
your combined files will fit within the token limit of your chosen LLM:

1. First, combine files with m1f:

   ```bash
   m1f -s ./project -o ./combined.txt --include-extensions .py .js
   ```

2. Then, check the token count:
   ```bash
   m1f-token-counter ./combined.txt
   ```

This workflow helps you adjust your file selection to stay within token limits
for your AI assistant.

## Optimizing Token Usage

To reduce token consumption while maintaining context quality:

1. **Be selective with files**: Include only the most relevant files for your
   prompt
2. **Use minimal separator style**: The `None` separator style uses fewer tokens
3. **Trim unnecessary content**: Remove comments, unused code, or redundant text
4. **Focus on key files**: Prioritize files that directly address your question
5. **Use file filtering**: Utilize m1f's filtering options to target specific
   files

## Architecture

Token counter v2.0.0 features a simple but effective design:

- **Module Structure**: Can be run as a module (`m1f-token-counter`)
- **Type Safety**: Full type hints for better IDE support
- **Error Handling**: Graceful handling of encoding errors and file issues
- **Performance**: Efficient token counting for large files

## Requirements

- Python 3.10 or newer
- The `tiktoken` Python package:

```bash
pip install tiktoken
```

This dependency is included in the project's requirements.txt file.

## Tips for Accurate Token Counting

1. **Model-Specific Encoding**: Always use the encoding that matches your target
   LLM
2. **Include Prompts**: Remember to count tokens in your prompts as well as the
   context
3. **Buffer Space**: Leave 10-20% buffer for model responses
4. **Regular Checks**: Re-check token counts after file modifications

======= tools/scrape_tool/scrapers/README.md ======
# HTML2MD Web Scrapers

This module provides a pluggable architecture for web scraping backends in the
HTML2MD tool.

## Architecture

The scraper system is built around:

- `WebScraperBase`: Abstract base class defining the scraper interface
- `ScraperConfig`: Configuration dataclass for all scrapers
- `create_scraper()`: Factory function to instantiate scrapers
- `SCRAPER_REGISTRY`: Registry of available backends

## Available Scrapers

### BeautifulSoup (`beautifulsoup`, `bs4`)

- **Purpose**: General-purpose web scraping for static sites
- **Features**: Async support, encoding detection, metadata extraction
- **Best for**: Most websites without JavaScript requirements

### HTTrack (`httrack`)

- **Purpose**: Complete website mirroring
- **Features**: Professional mirroring, preserves structure
- **Best for**: Creating offline copies of entire websites
- **Requires**: System installation of HTTrack

## Usage

```python
from tools.html2md.scrapers import create_scraper, ScraperConfig

# Configure scraper
config = ScraperConfig(
    max_depth=5,
    max_pages=100,
    request_delay=0.5,
    user_agent="Mozilla/5.0 ..."
)

# Create scraper instance
scraper = create_scraper('beautifulsoup', config)

# Use scraper
async with scraper:
    # Scrape single page
    page = await scraper.scrape_url('https://example.com')

    # Scrape entire site
    async for page in scraper.scrape_site('https://example.com'):
        print(f"Scraped: {page.url}")
```

## Adding New Scrapers

To add a new scraper backend:

1. Create a new file in this directory (e.g., `playwright.py`)
2. Create a class inheriting from `WebScraperBase`
3. Implement required methods:
   - `scrape_url()`: Scrape a single URL
   - `scrape_site()`: Scrape an entire website
4. Register in `__init__.py`:

   ```python
   from .playwright import PlaywrightScraper

   SCRAPER_REGISTRY['playwright'] = PlaywrightScraper
   ```

## Configuration

All scrapers share common configuration options through `ScraperConfig`:

- `max_depth`: Maximum crawl depth
- `max_pages`: Maximum pages to scrape
- `allowed_domains`: List of allowed domains
- `exclude_patterns`: URL patterns to exclude
- `request_delay`: Delay between requests
- `concurrent_requests`: Number of concurrent requests
- `user_agent`: User agent string
- `timeout`: Request timeout in seconds

Backend-specific options can be added as needed in the scraper implementation.

======= tools/scrape_tool/scrapers/configs/beautifulsoup.yaml ======
# BeautifulSoup scraper configuration example
scraper_backend: beautifulsoup
scraper_config:
  parser: "html.parser"  # Options: "html.parser", "lxml", "html5lib"
  
crawler:
  max_depth: 5
  max_pages: 100
  request_delay: 0.5
  concurrent_requests: 5
  respect_robots_txt: true
  user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

======= tools/scrape_tool/scrapers/configs/cloudflare.yaml ======
# Conservative configuration for sites with Cloudflare protection
# These settings help avoid triggering Cloudflare's bot detection

scraper_backend: httrack
scraper_config:
  verify_ssl: true
  
crawler:
  max_depth: 5  # Limit depth to reduce requests
  max_pages: 100  # Start with fewer pages
  
  # Very conservative delays (30 seconds base + random delay)
  request_delay: 30  # 30 seconds between requests
  concurrent_requests: 1  # Only 1 connection at a time
  
  # Always respect robots.txt
  respect_robots_txt: true
  
  # Use a realistic, current browser user agent
  user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
  
  # HTTrack-specific settings for Cloudflare
  allowed_domains: []  # Empty = same domain only
  
  # Common paths to exclude to reduce load
  excluded_paths:
    - "*/api/*"
    - "*/admin/*"
    - "*/login/*"
    - "*/search/*"
    - "*.pdf"
    - "*.zip"
    - "*.mp4"
    - "*.mp3"
    
# Additional notes for extreme Cloudflare protection:
# 1. Consider using request_delay: 45-60 seconds
# 2. Add random delays by modifying the scraper code
# 3. Use browser automation (Playwright) as last resort
# 4. Some sites may require manual browsing or API access

======= tools/scrape_tool/scrapers/configs/httrack.yaml ======
# HTTrack scraper configuration - Conservative settings for Cloudflare protection
scraper_backend: httrack
scraper_config:
  verify_ssl: true
  
crawler:
  max_depth: 10
  max_pages: 1000
  # Conservative delays to avoid Cloudflare detection
  request_delay: 20  # 20 seconds between requests (0.05 requests/sec)
  concurrent_requests: 2  # Max 2 simultaneous connections
  respect_robots_txt: true
  # Use a realistic browser user agent
  user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
  
  # HTTrack-specific settings
  allowed_domains: []  # Empty = same domain only
  excluded_paths:
    - "*/api/*"
    - "*/admin/*"
    - "*.pdf"
    - "*.zip"

======= tools/scrape_tool/scrapers/configs/playwright.yaml ======
# Playwright scraper configuration
# Browser-based scraping for JavaScript-heavy sites

# Basic scraper settings
max_depth: 5  # Lower depth for resource-intensive browser scraping
max_pages: 100  # Lower limit due to browser overhead
request_delay: 1.0  # Higher delay to be respectful
concurrent_requests: 3  # Limited concurrent browser pages
respect_robots_txt: true
timeout: 30.0

# Browser configuration
browser_config:
  # Browser type: chromium, firefox, or webkit
  browser: chromium
  
  # Run in headless mode (no UI)
  headless: true
  
  # Viewport size
  viewport:
    width: 1920
    height: 1080
  
  # Wait strategies
  # Options: load, domcontentloaded, networkidle, commit
  wait_until: networkidle
  
  # Timeout for wait operations (milliseconds)
  wait_timeout: 30000
  
  # Optional: Wait for specific selector before considering page loaded
  # wait_for_selector: "div.main-content"
  
  # Optional: Execute custom JavaScript after page load
  # execute_script: |
  #   window.scrollTo(0, document.body.scrollHeight);
  #   await new Promise(resolve => setTimeout(resolve, 1000));
  
  # Screenshot options
  screenshot: false
  screenshot_path: "screenshots/"
  
  # Browser launch options
  launch_options:
    # Chromium-specific options
    args:
      - "--disable-dev-shm-usage"
      - "--no-sandbox"  # Required in some Docker environments
      - "--disable-setuid-sandbox"
      - "--disable-gpu"  # Disable GPU in headless mode
    
    # Ignore HTTPS errors
    ignoreHTTPSErrors: true
    
    # Slow down operations by specified milliseconds (for debugging)
    # slowMo: 100
    
    # Enable devtools (chromium/firefox only)
    # devtools: true

# Mobile emulation example (uncomment to use)
# browser_config:
#   browser: chromium
#   headless: true
#   viewport:
#     width: 375
#     height: 667
#     isMobile: true
#     hasTouch: true
#   user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) ..."

# Example usage:
# m1f-scrape https://example.com -o output/ \
#   --scraper playwright --scraper-config playwright.yaml

======= tools/scrape_tool/scrapers/configs/scrapy.yaml ======
# Scrapy scraper configuration
# Industrial-strength web scraping framework

# Basic scraper settings
max_depth: 10
max_pages: 5000
request_delay: 0.5
concurrent_requests: 16  # Scrapy default
respect_robots_txt: true
timeout: 180.0

# Scrapy-specific settings
scrapy_config:
  # Download settings
  DOWNLOAD_DELAY: 0.5
  RANDOMIZE_DOWNLOAD_DELAY: true
  DOWNLOAD_TIMEOUT: 30
  
  # Concurrent requests
  CONCURRENT_REQUESTS: 16
  CONCURRENT_REQUESTS_PER_DOMAIN: 8
  
  # Auto-throttle settings
  AUTOTHROTTLE_ENABLED: true
  AUTOTHROTTLE_START_DELAY: 0.5
  AUTOTHROTTLE_MAX_DELAY: 10.0
  AUTOTHROTTLE_TARGET_CONCURRENCY: 8.0
  AUTOTHROTTLE_DEBUG: false
  
  # Retry settings
  RETRY_ENABLED: true
  RETRY_TIMES: 3
  RETRY_HTTP_CODES: [500, 502, 503, 504, 408, 429]
  
  # Cache settings
  HTTPCACHE_ENABLED: true
  HTTPCACHE_EXPIRATION_SECS: 3600
  HTTPCACHE_IGNORE_HTTP_CODES: [503, 504, 400, 403, 404]
  
  # Middleware settings
  COOKIES_ENABLED: true
  REDIRECT_ENABLED: true
  REDIRECT_MAX_TIMES: 5
  
  # DNS settings
  DNSCACHE_ENABLED: true
  DNSCACHE_SIZE: 10000
  DNS_TIMEOUT: 60
  
  # Memory usage control
  MEMUSAGE_ENABLED: true
  MEMUSAGE_LIMIT_MB: 2048
  MEMUSAGE_WARNING_MB: 1536
  
  # Depth control
  DEPTH_PRIORITY: 1
  SCHEDULER_DISK_QUEUE: 'scrapy.squeues.PickleFifoDiskQueue'
  SCHEDULER_MEMORY_QUEUE: 'scrapy.squeues.FifoMemoryQueue'

# Example usage:
# m1f-scrape https://example.com -o output/ \
#   --scraper scrapy --scraper-config scrapy.yaml

======= tools/scrape_tool/scrapers/configs/selectolax.yaml ======
# Selectolax scraper configuration
# High-performance HTML parsing with httpx + selectolax

# Basic scraper settings
max_depth: 10
max_pages: 1000
request_delay: 0.1  # Minimal delay for high performance
concurrent_requests: 20  # Higher concurrency for speed
respect_robots_txt: true
timeout: 10.0

# httpx client settings
httpx_config:
  # Connection pool settings
  max_keepalive_connections: 50
  max_connections: 100
  keepalive_expiry: 30.0
  
  # Timeout settings (in seconds)
  connect_timeout: 5.0
  read_timeout: 10.0
  write_timeout: 5.0
  pool_timeout: 5.0
  
  # HTTP/2 support
  http2: true
  
  # Retry configuration
  max_retries: 3
  retry_backoff_factor: 0.5

# Selectolax parser settings
parser_config:
  # Parser options
  strict: false  # Lenient parsing for malformed HTML
  
# Example usage:
# m1f-scrape https://example.com -o output/ \
#   --scraper selectolax --scraper-config selectolax.yaml
