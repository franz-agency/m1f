#!/bin/bash
# m1f Auto-Bundle Git Pre-Commit Hook
# This hook automatically runs m1f-update before each commit
# to ensure all configured bundles are up-to-date.
# Also runs Black formatter on Python files and Markdown linting.

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the project root
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

# Check if there are any Python or Markdown files staged
STAGED_PY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

# Flag to track if any files were modified
FILES_MODIFIED=0

# Format Python files with Black
if [ -n "$STAGED_PY_FILES" ]; then
    echo -e "${YELLOW}🐍 Running Black formatter on Python files...${NC}"
    
    # Activate virtual environment
    if [ -f "$PROJECT_ROOT/.venv/bin/activate" ]; then
        source "$PROJECT_ROOT/.venv/bin/activate"
    else
        echo -e "${YELLOW}⚠️  Virtual environment not found, trying system Black${NC}"
    fi
    
    # Check if Black is installed
    if command -v black &> /dev/null; then
        # Run Black on staged Python files
        for file in $STAGED_PY_FILES; do
            if [ -f "$file" ]; then
                echo "  Formatting: $file"
                black "$file"
                # Check if the file was modified
                if ! git diff --quiet "$file"; then
                    FILES_MODIFIED=1
                    git add "$file"
                fi
            fi
        done
        echo -e "${GREEN}✅ Python formatting complete${NC}"
    else
        echo -e "${YELLOW}⚠️  Black not found, skipping Python formatting${NC}"
    fi
fi

# Format Markdown files
if [ -n "$STAGED_MD_FILES" ]; then
    echo -e "${YELLOW}📝 Checking Markdown files...${NC}"
    
    # Check if npm/prettier is available
    if command -v npm &> /dev/null && npm list prettier &> /dev/null 2>&1; then
        # Use prettier if available
        for file in $STAGED_MD_FILES; do
            if [ -f "$file" ]; then
                echo "  Formatting: $file"
                npx prettier --write "$file"
                # Check if the file was modified
                if ! git diff --quiet "$file"; then
                    FILES_MODIFIED=1
                    git add "$file"
                fi
            fi
        done
    else
        # Basic markdown formatting: ensure files end with newline
        for file in $STAGED_MD_FILES; do
            if [ -f "$file" ]; then
                # Ensure file ends with newline
                if [ -n "$(tail -c 1 "$file")" ]; then
                    echo >> "$file"
                    FILES_MODIFIED=1
                    git add "$file"
                    echo "  Added newline to: $file"
                fi
            fi
        done
    fi
    
    echo -e "${GREEN}✅ Markdown check complete${NC}"
fi

# If files were modified, inform the user
if [ $FILES_MODIFIED -eq 1 ]; then
    echo -e "${YELLOW}⚠️  Files were modified by formatters and re-staged${NC}"
fi

# Check if .m1f.config.yml exists in the repository
if [ -f ".m1f.config.yml" ]; then
    # For m1f development repository, use python -m
    if [ -f "tools/m1f/__init__.py" ]; then
        echo "Running m1f-update (development mode)..."
        # Activate virtual environment if it exists
        if [ -f ".venv/bin/activate" ]; then
            source .venv/bin/activate
        fi
        # Use the full path to m1f-update
        if [ -f "bin/m1f-update" ]; then
            ./bin/m1f-update
        elif command -v m1f-update &> /dev/null; then
            m1f-update
        else
            echo "Error: m1f-update not found!"
            exit 1
        fi
        if [ $? -eq 0 ]; then
            echo "Auto-bundle completed successfully."
            [ -d "m1f" ] && git add m1f/*
        else
            echo "Auto-bundle failed. Please fix the issues before committing."
            exit 1
        fi
    else
        # For other projects, check if m1f command is available
        if ! command -v m1f &> /dev/null; then
            echo "Error: m1f command not found!"
            echo "Please ensure m1f is installed and available in your PATH."
            echo ""
            echo "Installation instructions:"
            echo "  pip install m1f"
            echo "  # or"
            echo "  cd /path/to/m1f && pip install -e ."
            exit 1
        fi
        
        echo "Running m1f-update..."
        
        # Run auto-bundle
        if m1f-update; then
            echo "Auto-bundle completed successfully."
            
            # Add any generated files in m1f/ directory to the commit
            if [ -d "m1f" ]; then
                git add m1f/*
            fi
        else
            echo "Auto-bundle failed. Please fix the issues before committing."
            exit 1
        fi
    fi
else
    # No config file, so nothing to do
    exit 0
fi

exit 0