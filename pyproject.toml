[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
# Exclude test files that are intentionally invalid Python
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | tmp
  )/
  | tests/m1f/source/glob_basic/script\.py
  | tests/m1f/source/glob_test/src/main\.py
  | tests/m1f/source/glob_test/src/util\.py
  | tests/m1f/source/glob_dir_specific/code/script\.py
  | tests/m1f/source/glob_test/src/comp2/test\.py
  | tests/m1f/source/glob_edge_cases/standard\.py
  | tests/m1f/source/glob_multiple/script\.py
  | tests/m1f/source/glob_recursive/level1/level1\.py
  | tests/m1f/source/glob_recursive/level1/level2/level2\.py
  | tests/m1f/source/glob_recursive/root\.py
  | tests/m1f/source/glob_test/root\.py
  | tests/m1f/source/glob_test/src/comp1/component1\.py
  | tests/m1f/source/glob_test/src/comp1/test\.py
  | tests/m1f/source/glob_test/src/comp2/component2\.py
)
'''

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["tools"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]